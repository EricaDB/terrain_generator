// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 17552;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a14() } }, { func: function() { __GLOBAL__I_a81() } });
  

/* memory initializer */ allocate([77,121,67,108,97,115,115,0,105,110,99,114,101,109,101,110,116,88,0,0,0,0,0,0,105,110,99,114,101,109,101,110,116,89,0,0,0,0,0,0,120,0,0,0,0,0,0,0,103,101,116,83,116,114,105,110,103,70,114,111,109,73,110,115,116,97,110,99,101,0,0,0,105,105,105,0,0,0,0,0,208,0,0,0,248,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,112,60,0,0,160,0,0,0,72,62,0,0,96,0,0,0,0,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,55,77,121,67,108,97,115,115,0,0,0,0,0,0,0,0,112,60,0,0,232,0,0,0,118,105,105,105,0,0,0,0,105,105,105,0,0,0,0,0,118,105,105,0,0,0,0,0,16,61,0,0,48,1,0,0,80,55,77,121,67,108,97,115,115,0,0,0,0,0,0,0,152,60,0,0,32,1,0,0,0,0,0,0,248,0,0,0,105,105,105,105,0,0,0,0,48,1,0,0,144,61,0,0,208,0,0,0,0,0,0,0,118,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,105,105,0,0,0,0,0,0,80,75,55,77,121,67,108,97,115,115,0,0,0,0,0,0,152,60,0,0,112,1,0,0,1,0,0,0,248,0,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,112,60,0,0,16,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,112,60,0,0,56,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,112,60,0,0,96,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,112,60,0,0,136,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,112,60,0,0,176,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,112,60,0,0,216,5,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,112,60,0,0,0,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,112,60,0,0,40,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,112,60,0,0,80,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,112,60,0,0,120,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,112,60,0,0,160,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,112,60,0,0,200,6,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,112,60,0,0,240,6,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,72,62,0,0,16,7,0,0,0,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,72,62,0,0,104,7,0,0,0,0,0,0,1,0,0,0,200], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([72,12,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,232,61,0,0,40,12,0,0,192,17,0,0,0,0,0,0,0,0,0,0,176,12,0,0,1,0,0,0,15,0,0,0,16,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,232,61,0,0,152,12,0,0,192,17,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,72,13,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,232,61,0,0,40,13,0,0,128,17,0,0,0,0,0,0,0,0,0,0,176,13,0,0,23,0,0,0,37,0,0,0,38,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,39,0,0,0,30,0,0,0,31,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,232,61,0,0,152,13,0,0,128,17,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,112,60,0,0,192,13,0,0,58,32,0,0,0,0,0,0,0,0,0,0,32,14,0,0,45,0,0,0,46,0,0,0,47,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,232,61,0,0,8,14,0,0,24,59,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,112,60,0,0,48,14,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,232,61,0,0,88,14,0,0,80,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,128,17,0,0,48,0,0,0,49,0,0,0,50,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,39,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,43,0,0,0,44,0,0,0,0,0,0,0,192,17,0,0,51,0,0,0,52,0,0,0,53,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,21,0,0,0,22,0,0,0,8,0,0,0,0,0,0,0,248,17,0,0,54,0,0,0,55,0,0,0,248,255,255,255,248,255,255,255,248,17,0,0,56,0,0,0,57,0,0,0,8,0,0,0,0,0,0,0,64,18,0,0,58,0,0,0,59,0,0,0,248,255,255,255,248,255,255,255,64,18,0,0,60,0,0,0,61,0,0,0,4,0,0,0,0,0,0,0,136,18,0,0,62,0,0,0,63,0,0,0,252,255,255,255,252,255,255,255,136,18,0,0,64,0,0,0,65,0,0,0,4,0,0,0,0,0,0,0,208,18,0,0,66,0,0,0,67,0,0,0,252,255,255,255,252,255,255,255,208,18,0,0,68,0,0,0,69,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,16,0,0,70,0,0,0,71,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,192,16,0,0,72,0,0,0,73,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,232,61,0,0,120,16,0,0,32,14,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,112,60,0,0,168,16,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,232,61,0,0,200,16,0,0,192,16,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,232,61,0,0,8,17,0,0,192,16,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,112,60,0,0,72,17,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,112,60,0,0,136,17,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,62,0,0,200,17,0,0,0,0,0,0,1,0,0,0,248,16,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,62,0,0,16,18,0,0,0,0,0,0,1,0,0,0,56,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,62,0,0,88,18,0,0,0,0,0,0,1,0,0,0,248,16,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,62,0,0,160,18,0,0,0,0,0,0,1,0,0,0,56,17,0,0,3,244,255,255,0,0,0,0,48,19,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,232,61,0,0,16,19,0,0,112,14,0,0,0,0,0,0,0,0,0,0,64,33,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,33,0,0,87,0,0,0,88,0,0,0,83,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,38,0,0,92,0,0,0,93,0,0,0,83,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,176,38,0,0,105,0,0,0,106,0,0,0,83,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,39,0,0,118,0,0,0,119,0,0,0,83,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,8,40,0,0,128,0,0,0,129,0,0,0,83,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,48,35,0,0,138,0,0,0,139,0,0,0,83,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,248,255,255,255,48,35,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,208,35,0,0,154,0,0,0,155,0,0,0,83,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,248,255,255,255,208,35,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,96,36,0,0,170,0,0,0,171,0,0,0,83,0,0,0,172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,36,0,0,173,0,0,0,174,0,0,0,83,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,33,0,0,176,0,0,0,177,0,0,0,83,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,33,0,0,187,0,0,0,188,0,0,0,83,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,198,0,0,0,199,0,0,0,83,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,34,0,0,209,0,0,0,210,0,0,0,83,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,40,0,0,220,0,0,0,221,0,0,0,83,0,0,0,222,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,40,41,0,0,224,0,0,0,225,0,0,0,83,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,184,41,0,0,228,0,0,0,229,0,0,0,83,0,0,0,230,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,72,42,0,0,232,0,0,0,233,0,0,0,83,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,37,0,0,236,0,0,0,237,0,0,0,83,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,37,0,0,241,0,0,0,242,0,0,0,83,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,24,33,0,0,246,0,0,0,247,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,29,0,0,248,0,0,0,249,0,0,0,83,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,30,0,0,2,1,0,0,3,1,0,0,83,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,32,0,0,11,1,0,0,12,1,0,0,83,0,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,0,0,0,0,240,32,0,0,18,1,0,0,19,1,0,0,83,0,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,40,29,0,0,25,1,0,0,26,1,0,0,83,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,232,61,0,0,16,29,0,0,224,13,0,0,0,0,0,0,0,0,0,0,184,29,0,0,25,1,0,0,27,1,0,0,83,0,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,112,60,0,0,152,29,0,0,72,62,0,0,128,29,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,29,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,72,62,0,0,216,29,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,29,0,0,2,0,0,0,0,0,0,0,136,30,0,0,25,1,0,0,40,1,0,0,83,0,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,112,60,0,0,104,30,0,0,72,62,0,0,64,30,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,72,62,0,0,168,30,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,0,0,0,0,72,31,0,0,25,1,0,0,48,1,0,0,83,0,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,62,0,0,32,31,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,0,0,0,0,192,31,0,0,25,1,0,0,56,1,0,0,83,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,62,0,0,152,31,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,0,0,0,0,56,32,0,0,25,1,0,0,64,1,0,0,83,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,232,61,0,0,16,32,0,0,192,31,0,0,0,0,0,0,0,0,0,0,160,32,0,0,25,1,0,0,65,1,0,0,83,0,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,232,61,0,0,120,32,0,0,192,31,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,232,61,0,0,176,32,0,0,40,29,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,232,61,0,0,216,32,0,0,40,29,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,232,61,0,0,0,33,0,0,40,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,232,61,0,0,40,33,0,0,40,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,232,61,0,0,80,33,0,0,40,29,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,112,60,0,0,152,33,0,0,72,62,0,0,120,33,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,72,62,0,0,216,33,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,72,62,0,0,24,34,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,33,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,72,62,0,0,88,34,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,33,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,112,60,0,0,224,34,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,112,60,0,0,0,35,0,0,72,62,0,0,152,34,0,0,0,0,0,0,3,0,0,0,40,29,0,0,2,0,0,0,248,34,0,0,2,0,0,0,40,35,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,112,60,0,0,160,35,0,0,72,62,0,0,88,35,0,0,0,0,0,0,3,0,0,0,40,29,0,0,2,0,0,0,248,34,0,0,2,0,0,0,200,35,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,112,60,0,0,64,36,0,0,72,62,0,0,248,35,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,88,36,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,72,62,0,0,128,36,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,88,36,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,112,60,0,0,0,37,0,0,72,62,0,0,232,36,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,24,37,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,72,62,0,0,64,37,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,24,37,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,112,60,0,0,216,37,0,0,72,62,0,0,192,37,0,0,0,0,0,0,1,0,0,0,248,37,0,0,0,0,0,0,72,62,0,0,120,37,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,0,38,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,72,62,0,0,128,38,0,0,0,0,0,0,1,0,0,0,248,37,0,0,0,0,0,0,72,62,0,0,56,38,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,152,38,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,112,60,0,0,48,39,0,0,72,62,0,0,24,39,0,0,0,0,0,0,1,0,0,0,80,39,0,0,0,0,0,0,72,62,0,0,208,38,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,88,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,72,62,0,0,216,39,0,0,0,0,0,0,1,0,0,0,80,39,0,0,0,0,0,0,72,62,0,0,144,39,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,240,39,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,112,60,0,0,112,40,0,0,72,62,0,0,40,40,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,144,40,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,112,60,0,0,0,41,0,0,72,62,0,0,184,40,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,32,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,112,60,0,0,144,41,0,0,72,62,0,0,72,41,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,176,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,112,60,0,0,32,42,0,0,72,62,0,0,216,41,0,0,0,0,0,0,2,0,0,0,40,29,0,0,2,0,0,0,64,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+3044);
/* memory initializer */ allocate([79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,1,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,224,57,0,0,67,1,0,0,68,1,0,0,69,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,232,61,0,0,208,57,0,0,104,58,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,112,60,0,0,88,58,0,0,0,0,0,0,176,58,0,0,70,1,0,0,71,1,0,0,72,1,0,0,0,0,0,0,0,0,0,0,24,59,0,0,73,1,0,0,74,1,0,0,47,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,232,61,0,0,160,58,0,0,104,58,0,0,0,0,0,0,0,0,0,0,240,58,0,0,70,1,0,0,75,1,0,0,72,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,232,61,0,0,216,58,0,0,176,58,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,232,61,0,0,0,59,0,0,104,58,0,0,0,0,0,0,0,0,0,0,120,59,0,0,76,1,0,0,77,1,0,0,78,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,112,60,0,0,80,59,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,232,61,0,0,104,59,0,0,104,58,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,232,61,0,0,136,59,0,0,96,59,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,61,0,0,192,59,0,0,176,59,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,61,0,0,32,60,0,0,176,59,0,0,0,0,0,0,232,61,0,0,248,59,0,0,72,60,0,0,0,0,0,0,0,0,0,0,232,59,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,0,0,0,0,88,60,0,0,79,1,0,0,87,1,0,0,81,1,0,0,82,1,0,0,88,1,0,0,0,0,0,0,0,0,0,0,248,60,0,0,79,1,0,0,89,1,0,0,81,1,0,0,82,1,0,0,90,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,232,61,0,0,208,60,0,0,176,59,0,0,0,0,0,0,118,0,0,0,0,0,0,0,184,60,0,0,8,61,0,0,68,110,0,0,0,0,0,0,184,60,0,0,24,61,0,0,98,0,0,0,0,0,0,0,184,60,0,0,40,61,0,0,99,0,0,0,0,0,0,0,184,60,0,0,56,61,0,0,104,0,0,0,0,0,0,0,184,60,0,0,72,61,0,0,97,0,0,0,0,0,0,0,184,60,0,0,88,61,0,0,115,0,0,0,0,0,0,0,184,60,0,0,104,61,0,0,116,0,0,0,0,0,0,0,184,60,0,0,120,61,0,0,105,0,0,0,0,0,0,0,184,60,0,0,136,61,0,0,106,0,0,0,0,0,0,0,184,60,0,0,152,61,0,0,184,60,0,0,144,20,0,0,109,0,0,0,0,0,0,0,184,60,0,0,176,61,0,0,102,0,0,0,0,0,0,0,184,60,0,0,192,61,0,0,100,0,0,0,0,0,0,0,184,60,0,0,208,61,0,0,0,0,0,0,48,62,0,0,79,1,0,0,91,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,232,61,0,0,8,62,0,0,232,59,0,0,0,0,0,0,0,0,0,0,144,62,0,0,79,1,0,0,95,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,232,61,0,0,104,62,0,0,232,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13288);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _emscripten_landingpad=true;

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  var _emscripten_resume=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }


  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var HEAP, shift;
      if (charSize === 2) {
          HEAP = HEAPU16;
          shift = 1;
      } else if (charSize === 4) {
          HEAP = HEAPU32;
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
init_ClassHandle()
init_RegisteredPointer()
init_embind();
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
init_emval();
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "___cxa_guard_acquire": ___cxa_guard_acquire, "getLiveInheritedInstances": getLiveInheritedInstances, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "__embind_register_class_class_function": __embind_register_class_class_function, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "__embind_register_std_string": __embind_register_std_string, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "_fileno": _fileno, "flushPendingDeletes": flushPendingDeletes, "_fread": _fread, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_write": _write, "__isLeapYear": __isLeapYear, "__embind_register_class_constructor": __embind_register_class_constructor, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "init_ClassHandle": init_ClassHandle, "_catclose": _catclose, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "_send": _send, "__embind_register_std_wstring": __embind_register_std_wstring, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "___setErrNo": ___setErrNo, "readLatin1String": readLatin1String, "_newlocale": _newlocale, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "_freelocale": _freelocale, "createNamedFunction": createNamedFunction, "validateThis": validateThis, "embind_init_charCodes": embind_init_charCodes, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_pthread_mutex_unlock": _pthread_mutex_unlock, "___ctype_toupper_loc": ___ctype_toupper_loc, "init_embind": init_embind, "ClassHandle_clone": ClassHandle_clone, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "_mkport": _mkport, "_read": _read, "RegisteredPointer_destructor": RegisteredPointer_destructor, "ensureOverloadTable": ensureOverloadTable, "__embind_register_emval": __embind_register_emval, "_time": _time, "_fprintf": _fprintf, "new_": new_, "downcastPointer": downcastPointer, "_catopen": _catopen, "replacePublicSymbol": replacePublicSymbol, "___cxa_guard_abort": ___cxa_guard_abort, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "___ctype_b_loc": ___ctype_b_loc, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "_vfprintf": _vfprintf, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "_pwrite": _pwrite, "_uselocale": _uselocale, "___cxa_end_catch": ___cxa_end_catch, "_embind_repr": _embind_repr, "_strftime": _strftime, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "_pthread_cond_broadcast": _pthread_cond_broadcast, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_recv": _recv, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "_abort": _abort, "throwBindingError": throwBindingError, "__embind_register_class_property": __embind_register_class_property, "exposePublicSymbol": exposePublicSymbol, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "_ungetc": _ungetc, "_fwrite": _fwrite, "__embind_register_void": __embind_register_void, "_fflush": _fflush, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "_catgets": _catgets, "_calloc": _calloc, "__embind_register_class_function": __embind_register_class_function, "RegisteredPointer": RegisteredPointer, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "getBasestPointer": getBasestPointer, "_pread": _pread, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "_getc": _getc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var __embind_register_class_class_function=env.__embind_register_class_class_function;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var __embind_register_std_string=env.__embind_register_std_string;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var _fileno=env._fileno;
  var flushPendingDeletes=env.flushPendingDeletes;
  var _fread=env._fread;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var init_ClassHandle=env.init_ClassHandle;
  var _catclose=env._catclose;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var _send=env._send;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var ___setErrNo=env.___setErrNo;
  var readLatin1String=env.readLatin1String;
  var _newlocale=env._newlocale;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var createNamedFunction=env.createNamedFunction;
  var validateThis=env.validateThis;
  var embind_init_charCodes=env.embind_init_charCodes;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var init_embind=env.init_embind;
  var ClassHandle_clone=env.ClassHandle_clone;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var _mkport=env._mkport;
  var _read=env._read;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_emval=env.__embind_register_emval;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var _catopen=env._catopen;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var _vfprintf=env._vfprintf;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _embind_repr=env._embind_repr;
  var _strftime=env._strftime;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _recv=env._recv;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var __embind_register_class_property=env.__embind_register_class_property;
  var exposePublicSymbol=env.exposePublicSymbol;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var _ungetc=env._ungetc;
  var _fwrite=env._fwrite;
  var __embind_register_void=env.__embind_register_void;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var _catgets=env._catgets;
  var _calloc=env._calloc;
  var __embind_register_class_function=env.__embind_register_class_function;
  var RegisteredPointer=env.RegisteredPointer;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var getBasestPointer=env.getBasestPointer;
  var _pread=env._pread;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var _getc=env._getc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN7MyClass10incrementXEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 2)|0;
 HEAP32[$this>>2] = $1;
 STACKTOP = sp;return;
}
function __ZN7MyClass10incrementYEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[$this>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNK7MyClass4getXEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN7MyClass4setXEi($this,$x_) {
 $this = $this|0;
 $x_ = $x_|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $x_;
 STACKTOP = sp;return;
}
function __ZN7MyClass21getStringFromInstanceERKS_($agg$result,$instance) {
 $agg$result = $agg$result|0;
 $instance = $instance|0;
 var $$lcssa$i = 0, $$size$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($instance) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = (($instance) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($instance) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(4294967279);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $9 = ($7>>>0)<(11);
 if ($9) {
  $10 = $7 << 1;
  $11 = $10&255;
  HEAP8[$agg$result>>0] = $11;
  $12 = (($agg$result) + 1|0);
  $__p$0$i = $12;
 } else {
  $13 = (($7) + 16)|0;
  $14 = $13 & -16;
  $15 = ($14|0)==(0);
  $$size$i = $15 ? 1 : $14;
  $16 = (_malloc($$size$i)|0);
  $17 = ($16|0)==(0|0);
  L11: do {
   if ($17) {
    while(1) {
     $18 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($18+0)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      break;
     }
     $20 = $18;
     FUNCTION_TABLE_v[$20 & 511]();
     $21 = (_malloc($$size$i)|0);
     $22 = ($21|0)==(0|0);
     if (!($22)) {
      $$lcssa$i = $21;
      break L11;
     }
    }
    $23 = (___cxa_allocate_exception(4)|0);
    HEAP32[$23>>2] = ((14760 + 8|0));
    ___cxa_throw(($23|0),(14816|0),(323|0));
    // unreachable;
   } else {
    $$lcssa$i = $16;
   }
  } while(0);
  $24 = (($agg$result) + 8|0);
  HEAP32[$24>>2] = $$lcssa$i;
  $25 = $14 | 1;
  HEAP32[$agg$result>>2] = $25;
  $26 = (($agg$result) + 4|0);
  HEAP32[$26>>2] = $7;
  $__p$0$i = $$lcssa$i;
 }
 _memcpy(($__p$0$i|0),($5|0),($7|0))|0;
 $27 = (($__p$0$i) + ($7)|0);
 HEAP8[$27>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRK7MyClassEE6invokeEPFS8_SB_EPS9_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 FUNCTION_TABLE_vii[$fn & 511]($0,$args);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = $1&255;
  $7 = $6 >>> 1;
  $9 = $7;
 } else {
  $4 = (($0) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $9 = $5;
 }
 $8 = (($9) + 4)|0;
 $10 = (_malloc($8)|0);
 $11 = HEAP8[$0>>0]|0;
 $12 = $11 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $16 = $11&255;
  $17 = $16 >>> 1;
  $18 = $17;
 } else {
  $14 = (($0) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 }
 HEAP32[$10>>2] = $18;
 $19 = (($10) + 4|0);
 $20 = HEAP8[$0>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $27 = (($0) + 1|0);
  $28 = $20&255;
  $29 = $28 >>> 1;
  $30 = $27;$31 = $29;
 } else {
  $23 = (($0) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($0) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $30 = $24;$31 = $26;
 }
 _memcpy(($19|0),($30|0),($31|0))|0;
 $32 = HEAP8[$0>>0]|0;
 $33 = $32 & 1;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  STACKTOP = sp;return ($10|0);
 }
 $35 = (($0) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 _free($36);
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE3getIS2_EEiRKS4_RKT_($context,$ptr) {
 $context = $context|0;
 $ptr = $ptr|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  $9 = (FUNCTION_TABLE_ii[$8 & 511]($1)|0);
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE3setIS2_EEvRKS4_RT_i($context,$ptr,$wt) {
 $context = $context|0;
 $ptr = $ptr|0;
 $wt = $wt|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$context>>0]|(HEAPU8[$context+1>>0]<<8)|(HEAPU8[$context+2>>0]<<16)|(HEAPU8[$context+3>>0]<<24);
 $$index1 = (($context) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($ptr) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vii[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vii[$8 & 511]($1,$wt);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal13MethodInvokerIM7MyClassFvvEvPS2_JEE6invokeERKS4_S5_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$field = HEAPU8[$method>>0]|(HEAPU8[$method+1>>0]<<8)|(HEAPU8[$method+2>>0]<<16)|(HEAPU8[$method+3>>0]<<24);
 $$index1 = (($method) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $0 = $$field2 >> 1;
 $1 = (($wireThis) + ($0)|0);
 $2 = $$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 511]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 511]($1);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal12operator_newI7MyClassJiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_DpOT0_($args,$args1) {
 $args = $args|0;
 $args1 = $args1|0;
 var $$lcssa$i = 0, $$lcssa$i$i = 0, $$size$i$i = 0, $$sroa$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$sroa$5 = sp;
 $0 = (_malloc(16)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 511]();
    $5 = (_malloc(16)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((14760 + 8|0));
   ___cxa_throw(($7|0),(14816|0),(323|0));
   // unreachable;
  } else {
   $$lcssa$i = $0;
  }
 } while(0);
 $8 = HEAP32[$args>>2]|0;
 $9 = HEAP8[$args1>>0]|0;
 $10 = (($args1) + 1|0);
 ;HEAP8[$$sroa$5+0>>0]=HEAP8[$10+0>>0]|0;HEAP8[$$sroa$5+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$sroa$5+2>>0]=HEAP8[$10+2>>0]|0;
 $11 = (($args1) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($args1) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $storemerge = 0;
 while(1) {
  $15 = ($storemerge>>>0)<(3);
  if (!($15)) {
   break;
  }
  $16 = (($args1) + ($storemerge<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($storemerge) + 1)|0;
  $storemerge = $17;
 }
 HEAP32[$$lcssa$i>>2] = $8;
 $18 = (($$lcssa$i) + 4|0);
 $19 = $9 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  HEAP8[$18>>0] = $9;
  $21 = (($$lcssa$i) + 5|0);
  ;HEAP8[$21+0>>0]=HEAP8[$$sroa$5+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$$sroa$5+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$$sroa$5+2>>0]|0;
  $22 = (($$lcssa$i) + 8|0);
  HEAP32[$22>>2] = $12;
  $23 = (($$lcssa$i) + 12|0);
  HEAP32[$23>>2] = $14;
  STACKTOP = sp;return ($$lcssa$i|0);
 }
 $24 = ($12>>>0)>(4294967279);
 L15: do {
  if ($24) {
   __THREW__ = 0;
   invoke_v(356);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  } else {
   $27 = ($12>>>0)<(11);
   if ($27) {
    $28 = $12 << 1;
    $29 = $28&255;
    HEAP8[$18>>0] = $29;
    $30 = (($$lcssa$i) + 5|0);
    $__p$0$i$i = $30;
   } else {
    $31 = (($12) + 16)|0;
    $32 = $31 & -16;
    $33 = ($32|0)==(0);
    $$size$i$i = $33 ? 1 : $32;
    $34 = (_malloc($$size$i$i)|0);
    $35 = ($34|0)==(0|0);
    L21: do {
     if ($35) {
      while(1) {
       $36 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($36+0)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        label = 19;
        break;
       }
       $38 = $36;
       __THREW__ = 0;
       invoke_v($38|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 25;
        break;
       }
       $41 = (_malloc($$size$i$i)|0);
       $42 = ($41|0)==(0|0);
       if (!($42)) {
        $$lcssa$i$i = $41;
        break L21;
       }
      }
      if ((label|0) == 19) {
       $43 = (___cxa_allocate_exception(4)|0);
       HEAP32[$43>>2] = ((14760 + 8|0));
       __THREW__ = 0;
       invoke_viii(357,($43|0),(14816|0),(323|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        break L15;
       }
       // unreachable;
      }
      else if ((label|0) == 25) {
       $50 = ___cxa_find_matching_catch()|0;
       $51 = tempRet0;
       $lpad$phi$index = $50;$lpad$phi$index2 = $51;
       _free($14);
       _free($$lcssa$i);
       ___resumeException($lpad$phi$index|0);
       // unreachable;
      }
     } else {
      $$lcssa$i$i = $34;
     }
    } while(0);
    $46 = (($$lcssa$i) + 12|0);
    HEAP32[$46>>2] = $$lcssa$i$i;
    $47 = $32 | 1;
    HEAP32[$18>>2] = $47;
    $48 = (($$lcssa$i) + 8|0);
    HEAP32[$48>>2] = $12;
    $__p$0$i$i = $$lcssa$i$i;
   }
   _memcpy(($__p$0$i$i|0),($14|0),($12|0))|0;
   $49 = (($__p$0$i$i) + ($12)|0);
   HEAP8[$49>>0] = 0;
   if ($20) {
    STACKTOP = sp;return ($$lcssa$i|0);
   }
   _free($14);
   STACKTOP = sp;return ($$lcssa$i|0);
  }
 } while(0);
 $52 = ___cxa_find_matching_catch()|0;
 $53 = tempRet0;
 $lpad$phi$index = $52;$lpad$phi$index2 = $53;
 _free($14);
 _free($$lcssa$i);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIP7MyClassJOiONSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS3_S4_SC_EiPNS0_11BindingTypeISB_EUt_E($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $$lcssa$i$i$i = 0, $$size$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 HEAP32[$0>>2] = $args;
 $2 = (($args1) + 4|0);
 $3 = HEAP32[$args1>>2]|0;
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $3 << 1;
  $7 = $6&255;
  HEAP8[$1>>0] = $7;
  $8 = (($1) + 1|0);
  $__p$0$i$i$i = $8;
 } else {
  $9 = (($3) + 16)|0;
  $10 = $9 & -16;
  $11 = ($10|0)==(0);
  $$size$i$i$i = $11 ? 1 : $10;
  $12 = (_malloc($$size$i$i$i)|0);
  $13 = ($12|0)==(0|0);
  L7: do {
   if ($13) {
    while(1) {
     $14 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($14+0)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      break;
     }
     $16 = $14;
     FUNCTION_TABLE_v[$16 & 511]();
     $17 = (_malloc($$size$i$i$i)|0);
     $18 = ($17|0)==(0|0);
     if (!($18)) {
      $$lcssa$i$i$i = $17;
      break L7;
     }
    }
    $19 = (___cxa_allocate_exception(4)|0);
    HEAP32[$19>>2] = ((14760 + 8|0));
    ___cxa_throw(($19|0),(14816|0),(323|0));
    // unreachable;
   } else {
    $$lcssa$i$i$i = $12;
   }
  } while(0);
  $20 = (($1) + 8|0);
  HEAP32[$20>>2] = $$lcssa$i$i$i;
  $21 = $10 | 1;
  HEAP32[$1>>2] = $21;
  $22 = (($1) + 4|0);
  HEAP32[$22>>2] = $3;
  $__p$0$i$i$i = $$lcssa$i$i$i;
 }
 _memcpy(($__p$0$i$i$i|0),($2|0),($3|0))|0;
 $23 = (($__p$0$i$i$i) + ($3)|0);
 HEAP8[$23>>0] = 0;
 __THREW__ = 0;
 $24 = (invoke_iii($fn|0,($0|0),($1|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP8[$1>>0]|0;
  $35 = $34 & 1;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   ___resumeException($32|0);
   // unreachable;
  }
  $37 = (($1) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  _free($38);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $27 = HEAP8[$1>>0]|0;
  $28 = $27 & 1;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   STACKTOP = sp;return ($24|0);
  }
  $30 = (($1) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal13getActualTypeI7MyClassEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (248|0);
}
function __ZN10emscripten8internal14raw_destructorI7MyClassEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($ptr) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = (($ptr) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
 }
 _free($ptr);
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var $$index1 = 0, $$index3 = 0, $$index5 = 0, $$index7 = 0, $$lcssa$i$i$i$i = 0, $$lcssa$i$i$i$i$i = 0, $$lcssa$i$i$i13$i$i = 0, $$lcssa$i$i15$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class((248|0),(304|0),(384|0),(0|0),(360|0),(358|0),(352|0),(0|0),(352|0),(0|0),(8|0),(344|0),(359|0));
 __embind_register_class_constructor((248|0),3,(328|0),(320|0),(360|0),(361|0));
 $0 = (_malloc(8)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   while(1) {
    $2 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($2+0)|0);
    $3 = ($2|0)==(0);
    if ($3) {
     break;
    }
    $4 = $2;
    FUNCTION_TABLE_v[$4 & 511]();
    $5 = (_malloc(8)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa$i$i15$i$i = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((14760 + 8|0));
   ___cxa_throw(($7|0),(14816|0),(323|0));
   // unreachable;
  } else {
   $$lcssa$i$i15$i$i = $0;
  }
 } while(0);
 HEAP8[$$lcssa$i$i15$i$i>>0]=(362)&255;HEAP8[$$lcssa$i$i15$i$i+1>>0]=((362)>>8)&255;HEAP8[$$lcssa$i$i15$i$i+2>>0]=((362)>>16)&255;HEAP8[$$lcssa$i$i15$i$i+3>>0]=(362)>>24;
 $$index1 = (($$lcssa$i$i15$i$i) + 4|0);
 HEAP8[$$index1>>0]=0&255;HEAP8[$$index1+1>>0]=(0>>8)&255;HEAP8[$$index1+2>>0]=(0>>16)&255;HEAP8[$$index1+3>>0]=0>>24;
 __embind_register_class_function((248|0),(16|0),2,(280|0),(272|0),(363|0),($$lcssa$i$i15$i$i|0),0);
 $8 = (_malloc(8)|0);
 $9 = ($8|0)==(0|0);
 L7: do {
  if ($9) {
   while(1) {
    $10 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($10+0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
    $12 = $10;
    FUNCTION_TABLE_v[$12 & 511]();
    $13 = (_malloc(8)|0);
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $$lcssa$i$i$i$i = $13;
     break L7;
    }
   }
   $15 = (___cxa_allocate_exception(4)|0);
   HEAP32[$15>>2] = ((14760 + 8|0));
   ___cxa_throw(($15|0),(14816|0),(323|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i$i = $8;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i$i>>0]=(364)&255;HEAP8[$$lcssa$i$i$i$i+1>>0]=((364)>>8)&255;HEAP8[$$lcssa$i$i$i$i+2>>0]=((364)>>16)&255;HEAP8[$$lcssa$i$i$i$i+3>>0]=(364)>>24;
 $$index3 = (($$lcssa$i$i$i$i) + 4|0);
 HEAP8[$$index3>>0]=0&255;HEAP8[$$index3+1>>0]=(0>>8)&255;HEAP8[$$index3+2>>0]=(0>>16)&255;HEAP8[$$index3+3>>0]=0>>24;
 __embind_register_class_function((248|0),(32|0),2,(280|0),(272|0),(363|0),($$lcssa$i$i$i$i|0),0);
 $16 = (_malloc(8)|0);
 $17 = ($16|0)==(0|0);
 L13: do {
  if ($17) {
   while(1) {
    $18 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($18+0)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    }
    $20 = $18;
    FUNCTION_TABLE_v[$20 & 511]();
    $21 = (_malloc(8)|0);
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $$lcssa$i$i$i13$i$i = $21;
     break L13;
    }
   }
   $23 = (___cxa_allocate_exception(4)|0);
   HEAP32[$23>>2] = ((14760 + 8|0));
   ___cxa_throw(($23|0),(14816|0),(323|0));
   // unreachable;
  } else {
   $$lcssa$i$i$i13$i$i = $16;
  }
 } while(0);
 HEAP8[$$lcssa$i$i$i13$i$i>>0]=(365)&255;HEAP8[$$lcssa$i$i$i13$i$i+1>>0]=((365)>>8)&255;HEAP8[$$lcssa$i$i$i13$i$i+2>>0]=((365)>>16)&255;HEAP8[$$lcssa$i$i$i13$i$i+3>>0]=(365)>>24;
 $$index5 = (($$lcssa$i$i$i13$i$i) + 4|0);
 HEAP8[$$index5>>0]=0&255;HEAP8[$$index5+1>>0]=(0>>8)&255;HEAP8[$$index5+2>>0]=(0>>16)&255;HEAP8[$$index5+3>>0]=0>>24;
 $24 = (_malloc(8)|0);
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  $$lcssa$i$i$i$i$i = $24;
  HEAP8[$$lcssa$i$i$i$i$i>>0]=(366)&255;HEAP8[$$lcssa$i$i$i$i$i+1>>0]=((366)>>8)&255;HEAP8[$$lcssa$i$i$i$i$i+2>>0]=((366)>>16)&255;HEAP8[$$lcssa$i$i$i$i$i+3>>0]=(366)>>24;
  $$index7 = (($$lcssa$i$i$i$i$i) + 4|0);
  HEAP8[$$index7>>0]=0&255;HEAP8[$$index7+1>>0]=(0>>8)&255;HEAP8[$$index7+2>>0]=(0>>16)&255;HEAP8[$$index7+3>>0]=0>>24;
  __embind_register_class_property((248|0),(48|0),(15760|0),(264|0),(367|0),($$lcssa$i$i$i13$i$i|0),(15760|0),(256|0),(368|0),($$lcssa$i$i$i$i$i|0));
  __embind_register_class_class_function((248|0),(56|0),2,(88|0),(80|0),(369|0),(370|0));
  STACKTOP = sp;return;
 }
 while(1) {
  $26 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($26+0)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   label = 16;
   break;
  }
  $28 = $26;
  FUNCTION_TABLE_v[$28 & 511]();
  $29 = (_malloc(8)|0);
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   $$lcssa$i$i$i$i$i = $29;
   label = 17;
   break;
  }
 }
 if ((label|0) == 16) {
  $31 = (___cxa_allocate_exception(4)|0);
  HEAP32[$31>>2] = ((14760 + 8|0));
  ___cxa_throw(($31|0),(14816|0),(323|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  HEAP8[$$lcssa$i$i$i$i$i>>0]=(366)&255;HEAP8[$$lcssa$i$i$i$i$i+1>>0]=((366)>>8)&255;HEAP8[$$lcssa$i$i$i$i$i+2>>0]=((366)>>16)&255;HEAP8[$$lcssa$i$i$i$i$i+3>>0]=(366)>>24;
  $$index7 = (($$lcssa$i$i$i$i$i) + 4|0);
  HEAP8[$$index7>>0]=0&255;HEAP8[$$index7+1>>0]=(0>>8)&255;HEAP8[$$index7+2>>0]=(0>>16)&255;HEAP8[$$index7+3>>0]=0>>24;
  __embind_register_class_property((248|0),(48|0),(15760|0),(264|0),(367|0),($$lcssa$i$i$i13$i$i|0),(15760|0),(256|0),(368|0),($$lcssa$i$i$i$i$i|0));
  __embind_register_class_class_function((248|0),(56|0),2,(88|0),(80|0),(369|0),(370|0));
  STACKTOP = sp;return;
 }
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ti) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strlen(($1|0))|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 _memcpy(($4|0),($1|0),($3|0))|0;
 $$0$i = $4;
 STACKTOP = sp;return ($$0$i|0);
}
function __GLOBAL__I_a14() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((15632|0),(400|0));
 __embind_register_bool((15664|0),(408|0),1,1,0);
 __embind_register_integer((15680|0),(416|0),1,-128,127);
 __embind_register_integer((15712|0),(424|0),1,-128,127);
 __embind_register_integer((15696|0),(440|0),1,0,255);
 __embind_register_integer((15728|0),(456|0),2,-32768,32767);
 __embind_register_integer((15744|0),(464|0),2,0,65535);
 __embind_register_integer((15760|0),(480|0),4,-2147483648,2147483647);
 __embind_register_integer((15776|0),(488|0),4,0,-1);
 __embind_register_integer((15784|0),(504|0),4,-2147483648,2147483647);
 __embind_register_integer((15800|0),(512|0),4,0,-1);
 __embind_register_float((15816|0),(528|0),4);
 __embind_register_float((15832|0),(536|0),8);
 __embind_register_std_string((208|0),(544|0));
 __embind_register_std_string((1960|0),(560|0));
 __embind_register_std_wstring((1872|0),4,(600|0));
 __embind_register_emval((1800|0),(616|0));
 __embind_register_memory_view((1768|0),0,(632|0));
 __embind_register_memory_view((1728|0),0,(664|0));
 __embind_register_memory_view((1688|0),1,(704|0));
 __embind_register_memory_view((1648|0),2,(744|0));
 __embind_register_memory_view((1608|0),3,(776|0));
 __embind_register_memory_view((1568|0),4,(816|0));
 __embind_register_memory_view((1528|0),5,(848|0));
 __embind_register_memory_view((1488|0),4,(888|0));
 __embind_register_memory_view((1448|0),5,(920|0));
 __embind_register_memory_view((1728|0),0,(960|0));
 __embind_register_memory_view((1688|0),1,(992|0));
 __embind_register_memory_view((1648|0),2,(1032|0));
 __embind_register_memory_view((1608|0),3,(1072|0));
 __embind_register_memory_view((1568|0),4,(1112|0));
 __embind_register_memory_view((1528|0),5,(1152|0));
 __embind_register_memory_view((1408|0),6,(1192|0));
 __embind_register_memory_view((1368|0),7,(1224|0));
 __embind_register_memory_view((1328|0),7,(1256|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev() {
 var $$sum = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i = 0, $not$$i2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[_stdin>>2]|0;
 HEAP32[2696>>2] = ((3800 + 8|0));
 __ZNSt3__16localeC2Ev(((2696 + 4|0)));
 ;HEAP32[((2696 + 8|0))+0>>2]=0|0;HEAP32[((2696 + 8|0))+4>>2]=0|0;HEAP32[((2696 + 8|0))+8>>2]=0|0;HEAP32[((2696 + 8|0))+12>>2]=0|0;HEAP32[((2696 + 8|0))+16>>2]=0|0;HEAP32[((2696 + 8|0))+20>>2]=0|0;
 HEAP32[2696>>2] = ((3416 + 8|0));
 HEAP32[((2696 + 32|0))>>2] = $2;
 HEAP32[((2696 + 40|0))>>2] = 2752;
 HEAP32[((2696 + 48|0))>>2] = -1;
 HEAP8[((2696 + 52|0))>>0] = 0;
 $3 = HEAP32[((2696 + 4|0))>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 invoke_vii(38,(2696|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+-1)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = HEAP32[$17>>2]|0;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   FUNCTION_TABLE_vi[$23 & 511]($17);
  }
  HEAP32[2696>>2] = ((3800 + 8|0));
  $24 = HEAP32[((2696 + 4|0))>>2]|0;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;HEAP32[$25>>2] = (($26+-1)|0);
  $27 = ($26|0)==(0);
  if (!($27)) {
   ___resumeException($15|0);
   // unreachable;
  }
  $28 = HEAP32[$24>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_vi[$30 & 511]($24);
  ___resumeException($15|0);
  // unreachable;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10+-1)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$8>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 511]($8);
 }
 HEAP32[1984>>2] = ((3928 + 12|0));
 HEAP32[((1984 + 8|0))>>2] = ((3928 + 32|0));
 HEAP32[((1984 + 4|0))>>2] = 0;
 HEAP32[((1984 + 32|0))>>2] = 2696;
 HEAP32[((1984 + 24|0))>>2] = 0;
 HEAP32[((1984 + 28|0))>>2] = 0;
 HEAP32[((1984 + 12|0))>>2] = 4098;
 HEAP32[((1984 + 20|0))>>2] = 0;
 HEAP32[((1984 + 16|0))>>2] = 6;
 dest=((1984 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev(((1984 + 36|0)));
 HEAP32[((1984 + 80|0))>>2] = 0;
 HEAP32[((1984 + 84|0))>>2] = -1;
 $31 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(2800,$31,((2752 + 8|0)));
 HEAP32[2072>>2] = ((4008 + 12|0));
 HEAP32[((2072 + 4|0))>>2] = ((4008 + 32|0));
 HEAP32[((2072 + 28|0))>>2] = 2800;
 HEAP32[((2072 + 20|0))>>2] = 0;
 HEAP32[((2072 + 24|0))>>2] = 0;
 HEAP32[((2072 + 8|0))>>2] = 4098;
 HEAP32[((2072 + 16|0))>>2] = 0;
 HEAP32[((2072 + 12|0))>>2] = 6;
 dest=((2072 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev(((2072 + 32|0)));
 HEAP32[((2072 + 76|0))>>2] = 0;
 HEAP32[((2072 + 80|0))>>2] = -1;
 $32 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(2848,$32,((2752 + 16|0)));
 HEAP32[2160>>2] = ((4008 + 12|0));
 HEAP32[((2160 + 4|0))>>2] = ((4008 + 32|0));
 HEAP32[((2160 + 28|0))>>2] = 2848;
 HEAP32[((2160 + 20|0))>>2] = 0;
 HEAP32[((2160 + 24|0))>>2] = 0;
 HEAP32[((2160 + 8|0))>>2] = 4098;
 HEAP32[((2160 + 16|0))>>2] = 0;
 HEAP32[((2160 + 12|0))>>2] = 6;
 dest=((2160 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev(((2160 + 32|0)));
 HEAP32[((2160 + 76|0))>>2] = 0;
 HEAP32[((2160 + 80|0))>>2] = -1;
 $33 = HEAP32[2160>>2]|0;
 $34 = (($33) + -12|0);
 $35 = HEAP32[$34>>2]|0;
 $$sum = (($35) + 24)|0;
 $36 = (2160 + ($$sum)|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[2248>>2] = ((4008 + 12|0));
 HEAP32[((2248 + 4|0))>>2] = ((4008 + 32|0));
 HEAP32[((2248 + 28|0))>>2] = $37;
 $not$$i = ($37|0)==(0|0);
 $38 = $not$$i&1;
 HEAP32[((2248 + 20|0))>>2] = $38;
 HEAP32[((2248 + 24|0))>>2] = 0;
 HEAP32[((2248 + 8|0))>>2] = 4098;
 HEAP32[((2248 + 16|0))>>2] = 0;
 HEAP32[((2248 + 12|0))>>2] = 6;
 dest=((2248 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev(((2248 + 32|0)));
 HEAP32[((2248 + 76|0))>>2] = 0;
 HEAP32[((2248 + 80|0))>>2] = -1;
 $39 = HEAP32[1984>>2]|0;
 $40 = (($39) + -12|0);
 $41 = HEAP32[$40>>2]|0;
 $$sum19 = (($41) + 72)|0;
 $42 = (1984 + ($$sum19)|0);
 HEAP32[$42>>2] = 2072;
 $43 = HEAP32[2160>>2]|0;
 $44 = (($43) + -12|0);
 $45 = HEAP32[$44>>2]|0;
 $$sum20 = (($45) + 4)|0;
 $46 = (2160 + ($$sum20)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 | 8192;
 HEAP32[$46>>2] = $48;
 $49 = HEAP32[2160>>2]|0;
 $50 = (($49) + -12|0);
 $51 = HEAP32[$50>>2]|0;
 $$sum21 = (($51) + 72)|0;
 $52 = (2160 + ($$sum21)|0);
 HEAP32[$52>>2] = 2072;
 HEAP32[2896>>2] = ((3864 + 8|0));
 __ZNSt3__16localeC2Ev(((2896 + 4|0)));
 ;HEAP32[((2896 + 8|0))+0>>2]=0|0;HEAP32[((2896 + 8|0))+4>>2]=0|0;HEAP32[((2896 + 8|0))+8>>2]=0|0;HEAP32[((2896 + 8|0))+12>>2]=0|0;HEAP32[((2896 + 8|0))+16>>2]=0|0;HEAP32[((2896 + 8|0))+20>>2]=0|0;
 HEAP32[2896>>2] = ((3160 + 8|0));
 HEAP32[((2896 + 32|0))>>2] = $2;
 HEAP32[((2896 + 40|0))>>2] = ((2752 + 24|0));
 HEAP32[((2896 + 48|0))>>2] = -1;
 HEAP8[((2896 + 52|0))>>0] = 0;
 $53 = HEAP32[((2896 + 4|0))>>2]|0;
 HEAP32[$0>>2] = $53;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;HEAP32[$54>>2] = (($55+1)|0);
 __THREW__ = 0;
 invoke_vii(16,(2896|0),($0|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if (!($57)) {
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($60+-1)|0);
  $61 = ($60|0)==(0);
  if ($61) {
   $62 = HEAP32[$58>>2]|0;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   FUNCTION_TABLE_vi[$64 & 511]($58);
  }
  HEAP32[2336>>2] = ((3968 + 12|0));
  HEAP32[((2336 + 8|0))>>2] = ((3968 + 32|0));
  HEAP32[((2336 + 4|0))>>2] = 0;
  HEAP32[((2336 + 32|0))>>2] = 2896;
  HEAP32[((2336 + 24|0))>>2] = 0;
  HEAP32[((2336 + 28|0))>>2] = 0;
  HEAP32[((2336 + 12|0))>>2] = 4098;
  HEAP32[((2336 + 20|0))>>2] = 0;
  HEAP32[((2336 + 16|0))>>2] = 6;
  dest=((2336 + 40|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZNSt3__16localeC2Ev(((2336 + 36|0)));
  HEAP32[((2336 + 80|0))>>2] = 0;
  HEAP32[((2336 + 84|0))>>2] = -1;
  __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(2952,$31,((2752 + 32|0)));
  HEAP32[2424>>2] = ((4048 + 12|0));
  HEAP32[((2424 + 4|0))>>2] = ((4048 + 32|0));
  HEAP32[((2424 + 28|0))>>2] = 2952;
  HEAP32[((2424 + 20|0))>>2] = 0;
  HEAP32[((2424 + 24|0))>>2] = 0;
  HEAP32[((2424 + 8|0))>>2] = 4098;
  HEAP32[((2424 + 16|0))>>2] = 0;
  HEAP32[((2424 + 12|0))>>2] = 6;
  dest=((2424 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZNSt3__16localeC2Ev(((2424 + 32|0)));
  HEAP32[((2424 + 76|0))>>2] = 0;
  HEAP32[((2424 + 80|0))>>2] = -1;
  __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(3000,$32,((2752 + 40|0)));
  HEAP32[2512>>2] = ((4048 + 12|0));
  HEAP32[((2512 + 4|0))>>2] = ((4048 + 32|0));
  HEAP32[((2512 + 28|0))>>2] = 3000;
  HEAP32[((2512 + 20|0))>>2] = 0;
  HEAP32[((2512 + 24|0))>>2] = 0;
  HEAP32[((2512 + 8|0))>>2] = 4098;
  HEAP32[((2512 + 16|0))>>2] = 0;
  HEAP32[((2512 + 12|0))>>2] = 6;
  dest=((2512 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZNSt3__16localeC2Ev(((2512 + 32|0)));
  HEAP32[((2512 + 76|0))>>2] = 0;
  HEAP32[((2512 + 80|0))>>2] = -1;
  $81 = HEAP32[2512>>2]|0;
  $82 = (($81) + -12|0);
  $83 = HEAP32[$82>>2]|0;
  $$sum22 = (($83) + 24)|0;
  $84 = (2512 + ($$sum22)|0);
  $85 = HEAP32[$84>>2]|0;
  HEAP32[2600>>2] = ((4048 + 12|0));
  HEAP32[((2600 + 4|0))>>2] = ((4048 + 32|0));
  HEAP32[((2600 + 28|0))>>2] = $85;
  $not$$i2 = ($85|0)==(0|0);
  $86 = $not$$i2&1;
  HEAP32[((2600 + 20|0))>>2] = $86;
  HEAP32[((2600 + 24|0))>>2] = 0;
  HEAP32[((2600 + 8|0))>>2] = 4098;
  HEAP32[((2600 + 16|0))>>2] = 0;
  HEAP32[((2600 + 12|0))>>2] = 6;
  dest=((2600 + 36|0))+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  __ZNSt3__16localeC2Ev(((2600 + 32|0)));
  HEAP32[((2600 + 76|0))>>2] = 0;
  HEAP32[((2600 + 80|0))>>2] = -1;
  $87 = HEAP32[2336>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (2336 + ($$sum23)|0);
  HEAP32[$90>>2] = 2424;
  $91 = HEAP32[2512>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (2512 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[2512>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (2512 + ($$sum25)|0);
  HEAP32[$100>>2] = 2424;
  STACKTOP = sp;return;
 }
 $65 = ___cxa_find_matching_catch()|0;
 $66 = tempRet0;
 $67 = HEAP32[$0>>2]|0;
 $68 = (($67) + 4|0);
 $69 = HEAP32[$68>>2]|0;HEAP32[$68>>2] = (($69+-1)|0);
 $70 = ($69|0)==(0);
 if ($70) {
  $71 = HEAP32[$67>>2]|0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vi[$73 & 511]($67);
 }
 HEAP32[2896>>2] = ((3864 + 8|0));
 $74 = HEAP32[((2896 + 4|0))>>2]|0;
 $75 = (($74) + 4|0);
 $76 = HEAP32[$75>>2]|0;HEAP32[$75>>2] = (($76+-1)|0);
 $77 = ($76|0)==(0);
 if (!($77)) {
  ___resumeException($65|0);
  // unreachable;
 }
 $78 = HEAP32[$74>>2]|0;
 $79 = (($78) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 FUNCTION_TABLE_vi[$80 & 511]($74);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(371,(2072|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vi(371,(2248|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   invoke_vi(372,(2424|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    invoke_vi(372,(2600|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 511]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,3560,2);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 511]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   invoke_viii(373,($what_arg|0),($28|0),($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    $32 = HEAP8[$0>>0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     break;
    }
    $35 = (($0) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    _free($36);
    break;
   }
   $37 = ___cxa_find_matching_catch()|0;
   $38 = tempRet0;
   $39 = HEAP8[$0>>0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    ___resumeException($37|0);
    // unreachable;
   }
   $42 = (($0) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   _free($43);
   ___resumeException($37|0);
   // unreachable;
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec$0,$ec$1,$what_arg) {
 $this = $this|0;
 $ec$0 = $ec$0|0;
 $ec$1 = $ec$1|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ec = sp;
 HEAP32[$ec>>2] = $ec$0;
 $$1 = (($ec) + 4|0);
 HEAP32[$$1>>2] = $ec$1;
 $0 = sp + 20|0;
 $1 = sp + 8|0;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(374,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $40 = ___cxa_find_matching_catch()|0;
   $41 = tempRet0;
   $$0 = $41;$$01 = $40;
  } else {
   HEAP32[$this>>2] = ((14984 + 8|0));
   $5 = HEAP8[$0>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($0) + 1|0);
    $11 = $10;
   } else {
    $8 = (($0) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $11 = $9;
   }
   $12 = (_strlen(($11|0))|0);
   $13 = (($12) + 13)|0;
   __THREW__ = 0;
   $14 = (invoke_ii(375,($13|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $42 = ___cxa_find_matching_catch()|0;
    $43 = tempRet0;
    if ($7) {
     $$0 = $43;$$01 = $42;
     break;
    }
    $44 = (($0) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    _free($45);
    $$0 = $43;$$01 = $42;
    break;
   }
   HEAP32[$14>>2] = $12;
   $17 = (($14) + 4|0);
   HEAP32[$17>>2] = $12;
   $18 = (($14) + 8|0);
   HEAP32[$18>>2] = 0;
   $19 = (($14) + 12|0);
   $20 = (($12) + 1)|0;
   _memcpy(($19|0),($11|0),($20|0))|0;
   $21 = (($this) + 4|0);
   HEAP32[$21>>2] = $19;
   if (!($7)) {
    $22 = (($0) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    _free($23);
   }
   $24 = HEAP8[$1>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    HEAP32[$this>>2] = ((3568 + 8|0));
    $29 = (($this) + 8|0);
    $30 = $ec;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $29;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    STACKTOP = sp;return;
   }
   $27 = (($1) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   _free($28);
   HEAP32[$this>>2] = ((3568 + 8|0));
   $29 = (($this) + 8|0);
   $30 = $ec;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $29;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   STACKTOP = sp;return;
  }
 } while(0);
 $46 = HEAP8[$1>>0]|0;
 $47 = $46 & 1;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $49 = (($1) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 _free($50);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((14960 + 8|0));
 __THREW__ = 0;
 $1 = (invoke_ii(375,25)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($8|0);
  // unreachable;
 } else {
  $4 = (($0) + 4|0);
  HEAP32[$1>>2] = 12;
  $5 = (($1) + 4|0);
  HEAP32[$5>>2] = 12;
  $6 = (($1) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = (($1) + 12|0);
  dest=$7+0|0; src=3784+0|0; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  HEAP32[$4>>2] = $7;
  HEAP32[$0>>2] = ((15040 + 8|0));
  ___cxa_throw(($0|0),(15088|0),(326|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($0>>>0)>($8>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return;
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16>>0] = 0;
 $17 = HEAP8[$this>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this>>0] = $22;
  STACKTOP = sp;return;
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if (!($7)) {
  if ($2) {
   $47 = ((($this) + ($__n)|0) + 1|0);
   HEAP8[$47>>0] = 0;
   $48 = $__n << 1;
   $49 = $48&255;
   HEAP8[$this>>0] = $49;
   STACKTOP = sp;return;
  } else {
   $43 = (($this) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($__n)|0);
   HEAP8[$45>>0] = 0;
   $46 = (($this) + 4|0);
   HEAP32[$46>>2] = $__n;
   STACKTOP = sp;return;
  }
 }
 $9 = (($__n) - ($8))|0;
 $10 = ($8|0)==($__n|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 if ($2) {
  $15 = $0;$22 = 10;
 } else {
  $11 = HEAP32[$this>>2]|0;
  $12 = $11 & -2;
  $phitmp$i$i = (($12) + -1)|0;
  $13 = $11&255;
  $15 = $13;$22 = $phitmp$i$i;
 }
 $14 = $15 & 1;
 $16 = ($14<<24>>24)==(0);
 if ($16) {
  $19 = $15&255;
  $20 = $19 >>> 1;
  $23 = $20;
 } else {
  $17 = (($this) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $23 = $18;
 }
 $21 = (($22) - ($23))|0;
 $24 = ($21>>>0)<($9>>>0);
 if ($24) {
  $25 = (($9) - ($22))|0;
  $26 = (($25) + ($23))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$22,$26,$23,$23,0);
  $$pre$i = HEAP8[$this>>0]|0;
  $28 = $$pre$i;
 } else {
  $28 = $15;
 }
 $27 = $28 & 1;
 $29 = ($27<<24>>24)==(0);
 if ($29) {
  $32 = (($this) + 1|0);
  $34 = $32;
 } else {
  $30 = (($this) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $34 = $31;
 }
 $33 = (($34) + ($23)|0);
 _memset(($33|0),0,($9|0))|0;
 $35 = (($23) + ($9))|0;
 $36 = HEAP8[$this>>0]|0;
 $37 = $36 & 1;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $40 = $35 << 1;
  $41 = $40&255;
  HEAP8[$this>>0] = $41;
 } else {
  $39 = (($this) + 4|0);
  HEAP32[$39>>2] = $35;
 }
 $42 = (($34) + ($35)|0);
 HEAP8[$42>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(11);
 if ($13) {
  $18 = 10;
 } else {
  $15 = (($14) + 16)|0;
  $16 = $15 & -16;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(10);
 do {
  if ($20) {
   $21 = (($this) + 1|0);
   $22 = (($this) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $39 = $7;$__new_data$1 = $21;$__now_long$0$off0 = 0;$__p$0 = $23;$__was_long$0$off0 = 1;
  } else {
   $24 = ($18>>>0)>($19>>>0);
   $25 = (($18) + 1)|0;
   if ($24) {
    $26 = (__Znwj($25)|0);
    $__new_data$0 = $26;
   } else {
    __THREW__ = 0;
    $27 = (invoke_ii(375,($25|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $30 = ___cxa_find_matching_catch(0|0)|0;
     $31 = tempRet0;
     (___cxa_begin_catch(($30|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $27;
    }
   }
   $32 = HEAP8[$this>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $37 = (($this) + 1|0);
    $39 = $32;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $37;$__was_long$0$off0 = 0;
    break;
   } else {
    $35 = (($this) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $39 = $32;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $36;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $38 = $39 & 1;
 $40 = ($38<<24>>24)==(0);
 if ($40) {
  $43 = $39&255;
  $44 = $43 >>> 1;
  $46 = $44;
 } else {
  $41 = (($this) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $46 = $42;
 }
 $45 = (($46) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($45|0))|0;
 if ($__was_long$0$off0) {
  _free($__p$0);
 }
 if ($__now_long$0$off0) {
  $47 = (($18) + 1)|0;
  $48 = $47 | 1;
  HEAP32[$this>>2] = $48;
  $49 = (($this) + 4|0);
  HEAP32[$49>>2] = $14;
  $50 = (($this) + 8|0);
  HEAP32[$50>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $51 = $14 << 1;
  $52 = $51&255;
  HEAP8[$this>>0] = $52;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $31 = (($__n) - ($14))|0;
  $32 = (($31) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$32,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return;
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 if ($8) {
  $20 = (($this) + 1|0);
  $22 = $20;
 } else {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $22 = $19;
 }
 $21 = (($22) + ($15)|0);
 _memcpy(($21|0),($__s|0),($__n|0))|0;
 $23 = (($15) + ($__n))|0;
 $24 = HEAP8[$this>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $28 = $23 << 1;
  $29 = $28&255;
  HEAP8[$this>>0] = $29;
 } else {
  $27 = (($this) + 4|0);
  HEAP32[$27>>2] = $23;
 }
 $30 = (($22) + ($23)|0);
 HEAP8[$30>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 _free($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__old_sz|0)==($__n_copy|0);
 if (!($20)) {
  $21 = (($__old_sz) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $22 = (($17) + ($$sum)|0);
  $23 = (($19) + ($__n_copy)|0);
  _memcpy(($22|0),($23|0),($21|0))|0;
 }
 $24 = ($__old_cap|0)==(10);
 if ($24) {
  $25 = (($this) + 8|0);
  HEAP32[$25>>2] = $17;
  $26 = $16 | 1;
  HEAP32[$this>>2] = $26;
  STACKTOP = sp;return;
 }
 _free($19);
 $25 = (($this) + 8|0);
 HEAP32[$25>>2] = $17;
 $26 = $16 | 1;
 HEAP32[$this>>2] = $26;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 $12 = ($__sz|0)==(0);
 if ($12) {
  $18 = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$014$i = $__sz;$$023$i = $__s;$$05$i = $__p$0;
 }
 while(1) {
  $13 = (($$014$i) + -1)|0;
  $14 = (($$023$i) + 4|0);
  $15 = HEAP32[$$023$i>>2]|0;
  $16 = (($$05$i) + 4|0);
  HEAP32[$$05$i>>2] = $15;
  $17 = ($13|0)==(0);
  if ($17) {
   break;
  } else {
   $$014$i = $13;$$023$i = $14;$$05$i = $16;
  }
 }
 $18 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$012$i = 0, $$03$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 $12 = ($__n|0)==(0);
 if ($12) {
  $16 = (($__p$0) + ($__n<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $$012$i = $__n;$$03$i = $__p$0;
 }
 while(1) {
  $13 = (($$012$i) + -1)|0;
  $14 = (($$03$i) + 4|0);
  HEAP32[$$03$i>>2] = $__c;
  $15 = ($13|0)==(0);
  if ($15) {
   break;
  } else {
   $$012$i = $13;$$03$i = $14;
  }
 }
 $16 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$16>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $$0$i = 0, $$014$i$i$i = 0, $$023$i$i$i = 0, $$05$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $__s;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = $__s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = HEAP8[$this>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = 1;$16 = $7;
 } else {
  $10 = HEAP32[$this>>2]|0;
  $11 = $10 & -2;
  $phitmp$i$i = (($11) + -1)|0;
  $12 = $10&255;
  $14 = $phitmp$i$i;$16 = $12;
 }
 $13 = ($6>>>0)>($14>>>0);
 if (!($13)) {
  $15 = $16 & 1;
  $17 = ($15<<24>>24)==(0);
  if ($17) {
   $20 = (($this) + 4|0);
   $21 = $20;
  } else {
   $18 = (($this) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $21 = $19;
  }
  _wmemmove($21,$__s,$6);
  $22 = (($21) + ($6<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = HEAP8[$this>>0]|0;
  $24 = $23 & 1;
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   $27 = $5 >>> 1;
   $28 = $27&255;
   HEAP8[$this>>0] = $28;
   STACKTOP = sp;return;
  } else {
   $26 = (($this) + 4|0);
   HEAP32[$26>>2] = $6;
   STACKTOP = sp;return;
  }
 }
 $29 = (($6) - ($14))|0;
 $30 = (1073741806 - ($14))|0;
 $31 = ($30>>>0)<($29>>>0);
 if ($31) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $32 = $16 & 1;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  $36 = (($this) + 4|0);
  $54 = $36;
 } else {
  $34 = (($this) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $54 = $35;
 }
 $37 = ($14>>>0)<(536870887);
 if ($37) {
  $38 = $14 << 1;
  $39 = ($6>>>0)<($38>>>0);
  $40 = $39 ? $38 : $6;
  $41 = ($40>>>0)<(2);
  if ($41) {
   $45 = 2;
  } else {
   $42 = (($40) + 4)|0;
   $43 = $42 & -4;
   $45 = $43;
  }
 } else {
  $45 = 1073741807;
 }
 $44 = $45 << 2;
 $46 = (__Znwj($44)|0);
 $47 = ($6|0)==(0);
 if (!($47)) {
  $$014$i$i$i = $6;$$023$i$i$i = $__s;$$05$i$i$i = $46;
  while(1) {
   $48 = (($$014$i$i$i) + -1)|0;
   $49 = (($$023$i$i$i) + 4|0);
   $50 = HEAP32[$$023$i$i$i>>2]|0;
   $51 = (($$05$i$i$i) + 4|0);
   HEAP32[$$05$i$i$i>>2] = $50;
   $52 = ($48|0)==(0);
   if ($52) {
    break;
   } else {
    $$014$i$i$i = $48;$$023$i$i$i = $49;$$05$i$i$i = $51;
   }
  }
 }
 $53 = ($14|0)==(1);
 if (!($53)) {
  _free($54);
 }
 $55 = (($this) + 8|0);
 HEAP32[$55>>2] = $46;
 $56 = $45 | 1;
 HEAP32[$this>>2] = $56;
 $57 = (($this) + 4|0);
 HEAP32[$57>>2] = $6;
 $58 = (($46) + ($6<<2)|0);
 HEAP32[$58>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this) {
 $this = $this|0;
 var $$014$i = 0, $$023$i = 0, $$05$i = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $19 = 1;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $19 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = ($14>>>0)<(2);
 if ($13) {
  $18 = 1;
 } else {
  $15 = (($14) + 4)|0;
  $16 = $15 & -4;
  $phitmp$i2 = (($16) + -1)|0;
  $18 = $phitmp$i2;
 }
 $17 = ($18|0)==($19|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $20 = ($18|0)==(1);
 do {
  if ($20) {
   $21 = (($this) + 4|0);
   $22 = (($this) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $40 = $7;$__new_data$1 = $21;$__now_long$0$off0 = 0;$__p$0 = $23;$__was_long$0$off0 = 1;
  } else {
   $24 = ($18>>>0)>($19>>>0);
   $25 = $18 << 2;
   $26 = (($25) + 4)|0;
   if ($24) {
    $27 = (__Znwj($26)|0);
    $$sink = $27;
   } else {
    __THREW__ = 0;
    $28 = (invoke_ii(375,($26|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     (___cxa_begin_catch(($31|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $28;
    }
   }
   $33 = HEAP8[$this>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $38 = (($this) + 4|0);
    $40 = $33;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 0;
    break;
   } else {
    $36 = (($this) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $40 = $33;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $37;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $39 = $40 & 1;
 $41 = ($39<<24>>24)==(0);
 if ($41) {
  $44 = $40&255;
  $45 = $44 >>> 1;
  $47 = $45;
 } else {
  $42 = (($this) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $47 = $43;
 }
 $46 = (($47) + 1)|0;
 $48 = ($46|0)==(0);
 if (!($48)) {
  $$014$i = $46;$$023$i = $__p$0;$$05$i = $__new_data$1;
  while(1) {
   $49 = (($$014$i) + -1)|0;
   $50 = (($$023$i) + 4|0);
   $51 = HEAP32[$$023$i>>2]|0;
   $52 = (($$05$i) + 4|0);
   HEAP32[$$05$i>>2] = $51;
   $53 = ($49|0)==(0);
   if ($53) {
    break;
   } else {
    $$014$i = $49;$$023$i = $50;$$05$i = $52;
   }
  }
 }
 if ($__was_long$0$off0) {
  _free($__p$0);
 }
 if ($__now_long$0$off0) {
  $54 = (($18) + 1)|0;
  $55 = $54 | 1;
  HEAP32[$this>>2] = $55;
  $56 = (($this) + 4|0);
  HEAP32[$56>>2] = $14;
  $57 = (($this) + 8|0);
  HEAP32[$57>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $58 = $14 << 1;
  $59 = $58&255;
  HEAP8[$this>>0] = $59;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$014$i = 0, $$014$i2 = 0, $$023$i = 0, $$023$i3 = 0, $$05$i = 0, $$05$i1 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $28 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $28 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  $$014$i = $__n_copy;$$023$i = $28;$$05$i = $18;
  while(1) {
   $20 = (($$014$i) + -1)|0;
   $21 = (($$023$i) + 4|0);
   $22 = HEAP32[$$023$i>>2]|0;
   $23 = (($$05$i) + 4|0);
   HEAP32[$$05$i>>2] = $22;
   $24 = ($20|0)==(0);
   if ($24) {
    break;
   } else {
    $$014$i = $20;$$023$i = $21;$$05$i = $23;
   }
  }
 }
 $25 = (($__old_sz) - ($__n_del))|0;
 $26 = ($25|0)==($__n_copy|0);
 if (!($26)) {
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($28) + ($$sum1<<2)|0);
  $29 = (($18) + ($$sum<<2)|0);
  $30 = (($25) - ($__n_copy))|0;
  $$014$i2 = $30;$$023$i3 = $27;$$05$i1 = $29;
  while(1) {
   $31 = (($$014$i2) + -1)|0;
   $32 = (($$023$i3) + 4|0);
   $33 = HEAP32[$$023$i3>>2]|0;
   $34 = (($$05$i1) + 4|0);
   HEAP32[$$05$i1>>2] = $33;
   $35 = ($31|0)==(0);
   if ($35) {
    break;
   } else {
    $$014$i2 = $31;$$023$i3 = $32;$$05$i1 = $34;
   }
  }
 }
 $36 = ($__old_cap|0)==(1);
 if ($36) {
  $37 = (($this) + 8|0);
  HEAP32[$37>>2] = $18;
  $38 = $17 | 1;
  HEAP32[$this>>2] = $38;
  STACKTOP = sp;return;
 }
 _free($28);
 $37 = (($this) + 8|0);
 HEAP32[$37>>2] = $18;
 $38 = $17 | 1;
 HEAP32[$this>>2] = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = $state | 1;
  $5 = (($this) + 16|0);
  HEAP32[$5>>2] = $4;
 } else {
  $3 = (($this) + 16|0);
  HEAP32[$3>>2] = $state;
 }
 $6 = $2&1;
 $7 = $6 | $state;
 $8 = (($this) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 $13 = HEAP8[4152>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $15 = (___cxa_guard_acquire((4152|0))|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   HEAP32[4144>>2] = ((4840 + 8|0));
   ___cxa_guard_release((4152|0));
  }
 }
 __THREW__ = 0;
 invoke_viiii(376,($12|0),1,(4144|0),(4200|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($19|0);
  // unreachable;
 } else {
  HEAP32[$12>>2] = ((4160 + 8|0));
  ___cxa_throw(($12|0),(4248|0),(70|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4184 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if (!($2)) {
   $3 = (($this) + 32|0);
   $4 = (($this) + 36|0);
   $i$01$i = $1;
   while(1) {
    $5 = (($i$01$i) + -1)|0;
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($5<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    invoke_viii($8|0,0,($this|0),($11|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    $14 = ($5|0)==(0);
    if ($14) {
     break L1;
    } else {
     $i$01$i = $5;
    }
   }
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   ___clang_call_terminate($31);
   // unreachable;
  }
 } while(0);
 $15 = (($this) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+-1)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = HEAP32[$16>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  FUNCTION_TABLE_vi[$22 & 511]($16);
 }
 $23 = (($this) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 $25 = (($this) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 _free($26);
 $27 = (($this) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = (($this) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 511]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 511]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 511]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 7;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = (($$01) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$01 = $14;$__i$02 = $13;
  } else {
   $__i$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 511]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $14 = (($$02) + 4|0);
  $15 = (($__i$01) + 1)|0;
  $16 = ($15|0)<($__n|0);
  if ($16) {
   $$02 = $14;$__i$01 = $15;
  } else {
   $__i$0$lcssa = $15;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum1$i = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum$i = (($2) + 16)|0;
 $7 = (($this) + ($$sum$i)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum1$i = (($2) + 72)|0;
   $10 = (($this) + ($$sum1$i)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 5;
   } else {
    __THREW__ = 0;
    invoke_vi(371,($11|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $36 = ___cxa_find_matching_catch(0|0)|0;
     $37 = tempRet0;
     $$0 = $36;
    } else {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $15 = HEAP32[$this>>2]|0;
    $16 = (($15) + -12|0);
    $17 = HEAP32[$16>>2]|0;
    $$sum1 = (($17) + 24)|0;
    $18 = (($this) + ($$sum1)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    __THREW__ = 0;
    $23 = (invoke_ii($22|0,($19|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $26 = ($23|0)==(-1);
     if (!($26)) {
      break;
     }
     $27 = HEAP32[$this>>2]|0;
     $28 = (($27) + -12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($this) + ($29)|0);
     $$sum2 = (($29) + 16)|0;
     $31 = (($this) + ($$sum2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $32 | 1;
     __THREW__ = 0;
     invoke_vii(377,($30|0),($33|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      break;
     }
    }
    $38 = ___cxa_find_matching_catch(0|0)|0;
    $39 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $38;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $40 = HEAP32[$this>>2]|0;
   $41 = (($40) + -12|0);
   $42 = HEAP32[$41>>2]|0;
   $$sum3 = (($42) + 16)|0;
   $43 = (($this) + ($$sum3)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 1;
   HEAP32[$43>>2] = $45;
   $$sum4 = (($42) + 20)|0;
   $46 = (($this) + ($$sum4)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 1;
   $49 = ($48|0)==(0);
   if ($49) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_v(378);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    // unreachable;
   }
   $52 = ___cxa_find_matching_catch()|0;
   $53 = tempRet0;
   __THREW__ = 0;
   invoke_v(379);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   } else {
    ___resumeException($52|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum$i = 0, $$sum1 = 0, $$sum1$i = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP8[$__s>>0] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum$i = (($2) + 16)|0;
 $7 = (($this) + ($$sum$i)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum1$i = (($2) + 72)|0;
   $10 = (($this) + ($$sum1$i)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 5;
   } else {
    __THREW__ = 0;
    invoke_vi(372,($11|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $36 = ___cxa_find_matching_catch(0|0)|0;
     $37 = tempRet0;
     $$0 = $36;
    } else {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    HEAP8[$__s>>0] = 1;
    $15 = HEAP32[$this>>2]|0;
    $16 = (($15) + -12|0);
    $17 = HEAP32[$16>>2]|0;
    $$sum1 = (($17) + 24)|0;
    $18 = (($this) + ($$sum1)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    __THREW__ = 0;
    $23 = (invoke_ii($22|0,($19|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     $26 = ($23|0)==(-1);
     if (!($26)) {
      break;
     }
     $27 = HEAP32[$this>>2]|0;
     $28 = (($27) + -12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($this) + ($29)|0);
     $$sum2 = (($29) + 16)|0;
     $31 = (($this) + ($$sum2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $32 | 1;
     __THREW__ = 0;
     invoke_vii(377,($30|0),($33|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if (!($35)) {
      break;
     }
    }
    $38 = ___cxa_find_matching_catch(0|0)|0;
    $39 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $38;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $40 = HEAP32[$this>>2]|0;
   $41 = (($40) + -12|0);
   $42 = HEAP32[$41>>2]|0;
   $$sum3 = (($42) + 16)|0;
   $43 = (($this) + ($$sum3)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 1;
   HEAP32[$43>>2] = $45;
   $$sum4 = (($42) + 20)|0;
   $46 = (($this) + ($$sum4)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 1;
   $49 = ($48|0)==(0);
   if ($49) {
    ___cxa_end_catch();
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_v(378);
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if (!($51)) {
    // unreachable;
   }
   $52 = ___cxa_find_matching_catch()|0;
   $53 = tempRet0;
   __THREW__ = 0;
   invoke_v(379);
   $54 = __THREW__; __THREW__ = 0;
   $55 = $54&1;
   if ($55) {
    $56 = ___cxa_find_matching_catch(0|0)|0;
    $57 = tempRet0;
    ___clang_call_terminate($56);
    // unreachable;
   } else {
    ___resumeException($52|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(377,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(379);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 _free($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(377,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(379);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (4088|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $2 = (_strerror(($ev|0))|0);
  $3 = (_strlen(($2|0))|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$2,$3);
  STACKTOP = sp;return;
 } else {
  $4 = (__Znwj(48)|0);
  $5 = (($agg$result) + 8|0);
  HEAP32[$5>>2] = $4;
  HEAP32[$agg$result>>2] = 49;
  $6 = (($agg$result) + 4|0);
  HEAP32[$6>>2] = 35;
  dest=$4+0|0; src=4104+0|0; stop=dest+35|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $7 = (($4) + 35|0);
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx14 = 0, $$idx14$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 40|0;
 $__lv = sp + 44|0;
 $0 = sp + 48|0;
 $1 = sp + 4|0;
 $2 = sp;
 $__names = sp + 16|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 __THREW__ = 0;
 $18 = (invoke_ii(380,(6552|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $$idx13 = (($15) + 8|0);
  $$idx13$val = HEAP32[$$idx13>>2]|0;
  $$idx14 = (($15) + 12|0);
  $$idx14$val = HEAP32[$$idx14>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_iiii(381,($$idx13$val|0),($$idx14$val|0),($18|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = (($15) + 4|0);
   $25 = HEAP32[$24>>2]|0;HEAP32[$24>>2] = (($25+-1)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$15>>2]|0;
    $28 = (($27) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    FUNCTION_TABLE_vi[$29 & 511]($15);
   }
   $30 = HEAP32[$14>>2]|0;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;HEAP32[$31>>2] = (($32+1)|0);
   __THREW__ = 0;
   $33 = (invoke_ii(380,(6696|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $$idx = (($30) + 8|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $$idx12 = (($30) + 12|0);
    $$idx12$val = HEAP32[$$idx12>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iiii(381,($$idx$val|0),($$idx12$val|0),($33|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = (($30) + 4|0);
     $40 = HEAP32[$39>>2]|0;HEAP32[$39>>2] = (($40+-1)|0);
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$30>>2]|0;
      $43 = (($42) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      FUNCTION_TABLE_vi[$44 & 511]($30);
     }
     $45 = HEAP32[$36>>2]|0;
     $46 = (($45) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     invoke_vii($47|0,($__names|0),($36|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $$02 = $__names;
     } else {
      $50 = (($__names) + 12|0);
      $51 = HEAP32[$36>>2]|0;
      $52 = (($51) + 28|0);
      $53 = HEAP32[$52>>2]|0;
      __THREW__ = 0;
      invoke_vii($53|0,($50|0),($36|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $$02 = $50;
      } else {
       $56 = HEAP32[$__e>>2]|0;
       $57 = (($__names) + 24|0);
       __THREW__ = 0;
       $58 = (invoke_iiiiiiii(382,($__b|0),($56|0),($__names|0),($57|0),($21|0),($__err|0),1)|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        $101 = ___cxa_find_matching_catch()|0;
        $102 = tempRet0;
        $103 = HEAP8[$50>>0]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        if (!($105)) {
         $106 = (($__names) + 20|0);
         $107 = HEAP32[$106>>2]|0;
         _free($107);
        }
        $108 = HEAP8[$__names>>0]|0;
        $109 = $108 & 1;
        $110 = ($109<<24>>24)==(0);
        if (!($110)) {
         $111 = (($__names) + 8|0);
         $112 = HEAP32[$111>>2]|0;
         _free($112);
        }
        $$0 = $101;$$01 = $102;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $61 = ($58|0)==($__names|0);
        $62 = $61&1;
        HEAP8[$__v>>0] = $62;
        $63 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $63;
        $64 = HEAP8[$50>>0]|0;
        $65 = $64 & 1;
        $66 = ($65<<24>>24)==(0);
        if (!($66)) {
         $67 = (($__names) + 20|0);
         $68 = HEAP32[$67>>2]|0;
         _free($68);
        }
        $69 = HEAP8[$__names>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         STACKTOP = sp;return;
        }
        $72 = (($__names) + 8|0);
        $73 = HEAP32[$72>>2]|0;
        _free($73);
        STACKTOP = sp;return;
       }
      }
     }
     $90 = ___cxa_find_matching_catch()|0;
     $91 = tempRet0;
     $92 = ($__names|0)==($$02|0);
     if ($92) {
      $$0 = $90;$$01 = $91;
      ___resumeException($$0|0);
      // unreachable;
     } else {
      $94 = $$02;
     }
     while(1) {
      $93 = (($94) + -12|0);
      $95 = HEAP8[$93>>0]|0;
      $96 = $95 & 1;
      $97 = ($96<<24>>24)==(0);
      if (!($97)) {
       $98 = (($94) + -4|0);
       $99 = HEAP32[$98>>2]|0;
       _free($99);
      }
      $100 = ($93|0)==($__names|0);
      if ($100) {
       $$0 = $90;$$01 = $91;
       break;
      } else {
       $94 = $93;
      }
     }
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $82 = ___cxa_find_matching_catch()|0;
   $83 = tempRet0;
   $84 = (($30) + 4|0);
   $85 = HEAP32[$84>>2]|0;HEAP32[$84>>2] = (($85+-1)|0);
   $86 = ($85|0)==(0);
   if (!($86)) {
    $$0 = $82;$$01 = $83;
    ___resumeException($$0|0);
    // unreachable;
   }
   $87 = HEAP32[$30>>2]|0;
   $88 = (($87) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   FUNCTION_TABLE_vi[$89 & 511]($30);
   $$0 = $82;$$01 = $83;
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $74 = ___cxa_find_matching_catch()|0;
 $75 = tempRet0;
 $76 = (($15) + 4|0);
 $77 = HEAP32[$76>>2]|0;HEAP32[$76>>2] = (($77+-1)|0);
 $78 = ($77|0)==(0);
 if (!($78)) {
  $$0 = $74;$$01 = $75;
  ___resumeException($$0|0);
  // unreachable;
 }
 $79 = HEAP32[$15>>2]|0;
 $80 = (($79) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 FUNCTION_TABLE_vi[$81 & 511]($15);
 $$0 = $74;$$01 = $75;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(384,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($29) {
     $148 = 0;
    } else {
     $135 = (($30) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($30) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$30>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($30|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 36;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $30;
      $148 = $$;
     } else {
      $148 = $30;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 36;
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 65;
      } else {
       if (!($147)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($147) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0;
 var $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(385,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = tempRet0;
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 36;
   } else {
    $135 = $__v;
    $136 = $135;
    HEAP32[$136>>2] = $131;
    $137 = (($135) + 4)|0;
    $138 = $137;
    HEAP32[$138>>2] = $132;
    $139 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$139,$__err);
    if ($29) {
     $153 = 0;
    } else {
     $140 = (($30) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($30) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$30>>2]|0;
      $146 = (($145) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_ii($147|0,($30|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       label = 36;
       break;
      }
      $151 = ($148|0)==(-1);
      $$ = $151 ? 0 : $30;
      $153 = $$;
     } else {
      $153 = $30;
     }
    }
    $152 = ($153|0)==(0|0);
    $154 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($154) {
      label = 65;
     } else {
      $155 = (($$pre$i2$i$i$i) + 12|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($$pre$i2$i$i$i) + 16|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($156|0)==($158|0);
      if (!($159)) {
       if ($152) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $160 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $161 = (($160) + 36|0);
      $162 = HEAP32[$161>>2]|0;
      __THREW__ = 0;
      $163 = (invoke_ii($162|0,($$pre$i2$i$i$i|0))|0);
      $164 = __THREW__; __THREW__ = 0;
      $165 = $164&1;
      if ($165) {
       label = 36;
       break L6;
      }
      $166 = ($163|0)==(-1);
      if ($166) {
       label = 65;
      } else {
       if (!($152)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($152) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $167 = HEAP32[$__err>>2]|0;
     $168 = $167 | 2;
     HEAP32[$__err>>2] = $168;
    }
    HEAP32[$agg$result>>2] = $153;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     _free($173);
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(386,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 36;
   } else {
    HEAP16[$__v>>1] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($29) {
     $148 = 0;
    } else {
     $135 = (($30) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($30) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$30>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($30|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 36;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $30;
      $148 = $$;
     } else {
      $148 = $30;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 36;
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 65;
      } else {
       if (!($147)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($147) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(387,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($29) {
     $148 = 0;
    } else {
     $135 = (($30) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($30) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$30>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($30|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 36;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $30;
      $148 = $$;
     } else {
      $148 = $30;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 36;
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 65;
      } else {
       if (!($147)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($147) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(388,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 36;
   } else {
    HEAP32[$__v>>2] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($29) {
     $148 = 0;
    } else {
     $135 = (($30) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($30) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$30>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($30|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 36;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $30;
      $148 = $$;
     } else {
      $148 = $30;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 36;
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 65;
      } else {
       if (!($147)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($147) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i4$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$pre$i$i$i4$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi30$iZ2D = 0, $$pre$phi32$iZ2D = 0, $$pre29$i = 0, $$pre31$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0;
 var $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i19$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 198|0;
 $__thousands_sep$i = sp + 196|0;
 $__grouping$i = sp + 16|0;
 $__buf$i = sp + 4|0;
 $__a_end$i = sp + 192|0;
 $__g$i = sp + 32|0;
 $__g_end$i = sp;
 $__dc$i = sp + 28|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if ($6) {
   label = 36;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre31$i = (($__buf$i) + 8|0);
    $$pre$phi30$iZ2D = $12;$$pre$phi32$iZ2D = $$pre31$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre29$i = (($__buf$i) + 1|0);
    $$pre$phi30$iZ2D = $$pre29$i;$$pre$phi32$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i4$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   L12: while(1) {
    $16 = ($$pre$i$i$i4$i|0)==(0|0);
    if ($16) {
     $30 = 0;
    } else {
     $17 = (($$pre$i$i$i4$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i4$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i4$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i4$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 35;
       break;
      }
      $28 = ($25|0)==(-1);
      $$$pre$i$i$i4$i = $28 ? 0 : $$pre$i$i$i4$i;
      $30 = $$$pre$i$i$i4$i;
     } else {
      $30 = $$pre$i$i$i4$i;
     }
    }
    $29 = ($30|0)==(0|0);
    $31 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($31) {
      label = 19;
     } else {
      $32 = (($$sroa$06$0) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($$sroa$06$0) + 16|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33|0)==($35|0);
      if (!($36)) {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
      $37 = HEAP32[$$sroa$06$0>>2]|0;
      $38 = (($37) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      $40 = (invoke_ii($39|0,($$sroa$06$0|0))|0);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       label = 35;
       break L12;
      }
      $43 = ($40|0)==(-1);
      if ($43) {
       label = 19;
      } else {
       if ($29) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     if ($29) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 35;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i19$i = (($65) + -1)|0;
      $66 = $phitmp$i19$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 35;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi30$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi32$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($30) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($30) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($90|0)==($92|0);
    if ($93) {
     $94 = HEAP32[$30>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     __THREW__ = 0;
     $97 = (invoke_ii($96|0,($30|0))|0);
     $98 = __THREW__; __THREW__ = 0;
     $99 = $98&1;
     if ($99) {
      label = 35;
      break;
     } else {
      $$0$i$i$i = $97;
     }
    } else {
     $100 = HEAP8[$90>>0]|0;
     $101 = $100&255;
     $$0$i$i$i = $101;
    }
    $102 = $$0$i$i$i&255;
    $103 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($102,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $105 = HEAP32[$89>>2]|0;
    $106 = HEAP32[$91>>2]|0;
    $107 = ($105|0)==($106|0);
    if ($107) {
     $108 = HEAP32[$30>>2]|0;
     $109 = (($108) + 40|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     (invoke_ii($110|0,($30|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 35;
      break;
     } else {
      $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $113 = (($105) + 1|0);
     HEAP32[$89>>2] = $113;
     $$pre$i$i$i4$i = $30;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 35) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $114 = HEAP8[$__grouping$i>>0]|0;
   $115 = $114 & 1;
   $116 = ($115<<24>>24)==(0);
   if ($116) {
    $119 = $114&255;
    $120 = $119 >>> 1;
    $122 = $120;
   } else {
    $117 = (($__grouping$i) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $122 = $118;
   }
   $121 = ($122|0)==(0);
   if (!($121)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (invoke_iiiii(389,($__a$2$i|0),($130|0),($__err|0),($$0$i$i|0))|0);
   $132 = tempRet0;
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 36;
   } else {
    $135 = $__v;
    $136 = $135;
    HEAP32[$136>>2] = $131;
    $137 = (($135) + 4)|0;
    $138 = $137;
    HEAP32[$138>>2] = $132;
    $139 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$139,$__err);
    if ($29) {
     $153 = 0;
    } else {
     $140 = (($30) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($30) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$30>>2]|0;
      $146 = (($145) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_ii($147|0,($30|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       label = 36;
       break;
      }
      $151 = ($148|0)==(-1);
      $$ = $151 ? 0 : $30;
      $153 = $$;
     } else {
      $153 = $30;
     }
    }
    $152 = ($153|0)==(0|0);
    $154 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($154) {
      label = 65;
     } else {
      $155 = (($$pre$i2$i$i$i) + 12|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (($$pre$i2$i$i$i) + 16|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($156|0)==($158|0);
      if (!($159)) {
       if ($152) {
        break;
       } else {
        label = 67;
        break;
       }
      }
      $160 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $161 = (($160) + 36|0);
      $162 = HEAP32[$161>>2]|0;
      __THREW__ = 0;
      $163 = (invoke_ii($162|0,($$pre$i2$i$i$i|0))|0);
      $164 = __THREW__; __THREW__ = 0;
      $165 = $164&1;
      if ($165) {
       label = 36;
       break L6;
      }
      $166 = ($163|0)==(-1);
      if ($166) {
       label = 65;
      } else {
       if (!($152)) {
        label = 67;
       }
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if ($152) {
      label = 67;
     }
    }
    if ((label|0) == 67) {
     $167 = HEAP32[$__err>>2]|0;
     $168 = $167 | 2;
     HEAP32[$__err>>2] = $168;
    }
    HEAP32[$agg$result>>2] = $153;
    $169 = HEAP8[$__buf$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if (!($171)) {
     $172 = (($__buf$i) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     _free($173);
    }
    $174 = HEAP8[$__grouping$i>>0]|0;
    $175 = $174 & 1;
    $176 = ($175<<24>>24)==(0);
    if ($176) {
     STACKTOP = sp;return;
    }
    $177 = (($__grouping$i) + 8|0);
    $178 = HEAP32[$177>>2]|0;
    _free($178);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$pre30$i = 0, $$pre32$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 240|0;
 $__grouping$i = sp;
 $__buf$i = sp + 188|0;
 $__a_end$i = sp + 184|0;
 $__g$i = sp + 16|0;
 $__g_end$i = sp + 176|0;
 $__dc$i = sp + 180|0;
 $__in_units$i = sp + 241|0;
 $__exp$i = sp + 242|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre32$i = (($__buf$i) + 8|0);
    $$pre$phi31$iZ2D = $9;$$pre$phi33$iZ2D = $$pre32$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre30$i = (($__buf$i) + 1|0);
    $$pre$phi31$iZ2D = $$pre30$i;$$pre$phi33$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i5$i = $26 ? 0 : $$pre$i$i$i5$i;
      $28 = $$$pre$i$i$i5$i;
     } else {
      $28 = $$pre$i$i$i5$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 31;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i20$i = (($63) + -1)|0;
      $64 = $phitmp$i20$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 31;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi31$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi33$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($28) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($28) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($88|0)==($90|0);
    if ($91) {
     $92 = HEAP32[$28>>2]|0;
     $93 = (($92) + 36|0);
     $94 = HEAP32[$93>>2]|0;
     __THREW__ = 0;
     $95 = (invoke_ii($94|0,($28|0))|0);
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $95;
     }
    } else {
     $98 = HEAP8[$88>>0]|0;
     $99 = $98&255;
     $$0$i$i$i = $99;
    }
    $100 = $$0$i$i$i&255;
    $101 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($100,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $102 = ($101|0)==(0);
    if (!($102)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $103 = HEAP32[$87>>2]|0;
    $104 = HEAP32[$89>>2]|0;
    $105 = ($103|0)==($104|0);
    if ($105) {
     $106 = HEAP32[$28>>2]|0;
     $107 = (($106) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     __THREW__ = 0;
     (invoke_ii($108|0,($28|0))|0);
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $111 = (($103) + 1|0);
     HEAP32[$87>>2] = $111;
     $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $112 = HEAP8[$__grouping$i>>0]|0;
   $113 = $112 & 1;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $117 = $112&255;
    $118 = $117 >>> 1;
    $120 = $118;
   } else {
    $115 = (($__grouping$i) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $120 = $116;
   }
   $119 = ($120|0)==(0);
   $121 = HEAP8[$__in_units$i>>0]|0;
   $122 = ($121<<24>>24)==(0);
   $or$cond$i = $119 | $122;
   if (!($or$cond$i)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (+invoke_diii(390,($__a$2$i|0),($130|0),($__err|0)));
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 32;
   } else {
    HEAPF32[$__v>>2] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($27) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 32;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $28;
      $148 = $$;
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 61;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 63;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 32;
       break L1;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 61;
      } else {
       if (!($147)) {
        label = 63;
       }
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if ($147) {
      label = 63;
     }
    }
    if ((label|0) == 63) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$pre30$i = 0, $$pre32$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 240|0;
 $__grouping$i = sp;
 $__buf$i = sp + 188|0;
 $__a_end$i = sp + 184|0;
 $__g$i = sp + 16|0;
 $__g_end$i = sp + 176|0;
 $__dc$i = sp + 180|0;
 $__in_units$i = sp + 241|0;
 $__exp$i = sp + 242|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre32$i = (($__buf$i) + 8|0);
    $$pre$phi31$iZ2D = $9;$$pre$phi33$iZ2D = $$pre32$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre30$i = (($__buf$i) + 1|0);
    $$pre$phi31$iZ2D = $$pre30$i;$$pre$phi33$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i5$i = $26 ? 0 : $$pre$i$i$i5$i;
      $28 = $$$pre$i$i$i5$i;
     } else {
      $28 = $$pre$i$i$i5$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 31;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i20$i = (($63) + -1)|0;
      $64 = $phitmp$i20$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 31;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi31$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi33$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($28) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($28) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($88|0)==($90|0);
    if ($91) {
     $92 = HEAP32[$28>>2]|0;
     $93 = (($92) + 36|0);
     $94 = HEAP32[$93>>2]|0;
     __THREW__ = 0;
     $95 = (invoke_ii($94|0,($28|0))|0);
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $95;
     }
    } else {
     $98 = HEAP8[$88>>0]|0;
     $99 = $98&255;
     $$0$i$i$i = $99;
    }
    $100 = $$0$i$i$i&255;
    $101 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($100,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $102 = ($101|0)==(0);
    if (!($102)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $103 = HEAP32[$87>>2]|0;
    $104 = HEAP32[$89>>2]|0;
    $105 = ($103|0)==($104|0);
    if ($105) {
     $106 = HEAP32[$28>>2]|0;
     $107 = (($106) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     __THREW__ = 0;
     (invoke_ii($108|0,($28|0))|0);
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $111 = (($103) + 1|0);
     HEAP32[$87>>2] = $111;
     $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $112 = HEAP8[$__grouping$i>>0]|0;
   $113 = $112 & 1;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $117 = $112&255;
    $118 = $117 >>> 1;
    $120 = $118;
   } else {
    $115 = (($__grouping$i) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $120 = $116;
   }
   $119 = ($120|0)==(0);
   $121 = HEAP8[$__in_units$i>>0]|0;
   $122 = ($121<<24>>24)==(0);
   $or$cond$i = $119 | $122;
   if (!($or$cond$i)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (+invoke_diii(391,($__a$2$i|0),($130|0),($__err|0)));
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($27) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 32;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $28;
      $148 = $$;
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 61;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 63;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 32;
       break L1;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 61;
      } else {
       if (!($147)) {
        label = 63;
       }
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if ($147) {
      label = 63;
     }
    }
    if ((label|0) == 63) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i$i = 0, $$pre$i$i$i5$i = 0, $$pre$i2$i$i$i = 0, $$pre$phi31$iZ2D = 0, $$pre$phi33$iZ2D = 0, $$pre30$i = 0, $$pre32$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i20$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 200|0;
 $__thousands_sep$i = sp + 240|0;
 $__grouping$i = sp;
 $__buf$i = sp + 188|0;
 $__a_end$i = sp + 184|0;
 $__g$i = sp + 16|0;
 $__g_end$i = sp + 176|0;
 $__dc$i = sp + 180|0;
 $__in_units$i = sp + 241|0;
 $__exp$i = sp + 242|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 32;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre32$i = (($__buf$i) + 8|0);
    $$pre$phi31$iZ2D = $9;$$pre$phi33$iZ2D = $$pre32$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre30$i = (($__buf$i) + 1|0);
    $$pre$phi31$iZ2D = $$pre30$i;$$pre$phi33$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP8[$__decimal_point$i>>0]|0;
   $13 = HEAP8[$__thousands_sep$i>>0]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   L7: while(1) {
    $14 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i5$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 31;
       break;
      }
      $26 = ($23|0)==(-1);
      $$$pre$i$i$i5$i = $26 ? 0 : $$pre$i$i$i5$i;
      $28 = $$$pre$i$i$i5$i;
     } else {
      $28 = $$pre$i$i$i5$i;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = ($$sroa$06$0|0)==(0|0);
    do {
     if ($29) {
      label = 15;
     } else {
      $30 = (($$sroa$06$0) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($$sroa$06$0) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if (!($34)) {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
        break;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
      $35 = HEAP32[$$sroa$06$0>>2]|0;
      $36 = (($35) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      $38 = (invoke_ii($37|0,($$sroa$06$0|0))|0);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 31;
       break L7;
      }
      $41 = ($38|0)==(-1);
      if ($41) {
       label = 15;
      } else {
       if ($27) {
        $$sroa$06$2 = $$sroa$06$0;
       } else {
        $$pre$i2$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 31;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i20$i = (($63) + -1)|0;
      $64 = $phitmp$i20$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 31;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi31$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi33$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($28) + 12|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($28) + 16|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($88|0)==($90|0);
    if ($91) {
     $92 = HEAP32[$28>>2]|0;
     $93 = (($92) + 36|0);
     $94 = HEAP32[$93>>2]|0;
     __THREW__ = 0;
     $95 = (invoke_ii($94|0,($28|0))|0);
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      label = 31;
      break;
     } else {
      $$0$i$i$i = $95;
     }
    } else {
     $98 = HEAP8[$88>>0]|0;
     $99 = $98&255;
     $$0$i$i$i = $99;
    }
    $100 = $$0$i$i$i&255;
    $101 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($100,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $102 = ($101|0)==(0);
    if (!($102)) {
     $$pre$i2$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $103 = HEAP32[$87>>2]|0;
    $104 = HEAP32[$89>>2]|0;
    $105 = ($103|0)==($104|0);
    if ($105) {
     $106 = HEAP32[$28>>2]|0;
     $107 = (($106) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     __THREW__ = 0;
     (invoke_ii($108|0,($28|0))|0);
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      label = 31;
      break;
     } else {
      $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $111 = (($103) + 1|0);
     HEAP32[$87>>2] = $111;
     $$pre$i$i$i5$i = $28;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 31) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $112 = HEAP8[$__grouping$i>>0]|0;
   $113 = $112 & 1;
   $114 = ($113<<24>>24)==(0);
   if ($114) {
    $117 = $112&255;
    $118 = $117 >>> 1;
    $120 = $118;
   } else {
    $115 = (($__grouping$i) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $120 = $116;
   }
   $119 = ($120|0)==(0);
   $121 = HEAP8[$__in_units$i>>0]|0;
   $122 = ($121<<24>>24)==(0);
   $or$cond$i = $119 | $122;
   if (!($or$cond$i)) {
    $123 = HEAP32[$__g_end$i>>2]|0;
    $124 = $123;
    $125 = $__g$i;
    $126 = (($124) - ($125))|0;
    $127 = ($126|0)<(160);
    if ($127) {
     $128 = HEAP32[$__dc$i>>2]|0;
     $129 = (($123) + 4|0);
     HEAP32[$__g_end$i>>2] = $129;
     HEAP32[$123>>2] = $128;
    }
   }
   $130 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $131 = (+invoke_diii(392,($__a$2$i|0),($130|0),($__err|0)));
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 32;
   } else {
    HEAPF64[$__v>>3] = $131;
    $134 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$134,$__err);
    if ($27) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 32;
       break;
      }
      $146 = ($143|0)==(-1);
      $$ = $146 ? 0 : $28;
      $148 = $$;
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 61;
     } else {
      $150 = (($$pre$i2$i$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if ($147) {
        break;
       } else {
        label = 63;
        break;
       }
      }
      $155 = HEAP32[$$pre$i2$i$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       label = 32;
       break L1;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       label = 61;
      } else {
       if (!($147)) {
        label = 63;
       }
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if ($147) {
      label = 63;
     }
    }
    if ((label|0) == 63) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $148;
    $164 = HEAP8[$__buf$i>>0]|0;
    $165 = $164 & 1;
    $166 = ($165<<24>>24)==(0);
    if (!($166)) {
     $167 = (($__buf$i) + 8|0);
     $168 = HEAP32[$167>>2]|0;
     _free($168);
    }
    $169 = HEAP8[$__grouping$i>>0]|0;
    $170 = $169 & 1;
    $171 = ($170<<24>>24)==(0);
    if ($171) {
     STACKTOP = sp;return;
    }
    $172 = (($__grouping$i) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    _free($173);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$idx = 0, $$idx$val = 0, $$idx8 = 0, $$idx8$val = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 204|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 196|0;
 $__dc = sp + 200|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  label = 38;
 } else {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx8 = (($1) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx8$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 38;
  } else {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 26|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 38;
   } else {
    $15 = (($1) + 4|0);
    $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+-1)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[$1>>2]|0;
     $19 = (($18) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     FUNCTION_TABLE_vi[$20 & 511]($1);
    }
    ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
    __THREW__ = 0;
    invoke_vii(383,($__buf|0),10);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    L8: do {
     if ($22) {
      label = 41;
     } else {
      $23 = HEAP8[$__buf>>0]|0;
      $24 = $23 & 1;
      $25 = ($24<<24>>24)==(0);
      if ($25) {
       $28 = (($__buf) + 1|0);
       $$pre36 = (($__buf) + 8|0);
       $$pre$phi35Z2D = $28;$$pre$phi37Z2D = $$pre36;$29 = $28;
      } else {
       $26 = (($__buf) + 8|0);
       $27 = HEAP32[$26>>2]|0;
       $$pre34 = (($__buf) + 1|0);
       $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $26;$29 = $27;
      }
      HEAP32[$__a_end>>2] = $29;
      HEAP32[$__g_end>>2] = $__g;
      HEAP32[$__dc>>2] = 0;
      $30 = (($__buf) + 4|0);
      $$pre = HEAP32[$__b>>2]|0;
      $$pre$i$i$i8 = $$pre;$__a$0 = $29;
      L14: while(1) {
       $31 = ($$pre$i$i$i8|0)==(0|0);
       if ($31) {
        $45 = 0;
       } else {
        $32 = (($$pre$i$i$i8) + 12|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (($$pre$i$i$i8) + 16|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($33|0)==($35|0);
        if ($36) {
         $37 = HEAP32[$$pre$i$i$i8>>2]|0;
         $38 = (($37) + 36|0);
         $39 = HEAP32[$38>>2]|0;
         __THREW__ = 0;
         $40 = (invoke_ii($39|0,($$pre$i$i$i8|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          label = 40;
          break;
         }
         $43 = ($40|0)==(-1);
         if ($43) {
          HEAP32[$__b>>2] = 0;
          $45 = 0;
         } else {
          $45 = $$pre$i$i$i8;
         }
        } else {
         $45 = $$pre$i$i$i8;
        }
       }
       $44 = ($45|0)==(0|0);
       $46 = HEAP32[$__e>>2]|0;
       $47 = ($46|0)==(0|0);
       do {
        if ($47) {
         label = 22;
        } else {
         $48 = (($46) + 12|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = (($46) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)==($51|0);
         if (!($52)) {
          if ($44) {
           $195 = $46;
           break;
          } else {
           $$pre$i2$i$i = $46;$__a$2 = $__a$0;
           break L14;
          }
         }
         $53 = HEAP32[$46>>2]|0;
         $54 = (($53) + 36|0);
         $55 = HEAP32[$54>>2]|0;
         __THREW__ = 0;
         $56 = (invoke_ii($55|0,($46|0))|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 40;
          break L14;
         }
         $59 = ($56|0)==(-1);
         if ($59) {
          HEAP32[$__e>>2] = 0;
          label = 22;
          break;
         } else {
          if ($44) {
           $195 = $46;
           break;
          } else {
           $$pre$i2$i$i = $46;$__a$2 = $__a$0;
           break L14;
          }
         }
        }
       } while(0);
       if ((label|0) == 22) {
        label = 0;
        if ($44) {
         $$pre$i2$i$i = 0;$__a$2 = $__a$0;
         break;
        } else {
         $195 = 0;
        }
       }
       $60 = HEAP32[$__a_end>>2]|0;
       $61 = HEAP8[$__buf>>0]|0;
       $62 = $61 & 1;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $65 = $61&255;
        $66 = $65 >>> 1;
        $68 = $66;
       } else {
        $64 = HEAP32[$30>>2]|0;
        $68 = $64;
       }
       $67 = (($__a$0) + ($68)|0);
       $69 = ($60|0)==($67|0);
       if ($69) {
        if ($63) {
         $71 = $61&255;
         $72 = $71 >>> 1;
         $74 = $72;
        } else {
         $70 = HEAP32[$30>>2]|0;
         $74 = $70;
        }
        $73 = $74 << 1;
        __THREW__ = 0;
        invoke_vii(383,($__buf|0),($73|0));
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 40;
         break;
        }
        $77 = HEAP8[$__buf>>0]|0;
        $78 = $77 & 1;
        $79 = ($78<<24>>24)==(0);
        if ($79) {
         $82 = 10;
        } else {
         $80 = HEAP32[$__buf>>2]|0;
         $81 = $80 & -2;
         $phitmp$i24 = (($81) + -1)|0;
         $82 = $phitmp$i24;
        }
        __THREW__ = 0;
        invoke_vii(383,($__buf|0),($82|0));
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 40;
         break;
        }
        $85 = HEAP8[$__buf>>0]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $$pre$phi35Z2D;
        } else {
         $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
         $90 = $88;
        }
        $89 = (($90) + ($74)|0);
        HEAP32[$__a_end>>2] = $89;
        $__a$1 = $90;
       } else {
        $__a$1 = $__a$0;
       }
       $108 = (($45) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($45) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$45>>2]|0;
        $114 = (($113) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        __THREW__ = 0;
        $116 = (invoke_ii($115|0,($45|0))|0);
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         label = 40;
         break;
        } else {
         $$0$i$i = $116;
        }
       } else {
        $119 = HEAP8[$109>>0]|0;
        $120 = $119&255;
        $$0$i$i = $120;
       }
       $121 = $$0$i$i&255;
       $122 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($121,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
       $123 = ($122|0)==(0);
       if (!($123)) {
        $$pre$i2$i$i = $195;$__a$2 = $__a$1;
        break;
       }
       $124 = HEAP32[$108>>2]|0;
       $125 = HEAP32[$110>>2]|0;
       $126 = ($124|0)==($125|0);
       if ($126) {
        $127 = HEAP32[$45>>2]|0;
        $128 = (($127) + 40|0);
        $129 = HEAP32[$128>>2]|0;
        __THREW__ = 0;
        (invoke_ii($129|0,($45|0))|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 40;
         break;
        } else {
         $$pre$i$i$i8 = $45;$__a$0 = $__a$1;
         continue;
        }
       } else {
        $132 = (($124) + 1|0);
        HEAP32[$108>>2] = $132;
        $$pre$i$i$i8 = $45;$__a$0 = $__a$1;
        continue;
       }
      }
      if ((label|0) == 40) {
       $99 = ___cxa_find_matching_catch()|0;
       $100 = tempRet0;
       $lpad$phi$index = $99;$lpad$phi$index2 = $100;
       break;
      }
      $133 = HEAP32[$__a_end>>2]|0;
      $134 = $133;
      $135 = $__a$2;
      $136 = (($134) - ($135))|0;
      __THREW__ = 0;
      invoke_vii(383,($__buf|0),($136|0));
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 41;
      } else {
       $139 = HEAP8[$__buf>>0]|0;
       $140 = $139 & 1;
       $141 = ($140<<24>>24)==(0);
       if ($141) {
        $146 = $$pre$phi35Z2D;
       } else {
        $142 = HEAP32[$$pre$phi37Z2D>>2]|0;
        $146 = $142;
       }
       __THREW__ = 0;
       $143 = (invoke_i(393)|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 41;
       } else {
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $__v;
        $147 = (invoke_iiii(394,($146|0),($143|0),($vararg_buffer|0))|0);
        $148 = __THREW__; __THREW__ = 0;
        $149 = $148&1;
        if ($149) {
         label = 41;
        } else {
         $150 = ($147|0)==(1);
         if (!($150)) {
          HEAP32[$__err>>2] = 4;
         }
         if ($44) {
          $164 = 0;
         } else {
          $151 = (($45) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($45) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$45>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($45|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 41;
            break;
           }
           $162 = ($159|0)==(-1);
           if ($162) {
            HEAP32[$__b>>2] = 0;
            $164 = 0;
           } else {
            $164 = $45;
           }
          } else {
           $164 = $45;
          }
         }
         $163 = ($164|0)==(0|0);
         $165 = ($$pre$i2$i$i|0)==(0|0);
         do {
          if ($165) {
           label = 69;
          } else {
           $166 = (($$pre$i2$i$i) + 12|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = (($$pre$i2$i$i) + 16|0);
           $169 = HEAP32[$168>>2]|0;
           $170 = ($167|0)==($169|0);
           if (!($170)) {
            if ($163) {
             break;
            } else {
             label = 71;
             break;
            }
           }
           $171 = HEAP32[$$pre$i2$i$i>>2]|0;
           $172 = (($171) + 36|0);
           $173 = HEAP32[$172>>2]|0;
           __THREW__ = 0;
           $174 = (invoke_ii($173|0,($$pre$i2$i$i|0))|0);
           $175 = __THREW__; __THREW__ = 0;
           $176 = $175&1;
           if ($176) {
            label = 41;
            break L8;
           }
           $177 = ($174|0)==(-1);
           if ($177) {
            HEAP32[$__e>>2] = 0;
            label = 69;
            break;
           } else {
            if ($163) {
             break;
            } else {
             label = 71;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 69) {
          if ($163) {
           label = 71;
          }
         }
         if ((label|0) == 71) {
          $178 = HEAP32[$__err>>2]|0;
          $179 = $178 | 2;
          HEAP32[$__err>>2] = $179;
         }
         HEAP32[$agg$result>>2] = $164;
         $180 = HEAP8[$__buf>>0]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if (!($182)) {
          $183 = (($__buf) + 8|0);
          $184 = HEAP32[$183>>2]|0;
          _free($184);
         }
         $185 = HEAP8[$__grouping>>0]|0;
         $186 = $185 & 1;
         $187 = ($186<<24>>24)==(0);
         if ($187) {
          STACKTOP = sp;return;
         }
         $188 = (($__grouping) + 8|0);
         $189 = HEAP32[$188>>2]|0;
         _free($189);
         STACKTOP = sp;return;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 41) {
     $101 = ___cxa_find_matching_catch()|0;
     $102 = tempRet0;
     $lpad$phi$index = $101;$lpad$phi$index2 = $102;
    }
    $103 = HEAP8[$__buf>>0]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
    } else {
     $106 = (($__buf) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     _free($107);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
    }
   }
  }
 }
 if ((label|0) == 38) {
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  $93 = (($1) + 4|0);
  $94 = HEAP32[$93>>2]|0;HEAP32[$93>>2] = (($94+-1)|0);
  $95 = ($94|0)==(0);
  if ($95) {
   $96 = HEAP32[$1>>2]|0;
   $97 = (($96) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vi[$98 & 511]($1);
   $$0 = $91;$$01 = $92;
  } else {
   $$0 = $91;$$01 = $92;
  }
 }
 $190 = HEAP8[$__grouping>>0]|0;
 $191 = $190 & 1;
 $192 = ($191<<24>>24)==(0);
 if ($192) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $193 = (($__grouping) + 8|0);
 $194 = HEAP32[$193>>2]|0;
 _free($194);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (5080 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (5080 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6456>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6456|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(395,2147483647,(6464|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((6456|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[6448>>2] = $4;
     ___cxa_guard_release((6456|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[6448>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $$idx14 = 0, $$idx14$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 40|0;
 $__lv = sp + 44|0;
 $0 = sp + 48|0;
 $1 = sp + 4|0;
 $2 = sp;
 $__names = sp + 16|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$__lv>>2] = -1;
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $10;
  $11 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $11;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$9 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $12;
  $13 = HEAP32[$__lv>>2]|0;
  if ((($13|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($13|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $12;
  STACKTOP = sp;return;
 }
 $14 = (($__iob) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17+1)|0);
 __THREW__ = 0;
 $18 = (invoke_ii(380,(6544|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $$idx13 = (($15) + 8|0);
  $$idx13$val = HEAP32[$$idx13>>2]|0;
  $$idx14 = (($15) + 12|0);
  $$idx14$val = HEAP32[$$idx14>>2]|0;
  __THREW__ = 0;
  $21 = (invoke_iiii(381,($$idx13$val|0),($$idx14$val|0),($18|0))|0);
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   $24 = (($15) + 4|0);
   $25 = HEAP32[$24>>2]|0;HEAP32[$24>>2] = (($25+-1)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = HEAP32[$15>>2]|0;
    $28 = (($27) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    FUNCTION_TABLE_vi[$29 & 511]($15);
   }
   $30 = HEAP32[$14>>2]|0;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;HEAP32[$31>>2] = (($32+1)|0);
   __THREW__ = 0;
   $33 = (invoke_ii(380,(6704|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if (!($35)) {
    $$idx = (($30) + 8|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $$idx12 = (($30) + 12|0);
    $$idx12$val = HEAP32[$$idx12>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iiii(381,($$idx$val|0),($$idx12$val|0),($33|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = (($30) + 4|0);
     $40 = HEAP32[$39>>2]|0;HEAP32[$39>>2] = (($40+-1)|0);
     $41 = ($40|0)==(0);
     if ($41) {
      $42 = HEAP32[$30>>2]|0;
      $43 = (($42) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      FUNCTION_TABLE_vi[$44 & 511]($30);
     }
     $45 = HEAP32[$36>>2]|0;
     $46 = (($45) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     invoke_vii($47|0,($__names|0),($36|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $$02 = $__names;
     } else {
      $50 = (($__names) + 12|0);
      $51 = HEAP32[$36>>2]|0;
      $52 = (($51) + 28|0);
      $53 = HEAP32[$52>>2]|0;
      __THREW__ = 0;
      invoke_vii($53|0,($50|0),($36|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $$02 = $50;
      } else {
       $56 = HEAP32[$__e>>2]|0;
       $57 = (($__names) + 24|0);
       __THREW__ = 0;
       $58 = (invoke_iiiiiiii(396,($__b|0),($56|0),($__names|0),($57|0),($21|0),($__err|0),1)|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        $101 = ___cxa_find_matching_catch()|0;
        $102 = tempRet0;
        $103 = HEAP8[$50>>0]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        if (!($105)) {
         $106 = (($__names) + 20|0);
         $107 = HEAP32[$106>>2]|0;
         _free($107);
        }
        $108 = HEAP8[$__names>>0]|0;
        $109 = $108 & 1;
        $110 = ($109<<24>>24)==(0);
        if (!($110)) {
         $111 = (($__names) + 8|0);
         $112 = HEAP32[$111>>2]|0;
         _free($112);
        }
        $$0 = $101;$$01 = $102;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $61 = ($58|0)==($__names|0);
        $62 = $61&1;
        HEAP8[$__v>>0] = $62;
        $63 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $63;
        $64 = HEAP8[$50>>0]|0;
        $65 = $64 & 1;
        $66 = ($65<<24>>24)==(0);
        if (!($66)) {
         $67 = (($__names) + 20|0);
         $68 = HEAP32[$67>>2]|0;
         _free($68);
        }
        $69 = HEAP8[$__names>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         STACKTOP = sp;return;
        }
        $72 = (($__names) + 8|0);
        $73 = HEAP32[$72>>2]|0;
        _free($73);
        STACKTOP = sp;return;
       }
      }
     }
     $90 = ___cxa_find_matching_catch()|0;
     $91 = tempRet0;
     $92 = ($__names|0)==($$02|0);
     if ($92) {
      $$0 = $90;$$01 = $91;
      ___resumeException($$0|0);
      // unreachable;
     } else {
      $94 = $$02;
     }
     while(1) {
      $93 = (($94) + -12|0);
      $95 = HEAP8[$93>>0]|0;
      $96 = $95 & 1;
      $97 = ($96<<24>>24)==(0);
      if (!($97)) {
       $98 = (($94) + -4|0);
       $99 = HEAP32[$98>>2]|0;
       _free($99);
      }
      $100 = ($93|0)==($__names|0);
      if ($100) {
       $$0 = $90;$$01 = $91;
       break;
      } else {
       $94 = $93;
      }
     }
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $82 = ___cxa_find_matching_catch()|0;
   $83 = tempRet0;
   $84 = (($30) + 4|0);
   $85 = HEAP32[$84>>2]|0;HEAP32[$84>>2] = (($85+-1)|0);
   $86 = ($85|0)==(0);
   if (!($86)) {
    $$0 = $82;$$01 = $83;
    ___resumeException($$0|0);
    // unreachable;
   }
   $87 = HEAP32[$30>>2]|0;
   $88 = (($87) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   FUNCTION_TABLE_vi[$89 & 511]($30);
   $$0 = $82;$$01 = $83;
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $74 = ___cxa_find_matching_catch()|0;
 $75 = tempRet0;
 $76 = (($15) + 4|0);
 $77 = HEAP32[$76>>2]|0;HEAP32[$76>>2] = (($77+-1)|0);
 $78 = ($77|0)==(0);
 if (!($78)) {
  $$0 = $74;$$01 = $75;
  ___resumeException($$0|0);
  // unreachable;
 }
 $79 = HEAP32[$15>>2]|0;
 $80 = (($79) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 FUNCTION_TABLE_vi[$81 & 511]($15);
 $$0 = $74;$$01 = $75;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0;
 var $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $175 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $175 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(384,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($90|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($90) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($90) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$90>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($90|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $90;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 67;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 67;
     } else {
      if (!($176)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($176) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $180 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $180 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($180) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($180) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(385,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = tempRet0;
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 37;
   } else {
    $134 = $__v;
    $135 = $134;
    HEAP32[$135>>2] = $130;
    $136 = (($134) + 4)|0;
    $137 = $136;
    HEAP32[$137>>2] = $131;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    $139 = ($90|0)==(0|0);
    if ($139) {
     $169 = 0;$181 = 1;
    } else {
     $140 = (($90) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($90) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$90>>2]|0;
      $146 = (($145) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_ii($147|0,($90|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $148;
      }
     } else {
      $151 = HEAP32[$141>>2]|0;
      $$0$i$i$i$i$i = $151;
     }
     $152 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $152 ? 0 : $90;
     $$8 = $152 ? 1 : 0;
     $169 = $$7;$181 = $$8;
    }
    $153 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($153) {
     label = 67;
    } else {
     $154 = (($$pre$i3$i$i$i) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($$pre$i3$i$i$i) + 16|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($155|0)==($157|0);
     if ($158) {
      $159 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i3$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $162;
      }
     } else {
      $165 = HEAP32[$155>>2]|0;
      $$0$i$i1$i$i$i = $165;
     }
     $166 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($166) {
      label = 67;
     } else {
      if (!($181)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($181) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $167 = HEAP32[$__err>>2]|0;
     $168 = $167 | 2;
     HEAP32[$__err>>2] = $168;
    }
    HEAP32[$agg$result>>2] = $169;
    $170 = HEAP8[$__buf$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if (!($172)) {
     $173 = (($__buf$i) + 8|0);
     $174 = HEAP32[$173>>2]|0;
     _free($174);
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0;
 var $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $175 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $175 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(386,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 37;
   } else {
    HEAP16[$__v>>1] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($90|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($90) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($90) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$90>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($90|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $90;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 67;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 67;
     } else {
      if (!($176)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($176) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0;
 var $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $175 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $175 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(387,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($90|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($90) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($90) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$90>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($90|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $90;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 67;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 67;
     } else {
      if (!($176)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($176) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0;
 var $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $175 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $175 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(388,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 37;
   } else {
    HEAP32[$__v>>2] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($90|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($90) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($90) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$90>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($90|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $90;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 67;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 67;
     } else {
      if (!($176)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($176) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i5$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i3$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i9$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i5$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi33$iZ2D = 0, $$pre$phi35$iZ2D = 0, $$pre32$i = 0, $$pre34$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0, $__dc$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $phitmp$i23$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 160|0;
 $__thousands_sep$i = sp + 280|0;
 $__grouping$i = sp + 264|0;
 $__buf$i = sp + 284|0;
 $__a_end$i = sp + 300|0;
 $__g$i = sp;
 $__g_end$i = sp + 276|0;
 $__dc$i = sp + 296|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 74;
 if ((($4|0) == 0)) {
  $$0$i$i = 0;
 } else if ((($4|0) == 64)) {
  $$0$i$i = 8;
 } else if ((($4|0) == 8)) {
  $$0$i$i = 16;
 } else {
  $$0$i$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping$i,$__iob,$__atoms$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 37;
  } else {
   $7 = HEAP8[$__buf$i>>0]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = (($__buf$i) + 1|0);
    $$pre34$i = (($__buf$i) + 8|0);
    $$pre$phi33$iZ2D = $12;$$pre$phi35$iZ2D = $$pre34$i;$13 = $12;
   } else {
    $10 = (($__buf$i) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre32$i = (($__buf$i) + 1|0);
    $$pre$phi33$iZ2D = $$pre32$i;$$pre$phi35$iZ2D = $10;$13 = $11;
   }
   HEAP32[$__a_end$i>>2] = $13;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   $14 = (($__buf$i) + 4|0);
   $15 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i5$i = $0;$$sroa$06$0 = $1;$__a$0$i = $13;
   while(1) {
    $16 = ($$pre$i$i$i5$i|0)==(0|0);
    if ($16) {
     $180 = 1;$90 = 0;
    } else {
     $17 = (($$pre$i$i$i5$i) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($$pre$i$i$i5$i) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $22 = HEAP32[$$pre$i$i$i5$i>>2]|0;
      $23 = (($22) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($$pre$i$i$i5$i|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 36;
       break;
      } else {
       $$0$i$i$i$i3$i = $25;
      }
     } else {
      $28 = HEAP32[$18>>2]|0;
      $$0$i$i$i$i3$i = $28;
     }
     $29 = ($$0$i$i$i$i3$i|0)==(-1);
     $$$pre$i$i$i5$i = $29 ? 0 : $$pre$i$i$i5$i;
     $$ = $29 ? 1 : 0;
     $180 = $$;$90 = $$$pre$i$i$i5$i;
    }
    $30 = ($$sroa$06$0|0)==(0|0);
    if ($30) {
     label = 20;
    } else {
     $31 = (($$sroa$06$0) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($$sroa$06$0) + 16|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($32|0)==($34|0);
     if ($35) {
      $36 = HEAP32[$$sroa$06$0>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($$sroa$06$0|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 36;
       break;
      } else {
       $$0$i$i1$i$i9$i = $39;
      }
     } else {
      $42 = HEAP32[$32>>2]|0;
      $$0$i$i1$i$i9$i = $42;
     }
     $43 = ($$0$i$i1$i$i9$i|0)==(-1);
     if ($43) {
      label = 20;
     } else {
      if ($180) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 20) {
     label = 0;
     if ($180) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $44 = HEAP32[$__a_end$i>>2]|0;
    $45 = HEAP8[$__buf$i>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$14>>2]|0;
     $52 = $48;
    }
    $51 = (($__a$0$i) + ($52)|0);
    $53 = ($44|0)==($51|0);
    if ($53) {
     if ($47) {
      $55 = $45&255;
      $56 = $55 >>> 1;
      $58 = $56;
     } else {
      $54 = HEAP32[$14>>2]|0;
      $58 = $54;
     }
     $57 = $58 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($57|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      label = 36;
      break;
     }
     $61 = HEAP8[$__buf$i>>0]|0;
     $62 = $61 & 1;
     $63 = ($62<<24>>24)==(0);
     if ($63) {
      $66 = 10;
     } else {
      $64 = HEAP32[$__buf$i>>2]|0;
      $65 = $64 & -2;
      $phitmp$i23$i = (($65) + -1)|0;
      $66 = $phitmp$i23$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($66|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 36;
      break;
     }
     $69 = HEAP8[$__buf$i>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = $$pre$phi33$iZ2D;
     } else {
      $72 = HEAP32[$$pre$phi35$iZ2D>>2]|0;
      $74 = $72;
     }
     $73 = (($74) + ($58)|0);
     HEAP32[$__a_end$i>>2] = $73;
     $__a$1$i = $74;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $89 = (($90) + 12|0);
    $91 = HEAP32[$89>>2]|0;
    $92 = (($90) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$90>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_ii($97|0,($90|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 36;
      break;
     } else {
      $$0$i$i$i = $98;
     }
    } else {
     $101 = HEAP32[$91>>2]|0;
     $$0$i$i$i = $101;
    }
    $102 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i$i,$$0$i$i,$__a$1$i,$__a_end$i,$__dc$i,$15,$__grouping$i,$__g$i,$__g_end$i,$__atoms$i)|0);
    $103 = ($102|0)==(0);
    if (!($103)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $104 = HEAP32[$89>>2]|0;
    $105 = HEAP32[$92>>2]|0;
    $106 = ($104|0)==($105|0);
    if ($106) {
     $107 = HEAP32[$90>>2]|0;
     $108 = (($107) + 40|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     (invoke_ii($109|0,($90|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 36;
      break;
     } else {
      $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $112 = (($104) + 4|0);
     HEAP32[$89>>2] = $112;
     $$pre$i$i$i5$i = $90;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 36) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
    break;
   }
   $113 = HEAP8[$__grouping$i>>0]|0;
   $114 = $113 & 1;
   $115 = ($114<<24>>24)==(0);
   if ($115) {
    $118 = $113&255;
    $119 = $118 >>> 1;
    $121 = $119;
   } else {
    $116 = (($__grouping$i) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    $121 = $117;
   }
   $120 = ($121|0)==(0);
   if (!($120)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (invoke_iiiii(389,($__a$2$i|0),($129|0),($__err|0),($$0$i$i|0))|0);
   $131 = tempRet0;
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 37;
   } else {
    $134 = $__v;
    $135 = $134;
    HEAP32[$135>>2] = $130;
    $136 = (($134) + 4)|0;
    $137 = $136;
    HEAP32[$137>>2] = $131;
    $138 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$138,$__err);
    $139 = ($90|0)==(0|0);
    if ($139) {
     $169 = 0;$181 = 1;
    } else {
     $140 = (($90) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($90) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$90>>2]|0;
      $146 = (($145) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_ii($147|0,($90|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       label = 37;
       break;
      } else {
       $$0$i$i$i$i$i = $148;
      }
     } else {
      $151 = HEAP32[$141>>2]|0;
      $$0$i$i$i$i$i = $151;
     }
     $152 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $152 ? 0 : $90;
     $$8 = $152 ? 1 : 0;
     $169 = $$7;$181 = $$8;
    }
    $153 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($153) {
     label = 67;
    } else {
     $154 = (($$pre$i3$i$i$i) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($$pre$i3$i$i$i) + 16|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($155|0)==($157|0);
     if ($158) {
      $159 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $160 = (($159) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      __THREW__ = 0;
      $162 = (invoke_ii($161|0,($$pre$i3$i$i$i|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       label = 37;
       break;
      } else {
       $$0$i$i1$i$i$i = $162;
      }
     } else {
      $165 = HEAP32[$155>>2]|0;
      $$0$i$i1$i$i$i = $165;
     }
     $166 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($166) {
      label = 67;
     } else {
      if (!($181)) {
       label = 69;
      }
     }
    }
    if ((label|0) == 67) {
     if ($181) {
      label = 69;
     }
    }
    if ((label|0) == 69) {
     $167 = HEAP32[$__err>>2]|0;
     $168 = $167 | 2;
     HEAP32[$__err>>2] = $168;
    }
    HEAP32[$agg$result>>2] = $169;
    $170 = HEAP8[$__buf$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if (!($172)) {
     $173 = (($__buf$i) + 8|0);
     $174 = HEAP32[$173>>2]|0;
     _free($174);
    }
    $175 = HEAP8[$__grouping$i>>0]|0;
    $176 = $175 & 1;
    $177 = ($176<<24>>24)==(0);
    if ($177) {
     STACKTOP = sp;return;
    }
    $178 = (($__grouping$i) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    _free($179);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$i$index = $77;$lpad$phi$i$index2 = $78;
 }
 $79 = HEAP8[$__buf$i>>0]|0;
 $80 = $79 & 1;
 $81 = ($80<<24>>24)==(0);
 if (!($81)) {
  $82 = (($__buf$i) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP8[$__grouping$i>>0]|0;
 $85 = $84 & 1;
 $86 = ($85<<24>>24)==(0);
 if ($86) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $87 = (($__grouping$i) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 _free($88);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i6$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0;
 var $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 184|0;
 $__thousands_sep$i = sp + 4|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 196|0;
 $__a_end$i = sp;
 $__g$i = sp + 24|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 188|0;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $9;$$pre$phi36$iZ2D = $$pre35$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i6$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i6$i|0)==(0|0);
    if ($14) {
     $175 = 1;$88 = 0;
    } else {
     $15 = (($$pre$i$i$i6$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i6$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i6$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i6$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i4$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i4$i = $26;
     }
     $27 = ($$0$i$i$i$i4$i|0)==(-1);
     $$$pre$i$i$i6$i = $27 ? 0 : $$pre$i$i$i6$i;
     $$ = $27 ? 1 : 0;
     $175 = $$;$88 = $$$pre$i$i$i6$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i10$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i10$i = $40;
     }
     $41 = ($$0$i$i1$i$i10$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 32;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i24$i = (($63) + -1)|0;
      $64 = $phitmp$i24$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 32;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi34$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($88) + 12|0);
    $89 = HEAP32[$87>>2]|0;
    $90 = (($88) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)==($91|0);
    if ($92) {
     $93 = HEAP32[$88>>2]|0;
     $94 = (($93) + 36|0);
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     $96 = (invoke_ii($95|0,($88|0))|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if ($98) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $96;
     }
    } else {
     $99 = HEAP32[$89>>2]|0;
     $$0$i$i$i = $99;
    }
    $100 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $101 = ($100|0)==(0);
    if (!($101)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $102 = HEAP32[$87>>2]|0;
    $103 = HEAP32[$90>>2]|0;
    $104 = ($102|0)==($103|0);
    if ($104) {
     $105 = HEAP32[$88>>2]|0;
     $106 = (($105) + 40|0);
     $107 = HEAP32[$106>>2]|0;
     __THREW__ = 0;
     (invoke_ii($107|0,($88|0))|0);
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $110 = (($102) + 4|0);
     HEAP32[$87>>2] = $110;
     $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $111 = HEAP8[$__grouping$i>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    $116 = $111&255;
    $117 = $116 >>> 1;
    $119 = $117;
   } else {
    $114 = (($__grouping$i) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $119 = $115;
   }
   $118 = ($119|0)==(0);
   $120 = HEAP8[$__in_units$i>>0]|0;
   $121 = ($120<<24>>24)==(0);
   $or$cond$i = $118 | $121;
   if (!($or$cond$i)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (+invoke_diii(390,($__a$2$i|0),($129|0),($__err|0)));
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 33;
   } else {
    HEAPF32[$__v>>2] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($88|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($88) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($88) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$88>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($88|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $88;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 63;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 63;
     } else {
      if (!($176)) {
       label = 65;
      }
     }
    }
    if ((label|0) == 63) {
     if ($176) {
      label = 65;
     }
    }
    if ((label|0) == 65) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i6$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0;
 var $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 184|0;
 $__thousands_sep$i = sp + 4|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 196|0;
 $__a_end$i = sp;
 $__g$i = sp + 24|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 188|0;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $9;$$pre$phi36$iZ2D = $$pre35$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i6$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i6$i|0)==(0|0);
    if ($14) {
     $175 = 1;$88 = 0;
    } else {
     $15 = (($$pre$i$i$i6$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i6$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i6$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i6$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i4$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i4$i = $26;
     }
     $27 = ($$0$i$i$i$i4$i|0)==(-1);
     $$$pre$i$i$i6$i = $27 ? 0 : $$pre$i$i$i6$i;
     $$ = $27 ? 1 : 0;
     $175 = $$;$88 = $$$pre$i$i$i6$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i10$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i10$i = $40;
     }
     $41 = ($$0$i$i1$i$i10$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 32;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i24$i = (($63) + -1)|0;
      $64 = $phitmp$i24$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 32;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi34$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($88) + 12|0);
    $89 = HEAP32[$87>>2]|0;
    $90 = (($88) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)==($91|0);
    if ($92) {
     $93 = HEAP32[$88>>2]|0;
     $94 = (($93) + 36|0);
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     $96 = (invoke_ii($95|0,($88|0))|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if ($98) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $96;
     }
    } else {
     $99 = HEAP32[$89>>2]|0;
     $$0$i$i$i = $99;
    }
    $100 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $101 = ($100|0)==(0);
    if (!($101)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $102 = HEAP32[$87>>2]|0;
    $103 = HEAP32[$90>>2]|0;
    $104 = ($102|0)==($103|0);
    if ($104) {
     $105 = HEAP32[$88>>2]|0;
     $106 = (($105) + 40|0);
     $107 = HEAP32[$106>>2]|0;
     __THREW__ = 0;
     (invoke_ii($107|0,($88|0))|0);
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $110 = (($102) + 4|0);
     HEAP32[$87>>2] = $110;
     $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $111 = HEAP8[$__grouping$i>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    $116 = $111&255;
    $117 = $116 >>> 1;
    $119 = $117;
   } else {
    $114 = (($__grouping$i) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $119 = $115;
   }
   $118 = ($119|0)==(0);
   $120 = HEAP8[$__in_units$i>>0]|0;
   $121 = ($120<<24>>24)==(0);
   $or$cond$i = $118 | $121;
   if (!($or$cond$i)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (+invoke_diii(391,($__a$2$i|0),($129|0),($__err|0)));
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($88|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($88) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($88) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$88>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($88|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $88;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 63;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 63;
     } else {
      if (!($176)) {
       label = 65;
      }
     }
    }
    if ((label|0) == 63) {
     if ($176) {
      label = 65;
     }
    }
    if ((label|0) == 65) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$ = 0, $$$pre$i$i$i6$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i4$i = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i10$i = 0, $$7 = 0, $$8 = 0, $$pre$i$i$i6$i = 0, $$pre$i3$i$i$i = 0, $$pre$phi34$iZ2D = 0, $$pre$phi36$iZ2D = 0, $$pre33$i = 0, $$pre35$i = 0, $$sroa$06$0 = 0, $$sroa$06$2 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0$i = 0, $__a$1$i = 0, $__a$2$i = 0, $__a_end$i = 0, $__atoms$i = 0, $__buf$i = 0;
 var $__dc$i = 0, $__decimal_point$i = 0, $__exp$i = 0, $__g$i = 0, $__g_end$i = 0, $__grouping$i = 0, $__in_units$i = 0, $__thousands_sep$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $or$cond$i = 0, $phitmp$i24$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms$i = sp + 208|0;
 $__decimal_point$i = sp + 184|0;
 $__thousands_sep$i = sp + 4|0;
 $__grouping$i = sp + 8|0;
 $__buf$i = sp + 196|0;
 $__a_end$i = sp;
 $__g$i = sp + 24|0;
 $__g_end$i = sp + 192|0;
 $__dc$i = sp + 188|0;
 $__in_units$i = sp + 337|0;
 $__exp$i = sp + 336|0;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping$i,$__iob,$__atoms$i,$__decimal_point$i,$__thousands_sep$i);
 ;HEAP32[$__buf$i+0>>2]=0|0;HEAP32[$__buf$i+4>>2]=0|0;HEAP32[$__buf$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(383,($__buf$i|0),10);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 33;
  } else {
   $4 = HEAP8[$__buf$i>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = (($__buf$i) + 1|0);
    $$pre35$i = (($__buf$i) + 8|0);
    $$pre$phi34$iZ2D = $9;$$pre$phi36$iZ2D = $$pre35$i;$10 = $9;
   } else {
    $7 = (($__buf$i) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre33$i = (($__buf$i) + 1|0);
    $$pre$phi34$iZ2D = $$pre33$i;$$pre$phi36$iZ2D = $7;$10 = $8;
   }
   HEAP32[$__a_end$i>>2] = $10;
   HEAP32[$__g_end$i>>2] = $__g$i;
   HEAP32[$__dc$i>>2] = 0;
   HEAP8[$__in_units$i>>0] = 1;
   HEAP8[$__exp$i>>0] = 69;
   $11 = (($__buf$i) + 4|0);
   $12 = HEAP32[$__decimal_point$i>>2]|0;
   $13 = HEAP32[$__thousands_sep$i>>2]|0;
   $$pre$i$i$i6$i = $0;$$sroa$06$0 = $1;$__a$0$i = $10;
   while(1) {
    $14 = ($$pre$i$i$i6$i|0)==(0|0);
    if ($14) {
     $175 = 1;$88 = 0;
    } else {
     $15 = (($$pre$i$i$i6$i) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i6$i) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i6$i>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i6$i|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 32;
       break;
      } else {
       $$0$i$i$i$i4$i = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i4$i = $26;
     }
     $27 = ($$0$i$i$i$i4$i|0)==(-1);
     $$$pre$i$i$i6$i = $27 ? 0 : $$pre$i$i$i6$i;
     $$ = $27 ? 1 : 0;
     $175 = $$;$88 = $$$pre$i$i$i6$i;
    }
    $28 = ($$sroa$06$0|0)==(0|0);
    if ($28) {
     label = 16;
    } else {
     $29 = (($$sroa$06$0) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($$sroa$06$0) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$$sroa$06$0>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($$sroa$06$0|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 32;
       break;
      } else {
       $$0$i$i1$i$i10$i = $37;
      }
     } else {
      $40 = HEAP32[$30>>2]|0;
      $$0$i$i1$i$i10$i = $40;
     }
     $41 = ($$0$i$i1$i$i10$i|0)==(-1);
     if ($41) {
      label = 16;
     } else {
      if ($175) {
       $$sroa$06$2 = $$sroa$06$0;
      } else {
       $$pre$i3$i$i$i = $$sroa$06$0;$__a$2$i = $__a$0$i;
       break;
      }
     }
    }
    if ((label|0) == 16) {
     label = 0;
     if ($175) {
      $$pre$i3$i$i$i = 0;$__a$2$i = $__a$0$i;
      break;
     } else {
      $$sroa$06$2 = 0;
     }
    }
    $42 = HEAP32[$__a_end$i>>2]|0;
    $43 = HEAP8[$__buf$i>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     $47 = $43&255;
     $48 = $47 >>> 1;
     $50 = $48;
    } else {
     $46 = HEAP32[$11>>2]|0;
     $50 = $46;
    }
    $49 = (($__a$0$i) + ($50)|0);
    $51 = ($42|0)==($49|0);
    if ($51) {
     if ($45) {
      $53 = $43&255;
      $54 = $53 >>> 1;
      $56 = $54;
     } else {
      $52 = HEAP32[$11>>2]|0;
      $56 = $52;
     }
     $55 = $56 << 1;
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($55|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 32;
      break;
     }
     $59 = HEAP8[$__buf$i>>0]|0;
     $60 = $59 & 1;
     $61 = ($60<<24>>24)==(0);
     if ($61) {
      $64 = 10;
     } else {
      $62 = HEAP32[$__buf$i>>2]|0;
      $63 = $62 & -2;
      $phitmp$i24$i = (($63) + -1)|0;
      $64 = $phitmp$i24$i;
     }
     __THREW__ = 0;
     invoke_vii(383,($__buf$i|0),($64|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      label = 32;
      break;
     }
     $67 = HEAP8[$__buf$i>>0]|0;
     $68 = $67 & 1;
     $69 = ($68<<24>>24)==(0);
     if ($69) {
      $72 = $$pre$phi34$iZ2D;
     } else {
      $70 = HEAP32[$$pre$phi36$iZ2D>>2]|0;
      $72 = $70;
     }
     $71 = (($72) + ($56)|0);
     HEAP32[$__a_end$i>>2] = $71;
     $__a$1$i = $72;
    } else {
     $__a$1$i = $__a$0$i;
    }
    $87 = (($88) + 12|0);
    $89 = HEAP32[$87>>2]|0;
    $90 = (($88) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)==($91|0);
    if ($92) {
     $93 = HEAP32[$88>>2]|0;
     $94 = (($93) + 36|0);
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     $96 = (invoke_ii($95|0,($88|0))|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if ($98) {
      label = 32;
      break;
     } else {
      $$0$i$i$i = $96;
     }
    } else {
     $99 = HEAP32[$89>>2]|0;
     $$0$i$i$i = $99;
    }
    $100 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i$i,$__in_units$i,$__exp$i,$__a$1$i,$__a_end$i,$12,$13,$__grouping$i,$__g$i,$__g_end$i,$__dc$i,$__atoms$i)|0);
    $101 = ($100|0)==(0);
    if (!($101)) {
     $$pre$i3$i$i$i = $$sroa$06$2;$__a$2$i = $__a$1$i;
     break;
    }
    $102 = HEAP32[$87>>2]|0;
    $103 = HEAP32[$90>>2]|0;
    $104 = ($102|0)==($103|0);
    if ($104) {
     $105 = HEAP32[$88>>2]|0;
     $106 = (($105) + 40|0);
     $107 = HEAP32[$106>>2]|0;
     __THREW__ = 0;
     (invoke_ii($107|0,($88|0))|0);
     $108 = __THREW__; __THREW__ = 0;
     $109 = $108&1;
     if ($109) {
      label = 32;
      break;
     } else {
      $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
      continue;
     }
    } else {
     $110 = (($102) + 4|0);
     HEAP32[$87>>2] = $110;
     $$pre$i$i$i6$i = $88;$$sroa$06$0 = $$sroa$06$2;$__a$0$i = $__a$1$i;
     continue;
    }
   }
   if ((label|0) == 32) {
    $73 = ___cxa_find_matching_catch()|0;
    $74 = tempRet0;
    $lpad$phi$i$index = $73;$lpad$phi$i$index2 = $74;
    break;
   }
   $111 = HEAP8[$__grouping$i>>0]|0;
   $112 = $111 & 1;
   $113 = ($112<<24>>24)==(0);
   if ($113) {
    $116 = $111&255;
    $117 = $116 >>> 1;
    $119 = $117;
   } else {
    $114 = (($__grouping$i) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $119 = $115;
   }
   $118 = ($119|0)==(0);
   $120 = HEAP8[$__in_units$i>>0]|0;
   $121 = ($120<<24>>24)==(0);
   $or$cond$i = $118 | $121;
   if (!($or$cond$i)) {
    $122 = HEAP32[$__g_end$i>>2]|0;
    $123 = $122;
    $124 = $__g$i;
    $125 = (($123) - ($124))|0;
    $126 = ($125|0)<(160);
    if ($126) {
     $127 = HEAP32[$__dc$i>>2]|0;
     $128 = (($122) + 4|0);
     HEAP32[$__g_end$i>>2] = $128;
     HEAP32[$122>>2] = $127;
    }
   }
   $129 = HEAP32[$__a_end$i>>2]|0;
   __THREW__ = 0;
   $130 = (+invoke_diii(392,($__a$2$i|0),($129|0),($__err|0)));
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 33;
   } else {
    HEAPF64[$__v>>3] = $130;
    $133 = HEAP32[$__g_end$i>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping$i,$__g$i,$133,$__err);
    $134 = ($88|0)==(0|0);
    if ($134) {
     $164 = 0;$176 = 1;
    } else {
     $135 = (($88) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($88) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$88>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($88|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       label = 33;
       break;
      } else {
       $$0$i$i$i$i$i = $143;
      }
     } else {
      $146 = HEAP32[$136>>2]|0;
      $$0$i$i$i$i$i = $146;
     }
     $147 = ($$0$i$i$i$i$i|0)==(-1);
     $$7 = $147 ? 0 : $88;
     $$8 = $147 ? 1 : 0;
     $164 = $$7;$176 = $$8;
    }
    $148 = ($$pre$i3$i$i$i|0)==(0|0);
    if ($148) {
     label = 63;
    } else {
     $149 = (($$pre$i3$i$i$i) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($$pre$i3$i$i$i) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $154 = HEAP32[$$pre$i3$i$i$i>>2]|0;
      $155 = (($154) + 36|0);
      $156 = HEAP32[$155>>2]|0;
      __THREW__ = 0;
      $157 = (invoke_ii($156|0,($$pre$i3$i$i$i|0))|0);
      $158 = __THREW__; __THREW__ = 0;
      $159 = $158&1;
      if ($159) {
       label = 33;
       break;
      } else {
       $$0$i$i1$i$i$i = $157;
      }
     } else {
      $160 = HEAP32[$150>>2]|0;
      $$0$i$i1$i$i$i = $160;
     }
     $161 = ($$0$i$i1$i$i$i|0)==(-1);
     if ($161) {
      label = 63;
     } else {
      if (!($176)) {
       label = 65;
      }
     }
    }
    if ((label|0) == 63) {
     if ($176) {
      label = 65;
     }
    }
    if ((label|0) == 65) {
     $162 = HEAP32[$__err>>2]|0;
     $163 = $162 | 2;
     HEAP32[$__err>>2] = $163;
    }
    HEAP32[$agg$result>>2] = $164;
    $165 = HEAP8[$__buf$i>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if (!($167)) {
     $168 = (($__buf$i) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     _free($169);
    }
    $170 = HEAP8[$__grouping$i>>0]|0;
    $171 = $170 & 1;
    $172 = ($171<<24>>24)==(0);
    if ($172) {
     STACKTOP = sp;return;
    }
    $173 = (($__grouping$i) + 8|0);
    $174 = HEAP32[$173>>2]|0;
    _free($174);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  $75 = ___cxa_find_matching_catch()|0;
  $76 = tempRet0;
  $lpad$phi$i$index = $75;$lpad$phi$i$index2 = $76;
 }
 $77 = HEAP8[$__buf$i>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = (($__buf$i) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  _free($81);
 }
 $82 = HEAP8[$__grouping$i>>0]|0;
 $83 = $82 & 1;
 $84 = ($83<<24>>24)==(0);
 if ($84) {
  ___resumeException($lpad$phi$i$index|0);
  // unreachable;
 }
 $85 = (($__grouping$i) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 _free($86);
 ___resumeException($lpad$phi$i$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$idx = 0, $$idx$val = 0, $$idx6 = 0, $$idx6$val = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 168|0;
 $__grouping = sp + 288|0;
 $__buf = sp + 276|0;
 $__a_end = sp + 300|0;
 $__g = sp + 8|0;
 $__g_end = sp + 272|0;
 $__dc = sp + 304|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  label = 39;
 } else {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx6 = (($1) + 12|0);
  $$idx6$val = HEAP32[$$idx6>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx6$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 39;
  } else {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 48|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 26|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 39;
   } else {
    $15 = (($1) + 4|0);
    $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+-1)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[$1>>2]|0;
     $19 = (($18) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     FUNCTION_TABLE_vi[$20 & 511]($1);
    }
    ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
    __THREW__ = 0;
    invoke_vii(383,($__buf|0),10);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    L8: do {
     if ($22) {
      label = 42;
     } else {
      $23 = HEAP8[$__buf>>0]|0;
      $24 = $23 & 1;
      $25 = ($24<<24>>24)==(0);
      if ($25) {
       $28 = (($__buf) + 1|0);
       $$pre39 = (($__buf) + 8|0);
       $$pre$phi38Z2D = $28;$$pre$phi40Z2D = $$pre39;$29 = $28;
      } else {
       $26 = (($__buf) + 8|0);
       $27 = HEAP32[$26>>2]|0;
       $$pre37 = (($__buf) + 1|0);
       $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $26;$29 = $27;
      }
      HEAP32[$__a_end>>2] = $29;
      HEAP32[$__g_end>>2] = $__g;
      HEAP32[$__dc>>2] = 0;
      $30 = (($__buf) + 4|0);
      $$pre = HEAP32[$__b>>2]|0;
      $$pre$i$i$i9 = $$pre;$__a$0 = $29;
      L14: while(1) {
       $31 = ($$pre$i$i$i9|0)==(0|0);
       if ($31) {
        $109 = 0;$196 = 1;
       } else {
        $32 = (($$pre$i$i$i9) + 12|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (($$pre$i$i$i9) + 16|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($33|0)==($35|0);
        if ($36) {
         $37 = HEAP32[$$pre$i$i$i9>>2]|0;
         $38 = (($37) + 36|0);
         $39 = HEAP32[$38>>2]|0;
         __THREW__ = 0;
         $40 = (invoke_ii($39|0,($$pre$i$i$i9|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          label = 41;
          break;
         } else {
          $$0$i$i$i$i7 = $40;
         }
        } else {
         $43 = HEAP32[$33>>2]|0;
         $$0$i$i$i$i7 = $43;
        }
        $44 = ($$0$i$i$i$i7|0)==(-1);
        if ($44) {
         HEAP32[$__b>>2] = 0;
         $109 = 0;$196 = 1;
        } else {
         $109 = $$pre$i$i$i9;$196 = 0;
        }
       }
       $45 = HEAP32[$__e>>2]|0;
       $46 = ($45|0)==(0|0);
       do {
        if ($46) {
         label = 23;
        } else {
         $47 = (($45) + 12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($45) + 16|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($48|0)==($50|0);
         if ($51) {
          $52 = HEAP32[$45>>2]|0;
          $53 = (($52) + 36|0);
          $54 = HEAP32[$53>>2]|0;
          __THREW__ = 0;
          $55 = (invoke_ii($54|0,($45|0))|0);
          $56 = __THREW__; __THREW__ = 0;
          $57 = $56&1;
          if ($57) {
           label = 41;
           break L14;
          } else {
           $$0$i$i1$i$i13 = $55;
          }
         } else {
          $58 = HEAP32[$48>>2]|0;
          $$0$i$i1$i$i13 = $58;
         }
         $59 = ($$0$i$i1$i$i13|0)==(-1);
         if ($59) {
          HEAP32[$__e>>2] = 0;
          label = 23;
          break;
         } else {
          if ($196) {
           $197 = $45;
           break;
          } else {
           $$pre$i3$i$i = $45;$__a$2 = $__a$0;
           break L14;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        if ($196) {
         $$pre$i3$i$i = 0;$__a$2 = $__a$0;
         break;
        } else {
         $197 = 0;
        }
       }
       $60 = HEAP32[$__a_end>>2]|0;
       $61 = HEAP8[$__buf>>0]|0;
       $62 = $61 & 1;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $65 = $61&255;
        $66 = $65 >>> 1;
        $68 = $66;
       } else {
        $64 = HEAP32[$30>>2]|0;
        $68 = $64;
       }
       $67 = (($__a$0) + ($68)|0);
       $69 = ($60|0)==($67|0);
       if ($69) {
        if ($63) {
         $71 = $61&255;
         $72 = $71 >>> 1;
         $74 = $72;
        } else {
         $70 = HEAP32[$30>>2]|0;
         $74 = $70;
        }
        $73 = $74 << 1;
        __THREW__ = 0;
        invoke_vii(383,($__buf|0),($73|0));
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 41;
         break;
        }
        $77 = HEAP8[$__buf>>0]|0;
        $78 = $77 & 1;
        $79 = ($78<<24>>24)==(0);
        if ($79) {
         $82 = 10;
        } else {
         $80 = HEAP32[$__buf>>2]|0;
         $81 = $80 & -2;
         $phitmp$i28 = (($81) + -1)|0;
         $82 = $phitmp$i28;
        }
        __THREW__ = 0;
        invoke_vii(383,($__buf|0),($82|0));
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 41;
         break;
        }
        $85 = HEAP8[$__buf>>0]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $$pre$phi38Z2D;
        } else {
         $88 = HEAP32[$$pre$phi40Z2D>>2]|0;
         $90 = $88;
        }
        $89 = (($90) + ($74)|0);
        HEAP32[$__a_end>>2] = $89;
        $__a$1 = $90;
       } else {
        $__a$1 = $__a$0;
       }
       $108 = (($109) + 12|0);
       $110 = HEAP32[$108>>2]|0;
       $111 = (($109) + 16|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ($110|0)==($112|0);
       if ($113) {
        $114 = HEAP32[$109>>2]|0;
        $115 = (($114) + 36|0);
        $116 = HEAP32[$115>>2]|0;
        __THREW__ = 0;
        $117 = (invoke_ii($116|0,($109|0))|0);
        $118 = __THREW__; __THREW__ = 0;
        $119 = $118&1;
        if ($119) {
         label = 41;
         break;
        } else {
         $$0$i$i = $117;
        }
       } else {
        $120 = HEAP32[$110>>2]|0;
        $$0$i$i = $120;
       }
       $121 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
       $122 = ($121|0)==(0);
       if (!($122)) {
        $$pre$i3$i$i = $197;$__a$2 = $__a$1;
        break;
       }
       $123 = HEAP32[$108>>2]|0;
       $124 = HEAP32[$111>>2]|0;
       $125 = ($123|0)==($124|0);
       if ($125) {
        $126 = HEAP32[$109>>2]|0;
        $127 = (($126) + 40|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        (invoke_ii($128|0,($109|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 41;
         break;
        } else {
         $$pre$i$i$i9 = $109;$__a$0 = $__a$1;
         continue;
        }
       } else {
        $131 = (($123) + 4|0);
        HEAP32[$108>>2] = $131;
        $$pre$i$i$i9 = $109;$__a$0 = $__a$1;
        continue;
       }
      }
      if ((label|0) == 41) {
       $99 = ___cxa_find_matching_catch()|0;
       $100 = tempRet0;
       $lpad$phi$index = $99;$lpad$phi$index2 = $100;
       break;
      }
      $132 = HEAP32[$__a_end>>2]|0;
      $133 = $132;
      $134 = $__a$2;
      $135 = (($133) - ($134))|0;
      __THREW__ = 0;
      invoke_vii(383,($__buf|0),($135|0));
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 42;
      } else {
       $138 = HEAP8[$__buf>>0]|0;
       $139 = $138 & 1;
       $140 = ($139<<24>>24)==(0);
       if ($140) {
        $145 = $$pre$phi38Z2D;
       } else {
        $141 = HEAP32[$$pre$phi40Z2D>>2]|0;
        $145 = $141;
       }
       __THREW__ = 0;
       $142 = (invoke_i(393)|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        label = 42;
       } else {
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $__v;
        $146 = (invoke_iiii(394,($145|0),($142|0),($vararg_buffer|0))|0);
        $147 = __THREW__; __THREW__ = 0;
        $148 = $147&1;
        if ($148) {
         label = 42;
        } else {
         $149 = ($146|0)==(1);
         if (!($149)) {
          HEAP32[$__err>>2] = 4;
         }
         $150 = ($109|0)==(0|0);
         if ($150) {
          $180 = 0;$198 = 1;
         } else {
          $151 = (($109) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($109) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$109>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($109|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 42;
            break;
           } else {
            $$0$i$i$i$i = $159;
           }
          } else {
           $162 = HEAP32[$152>>2]|0;
           $$0$i$i$i$i = $162;
          }
          $163 = ($$0$i$i$i$i|0)==(-1);
          if ($163) {
           HEAP32[$__b>>2] = 0;
           $180 = 0;$198 = 1;
          } else {
           $180 = $109;$198 = 0;
          }
         }
         $164 = ($$pre$i3$i$i|0)==(0|0);
         do {
          if ($164) {
           label = 71;
          } else {
           $165 = (($$pre$i3$i$i) + 12|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = (($$pre$i3$i$i) + 16|0);
           $168 = HEAP32[$167>>2]|0;
           $169 = ($166|0)==($168|0);
           if ($169) {
            $170 = HEAP32[$$pre$i3$i$i>>2]|0;
            $171 = (($170) + 36|0);
            $172 = HEAP32[$171>>2]|0;
            __THREW__ = 0;
            $173 = (invoke_ii($172|0,($$pre$i3$i$i|0))|0);
            $174 = __THREW__; __THREW__ = 0;
            $175 = $174&1;
            if ($175) {
             label = 42;
             break L8;
            } else {
             $$0$i$i1$i$i = $173;
            }
           } else {
            $176 = HEAP32[$166>>2]|0;
            $$0$i$i1$i$i = $176;
           }
           $177 = ($$0$i$i1$i$i|0)==(-1);
           if ($177) {
            HEAP32[$__e>>2] = 0;
            label = 71;
            break;
           } else {
            if ($198) {
             break;
            } else {
             label = 73;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 71) {
          if ($198) {
           label = 73;
          }
         }
         if ((label|0) == 73) {
          $178 = HEAP32[$__err>>2]|0;
          $179 = $178 | 2;
          HEAP32[$__err>>2] = $179;
         }
         HEAP32[$agg$result>>2] = $180;
         $181 = HEAP8[$__buf>>0]|0;
         $182 = $181 & 1;
         $183 = ($182<<24>>24)==(0);
         if (!($183)) {
          $184 = (($__buf) + 8|0);
          $185 = HEAP32[$184>>2]|0;
          _free($185);
         }
         $186 = HEAP8[$__grouping>>0]|0;
         $187 = $186 & 1;
         $188 = ($187<<24>>24)==(0);
         if ($188) {
          STACKTOP = sp;return;
         }
         $189 = (($__grouping) + 8|0);
         $190 = HEAP32[$189>>2]|0;
         _free($190);
         STACKTOP = sp;return;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 42) {
     $101 = ___cxa_find_matching_catch()|0;
     $102 = tempRet0;
     $lpad$phi$index = $101;$lpad$phi$index2 = $102;
    }
    $103 = HEAP8[$__buf>>0]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
    } else {
     $106 = (($__buf) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     _free($107);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
    }
   }
  }
 }
 if ((label|0) == 39) {
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  $93 = (($1) + 4|0);
  $94 = HEAP32[$93>>2]|0;HEAP32[$93>>2] = (($94+-1)|0);
  $95 = ($94|0)==(0);
  if ($95) {
   $96 = HEAP32[$1>>2]|0;
   $97 = (($96) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vi[$98 & 511]($1);
   $$0 = $91;$$01 = $92;
  } else {
   $$0 = $91;$$01 = $92;
  }
 }
 $191 = HEAP8[$__grouping>>0]|0;
 $192 = $191 & 1;
 $193 = ($192<<24>>24)==(0);
 if ($193) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $194 = (($__grouping) + 8|0);
 $195 = HEAP32[$194>>2]|0;
 _free($195);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (5080 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (5080 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $$idx$val = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx7 = (($1) + 8|0);
  $$idx7$val = HEAP32[$$idx7>>2]|0;
  $$idx8 = (($1) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx7$val|0),($$idx8$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 26|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_ii(380,(6696|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$idx$val = HEAP32[$$idx7>>2]|0;
     $$idx6$val = HEAP32[$$idx8>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_iiii(381,($$idx$val|0),($$idx6$val|0),($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = HEAP32[$18>>2]|0;
      $22 = (($21) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      __THREW__ = 0;
      $24 = (invoke_ii($23|0,($18|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       HEAP8[$__thousands_sep>>0] = $24;
       $27 = HEAP32[$18>>2]|0;
       $28 = (($27) + 20|0);
       $29 = HEAP32[$28>>2]|0;
       __THREW__ = 0;
       invoke_vii($29|0,($agg$result|0),($18|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if (!($31)) {
        $32 = (($1) + 4|0);
        $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
        $34 = ($33|0)==(0);
        if (!($34)) {
         STACKTOP = sp;return;
        }
        $35 = HEAP32[$1>>2]|0;
        $36 = (($35) + 8|0);
        $37 = HEAP32[$36>>2]|0;
        FUNCTION_TABLE_vi[$37 & 511]($1);
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = (($1) + 4|0);
 $41 = HEAP32[$40>>2]|0;HEAP32[$40>>2] = (($41+-1)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  ___resumeException($38|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vi[$45 & 511]($1);
 ___resumeException($38|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $$idx$val = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx7 = (($1) + 8|0);
  $$idx7$val = HEAP32[$$idx7>>2]|0;
  $$idx8 = (($1) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx7$val|0),($$idx8$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 32|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_ii(380,(6696|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$idx$val = HEAP32[$$idx7>>2]|0;
     $$idx6$val = HEAP32[$$idx8>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_iiii(381,($$idx$val|0),($$idx6$val|0),($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = HEAP32[$18>>2]|0;
      $22 = (($21) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      __THREW__ = 0;
      $24 = (invoke_ii($23|0,($18|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       HEAP8[$__decimal_point>>0] = $24;
       $27 = HEAP32[$18>>2]|0;
       $28 = (($27) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       __THREW__ = 0;
       $30 = (invoke_ii($29|0,($18|0))|0);
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if (!($32)) {
        HEAP8[$__thousands_sep>>0] = $30;
        $33 = HEAP32[$18>>2]|0;
        $34 = (($33) + 20|0);
        $35 = HEAP32[$34>>2]|0;
        __THREW__ = 0;
        invoke_vii($35|0,($agg$result|0),($18|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if (!($37)) {
         $38 = (($1) + 4|0);
         $39 = HEAP32[$38>>2]|0;HEAP32[$38>>2] = (($39+-1)|0);
         $40 = ($39|0)==(0);
         if (!($40)) {
          STACKTOP = sp;return;
         }
         $41 = HEAP32[$1>>2]|0;
         $42 = (($41) + 8|0);
         $43 = HEAP32[$42>>2]|0;
         FUNCTION_TABLE_vi[$43 & 511]($1);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $46 = (($1) + 4|0);
 $47 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($47+-1)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  ___resumeException($44|0);
  // unreachable;
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($1);
 ___resumeException($44|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (5080 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $$idx$val = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx7 = (($1) + 8|0);
  $$idx7$val = HEAP32[$$idx7>>2]|0;
  $$idx8 = (($1) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx7$val|0),($$idx8$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 48|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 26|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_ii(380,(6704|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$idx$val = HEAP32[$$idx7>>2]|0;
     $$idx6$val = HEAP32[$$idx8>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_iiii(381,($$idx$val|0),($$idx6$val|0),($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = HEAP32[$18>>2]|0;
      $22 = (($21) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      __THREW__ = 0;
      $24 = (invoke_ii($23|0,($18|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       HEAP32[$__thousands_sep>>2] = $24;
       $27 = HEAP32[$18>>2]|0;
       $28 = (($27) + 20|0);
       $29 = HEAP32[$28>>2]|0;
       __THREW__ = 0;
       invoke_vii($29|0,($agg$result|0),($18|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if (!($31)) {
        $32 = (($1) + 4|0);
        $33 = HEAP32[$32>>2]|0;HEAP32[$32>>2] = (($33+-1)|0);
        $34 = ($33|0)==(0);
        if (!($34)) {
         STACKTOP = sp;return;
        }
        $35 = HEAP32[$1>>2]|0;
        $36 = (($35) + 8|0);
        $37 = HEAP32[$36>>2]|0;
        FUNCTION_TABLE_vi[$37 & 511]($1);
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = (($1) + 4|0);
 $41 = HEAP32[$40>>2]|0;HEAP32[$40>>2] = (($41+-1)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  ___resumeException($38|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vi[$45 & 511]($1);
 ___resumeException($38|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $$idx$val = 0, $$idx6$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx7 = (($1) + 8|0);
  $$idx7$val = HEAP32[$$idx7>>2]|0;
  $$idx8 = (($1) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx7$val|0),($$idx8$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + 48|0);
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($12|0,($7|0),(5080|0),(((5080 + 32|0))|0),($__atoms|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_ii(380,(6704|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $$idx$val = HEAP32[$$idx7>>2]|0;
     $$idx6$val = HEAP32[$$idx8>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_iiii(381,($$idx$val|0),($$idx6$val|0),($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = HEAP32[$18>>2]|0;
      $22 = (($21) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      __THREW__ = 0;
      $24 = (invoke_ii($23|0,($18|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if (!($26)) {
       HEAP32[$__decimal_point>>2] = $24;
       $27 = HEAP32[$18>>2]|0;
       $28 = (($27) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       __THREW__ = 0;
       $30 = (invoke_ii($29|0,($18|0))|0);
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if (!($32)) {
        HEAP32[$__thousands_sep>>2] = $30;
        $33 = HEAP32[$18>>2]|0;
        $34 = (($33) + 20|0);
        $35 = HEAP32[$34>>2]|0;
        __THREW__ = 0;
        invoke_vii($35|0,($agg$result|0),($18|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        if (!($37)) {
         $38 = (($1) + 4|0);
         $39 = HEAP32[$38>>2]|0;HEAP32[$38>>2] = (($39+-1)|0);
         $40 = ($39|0)==(0);
         if (!($40)) {
          STACKTOP = sp;return;
         }
         $41 = HEAP32[$1>>2]|0;
         $42 = (($41) + 8|0);
         $43 = HEAP32[$42>>2]|0;
         FUNCTION_TABLE_vi[$43 & 511]($1);
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $46 = (($1) + 4|0);
 $47 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($47+-1)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  ___resumeException($44|0);
  // unreachable;
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($1);
 ___resumeException($44|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (5080 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$idx = 0, $$idx$val = 0, $$idx5 = 0, $$idx5$val = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__nm = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $__nm = sp;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_ii(380,(6696|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $$idx = (($11) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx5 = (($11) + 12|0);
  $$idx5$val = HEAP32[$$idx5>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iiii(381,($$idx$val|0),($$idx5$val|0),($14|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = (($11) + 4|0);
   $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP32[$11>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_vi[$25 & 511]($11);
   }
   $26 = HEAP32[$17>>2]|0;
   if ($__v) {
    $27 = (($26) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vii[$28 & 511]($__nm,$17);
   } else {
    $29 = (($26) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    FUNCTION_TABLE_vii[$30 & 511]($__nm,$17);
   }
   $31 = HEAP8[$__nm>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $36 = (($__nm) + 1|0);
    $$pre5 = (($__nm) + 8|0);
    $$ph = $36;$$pre$phi4Z2D = $36;$$pre$phi6Z2D = $$pre5;
   } else {
    $34 = (($__nm) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $$pre3 = (($__nm) + 1|0);
    $$ph = $35;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $34;
   }
   $37 = (($__nm) + 4|0);
   $39 = $31;$49 = $$ph;
   L19: while(1) {
    $38 = $39 & 1;
    $40 = ($38<<24>>24)==(0);
    if ($40) {
     $43 = $39&255;
     $44 = $43 >>> 1;
     $46 = $$pre$phi4Z2D;$47 = $44;
    } else {
     $41 = HEAP32[$$pre$phi6Z2D>>2]|0;
     $42 = HEAP32[$37>>2]|0;
     $46 = $41;$47 = $42;
    }
    $45 = (($46) + ($47)|0);
    $48 = ($49|0)==($45|0);
    if ($48) {
     label = 29;
     break;
    }
    $50 = HEAP8[$49>>0]|0;
    $51 = HEAP32[$__s>>2]|0;
    $52 = ($51|0)==(0|0);
    do {
     if (!($52)) {
      $53 = (($51) + 24|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (($51) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($54|0)==($56|0);
      if (!($57)) {
       $58 = (($54) + 1|0);
       HEAP32[$53>>2] = $58;
       HEAP8[$54>>0] = $50;
       break;
      }
      $59 = HEAP32[$51>>2]|0;
      $60 = (($59) + 52|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = $50&255;
      __THREW__ = 0;
      $63 = (invoke_iii($61|0,($51|0),($62|0))|0);
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       label = 27;
       break L19;
      }
      $66 = ($63|0)==(-1);
      if ($66) {
       HEAP32[$__s>>2] = 0;
      }
     }
    } while(0);
    $67 = (($49) + 1|0);
    $$pre = HEAP8[$__nm>>0]|0;
    $39 = $$pre;$49 = $67;
   }
   if ((label|0) == 27) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $78 = HEAP8[$__nm>>0]|0;
    $79 = $78 & 1;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     $$0 = $76;$$01 = $77;
     ___resumeException($$0|0);
     // unreachable;
    }
    $81 = (($__nm) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    _free($82);
    $$0 = $76;$$01 = $77;
    ___resumeException($$0|0);
    // unreachable;
   }
   else if ((label|0) == 29) {
    $83 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$result>>2] = $83;
    if ($40) {
     STACKTOP = sp;return;
    }
    $84 = (($__nm) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    _free($85);
    STACKTOP = sp;return;
   }
  }
 }
 $68 = ___cxa_find_matching_catch()|0;
 $69 = tempRet0;
 $70 = (($11) + 4|0);
 $71 = HEAP32[$70>>2]|0;HEAP32[$70>>2] = (($71+-1)|0);
 $72 = ($71|0)==(0);
 if (!($72)) {
  $$0 = $68;$$01 = $69;
  ___resumeException($$0|0);
  // unreachable;
 }
 $73 = HEAP32[$11>>2]|0;
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 FUNCTION_TABLE_vi[$75 & 511]($11);
 $$0 = $68;$$01 = $69;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 16|0;
 $__nar = sp + 24|0;
 $__o = sp + 36|0;
 $__op = sp + 8|0;
 $__oe = sp + 4|0;
 $0 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5352+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5352+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5352+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5352+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5352+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5352+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,5264,1,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(397,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 511]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$__dg$0 = 0, $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6552)|0);
 $$idx3 = (($0) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$idx4 = (($0) + 12|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx3$val,$$idx4$val,$1)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6696)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2 = (($3) + 12|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx2$val,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($__grouping,$5);
 $9 = HEAP8[$__grouping>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = $9&255;
  $15 = $14 >>> 1;
  $17 = $15;
 } else {
  $12 = (($__grouping) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 }
 $16 = ($17|0)==(0);
 L5: do {
  if ($16) {
   $18 = HEAP32[$2>>2]|0;
   $19 = (($18) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($20|0,($2|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 8;
   } else {
    $23 = $__ne;
    $24 = $__nb;
    $25 = (($23) - ($24))|0;
    $26 = (($__ob) + ($25)|0);
    HEAP32[$__oe>>2] = $26;
    label = 37;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $36 = HEAP8[$__nb>>0]|0;
   if ((($36<<24>>24) == 43) | (($36<<24>>24) == 45)) {
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + 28|0);
    $39 = HEAP32[$38>>2]|0;
    __THREW__ = 0;
    $40 = (invoke_iii($39|0,($2|0),($36|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     label = 8;
     break;
    }
    $43 = (($__nb) + 1|0);
    $44 = HEAP32[$__oe>>2]|0;
    $45 = (($44) + 1|0);
    HEAP32[$__oe>>2] = $45;
    HEAP8[$44>>0] = $40;
    $__nf$0 = $43;
   } else {
    $__nf$0 = $__nb;
   }
   $46 = $__ne;
   $47 = $__nf$0;
   $48 = (($46) - ($47))|0;
   $49 = ($48|0)>(1);
   if ($49) {
    $50 = HEAP8[$__nf$0>>0]|0;
    $51 = ($50<<24>>24)==(48);
    if ($51) {
     $52 = (($__nf$0) + 1|0);
     $53 = HEAP8[$52>>0]|0;
     if ((($53<<24>>24) == 88) | (($53<<24>>24) == 120)) {
      $54 = HEAP32[$2>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($2|0),48)|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = HEAP32[$__oe>>2]|0;
      $61 = (($60) + 1|0);
      HEAP32[$__oe>>2] = $61;
      HEAP8[$60>>0] = $57;
      $62 = HEAP8[$52>>0]|0;
      $63 = HEAP32[$2>>2]|0;
      $64 = (($63) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      __THREW__ = 0;
      $66 = (invoke_iii($65|0,($2|0),($62|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 8;
       break;
      }
      $69 = (($__nf$0) + 2|0);
      $70 = HEAP32[$__oe>>2]|0;
      $71 = (($70) + 1|0);
      HEAP32[$__oe>>2] = $71;
      HEAP8[$70>>0] = $66;
      $__nf$1 = $69;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $72 = ($__nf$1|0)==($__ne|0);
   if (!($72)) {
    $73 = (($__ne) + -1|0);
    $74 = ($73>>>0)>($__nf$1>>>0);
    if ($74) {
     $$012$i$i5 = $__nf$1;$77 = $73;
     while(1) {
      $75 = HEAP8[$$012$i$i5>>0]|0;
      $76 = HEAP8[$77>>0]|0;
      HEAP8[$$012$i$i5>>0] = $76;
      HEAP8[$77>>0] = $75;
      $78 = (($$012$i$i5) + 1|0);
      $79 = (($77) + -1|0);
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $$012$i$i5 = $78;$77 = $79;
      } else {
       break;
      }
     }
    }
   }
   $81 = HEAP32[$5>>2]|0;
   $82 = (($81) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   __THREW__ = 0;
   $84 = (invoke_ii($83|0,($5|0))|0);
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    label = 8;
   } else {
    $87 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($87) {
      $88 = (($__grouping) + 1|0);
      $89 = (($__grouping) + 4|0);
      $90 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $91 = HEAP8[$__grouping>>0]|0;
       $92 = $91 & 1;
       $93 = ($92<<24>>24)==(0);
       $94 = HEAP32[$90>>2]|0;
       $$ = $93 ? $88 : $94;
       $95 = (($$) + ($__dg$010)|0);
       $96 = HEAP8[$95>>0]|0;
       $97 = ($96<<24>>24)!=(0);
       $98 = $96 << 24 >> 24;
       $99 = ($__dc$09|0)==($98|0);
       $or$cond = $97 & $99;
       if ($or$cond) {
        $100 = HEAP32[$__oe>>2]|0;
        $101 = (($100) + 1|0);
        HEAP32[$__oe>>2] = $101;
        HEAP8[$100>>0] = $84;
        $102 = HEAP8[$__grouping>>0]|0;
        $103 = $102 & 1;
        $104 = ($103<<24>>24)==(0);
        if ($104) {
         $106 = $102&255;
         $107 = $106 >>> 1;
         $109 = $107;
        } else {
         $105 = HEAP32[$89>>2]|0;
         $109 = $105;
        }
        $108 = (($109) + -1)|0;
        $110 = ($__dg$010>>>0)<($108>>>0);
        $111 = $110&1;
        $$__dg$0 = (($111) + ($__dg$010))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       }
       $112 = HEAP8[$__p$011>>0]|0;
       $113 = HEAP32[$2>>2]|0;
       $114 = (($113) + 28|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       $116 = (invoke_iii($115|0,($2|0),($112|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        break;
       }
       $119 = HEAP32[$__oe>>2]|0;
       $120 = (($119) + 1|0);
       HEAP32[$__oe>>2] = $120;
       HEAP8[$119>>0] = $116;
       $121 = (($__dc$1) + 1)|0;
       $122 = (($__p$011) + 1|0);
       $123 = ($122>>>0)<($__ne>>>0);
       if ($123) {
        $__dc$09 = $121;$__dg$010 = $__dg$1;$__p$011 = $122;
       } else {
        break L26;
       }
      }
      $27 = ___cxa_find_matching_catch()|0;
      $28 = tempRet0;
      $lpad$phi$index = $27;$lpad$phi$index2 = $28;
      break L5;
     }
    } while(0);
    $124 = $__nf$1;
    $125 = $__nb;
    $126 = (($124) - ($125))|0;
    $127 = (($__ob) + ($126)|0);
    $128 = HEAP32[$__oe>>2]|0;
    $129 = ($127|0)==($128|0);
    if ($129) {
     label = 37;
    } else {
     $130 = (($128) + -1|0);
     $131 = ($130>>>0)>($127>>>0);
     if ($131) {
      $$012$i$i = $127;$134 = $130;
      while(1) {
       $132 = HEAP8[$$012$i$i>>0]|0;
       $133 = HEAP8[$134>>0]|0;
       HEAP8[$$012$i$i>>0] = $133;
       HEAP8[$134>>0] = $132;
       $135 = (($$012$i$i) + 1|0);
       $136 = (($134) + -1|0);
       $137 = ($135>>>0)<($136>>>0);
       if ($137) {
        $$012$i$i = $135;$134 = $136;
       } else {
        label = 37;
        break;
       }
      }
     } else {
      label = 37;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $lpad$phi$index = $29;$lpad$phi$index2 = $30;
 }
 else if ((label|0) == 37) {
  $138 = ($__np|0)==($__ne|0);
  if ($138) {
   $139 = HEAP32[$__oe>>2]|0;
   $storemerge = $139;
  } else {
   $140 = $__np;
   $141 = $__nb;
   $142 = (($140) - ($141))|0;
   $143 = (($__ob) + ($142)|0);
   $storemerge = $143;
  }
  HEAP32[$__op>>2] = $storemerge;
  $144 = HEAP8[$__grouping>>0]|0;
  $145 = $144 & 1;
  $146 = ($145<<24>>24)==(0);
  if ($146) {
   STACKTOP = sp;return;
  }
  $147 = (($__grouping) + 8|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
  STACKTOP = sp;return;
 }
 $31 = HEAP8[$__grouping>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $34 = (($__grouping) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 _free($35);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 28|0;
 $__o = sp + 50|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 24|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,5272,1,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($18|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(397,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 511]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 511]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 16|0;
 $__nar = sp + 24|0;
 $__o = sp + 36|0;
 $__op = sp + 8|0;
 $__oe = sp + 4|0;
 $0 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5352+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5352+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5352+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5352+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5352+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5352+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,5264,0,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(397,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 511]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 28|0;
 $__o = sp + 51|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 24|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,5272,0,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($18|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(397,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 511]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 511]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$127 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 16|0;
 $__fmt = sp + 48|0;
 $__nar = sp + 84|0;
 $__nb = sp + 68|0;
 $__o = sp + 114|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 64|0;
 $1 = sp + 80|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,14392,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(393)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(398,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(393)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = (($__iob) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $31 = (invoke_iiiii(398,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $40 = $34;$82 = $34;$__nc$2 = $__nc$1;
     break;
    }
    $36 = (___cxa_allocate_exception(4)|0);
    HEAP32[$36>>2] = ((14760 + 8|0));
    __THREW__ = 0;
    invoke_viii(357,($36|0),(14816|0),(323|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$127 = $25;$$18 = $24;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $40 = $__nar;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = HEAP32[$7>>2]|0;
 $42 = $41 & 176;
 do {
  if ((($42|0) == 16)) {
   $43 = HEAP8[$40>>0]|0;
   if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
    $44 = (($40) + 1|0);
    $$0$i = $44;
    break;
   }
   $45 = ($__nc$2|0)>(1);
   $46 = ($43<<24>>24)==(48);
   $or$cond$i = $45 & $46;
   if ($or$cond$i) {
    $47 = (($40) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    if ((($48<<24>>24) == 88) | (($48<<24>>24) == 120)) {
     $49 = (($40) + 2|0);
     $$0$i = $49;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($42|0) == 32)) {
   $$0$i = $39;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $40;
 }
 $50 = ($40|0)==($__nar|0);
 if ($50) {
  $63 = $__nar;$80 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $51 = $__nc$2 << 1;
  $52 = (_malloc($51)|0);
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = (___cxa_allocate_exception(4)|0);
   HEAP32[$54>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($54|0),(14816|0),(323|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $95 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $63 = $40;$80 = $52;$__ob$0 = $52;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $59 = (($__iob) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$0>>2] = $60;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;HEAP32[$61>>2] = (($62+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(399,($63|0),($$0$i|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $83 = ___cxa_find_matching_catch()|0;
    $84 = tempRet0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 4|0);
    $87 = HEAP32[$86>>2]|0;HEAP32[$86>>2] = (($87+-1)|0);
    $88 = ($87|0)==(0);
    if (!($88)) {
     $$0 = $83;$$01 = $84;$93 = $80;
     break;
    }
    $89 = HEAP32[$85>>2]|0;
    $90 = (($89) + 8|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vi[$91 & 511]($85);
    $$0 = $83;$$01 = $84;$93 = $80;
    break;
   }
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;HEAP32[$67>>2] = (($68+-1)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP32[$66>>2]|0;
    $71 = (($70) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$72 & 511]($66);
   }
   $73 = HEAP32[$__s>>2]|0;
   $74 = HEAP32[$__op>>2]|0;
   $75 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(400,($1|0),($73|0),($__ob$0|0),($74|0),($75|0),($__iob|0),($__fl|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $95 = $80;
    label = 25;
   } else {
    $78 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $78;
    HEAP32[$agg$result>>2] = $78;
    $79 = ($80|0)==(0|0);
    if (!($79)) {
     _free($80);
    }
    $81 = ($82|0)==(0|0);
    if ($81) {
     STACKTOP = sp;return;
    }
    _free($82);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $$0 = $57;$$01 = $58;$93 = $95;
 }
 $92 = ($93|0)==(0|0);
 if (!($92)) {
  _free($93);
 }
 $94 = ($82|0)==(0|0);
 if ($94) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 _free($82);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$__dg$0 = 0, $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0;
 var $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6552)|0);
 $$idx3 = (($0) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$idx4 = (($0) + 12|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx3$val,$$idx4$val,$1)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6696)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2 = (($3) + 12|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx2$val,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($__grouping,$5);
 HEAP32[$__oe>>2] = $__ob;
 $9 = HEAP8[$__nb>>0]|0;
 if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  $13 = (invoke_iii($12|0,($2|0),($9|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 8;
  } else {
   $16 = (($__nb) + 1|0);
   $17 = HEAP32[$__oe>>2]|0;
   $18 = (($17) + 1|0);
   HEAP32[$__oe>>2] = $18;
   HEAP8[$17>>0] = $13;
   $__nf$0 = $16;
   label = 12;
  }
 } else {
  $__nf$0 = $__nb;
  label = 12;
 }
 L4: do {
  if ((label|0) == 12) {
   $34 = $__ne;
   $35 = $__nf$0;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)>(1);
   L6: do {
    if ($37) {
     $39 = HEAP8[$__nf$0>>0]|0;
     $40 = ($39<<24>>24)==(48);
     if ($40) {
      $41 = (($__nf$0) + 1|0);
      $42 = HEAP8[$41>>0]|0;
      if ((($42<<24>>24) == 88) | (($42<<24>>24) == 120)) {
       $43 = HEAP32[$2>>2]|0;
       $44 = (($43) + 28|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($2|0),48)|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 8;
        break L4;
       }
       $49 = HEAP32[$__oe>>2]|0;
       $50 = (($49) + 1|0);
       HEAP32[$__oe>>2] = $50;
       HEAP8[$49>>0] = $46;
       $51 = (($__nf$0) + 2|0);
       $52 = HEAP8[$41>>0]|0;
       $53 = HEAP32[$2>>2]|0;
       $54 = (($53) + 28|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_iii($55|0,($2|0),($52|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        label = 8;
        break L4;
       }
       $59 = HEAP32[$__oe>>2]|0;
       $60 = (($59) + 1|0);
       HEAP32[$__oe>>2] = $60;
       HEAP8[$59>>0] = $56;
       $61 = ($51>>>0)<($__ne>>>0);
       if ($61) {
        $__ns$034 = $51;
        while(1) {
         $64 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         (invoke_i(393)|0);
         $65 = __THREW__; __THREW__ = 0;
         $66 = $65&1;
         if ($66) {
          break;
         }
         $67 = $64 << 24 >> 24;
         $isdigittmp$i$i = (($67) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $68 = $67 | 32;
          $69 = (($68) + -97)|0;
          $70 = ($69>>>0)<(6);
          if (!($70)) {
           $__nf$1 = $51;$__ns$2 = $__ns$034;
           break L6;
          }
         }
         $62 = (($__ns$034) + 1|0);
         $63 = ($62>>>0)<($__ne>>>0);
         if ($63) {
          $__ns$034 = $62;
         } else {
          $__nf$1 = $51;$__ns$2 = $62;
          break L6;
         }
        }
        $25 = ___cxa_find_matching_catch()|0;
        $26 = tempRet0;
        $lpad$phi$index = $25;$lpad$phi$index5 = $26;
        break L4;
       } else {
        $__nf$1 = $51;$__ns$2 = $51;
       }
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   L19: do {
    if ((label|0) == 13) {
     $38 = ($__nf$0>>>0)<($__ne>>>0);
     if ($38) {
      $__ns$126 = $__nf$0;
      while(1) {
       $73 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       (invoke_i(393)|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        break;
       }
       $76 = $73 << 24 >> 24;
       $isdigittmp$i = (($76) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $72 = (($__ns$126) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $71 = ($72>>>0)<($__ne>>>0);
       if ($71) {
        $__ns$126 = $72;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $72;
        break L19;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index5 = $24;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $77 = HEAP8[$__grouping>>0]|0;
   $78 = $77 & 1;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    $82 = $77&255;
    $83 = $82 >>> 1;
    $85 = $83;
   } else {
    $80 = (($__grouping) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $85 = $81;
   }
   $84 = ($85|0)==(0);
   if ($84) {
    $86 = HEAP32[$__oe>>2]|0;
    $87 = HEAP32[$2>>2]|0;
    $88 = (($87) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($89|0,($2|0),($__nf$1|0),($__ns$2|0),($86|0))|0);
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     label = 8;
     break;
    }
    $92 = $__ns$2;
    $93 = $__nf$1;
    $94 = (($92) - ($93))|0;
    $95 = HEAP32[$__oe>>2]|0;
    $96 = (($95) + ($94)|0);
    HEAP32[$__oe>>2] = $96;
   } else {
    $97 = ($__nf$1|0)==($__ns$2|0);
    if (!($97)) {
     $98 = (($__ns$2) + -1|0);
     $99 = ($98>>>0)>($__nf$1>>>0);
     if ($99) {
      $$012$i$i = $__nf$1;$102 = $98;
      while(1) {
       $100 = HEAP8[$$012$i$i>>0]|0;
       $101 = HEAP8[$102>>0]|0;
       HEAP8[$$012$i$i>>0] = $101;
       HEAP8[$102>>0] = $100;
       $103 = (($$012$i$i) + 1|0);
       $104 = (($102) + -1|0);
       $105 = ($103>>>0)<($104>>>0);
       if ($105) {
        $$012$i$i = $103;$102 = $104;
       } else {
        break;
       }
      }
     }
    }
    $106 = HEAP32[$5>>2]|0;
    $107 = (($106) + 16|0);
    $108 = HEAP32[$107>>2]|0;
    __THREW__ = 0;
    $109 = (invoke_ii($108|0,($5|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    $111 = $110&1;
    if ($111) {
     label = 8;
     break;
    }
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($112) {
      $113 = (($__grouping) + 1|0);
      $114 = (($__grouping) + 4|0);
      $115 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $116 = HEAP8[$__grouping>>0]|0;
       $117 = $116 & 1;
       $118 = ($117<<24>>24)==(0);
       $119 = HEAP32[$115>>2]|0;
       $$ = $118 ? $113 : $119;
       $120 = (($$) + ($__dg$019)|0);
       $121 = HEAP8[$120>>0]|0;
       $122 = ($121<<24>>24)>(0);
       $123 = $121 << 24 >> 24;
       $124 = ($__dc$018|0)==($123|0);
       $or$cond = $122 & $124;
       if ($or$cond) {
        $125 = HEAP32[$__oe>>2]|0;
        $126 = (($125) + 1|0);
        HEAP32[$__oe>>2] = $126;
        HEAP8[$125>>0] = $109;
        $127 = HEAP8[$__grouping>>0]|0;
        $128 = $127 & 1;
        $129 = ($128<<24>>24)==(0);
        if ($129) {
         $131 = $127&255;
         $132 = $131 >>> 1;
         $134 = $132;
        } else {
         $130 = HEAP32[$114>>2]|0;
         $134 = $130;
        }
        $133 = (($134) + -1)|0;
        $135 = ($__dg$019>>>0)<($133>>>0);
        $136 = $135&1;
        $$__dg$0 = (($136) + ($__dg$019))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $137 = HEAP8[$__p$020>>0]|0;
       $138 = HEAP32[$2>>2]|0;
       $139 = (($138) + 28|0);
       $140 = HEAP32[$139>>2]|0;
       __THREW__ = 0;
       $141 = (invoke_iii($140|0,($2|0),($137|0))|0);
       $142 = __THREW__; __THREW__ = 0;
       $143 = $142&1;
       if ($143) {
        break;
       }
       $144 = HEAP32[$__oe>>2]|0;
       $145 = (($144) + 1|0);
       HEAP32[$__oe>>2] = $145;
       HEAP8[$144>>0] = $141;
       $146 = (($__dc$1) + 1)|0;
       $147 = (($__p$020) + 1|0);
       $148 = ($147>>>0)<($__ns$2>>>0);
       if ($148) {
        $__dc$018 = $146;$__dg$019 = $__dg$1;$__p$020 = $147;
       } else {
        break L41;
       }
      }
      $21 = ___cxa_find_matching_catch()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     }
    } while(0);
    $149 = $__nf$1;
    $150 = $__nb;
    $151 = (($149) - ($150))|0;
    $152 = (($__ob) + ($151)|0);
    $153 = HEAP32[$__oe>>2]|0;
    $154 = ($152|0)==($153|0);
    if (!($154)) {
     $155 = (($153) + -1|0);
     $156 = ($155>>>0)>($152>>>0);
     if ($156) {
      $$012$i$i7 = $152;$159 = $155;
      while(1) {
       $157 = HEAP8[$$012$i$i7>>0]|0;
       $158 = HEAP8[$159>>0]|0;
       HEAP8[$$012$i$i7>>0] = $158;
       HEAP8[$159>>0] = $157;
       $160 = (($$012$i$i7) + 1|0);
       $161 = (($159) + -1|0);
       $162 = ($160>>>0)<($161>>>0);
       if ($162) {
        $$012$i$i7 = $160;$159 = $161;
       } else {
        break;
       }
      }
     }
    }
   }
   $163 = ($__ns$2>>>0)<($__ne>>>0);
   L59: do {
    if ($163) {
     $__nf$214 = $__ns$2;
     while(1) {
      $164 = HEAP8[$__nf$214>>0]|0;
      $165 = ($164<<24>>24)==(46);
      if ($165) {
       break;
      }
      $175 = HEAP32[$2>>2]|0;
      $176 = (($175) + 28|0);
      $177 = HEAP32[$176>>2]|0;
      __THREW__ = 0;
      $178 = (invoke_iii($177|0,($2|0),($164|0))|0);
      $179 = __THREW__; __THREW__ = 0;
      $180 = $179&1;
      if ($180) {
       label = 4;
       break;
      }
      $181 = HEAP32[$__oe>>2]|0;
      $182 = (($181) + 1|0);
      HEAP32[$__oe>>2] = $182;
      HEAP8[$181>>0] = $178;
      $183 = (($__nf$214) + 1|0);
      $184 = ($183>>>0)<($__ne>>>0);
      if ($184) {
       $__nf$214 = $183;
      } else {
       $__nf$3 = $183;
       break L59;
      }
     }
     if ((label|0) == 4) {
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     }
     $166 = HEAP32[$5>>2]|0;
     $167 = (($166) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($5|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      label = 8;
      break L4;
     }
     $172 = HEAP32[$__oe>>2]|0;
     $173 = (($172) + 1|0);
     HEAP32[$__oe>>2] = $173;
     HEAP8[$172>>0] = $169;
     $174 = (($__nf$214) + 1|0);
     $__nf$3 = $174;
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $185 = HEAP32[$__oe>>2]|0;
   $186 = HEAP32[$2>>2]|0;
   $187 = (($186) + 32|0);
   $188 = HEAP32[$187>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($188|0,($2|0),($__nf$3|0),($__ne|0),($185|0))|0);
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    label = 8;
   } else {
    $191 = $__nf$3;
    $192 = (($34) - ($191))|0;
    $193 = HEAP32[$__oe>>2]|0;
    $194 = (($193) + ($192)|0);
    HEAP32[$__oe>>2] = $194;
    $195 = ($__np|0)==($__ne|0);
    if ($195) {
     $storemerge = $194;
    } else {
     $196 = $__np;
     $197 = $__nb;
     $198 = (($196) - ($197))|0;
     $199 = (($__ob) + ($198)|0);
     $storemerge = $199;
    }
    HEAP32[$__op>>2] = $storemerge;
    $200 = HEAP8[$__grouping>>0]|0;
    $201 = $200 & 1;
    $202 = ($201<<24>>24)==(0);
    if ($202) {
     STACKTOP = sp;return;
    }
    $203 = (($__grouping) + 8|0);
    $204 = HEAP32[$203>>2]|0;
    _free($204);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $lpad$phi$index = $27;$lpad$phi$index5 = $28;
 }
 $29 = HEAP8[$__grouping>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $32 = (($__grouping) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$127 = 0, $$18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer2 = sp + 48|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp + 40|0;
 $__nar = sp + 76|0;
 $__nb = sp + 60|0;
 $__o = sp + 106|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 72|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,5280,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(393)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(398,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(393)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $29 = (invoke_iiiii(398,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $38 = $32;$78 = $32;$__nc$2 = $__nc$1;
     break;
    }
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = ((14760 + 8|0));
    __THREW__ = 0;
    invoke_viii(357,($34|0),(14816|0),(323|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$127 = $25;$$18 = $24;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $38 = $__nar;$78 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = HEAP32[$7>>2]|0;
 $40 = $39 & 176;
 do {
  if ((($40|0) == 32)) {
   $$0$i = $37;
  } else if ((($40|0) == 16)) {
   $41 = HEAP8[$38>>0]|0;
   if ((($41<<24>>24) == 43) | (($41<<24>>24) == 45)) {
    $42 = (($38) + 1|0);
    $$0$i = $42;
    break;
   }
   $43 = ($__nc$2|0)>(1);
   $44 = ($41<<24>>24)==(48);
   $or$cond$i = $43 & $44;
   if ($or$cond$i) {
    $45 = (($38) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    if ((($46<<24>>24) == 88) | (($46<<24>>24) == 120)) {
     $47 = (($38) + 2|0);
     $$0$i = $47;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $38;
 }
 $48 = ($38|0)==($__nar|0);
 if ($48) {
  $61 = $__nar;$77 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $49 = $__nc$2 << 1;
  $50 = (_malloc($49)|0);
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = (___cxa_allocate_exception(4)|0);
   HEAP32[$52>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($52|0),(14816|0),(323|0));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $89 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $61 = $38;$77 = $50;$__ob$0 = $50;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $57 = (($__iob) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$0>>2] = $58;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($60+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(399,($61|0),($$0$i|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $79 = ___cxa_find_matching_catch()|0;
    $80 = tempRet0;
    $81 = HEAP32[$0>>2]|0;
    $82 = (($81) + 4|0);
    $83 = HEAP32[$82>>2]|0;HEAP32[$82>>2] = (($83+-1)|0);
    $84 = ($83|0)==(0);
    if (!($84)) {
     $$0 = $79;$$01 = $80;$88 = $77;
     break;
    }
    $85 = HEAP32[$81>>2]|0;
    $86 = (($85) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    FUNCTION_TABLE_vi[$87 & 511]($81);
    $$0 = $79;$$01 = $80;$88 = $77;
    break;
   }
   $64 = HEAP32[$0>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = HEAP32[$64>>2]|0;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    FUNCTION_TABLE_vi[$70 & 511]($64);
   }
   $71 = HEAP32[$__s>>2]|0;
   $72 = HEAP32[$__op>>2]|0;
   $73 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(400,($1|0),($71|0),($__ob$0|0),($72|0),($73|0),($__iob|0),($__fl|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $89 = $77;
    label = 25;
   } else {
    $76 = HEAP32[$1>>2]|0;
    HEAP32[$agg$result>>2] = $76;
    _free($77);
    _free($78);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $$0 = $55;$$01 = $56;$88 = $89;
 }
 _free($88);
 _free($78);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 64|0;
 $__nar = sp + 44|0;
 $__o = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5360+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5360+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5360+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5360+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5360+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5360+5>>0]|0;
 $0 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $1 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$0,$__fmt,$vararg_buffer)|0);
 $2 = (($__nar) + ($1)|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 do {
  if ((($5|0) == 16)) {
   $6 = HEAP8[$__nar>>0]|0;
   if ((($6<<24>>24) == 43) | (($6<<24>>24) == 45)) {
    $7 = (($__nar) + 1|0);
    $$0$i = $7;
    break;
   }
   $8 = ($1|0)>(1);
   $9 = ($6<<24>>24)==(48);
   $or$cond$i = $8 & $9;
   if ($or$cond$i) {
    $10 = (($__nar) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nar) + 2|0);
     $$0$i = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($5|0) == 32)) {
   $$0$i = $2;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $13 = (($__iob) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(380,(6552|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $$idx = (($14) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($14) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $20 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($17|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = (($14) + 4|0);
   $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$14>>2]|0;
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$28 & 511]($14);
   }
   $29 = HEAP32[$20>>2]|0;
   $30 = (($29) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   (FUNCTION_TABLE_iiiii[$31 & 511]($20,$__nar,$2,$__o)|0);
   $32 = (($__o) + ($1)|0);
   $33 = ($$0$i|0)==($2|0);
   if ($33) {
    $__op$0 = $32;
    $46 = HEAP32[$__s>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$46,$__o,$__op$0,$32,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $42 = $__nar;
   $43 = $$0$i;
   $44 = (($43) - ($42))|0;
   $45 = (($__o) + ($44)|0);
   $__op$0 = $45;
   $46 = HEAP32[$__s>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$46,$__o,$__op$0,$32,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $34 = ___cxa_find_matching_catch()|0;
 $35 = tempRet0;
 $36 = (($14) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+-1)|0);
 $38 = ($37|0)==(0);
 if (!($38)) {
  ___resumeException($34|0);
  // unreachable;
 }
 $39 = HEAP32[$14>>2]|0;
 $40 = (($39) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 FUNCTION_TABLE_vi[$41 & 511]($14);
 ___resumeException($34|0);
 // unreachable;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__nm = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $__nm = sp;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $8;
  $9 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$9);
  STACKTOP = sp;return;
 }
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_ii(380,(6704|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $$idx = (($11) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx4 = (($11) + 12|0);
  $$idx4$val = HEAP32[$$idx4>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iiii(381,($$idx$val|0),($$idx4$val|0),($14|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = (($11) + 4|0);
   $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP32[$11>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_vi[$25 & 511]($11);
   }
   $26 = HEAP32[$17>>2]|0;
   if ($__v) {
    $27 = (($26) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vii[$28 & 511]($__nm,$17);
   } else {
    $29 = (($26) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    FUNCTION_TABLE_vii[$30 & 511]($__nm,$17);
   }
   $31 = HEAP8[$__nm>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $36 = (($__nm) + 4|0);
    $$pre3 = (($__nm) + 8|0);
    $$ph = $36;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $36;
   } else {
    $34 = (($__nm) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $$pre2 = (($__nm) + 4|0);
    $$ph = $35;$$pre$phi4Z2D = $34;$$pre$phiZ2D = $$pre2;
   }
   $38 = $31;$48 = $$ph;
   while(1) {
    $37 = $38 & 1;
    $39 = ($37<<24>>24)==(0);
    if ($39) {
     $42 = $38&255;
     $43 = $42 >>> 1;
     $45 = $$pre$phiZ2D;$46 = $43;
    } else {
     $40 = HEAP32[$$pre$phi4Z2D>>2]|0;
     $41 = HEAP32[$$pre$phiZ2D>>2]|0;
     $45 = $40;$46 = $41;
    }
    $44 = (($45) + ($46<<2)|0);
    $47 = ($48|0)==($44|0);
    if ($47) {
     label = 29;
     break;
    }
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$__s>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = (($50) + 24|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (($50) + 28|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = (($57) + 52|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_iii($59|0,($50|0),($49|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 27;
       break;
      } else {
       $$0$i$i = $60;
      }
     } else {
      $63 = (($53) + 4|0);
      HEAP32[$52>>2] = $63;
      HEAP32[$53>>2] = $49;
      $$0$i$i = $49;
     }
     $64 = ($$0$i$i|0)==(-1);
     if ($64) {
      HEAP32[$__s>>2] = 0;
     }
    }
    $65 = (($48) + 4|0);
    $$pre = HEAP8[$__nm>>0]|0;
    $38 = $$pre;$48 = $65;
   }
   if ((label|0) == 27) {
    $74 = ___cxa_find_matching_catch()|0;
    $75 = tempRet0;
    $76 = HEAP8[$__nm>>0]|0;
    $77 = $76 & 1;
    $78 = ($77<<24>>24)==(0);
    if ($78) {
     $$0 = $74;$$01 = $75;
     ___resumeException($$0|0);
     // unreachable;
    }
    $79 = (($__nm) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    _free($80);
    $$0 = $74;$$01 = $75;
    ___resumeException($$0|0);
    // unreachable;
   }
   else if ((label|0) == 29) {
    $81 = HEAP32[$__s>>2]|0;
    HEAP32[$agg$result>>2] = $81;
    if ($39) {
     STACKTOP = sp;return;
    }
    $82 = (($__nm) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    _free($83);
    STACKTOP = sp;return;
   }
  }
 }
 $66 = ___cxa_find_matching_catch()|0;
 $67 = tempRet0;
 $68 = (($11) + 4|0);
 $69 = HEAP32[$68>>2]|0;HEAP32[$68>>2] = (($69+-1)|0);
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$0 = $66;$$01 = $67;
  ___resumeException($$0|0);
  // unreachable;
 }
 $71 = HEAP32[$11>>2]|0;
 $72 = (($71) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 FUNCTION_TABLE_vi[$73 & 511]($11);
 $$0 = $66;$$01 = $67;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 100|0;
 $__nar = sp + 108|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5352+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5352+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5352+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5352+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5352+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5352+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,5264,1,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(401,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 511]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$__dg$0 = 0, $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6544)|0);
 $$idx3 = (($0) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$idx4 = (($0) + 12|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx3$val,$$idx4$val,$1)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6704)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2 = (($3) + 12|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx2$val,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($__grouping,$5);
 $9 = HEAP8[$__grouping>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = $9&255;
  $15 = $14 >>> 1;
  $17 = $15;
 } else {
  $12 = (($__grouping) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 }
 $16 = ($17|0)==(0);
 L5: do {
  if ($16) {
   $18 = HEAP32[$2>>2]|0;
   $19 = (($18) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($20|0,($2|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 8;
   } else {
    $23 = $__ne;
    $24 = $__nb;
    $25 = (($23) - ($24))|0;
    $26 = (($__ob) + ($25<<2)|0);
    HEAP32[$__oe>>2] = $26;
    $148 = $26;
    label = 38;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $36 = HEAP8[$__nb>>0]|0;
   if ((($36<<24>>24) == 43) | (($36<<24>>24) == 45)) {
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    __THREW__ = 0;
    $40 = (invoke_iii($39|0,($2|0),($36|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    if ($42) {
     label = 8;
     break;
    }
    $43 = (($__nb) + 1|0);
    $44 = HEAP32[$__oe>>2]|0;
    $45 = (($44) + 4|0);
    HEAP32[$__oe>>2] = $45;
    HEAP32[$44>>2] = $40;
    $__nf$0 = $43;
   } else {
    $__nf$0 = $__nb;
   }
   $46 = $__ne;
   $47 = $__nf$0;
   $48 = (($46) - ($47))|0;
   $49 = ($48|0)>(1);
   if ($49) {
    $50 = HEAP8[$__nf$0>>0]|0;
    $51 = ($50<<24>>24)==(48);
    if ($51) {
     $52 = (($__nf$0) + 1|0);
     $53 = HEAP8[$52>>0]|0;
     if ((($53<<24>>24) == 88) | (($53<<24>>24) == 120)) {
      $54 = HEAP32[$2>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($2|0),48)|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = HEAP32[$__oe>>2]|0;
      $61 = (($60) + 4|0);
      HEAP32[$__oe>>2] = $61;
      HEAP32[$60>>2] = $57;
      $62 = HEAP8[$52>>0]|0;
      $63 = HEAP32[$2>>2]|0;
      $64 = (($63) + 44|0);
      $65 = HEAP32[$64>>2]|0;
      __THREW__ = 0;
      $66 = (invoke_iii($65|0,($2|0),($62|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       label = 8;
       break;
      }
      $69 = (($__nf$0) + 2|0);
      $70 = HEAP32[$__oe>>2]|0;
      $71 = (($70) + 4|0);
      HEAP32[$__oe>>2] = $71;
      HEAP32[$70>>2] = $66;
      $__nf$1 = $69;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $72 = ($__nf$1|0)==($__ne|0);
   if (!($72)) {
    $73 = (($__ne) + -1|0);
    $74 = ($73>>>0)>($__nf$1>>>0);
    if ($74) {
     $$012$i$i5 = $__nf$1;$77 = $73;
     while(1) {
      $75 = HEAP8[$$012$i$i5>>0]|0;
      $76 = HEAP8[$77>>0]|0;
      HEAP8[$$012$i$i5>>0] = $76;
      HEAP8[$77>>0] = $75;
      $78 = (($$012$i$i5) + 1|0);
      $79 = (($77) + -1|0);
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $$012$i$i5 = $78;$77 = $79;
      } else {
       break;
      }
     }
    }
   }
   $81 = HEAP32[$5>>2]|0;
   $82 = (($81) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   __THREW__ = 0;
   $84 = (invoke_ii($83|0,($5|0))|0);
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    label = 8;
   } else {
    $87 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($87) {
      $88 = (($__grouping) + 1|0);
      $89 = (($__grouping) + 4|0);
      $90 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $91 = HEAP8[$__grouping>>0]|0;
       $92 = $91 & 1;
       $93 = ($92<<24>>24)==(0);
       $94 = HEAP32[$90>>2]|0;
       $$ = $93 ? $88 : $94;
       $95 = (($$) + ($__dg$09)|0);
       $96 = HEAP8[$95>>0]|0;
       $97 = ($96<<24>>24)!=(0);
       $98 = $96 << 24 >> 24;
       $99 = ($__dc$08|0)==($98|0);
       $or$cond = $97 & $99;
       if ($or$cond) {
        $100 = HEAP32[$__oe>>2]|0;
        $101 = (($100) + 4|0);
        HEAP32[$__oe>>2] = $101;
        HEAP32[$100>>2] = $84;
        $102 = HEAP8[$__grouping>>0]|0;
        $103 = $102 & 1;
        $104 = ($103<<24>>24)==(0);
        if ($104) {
         $106 = $102&255;
         $107 = $106 >>> 1;
         $109 = $107;
        } else {
         $105 = HEAP32[$89>>2]|0;
         $109 = $105;
        }
        $108 = (($109) + -1)|0;
        $110 = ($__dg$09>>>0)<($108>>>0);
        $111 = $110&1;
        $$__dg$0 = (($111) + ($__dg$09))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       }
       $112 = HEAP8[$__p$010>>0]|0;
       $113 = HEAP32[$2>>2]|0;
       $114 = (($113) + 44|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       $116 = (invoke_iii($115|0,($2|0),($112|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        break;
       }
       $119 = HEAP32[$__oe>>2]|0;
       $120 = (($119) + 4|0);
       HEAP32[$__oe>>2] = $120;
       HEAP32[$119>>2] = $116;
       $121 = (($__dc$1) + 1)|0;
       $122 = (($__p$010) + 1|0);
       $123 = ($122>>>0)<($__ne>>>0);
       if ($123) {
        $__dc$08 = $121;$__dg$09 = $__dg$1;$__p$010 = $122;
       } else {
        $129 = $120;
        break L26;
       }
      }
      $27 = ___cxa_find_matching_catch()|0;
      $28 = tempRet0;
      $lpad$phi$index = $27;$lpad$phi$index2 = $28;
      break L5;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $129 = $$pre;
     }
    } while(0);
    $124 = $__nf$1;
    $125 = $__nb;
    $126 = (($124) - ($125))|0;
    $127 = (($__ob) + ($126<<2)|0);
    $128 = ($127|0)==($129|0);
    if ($128) {
     $148 = $129;
     label = 38;
    } else {
     $130 = (($129) + -4|0);
     $131 = ($130>>>0)>($127>>>0);
     if ($131) {
      $$012$i$i = $127;$134 = $130;
      while(1) {
       $132 = HEAP32[$$012$i$i>>2]|0;
       $133 = HEAP32[$134>>2]|0;
       HEAP32[$$012$i$i>>2] = $133;
       HEAP32[$134>>2] = $132;
       $135 = (($$012$i$i) + 4|0);
       $136 = (($134) + -4|0);
       $137 = ($135>>>0)<($136>>>0);
       if ($137) {
        $$012$i$i = $135;$134 = $136;
       } else {
        $148 = $129;
        label = 38;
        break;
       }
      }
     } else {
      $148 = $129;
      label = 38;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $lpad$phi$index = $29;$lpad$phi$index2 = $30;
 }
 else if ((label|0) == 38) {
  $138 = ($__np|0)==($__ne|0);
  if ($138) {
   $storemerge = $148;
  } else {
   $139 = $__np;
   $140 = $__nb;
   $141 = (($139) - ($140))|0;
   $142 = (($__ob) + ($141<<2)|0);
   $storemerge = $142;
  }
  HEAP32[$__op>>2] = $storemerge;
  $143 = HEAP8[$__grouping>>0]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   STACKTOP = sp;return;
  }
  $146 = (($__grouping) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  _free($147);
  STACKTOP = sp;return;
 }
 $31 = HEAP8[$__grouping>>0]|0;
 $32 = $31 & 1;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $34 = (($__grouping) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 _free($35);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 192|0;
 $__o = sp + 28|0;
 $__op = sp + 16|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,5272,1,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($18|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(401,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 511]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 511]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 100|0;
 $__nar = sp + 108|0;
 $__o = sp + 16|0;
 $__op = sp + 12|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5352+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5352+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5352+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5352+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5352+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5352+5>>0]|0;
 $1 = (($__fmt) + 1|0);
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($1,5264,0,$3);
 $4 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $5 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$4,$__fmt,$vararg_buffer)|0);
 $6 = (($__nar) + ($5)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = $7 & 176;
 do {
  if ((($8|0) == 16)) {
   $9 = HEAP8[$__nar>>0]|0;
   if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
    $10 = (($__nar) + 1|0);
    $$0$i = $10;
    break;
   }
   $11 = ($5|0)>(1);
   $12 = ($9<<24>>24)==(48);
   $or$cond$i = $11 & $12;
   if ($or$cond$i) {
    $13 = (($__nar) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    if ((($14<<24>>24) == 88) | (($14<<24>>24) == 120)) {
     $15 = (($__nar) + 2|0);
     $$0$i = $15;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($8|0) == 32)) {
   $$0$i = $6;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $16 = (($__iob) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$0>>2] = $17;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($19+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(401,($__nar|0),($$0$i|0),($6|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;HEAP32[$35>>2] = (($36+-1)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   ___resumeException($32|0);
   // unreachable;
  }
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 511]($34);
  ___resumeException($32|0);
  // unreachable;
 } else {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $29 = HEAP32[$__s>>2]|0;
   $30 = HEAP32[$__op>>2]|0;
   $31 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $26 = HEAP32[$22>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vi[$28 & 511]($22);
  $29 = HEAP32[$__s>>2]|0;
  $30 = HEAP32[$__op>>2]|0;
  $31 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$29,$__o,$30,$31,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 28|0;
 $__op = sp + 16|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($7,5272,0,$9);
 $10 = (__ZNSt3__16__clocEv()|0);
 $11 = $vararg_buffer;
 $12 = $11;
 HEAP32[$12>>2] = $0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $1;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$10,$__fmt,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = $17 & 176;
 do {
  if ((($18|0) == 16)) {
   $19 = HEAP8[$__nar>>0]|0;
   if ((($19<<24>>24) == 43) | (($19<<24>>24) == 45)) {
    $20 = (($__nar) + 1|0);
    $$0$i = $20;
    break;
   }
   $21 = ($15|0)>(1);
   $22 = ($19<<24>>24)==(48);
   $or$cond$i = $21 & $22;
   if ($or$cond$i) {
    $23 = (($__nar) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    if ((($24<<24>>24) == 88) | (($24<<24>>24) == 120)) {
     $25 = (($__nar) + 2|0);
     $$0$i = $25;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($18|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $26 = (($__iob) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$2>>2] = $27;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29+1)|0);
 __THREW__ = 0;
 invoke_viiiiiii(401,($__nar|0),($$0$i|0),($16|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;HEAP32[$45>>2] = (($46+-1)|0);
  $47 = ($46|0)==(0);
  if (!($47)) {
   ___resumeException($42|0);
   // unreachable;
  }
  $48 = HEAP32[$44>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 511]($44);
  ___resumeException($42|0);
  // unreachable;
 } else {
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($34+-1)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $39 = HEAP32[$__s>>2]|0;
   $40 = HEAP32[$__op>>2]|0;
   $41 = HEAP32[$__oe>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
   STACKTOP = sp;return;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  FUNCTION_TABLE_vi[$38 & 511]($32);
  $39 = HEAP32[$__s>>2]|0;
  $40 = HEAP32[$__op>>2]|0;
  $41 = HEAP32[$__oe>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$39,$__o,$40,$41,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$125 = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 16|0;
 $__fmt = sp + 48|0;
 $__nar = sp + 312|0;
 $__nb = sp + 296|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 304|0;
 $0 = sp + 300|0;
 $1 = sp + 308|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,14392,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(393)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(398,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(393)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = (($__iob) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $30;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $31 = (invoke_iiiii(398,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $__nc$1 = $31;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $34 = HEAP32[$__nb>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $40 = $34;$81 = $34;$__nc$2 = $__nc$1;
     break;
    }
    $36 = (___cxa_allocate_exception(4)|0);
    HEAP32[$36>>2] = ((14760 + 8|0));
    __THREW__ = 0;
    invoke_viii(357,($36|0),(14816|0),(323|0));
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$125 = $25;$$16 = $24;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $40 = $__nar;$81 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = HEAP32[$7>>2]|0;
 $42 = $41 & 176;
 do {
  if ((($42|0) == 16)) {
   $43 = HEAP8[$40>>0]|0;
   if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
    $44 = (($40) + 1|0);
    $$0$i = $44;
    break;
   }
   $45 = ($__nc$2|0)>(1);
   $46 = ($43<<24>>24)==(48);
   $or$cond$i = $45 & $46;
   if ($or$cond$i) {
    $47 = (($40) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    if ((($48<<24>>24) == 88) | (($48<<24>>24) == 120)) {
     $49 = (($40) + 2|0);
     $$0$i = $49;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($42|0) == 32)) {
   $$0$i = $39;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $40;
 }
 $50 = ($40|0)==($__nar|0);
 if ($50) {
  $63 = $__nar;$80 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $51 = $__nc$2 << 3;
  $52 = (_malloc($51)|0);
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = (___cxa_allocate_exception(4)|0);
   HEAP32[$54>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($54|0),(14816|0),(323|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    $93 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $63 = $40;$80 = $52;$__ob$0 = $52;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $59 = (($__iob) + 28|0);
   $60 = HEAP32[$59>>2]|0;
   HEAP32[$0>>2] = $60;
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;HEAP32[$61>>2] = (($62+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(402,($63|0),($$0$i|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $82 = ___cxa_find_matching_catch()|0;
    $83 = tempRet0;
    $84 = HEAP32[$0>>2]|0;
    $85 = (($84) + 4|0);
    $86 = HEAP32[$85>>2]|0;HEAP32[$85>>2] = (($86+-1)|0);
    $87 = ($86|0)==(0);
    if (!($87)) {
     $$0 = $82;$$01 = $83;$92 = $80;
     break;
    }
    $88 = HEAP32[$84>>2]|0;
    $89 = (($88) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    FUNCTION_TABLE_vi[$90 & 511]($84);
    $$0 = $82;$$01 = $83;$92 = $80;
    break;
   }
   $66 = HEAP32[$0>>2]|0;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;HEAP32[$67>>2] = (($68+-1)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP32[$66>>2]|0;
    $71 = (($70) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_vi[$72 & 511]($66);
   }
   $73 = HEAP32[$__s>>2]|0;
   $74 = HEAP32[$__op>>2]|0;
   $75 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(403,($1|0),($73|0),($__ob$0|0),($74|0),($75|0),($__iob|0),($__fl|0));
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    $93 = $80;
    label = 25;
   } else {
    $78 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $78;
    HEAP32[$agg$result>>2] = $78;
    $79 = ($80|0)==(0|0);
    if ($79) {
     _free($81);
     STACKTOP = sp;return;
    }
    _free($80);
    _free($81);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $$0 = $57;$$01 = $58;$92 = $93;
 }
 $91 = ($92|0)==(0|0);
 if (!($91)) {
  _free($92);
 }
 _free($81);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$__dg$0 = 0, $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $$idx3 = 0, $$idx3$val = 0, $$idx4 = 0, $$idx4$val = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0;
 var $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0, $__p$019 = 0, $isdigit$i = 0, $isdigit$i$i = 0, $isdigittmp$i = 0, $isdigittmp$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6544)|0);
 $$idx3 = (($0) + 8|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$idx4 = (($0) + 12|0);
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx3$val,$$idx4$val,$1)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6704)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2 = (($3) + 12|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx2$val,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 511]($__grouping,$5);
 HEAP32[$__oe>>2] = $__ob;
 $9 = HEAP8[$__nb>>0]|0;
 if ((($9<<24>>24) == 43) | (($9<<24>>24) == 45)) {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  __THREW__ = 0;
  $13 = (invoke_iii($12|0,($2|0),($9|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 8;
  } else {
   $16 = (($__nb) + 1|0);
   $17 = HEAP32[$__oe>>2]|0;
   $18 = (($17) + 4|0);
   HEAP32[$__oe>>2] = $18;
   HEAP32[$17>>2] = $13;
   $__nf$0 = $16;
   label = 12;
  }
 } else {
  $__nf$0 = $__nb;
  label = 12;
 }
 L4: do {
  if ((label|0) == 12) {
   $34 = $__ne;
   $35 = $__nf$0;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)>(1);
   L6: do {
    if ($37) {
     $39 = HEAP8[$__nf$0>>0]|0;
     $40 = ($39<<24>>24)==(48);
     if ($40) {
      $41 = (($__nf$0) + 1|0);
      $42 = HEAP8[$41>>0]|0;
      if ((($42<<24>>24) == 88) | (($42<<24>>24) == 120)) {
       $43 = HEAP32[$2>>2]|0;
       $44 = (($43) + 44|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($2|0),48)|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 8;
        break L4;
       }
       $49 = HEAP32[$__oe>>2]|0;
       $50 = (($49) + 4|0);
       HEAP32[$__oe>>2] = $50;
       HEAP32[$49>>2] = $46;
       $51 = (($__nf$0) + 2|0);
       $52 = HEAP8[$41>>0]|0;
       $53 = HEAP32[$2>>2]|0;
       $54 = (($53) + 44|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_iii($55|0,($2|0),($52|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        label = 8;
        break L4;
       }
       $59 = HEAP32[$__oe>>2]|0;
       $60 = (($59) + 4|0);
       HEAP32[$__oe>>2] = $60;
       HEAP32[$59>>2] = $56;
       $61 = ($51>>>0)<($__ne>>>0);
       if ($61) {
        $__ns$033 = $51;
        while(1) {
         $64 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         (invoke_i(393)|0);
         $65 = __THREW__; __THREW__ = 0;
         $66 = $65&1;
         if ($66) {
          break;
         }
         $67 = $64 << 24 >> 24;
         $isdigittmp$i$i = (($67) + -48)|0;
         $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
         if (!($isdigit$i$i)) {
          $68 = $67 | 32;
          $69 = (($68) + -97)|0;
          $70 = ($69>>>0)<(6);
          if (!($70)) {
           $__nf$1 = $51;$__ns$2 = $__ns$033;
           break L6;
          }
         }
         $62 = (($__ns$033) + 1|0);
         $63 = ($62>>>0)<($__ne>>>0);
         if ($63) {
          $__ns$033 = $62;
         } else {
          $__nf$1 = $51;$__ns$2 = $62;
          break L6;
         }
        }
        $25 = ___cxa_find_matching_catch()|0;
        $26 = tempRet0;
        $lpad$phi$index = $25;$lpad$phi$index5 = $26;
        break L4;
       } else {
        $__nf$1 = $51;$__ns$2 = $51;
       }
      } else {
       label = 13;
      }
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   L19: do {
    if ((label|0) == 13) {
     $38 = ($__nf$0>>>0)<($__ne>>>0);
     if ($38) {
      $__ns$125 = $__nf$0;
      while(1) {
       $73 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       (invoke_i(393)|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        break;
       }
       $76 = $73 << 24 >> 24;
       $isdigittmp$i = (($76) + -48)|0;
       $isdigit$i = ($isdigittmp$i>>>0)<(10);
       $72 = (($__ns$125) + 1|0);
       if (!($isdigit$i)) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $71 = ($72>>>0)<($__ne>>>0);
       if ($71) {
        $__ns$125 = $72;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $72;
        break L19;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index5 = $24;
      break L4;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $77 = HEAP8[$__grouping>>0]|0;
   $78 = $77 & 1;
   $79 = ($78<<24>>24)==(0);
   if ($79) {
    $82 = $77&255;
    $83 = $82 >>> 1;
    $85 = $83;
   } else {
    $80 = (($__grouping) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $85 = $81;
   }
   $84 = ($85|0)==(0);
   if ($84) {
    $86 = HEAP32[$__oe>>2]|0;
    $87 = HEAP32[$2>>2]|0;
    $88 = (($87) + 48|0);
    $89 = HEAP32[$88>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($89|0,($2|0),($__nf$1|0),($__ns$2|0),($86|0))|0);
    $90 = __THREW__; __THREW__ = 0;
    $91 = $90&1;
    if ($91) {
     label = 8;
     break;
    }
    $92 = $__ns$2;
    $93 = $__nf$1;
    $94 = (($92) - ($93))|0;
    $95 = HEAP32[$__oe>>2]|0;
    $96 = (($95) + ($94<<2)|0);
    HEAP32[$__oe>>2] = $96;
    $205 = $96;
   } else {
    $97 = ($__nf$1|0)==($__ns$2|0);
    if (!($97)) {
     $98 = (($__ns$2) + -1|0);
     $99 = ($98>>>0)>($__nf$1>>>0);
     if ($99) {
      $$012$i$i = $__nf$1;$102 = $98;
      while(1) {
       $100 = HEAP8[$$012$i$i>>0]|0;
       $101 = HEAP8[$102>>0]|0;
       HEAP8[$$012$i$i>>0] = $101;
       HEAP8[$102>>0] = $100;
       $103 = (($$012$i$i) + 1|0);
       $104 = (($102) + -1|0);
       $105 = ($103>>>0)<($104>>>0);
       if ($105) {
        $$012$i$i = $103;$102 = $104;
       } else {
        break;
       }
      }
     }
    }
    $106 = HEAP32[$5>>2]|0;
    $107 = (($106) + 16|0);
    $108 = HEAP32[$107>>2]|0;
    __THREW__ = 0;
    $109 = (invoke_ii($108|0,($5|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    $111 = $110&1;
    if ($111) {
     label = 8;
     break;
    }
    $112 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($112) {
      $113 = (($__grouping) + 1|0);
      $114 = (($__grouping) + 4|0);
      $115 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $116 = HEAP8[$__grouping>>0]|0;
       $117 = $116 & 1;
       $118 = ($117<<24>>24)==(0);
       $119 = HEAP32[$115>>2]|0;
       $$ = $118 ? $113 : $119;
       $120 = (($$) + ($__dg$018)|0);
       $121 = HEAP8[$120>>0]|0;
       $122 = ($121<<24>>24)>(0);
       $123 = $121 << 24 >> 24;
       $124 = ($__dc$017|0)==($123|0);
       $or$cond = $122 & $124;
       if ($or$cond) {
        $125 = HEAP32[$__oe>>2]|0;
        $126 = (($125) + 4|0);
        HEAP32[$__oe>>2] = $126;
        HEAP32[$125>>2] = $109;
        $127 = HEAP8[$__grouping>>0]|0;
        $128 = $127 & 1;
        $129 = ($128<<24>>24)==(0);
        if ($129) {
         $131 = $127&255;
         $132 = $131 >>> 1;
         $134 = $132;
        } else {
         $130 = HEAP32[$114>>2]|0;
         $134 = $130;
        }
        $133 = (($134) + -1)|0;
        $135 = ($__dg$018>>>0)<($133>>>0);
        $136 = $135&1;
        $$__dg$0 = (($136) + ($__dg$018))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $137 = HEAP8[$__p$019>>0]|0;
       $138 = HEAP32[$2>>2]|0;
       $139 = (($138) + 44|0);
       $140 = HEAP32[$139>>2]|0;
       __THREW__ = 0;
       $141 = (invoke_iii($140|0,($2|0),($137|0))|0);
       $142 = __THREW__; __THREW__ = 0;
       $143 = $142&1;
       if ($143) {
        break;
       }
       $144 = HEAP32[$__oe>>2]|0;
       $145 = (($144) + 4|0);
       HEAP32[$__oe>>2] = $145;
       HEAP32[$144>>2] = $141;
       $146 = (($__dc$1) + 1)|0;
       $147 = (($__p$019) + 1|0);
       $148 = ($147>>>0)<($__ns$2>>>0);
       if ($148) {
        $__dc$017 = $146;$__dg$018 = $__dg$1;$__p$019 = $147;
       } else {
        $154 = $145;
        break L41;
       }
      }
      $21 = ___cxa_find_matching_catch()|0;
      $22 = tempRet0;
      $lpad$phi$index = $21;$lpad$phi$index5 = $22;
      break L4;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $154 = $$pre;
     }
    } while(0);
    $149 = $__nf$1;
    $150 = $__nb;
    $151 = (($149) - ($150))|0;
    $152 = (($__ob) + ($151<<2)|0);
    $153 = ($152|0)==($154|0);
    if ($153) {
     $205 = $154;
    } else {
     $155 = (($154) + -4|0);
     $156 = ($155>>>0)>($152>>>0);
     if ($156) {
      $$012$i$i7 = $152;$159 = $155;
      while(1) {
       $157 = HEAP32[$$012$i$i7>>2]|0;
       $158 = HEAP32[$159>>2]|0;
       HEAP32[$$012$i$i7>>2] = $158;
       HEAP32[$159>>2] = $157;
       $160 = (($$012$i$i7) + 4|0);
       $161 = (($159) + -4|0);
       $162 = ($160>>>0)<($161>>>0);
       if ($162) {
        $$012$i$i7 = $160;$159 = $161;
       } else {
        $205 = $154;
        break;
       }
      }
     } else {
      $205 = $154;
     }
    }
   }
   $163 = ($__ns$2>>>0)<($__ne>>>0);
   L60: do {
    if ($163) {
     $__nf$213 = $__ns$2;
     while(1) {
      $164 = HEAP8[$__nf$213>>0]|0;
      $165 = ($164<<24>>24)==(46);
      if ($165) {
       break;
      }
      $175 = HEAP32[$2>>2]|0;
      $176 = (($175) + 44|0);
      $177 = HEAP32[$176>>2]|0;
      __THREW__ = 0;
      $178 = (invoke_iii($177|0,($2|0),($164|0))|0);
      $179 = __THREW__; __THREW__ = 0;
      $180 = $179&1;
      if ($180) {
       label = 4;
       break;
      }
      $181 = HEAP32[$__oe>>2]|0;
      $182 = (($181) + 4|0);
      HEAP32[$__oe>>2] = $182;
      HEAP32[$181>>2] = $178;
      $183 = (($__nf$213) + 1|0);
      $184 = ($183>>>0)<($__ne>>>0);
      if ($184) {
       $__nf$213 = $183;
      } else {
       $188 = $182;$__nf$3 = $183;
       break L60;
      }
     }
     if ((label|0) == 4) {
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      break L4;
     }
     $166 = HEAP32[$5>>2]|0;
     $167 = (($166) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($5|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      label = 8;
      break L4;
     }
     $172 = HEAP32[$__oe>>2]|0;
     $173 = (($172) + 4|0);
     HEAP32[$__oe>>2] = $173;
     HEAP32[$172>>2] = $169;
     $174 = (($__nf$213) + 1|0);
     $188 = $173;$__nf$3 = $174;
    } else {
     $188 = $205;$__nf$3 = $__ns$2;
    }
   } while(0);
   $185 = HEAP32[$2>>2]|0;
   $186 = (($185) + 48|0);
   $187 = HEAP32[$186>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($187|0,($2|0),($__nf$3|0),($__ne|0),($188|0))|0);
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    label = 8;
   } else {
    $191 = $__nf$3;
    $192 = (($34) - ($191))|0;
    $193 = HEAP32[$__oe>>2]|0;
    $194 = (($193) + ($192<<2)|0);
    HEAP32[$__oe>>2] = $194;
    $195 = ($__np|0)==($__ne|0);
    if ($195) {
     $storemerge = $194;
    } else {
     $196 = $__np;
     $197 = $__nb;
     $198 = (($196) - ($197))|0;
     $199 = (($__ob) + ($198<<2)|0);
     $storemerge = $199;
    }
    HEAP32[$__op>>2] = $storemerge;
    $200 = HEAP8[$__grouping>>0]|0;
    $201 = $200 & 1;
    $202 = ($201<<24>>24)==(0);
    if ($202) {
     STACKTOP = sp;return;
    }
    $203 = (($__grouping) + 8|0);
    $204 = HEAP32[$203>>2]|0;
    _free($204);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $lpad$phi$index = $27;$lpad$phi$index5 = $28;
 }
 $29 = HEAP8[$__grouping>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $32 = (($__grouping) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$125 = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer2 = sp + 48|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp + 40|0;
 $__nar = sp + 304|0;
 $__nb = sp + 288|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 296|0;
 $0 = sp + 292|0;
 $1 = sp + 300|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,5280,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 do {
  if ($15) {
   if ($9) {
    __THREW__ = 0;
    $16 = (invoke_i(393)|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $19 = (($__iob) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $20;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $21 = (invoke_iiiii(398,($__nb|0),($16|0),($__fmt|0),($vararg_buffer5|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $__nc$1 = $21;
      label = 11;
     }
    }
   } else {
    __THREW__ = 0;
    $26 = (invoke_i(393)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $29 = (invoke_iiiii(398,($__nb|0),($26|0),($__fmt|0),($vararg_buffer9|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if (!($31)) {
      $__nc$1 = $29;
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $32 = HEAP32[$__nb>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $38 = $32;$79 = $32;$__nc$2 = $__nc$1;
     break;
    }
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = ((14760 + 8|0));
    __THREW__ = 0;
    invoke_viii(357,($34|0),(14816|0),(323|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     // unreachable;
    }
   }
   $24 = ___cxa_find_matching_catch()|0;
   $25 = tempRet0;
   $$125 = $25;$$16 = $24;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $38 = $__nar;$79 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = HEAP32[$7>>2]|0;
 $40 = $39 & 176;
 do {
  if ((($40|0) == 16)) {
   $41 = HEAP8[$38>>0]|0;
   if ((($41<<24>>24) == 43) | (($41<<24>>24) == 45)) {
    $42 = (($38) + 1|0);
    $$0$i = $42;
    break;
   }
   $43 = ($__nc$2|0)>(1);
   $44 = ($41<<24>>24)==(48);
   $or$cond$i = $43 & $44;
   if ($or$cond$i) {
    $45 = (($38) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    if ((($46<<24>>24) == 88) | (($46<<24>>24) == 120)) {
     $47 = (($38) + 2|0);
     $$0$i = $47;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($40|0) == 32)) {
   $$0$i = $37;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i = $38;
 }
 $48 = ($38|0)==($__nar|0);
 if ($48) {
  $61 = $__nar;$78 = 0;$__ob$0 = $__o;
  label = 26;
 } else {
  $49 = $__nc$2 << 3;
  $50 = (_malloc($49)|0);
  $51 = ($50|0)==(0|0);
  if ($51) {
   $52 = (___cxa_allocate_exception(4)|0);
   HEAP32[$52>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($52|0),(14816|0),(323|0));
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $91 = 0;
    label = 25;
   } else {
    // unreachable;
   }
  } else {
   $61 = $38;$78 = $50;$__ob$0 = $50;
   label = 26;
  }
 }
 do {
  if ((label|0) == 26) {
   $57 = (($__iob) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$0>>2] = $58;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($60+1)|0);
   __THREW__ = 0;
   invoke_viiiiiii(402,($61|0),($$0$i|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $80 = ___cxa_find_matching_catch()|0;
    $81 = tempRet0;
    $82 = HEAP32[$0>>2]|0;
    $83 = (($82) + 4|0);
    $84 = HEAP32[$83>>2]|0;HEAP32[$83>>2] = (($84+-1)|0);
    $85 = ($84|0)==(0);
    if (!($85)) {
     $$0 = $80;$$01 = $81;$90 = $78;
     break;
    }
    $86 = HEAP32[$82>>2]|0;
    $87 = (($86) + 8|0);
    $88 = HEAP32[$87>>2]|0;
    FUNCTION_TABLE_vi[$88 & 511]($82);
    $$0 = $80;$$01 = $81;$90 = $78;
    break;
   }
   $64 = HEAP32[$0>>2]|0;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66+-1)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = HEAP32[$64>>2]|0;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    FUNCTION_TABLE_vi[$70 & 511]($64);
   }
   $71 = HEAP32[$__s>>2]|0;
   $72 = HEAP32[$__op>>2]|0;
   $73 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   invoke_viiiiiii(403,($1|0),($71|0),($__ob$0|0),($72|0),($73|0),($__iob|0),($__fl|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    $91 = $78;
    label = 25;
   } else {
    $76 = HEAP32[$1>>2]|0;
    HEAP32[$__s>>2] = $76;
    HEAP32[$agg$result>>2] = $76;
    $77 = ($78|0)==(0|0);
    if ($77) {
     _free($79);
     STACKTOP = sp;return;
    }
    _free($78);
    _free($79);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $$0 = $55;$$01 = $56;$90 = $91;
 }
 $89 = ($90|0)==(0|0);
 if (!($89)) {
  _free($90);
 }
 _free($79);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__fmt = sp + 172|0;
 $__nar = sp + 152|0;
 $__o = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5360+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5360+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5360+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5360+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5360+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5360+5>>0]|0;
 $0 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $1 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$0,$__fmt,$vararg_buffer)|0);
 $2 = (($__nar) + ($1)|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 do {
  if ((($5|0) == 16)) {
   $6 = HEAP8[$__nar>>0]|0;
   if ((($6<<24>>24) == 43) | (($6<<24>>24) == 45)) {
    $7 = (($__nar) + 1|0);
    $$0$i = $7;
    break;
   }
   $8 = ($1|0)>(1);
   $9 = ($6<<24>>24)==(48);
   $or$cond$i = $8 & $9;
   if ($or$cond$i) {
    $10 = (($__nar) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nar) + 2|0);
     $$0$i = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($5|0) == 32)) {
   $$0$i = $2;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0$i = $__nar;
 }
 $13 = (($__iob) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16+1)|0);
 __THREW__ = 0;
 $17 = (invoke_ii(380,(6544|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $$idx = (($14) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($14) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $20 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($17|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = (($14) + 4|0);
   $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+-1)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$14>>2]|0;
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    FUNCTION_TABLE_vi[$28 & 511]($14);
   }
   $29 = HEAP32[$20>>2]|0;
   $30 = (($29) + 48|0);
   $31 = HEAP32[$30>>2]|0;
   (FUNCTION_TABLE_iiiii[$31 & 511]($20,$__nar,$2,$__o)|0);
   $32 = (($__o) + ($1<<2)|0);
   $33 = ($$0$i|0)==($2|0);
   if ($33) {
    $__op$0 = $32;
    $46 = HEAP32[$__s>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$46,$__o,$__op$0,$32,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $42 = $__nar;
   $43 = $$0$i;
   $44 = (($43) - ($42))|0;
   $45 = (($__o) + ($44<<2)|0);
   $__op$0 = $45;
   $46 = HEAP32[$__s>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$46,$__o,$__op$0,$32,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $34 = ___cxa_find_matching_catch()|0;
 $35 = tempRet0;
 $36 = (($14) + 4|0);
 $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37+-1)|0);
 $38 = ($37|0)==(0);
 if (!($38)) {
  ___resumeException($34|0);
  // unreachable;
 }
 $39 = HEAP32[$14>>2]|0;
 $40 = (($39) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 FUNCTION_TABLE_vi[$41 & 511]($14);
 ___resumeException($34|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$$pre$i$i$i13 = 0, $$$pre$i$i$i4 = 0, $$0$i$i = 0, $$0$i$i22 = 0, $$0$ph$be = 0, $$0$ph35 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$__b$sroa$0$1 = 0, $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$pre$i$i$i13 = 0;
 var $$pre$i$i$i4 = 0, $$pre$i2$i$i17 = 0, $$pre$i2$i$i1737 = 0, $$pre$i2$i$i1738 = 0, $$pre36 = 0, $$pre36$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0;
 var $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i1 = 0, $isascii1$i20 = 0, $sext = 0, $tmp$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_ii(380,(6552|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $$idx = (($4) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($4) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = (($4) + 4|0);
   $14 = HEAP32[$13>>2]|0;HEAP32[$13>>2] = (($14+-1)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$4>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    FUNCTION_TABLE_vi[$18 & 511]($4);
   }
   HEAP32[$__err>>2] = 0;
   $19 = ($__fmtb|0)==($__fmte|0);
   L7: do {
    if ($19) {
     $$pre$i$i$i4 = $__b$0;$__e$sroa$0$10 = $__e$0;
    } else {
     $20 = (($10) + 8|0);
     $$0$ph35 = $__fmtb;$$pre36 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
     L9: while(1) {
      $22 = $$pre36;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
      while(1) {
       $21 = ($22|0)==(0);
       if (!($21)) {
        $$pre$i$i$i4 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
        break L7;
       }
       $23 = ($__b$sroa$0$1|0)==(0|0);
       if ($23) {
        $35 = 0;$__b$sroa$0$2 = 0;
       } else {
        $24 = (($__b$sroa$0$1) + 12|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = (($__b$sroa$0$1) + 16|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($25|0)==($27|0);
        if ($28) {
         $29 = HEAP32[$__b$sroa$0$1>>2]|0;
         $30 = (($29) + 36|0);
         $31 = HEAP32[$30>>2]|0;
         $32 = (FUNCTION_TABLE_ii[$31 & 511]($__b$sroa$0$1)|0);
         $33 = ($32|0)==(-1);
         $$__b$sroa$0$1 = $33 ? 0 : $__b$sroa$0$1;
         $$__b$sroa$0$13 = $33 ? 0 : $__b$sroa$0$1;
         $35 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
        } else {
         $35 = $__b$sroa$0$1;$__b$sroa$0$2 = $__b$sroa$0$1;
        }
       }
       $34 = ($35|0)==(0|0);
       $36 = ($__e$sroa$0$1|0)==(0|0);
       do {
        if ($36) {
         label = 16;
        } else {
         $37 = (($__e$sroa$0$1) + 12|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (($__e$sroa$0$1) + 16|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = ($38|0)==($40|0);
         if ($41) {
          $42 = HEAP32[$__e$sroa$0$1>>2]|0;
          $43 = (($42) + 36|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = (FUNCTION_TABLE_ii[$44 & 511]($__e$sroa$0$1)|0);
          $46 = ($45|0)==(-1);
          if ($46) {
           label = 16;
           break;
          }
         }
         if ($34) {
          $__e$sroa$0$4 = $__e$sroa$0$1;
         } else {
          $__e$sroa$0$3 = $__e$sroa$0$1;
          label = 17;
          break L9;
         }
        }
       } while(0);
       if ((label|0) == 16) {
        label = 0;
        if ($34) {
         $__e$sroa$0$3 = 0;
         label = 17;
         break L9;
        } else {
         $__e$sroa$0$4 = 0;
        }
       }
       $55 = HEAP8[$$0$ph35>>0]|0;
       $56 = HEAP32[$10>>2]|0;
       $57 = (($56) + 36|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 511]($10,$55,0)|0);
       $60 = ($59<<24>>24)==(37);
       if ($60) {
        label = 22;
        break;
       }
       $81 = HEAP8[$$0$ph35>>0]|0;
       $isascii1$i = ($81<<24>>24)>(-1);
       if ($isascii1$i) {
        $82 = $81 << 24 >> 24;
        $83 = HEAP32[$20>>2]|0;
        $84 = (($83) + ($82<<1)|0);
        $85 = HEAP16[$84>>1]|0;
        $86 = $85 & 8192;
        $87 = ($86<<16>>16)==(0);
        if (!($87)) {
         $$0$pn = $$0$ph35;
         label = 33;
         break;
        }
       }
       $146 = (($35) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($35) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$35>>2]|0;
        $152 = (($151) + 36|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = (FUNCTION_TABLE_ii[$153 & 511]($35)|0);
        $$0$i$i22 = $154;
       } else {
        $155 = HEAP8[$147>>0]|0;
        $156 = $155&255;
        $$0$i$i22 = $156;
       }
       $157 = $$0$i$i22&255;
       $158 = HEAP32[$10>>2]|0;
       $159 = (($158) + 12|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (FUNCTION_TABLE_iii[$160 & 511]($10,$157)|0);
       $162 = HEAP8[$$0$ph35>>0]|0;
       $163 = HEAP32[$10>>2]|0;
       $164 = (($163) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (FUNCTION_TABLE_iii[$165 & 511]($10,$162)|0);
       $167 = ($161<<24>>24)==($166<<24>>24);
       if ($167) {
        label = 58;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $22 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
      }
      L35: do {
       if ((label|0) == 22) {
        label = 0;
        $61 = (($$0$ph35) + 1|0);
        $62 = ($61|0)==($__fmte|0);
        if ($62) {
         label = 23;
         break L9;
        }
        $63 = HEAP8[$61>>0]|0;
        $64 = HEAP32[$10>>2]|0;
        $65 = (($64) + 36|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = (FUNCTION_TABLE_iiii[$66 & 511]($10,$63,0)|0);
        if ((($67<<24>>24) == 48) | (($67<<24>>24) == 69)) {
         $68 = (($$0$ph35) + 2|0);
         $69 = ($68|0)==($__fmte|0);
         if ($69) {
          label = 26;
          break L9;
         }
         $70 = HEAP8[$68>>0]|0;
         $71 = HEAP32[$10>>2]|0;
         $72 = (($71) + 36|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = (FUNCTION_TABLE_iiii[$73 & 511]($10,$70,0)|0);
         $$1 = $68;$__cmd$0 = $74;$__opt$0 = $67;
        } else {
         $$1 = $61;$__cmd$0 = $67;$__opt$0 = 0;
        }
        $75 = HEAP32[$this>>2]|0;
        $76 = (($75) + 36|0);
        $77 = HEAP32[$76>>2]|0;
        HEAP32[$1>>2] = $35;
        HEAP32[$2>>2] = $__e$sroa$0$4;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$77 & 255]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $78 = HEAP32[$0>>2]|0;
        $79 = (($$1) + 1|0);
        $$0$ph$be = $79;$__b$sroa$0$3 = $78;$__e$sroa$0$5 = $__e$sroa$0$4;
       }
       else if ((label|0) == 33) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 1|0);
         $88 = ($$2|0)==($__fmte|0);
         if ($88) {
          $$2$lcssa = $__fmte;
          break;
         }
         $89 = HEAP8[$$2>>0]|0;
         $isascii1$i1 = ($89<<24>>24)>(-1);
         if (!($isascii1$i1)) {
          $$2$lcssa = $$2;
          break;
         }
         $90 = $89 << 24 >> 24;
         $91 = (($83) + ($90<<1)|0);
         $92 = HEAP16[$91>>1]|0;
         $93 = $92 & 8192;
         $94 = ($93<<16>>16)==(0);
         if ($94) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
          label = 33;
         }
        }
        $$pre$i$i$i13 = $35;$$pre$i2$i$i17 = $__e$sroa$0$4;$109 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
        while(1) {
         $95 = ($$pre$i$i$i13|0)==(0|0);
         if ($95) {
          $107 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
         } else {
          $96 = (($$pre$i$i$i13) + 12|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = (($$pre$i$i$i13) + 16|0);
          $99 = HEAP32[$98>>2]|0;
          $100 = ($97|0)==($99|0);
          if ($100) {
           $101 = HEAP32[$$pre$i$i$i13>>2]|0;
           $102 = (($101) + 36|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = (FUNCTION_TABLE_ii[$103 & 511]($$pre$i$i$i13)|0);
           $105 = ($104|0)==(-1);
           $$__b$sroa$0$4 = $105 ? 0 : $__b$sroa$0$4;
           $$$pre$i$i$i13 = $105 ? 0 : $$pre$i$i$i13;
           $107 = $$$pre$i$i$i13;$__b$sroa$0$5 = $$__b$sroa$0$4;
          } else {
           $107 = $$pre$i$i$i13;$__b$sroa$0$5 = $__b$sroa$0$4;
          }
         }
         $106 = ($107|0)==(0|0);
         $108 = ($109|0)==(0|0);
         do {
          if ($108) {
           $$pre$i2$i$i1738 = $$pre$i2$i$i17;$__e$sroa$0$7 = $__e$sroa$0$6;
           label = 44;
          } else {
           $110 = (($109) + 12|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (($109) + 16|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = ($111|0)==($113|0);
           if (!($114)) {
            if ($106) {
             $$pre$i2$i$i1737 = $$pre$i2$i$i17;$202 = $109;$__e$sroa$0$8 = $__e$sroa$0$6;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
             break L35;
            }
           }
           $115 = HEAP32[$109>>2]|0;
           $116 = (($115) + 36|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = (FUNCTION_TABLE_ii[$117 & 511]($109)|0);
           $119 = ($118|0)==(-1);
           if ($119) {
            $$pre$i2$i$i1738 = 0;$__e$sroa$0$7 = 0;
            label = 44;
           } else {
            $120 = ($$pre$i2$i$i17|0)==(0|0);
            $tmp$i$i19 = $106 ^ $120;
            if ($tmp$i$i19) {
             $$pre$i2$i$i1737 = $$pre$i2$i$i17;$202 = $$pre$i2$i$i17;$__e$sroa$0$8 = $__e$sroa$0$6;
            } else {
             $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
             break L35;
            }
           }
          }
         } while(0);
         if ((label|0) == 44) {
          label = 0;
          if ($106) {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
           break L35;
          } else {
           $$pre$i2$i$i1737 = $$pre$i2$i$i1738;$202 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
          }
         }
         $121 = (($107) + 12|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = (($107) + 16|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = ($122|0)==($124|0);
         if ($125) {
          $126 = HEAP32[$107>>2]|0;
          $127 = (($126) + 36|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = (FUNCTION_TABLE_ii[$128 & 511]($107)|0);
          $$0$i$i = $129;
         } else {
          $130 = HEAP8[$122>>0]|0;
          $131 = $130&255;
          $$0$i$i = $131;
         }
         $132 = $$0$i$i&255;
         $isascii1$i20 = ($132<<24>>24)>(-1);
         if (!($isascii1$i20)) {
          $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
          break L35;
         }
         $sext = $$0$i$i << 24;
         $133 = $sext >> 24;
         $134 = HEAP32[$20>>2]|0;
         $135 = (($134) + ($133<<1)|0);
         $136 = HEAP16[$135>>1]|0;
         $137 = $136 & 8192;
         $138 = ($137<<16>>16)==(0);
         if ($138) {
          $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
          break L35;
         }
         $139 = HEAP32[$121>>2]|0;
         $140 = HEAP32[$123>>2]|0;
         $141 = ($139|0)==($140|0);
         if ($141) {
          $142 = HEAP32[$107>>2]|0;
          $143 = (($142) + 40|0);
          $144 = HEAP32[$143>>2]|0;
          (FUNCTION_TABLE_ii[$144 & 511]($107)|0);
          $$pre$i$i$i13 = $107;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$109 = $202;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
          continue;
         } else {
          $145 = (($139) + 1|0);
          HEAP32[$121>>2] = $145;
          $$pre$i$i$i13 = $107;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$109 = $202;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
          continue;
         }
        }
       }
       else if ((label|0) == 58) {
        label = 0;
        $168 = HEAP32[$146>>2]|0;
        $169 = HEAP32[$148>>2]|0;
        $170 = ($168|0)==($169|0);
        if ($170) {
         $171 = HEAP32[$35>>2]|0;
         $172 = (($171) + 40|0);
         $173 = HEAP32[$172>>2]|0;
         (FUNCTION_TABLE_ii[$173 & 511]($35)|0);
        } else {
         $174 = (($168) + 1|0);
         HEAP32[$146>>2] = $174;
        }
        $175 = (($$0$ph35) + 1|0);
        $$0$ph$be = $175;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
       }
      } while(0);
      $80 = ($$0$ph$be|0)==($__fmte|0);
      if ($80) {
       $$pre$i$i$i4 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
       break L7;
      }
      $$pre36$pre = HEAP32[$__err>>2]|0;
      $$0$ph35 = $$0$ph$be;$$pre36 = $$pre36$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
     }
     if ((label|0) == 17) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i4 = $35;$__e$sroa$0$10 = $__e$sroa$0$3;
      break;
     }
     else if ((label|0) == 23) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i4 = $35;$__e$sroa$0$10 = $__e$sroa$0$4;
      break;
     }
     else if ((label|0) == 26) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i4 = $35;$__e$sroa$0$10 = $__e$sroa$0$4;
      break;
     }
    }
   } while(0);
   $176 = ($$pre$i$i$i4|0)==(0|0);
   if ($176) {
    $188 = 0;
   } else {
    $177 = (($$pre$i$i$i4) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($$pre$i$i$i4) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$$pre$i$i$i4>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_ii[$184 & 511]($$pre$i$i$i4)|0);
     $186 = ($185|0)==(-1);
     $$$pre$i$i$i4 = $186 ? 0 : $$pre$i$i$i4;
     $188 = $$$pre$i$i$i4;
    } else {
     $188 = $$pre$i$i$i4;
    }
   }
   $187 = ($188|0)==(0|0);
   $189 = ($__e$sroa$0$10|0)==(0|0);
   do {
    if ($189) {
     label = 70;
    } else {
     $190 = (($__e$sroa$0$10) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($__e$sroa$0$10) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191|0)==($193|0);
     if ($194) {
      $195 = HEAP32[$__e$sroa$0$10>>2]|0;
      $196 = (($195) + 36|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (FUNCTION_TABLE_ii[$197 & 511]($__e$sroa$0$10)|0);
      $199 = ($198|0)==(-1);
      if ($199) {
       label = 70;
       break;
      }
     }
     if ($187) {
      HEAP32[$agg$result>>2] = $188;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 70) {
    if (!($187)) {
     HEAP32[$agg$result>>2] = $188;
     STACKTOP = sp;return;
    }
   }
   $200 = HEAP32[$__err>>2]|0;
   $201 = $200 | 2;
   HEAP32[$__err>>2] = $201;
   HEAP32[$agg$result>>2] = $188;
   STACKTOP = sp;return;
  }
 }
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 $49 = (($4) + 4|0);
 $50 = HEAP32[$49>>2]|0;HEAP32[$49>>2] = (($50+-1)|0);
 $51 = ($50|0)==(0);
 if (!($51)) {
  ___resumeException($47|0);
  // unreachable;
 }
 $52 = HEAP32[$4>>2]|0;
 $53 = (($52) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 FUNCTION_TABLE_vi[$54 & 511]($4);
 ___resumeException($47|0);
 // unreachable;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,5464,((5464 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 1|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 24|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($0)|0);
 $4 = (($3) + 168|0);
 $5 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$3,$4,$__ct,$__err,0)|0);
 $6 = $5;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)<(168);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($8|0) / 12)&-1;
 $11 = (($10|0) % 7)&-1;
 HEAP32[$__w>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 16|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = (($4) + 288|0);
 $6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$4,$5,$__ct,$__err,0)|0);
 $7 = $6;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(288);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($9|0) / 12)&-1;
 $12 = (($11|0) % 12)&-1;
 HEAP32[$__m>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 20|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y,$__b,$__e$0,$__err,$__ct) {
 $__y = $__y|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ($0|0)<(69);
 if ($4) {
  $5 = (($0) + 2000)|0;
  $__t$0 = $5;
 } else {
  $$off = (($0) + -69)|0;
  $6 = ($$off>>>0)<(31);
  $7 = (($0) + 1900)|0;
  $$ = $6 ? $7 : $0;
  $__t$0 = $$;
 }
 $8 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx49 = 0, $$idx49$val = 0, $$pre$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i26 = 0, $$pre$i$i$i2$i = 0, $$pre$i$i$i2$i33 = 0, $$pre$i2$i$i6$i = 0, $$pre$i2$i$i611$i = 0, $$sroa$081$0 = 0, $$sroa$081$2 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $isascii1$i$i = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i43 = 0, $or$cond$i46 = 0, $or$cond$i8 = 0, $or$cond3$i = 0, $or$cond3$i12 = 0, $sext$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp + 16|0;
 $1 = sp;
 $2 = sp + 28|0;
 $3 = sp + 32|0;
 $4 = sp + 40|0;
 $5 = sp + 12|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_ii(380,(6552|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $$idx = (($11) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx49 = (($11) + 12|0);
  $$idx49$val = HEAP32[$$idx49>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iiii(381,($$idx$val|0),($$idx49$val|0),($14|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = (($11) + 4|0);
   $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP32[$11>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_vi[$25 & 511]($11);
   }
   $26 = $__fmt << 24 >> 24;
   L7: do {
    switch ($26|0) {
    case 72:  {
     $75 = HEAP32[$__e>>2]|0;
     $76 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$75,$__err,$17,2)|0);
     $77 = HEAP32[$__err>>2]|0;
     $78 = $77 & 4;
     $79 = ($78|0)==(0);
     $80 = ($76|0)<(24);
     $or$cond$i8 = $79 & $80;
     if ($or$cond$i8) {
      $81 = (($__tm) + 8|0);
      HEAP32[$81>>2] = $76;
      break L7;
     } else {
      $82 = $77 | 4;
      HEAP32[$__err>>2] = $82;
      break L7;
     }
     break;
    }
    case 65: case 97:  {
     $35 = (($__tm) + 24|0);
     $36 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$35,$__b,$36,$__err,$17);
     break;
    }
    case 106:  {
     $92 = HEAP32[$__e>>2]|0;
     $93 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$92,$__err,$17,3)|0);
     $94 = HEAP32[$__err>>2]|0;
     $95 = $94 & 4;
     $96 = ($95|0)==(0);
     $97 = ($93|0)<(366);
     $or$cond$i15 = $96 & $97;
     if ($or$cond$i15) {
      $98 = (($__tm) + 28|0);
      HEAP32[$98>>2] = $93;
      break L7;
     } else {
      $99 = $94 | 4;
      HEAP32[$__err>>2] = $99;
      break L7;
     }
     break;
    }
    case 68:  {
     $69 = HEAP32[$__b>>2]|0;
     $70 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$69,$70,$__iob,$__err,$__tm,5472,((5472 + 8|0)));
     $71 = HEAP32[$2>>2]|0;
     HEAP32[$__b>>2] = $71;
     break;
    }
    case 73:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$83,$__err,$17,2)|0);
     $85 = HEAP32[$__err>>2]|0;
     $86 = $85 & 4;
     $87 = ($86|0)==(0);
     $88 = ($84|0)>(0);
     $or$cond$i11 = $87 & $88;
     $89 = ($84|0)<(13);
     $or$cond3$i12 = $or$cond$i11 & $89;
     if ($or$cond3$i12) {
      $90 = (($__tm) + 8|0);
      HEAP32[$90>>2] = $84;
      break L7;
     } else {
      $91 = $85 | 4;
      HEAP32[$__err>>2] = $91;
      break L7;
     }
     break;
    }
    case 109:  {
     $100 = HEAP32[$__e>>2]|0;
     $101 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$100,$__err,$17,2)|0);
     $102 = HEAP32[$__err>>2]|0;
     $103 = $102 & 4;
     $104 = ($103|0)==(0);
     $105 = ($101|0)<(13);
     $or$cond$i18 = $104 & $105;
     if ($or$cond$i18) {
      $106 = (($__tm) + 16|0);
      $107 = (($101) + -1)|0;
      HEAP32[$106>>2] = $107;
      break L7;
     } else {
      $108 = $102 | 4;
      HEAP32[$__err>>2] = $108;
      break L7;
     }
     break;
    }
    case 99:  {
     $39 = (($this) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (FUNCTION_TABLE_ii[$42 & 511]($39)|0);
     $44 = HEAP32[$__b>>2]|0;
     $45 = HEAP32[$__e>>2]|0;
     $46 = HEAP8[$43>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     if ($48) {
      $53 = (($43) + 1|0);
      $54 = $46&255;
      $55 = $54 >>> 1;
      $57 = $53;$58 = $55;
     } else {
      $49 = (($43) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($43) + 4|0);
      $52 = HEAP32[$51>>2]|0;
      $57 = $50;$58 = $52;
     }
     $56 = (($57) + ($58)|0);
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($1,$this,$44,$45,$__iob,$__err,$__tm,$57,$56);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__b>>2] = $59;
     break;
    }
    case 101: case 100:  {
     $60 = HEAP32[$__e>>2]|0;
     $61 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$60,$__err,$17,2)|0);
     $62 = HEAP32[$__err>>2]|0;
     $63 = $62 & 4;
     $64 = ($63|0)==(0);
     $65 = ($61|0)>(0);
     $or$cond$i = $64 & $65;
     $66 = ($61|0)<(32);
     $or$cond3$i = $or$cond$i & $66;
     if ($or$cond3$i) {
      $67 = (($__tm) + 12|0);
      HEAP32[$67>>2] = $61;
      break L7;
     } else {
      $68 = $62 | 4;
      HEAP32[$__err>>2] = $68;
      break L7;
     }
     break;
    }
    case 104: case 66: case 98:  {
     $37 = (($__tm) + 16|0);
     $38 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$37,$__b,$38,$__err,$17);
     break;
    }
    case 84:  {
     $253 = HEAP32[$__b>>2]|0;
     $254 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$253,$254,$__iob,$__err,$__tm,5512,((5512 + 8|0)));
     $255 = HEAP32[$6>>2]|0;
     HEAP32[$__b>>2] = $255;
     break;
    }
    case 82:  {
     $243 = HEAP32[$__b>>2]|0;
     $244 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$243,$244,$__iob,$__err,$__tm,5504,((5504 + 5|0)));
     $245 = HEAP32[$5>>2]|0;
     HEAP32[$__b>>2] = $245;
     break;
    }
    case 70:  {
     $72 = HEAP32[$__b>>2]|0;
     $73 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$72,$73,$__iob,$__err,$__tm,5480,((5480 + 8|0)));
     $74 = HEAP32[$3>>2]|0;
     HEAP32[$__b>>2] = $74;
     break;
    }
    case 112:  {
     $200 = (($__tm) + 8|0);
     $201 = HEAP32[$__e>>2]|0;
     $202 = (($this) + 8|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (($203) + 8|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (FUNCTION_TABLE_ii[$205 & 511]($202)|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207 & 1;
     $209 = ($208<<24>>24)==(0);
     if ($209) {
      $212 = $207&255;
      $213 = $212 >>> 1;
      $225 = $213;
     } else {
      $210 = (($206) + 4|0);
      $211 = HEAP32[$210>>2]|0;
      $225 = $211;
     }
     $214 = (($206) + 12|0);
     $215 = HEAP8[$214>>0]|0;
     $216 = $215 & 1;
     $217 = ($216<<24>>24)==(0);
     if ($217) {
      $220 = $215&255;
      $221 = $220 >>> 1;
      $223 = $221;
     } else {
      $218 = (($206) + 16|0);
      $219 = HEAP32[$218>>2]|0;
      $223 = $219;
     }
     $222 = (0 - ($223))|0;
     $224 = ($225|0)==($222|0);
     if ($224) {
      $226 = HEAP32[$__err>>2]|0;
      $227 = $226 | 4;
      HEAP32[$__err>>2] = $227;
      break L7;
     }
     $228 = (($206) + 24|0);
     $229 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$201,$206,$228,$17,$__err,0)|0);
     $230 = $229;
     $231 = $206;
     $232 = (($230) - ($231))|0;
     $233 = ($229|0)==($206|0);
     if ($233) {
      $234 = HEAP32[$200>>2]|0;
      $235 = ($234|0)==(12);
      if ($235) {
       HEAP32[$200>>2] = 0;
       break L7;
      }
     }
     $236 = ($232|0)==(12);
     if ($236) {
      $237 = HEAP32[$200>>2]|0;
      $238 = ($237|0)<(12);
      if ($238) {
       $239 = (($237) + 12)|0;
       HEAP32[$200>>2] = $239;
      }
     }
     break;
    }
    case 77:  {
     $109 = HEAP32[$__e>>2]|0;
     $110 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$109,$__err,$17,2)|0);
     $111 = HEAP32[$__err>>2]|0;
     $112 = $111 & 4;
     $113 = ($112|0)==(0);
     $114 = ($110|0)<(60);
     $or$cond$i21 = $113 & $114;
     if ($or$cond$i21) {
      $115 = (($__tm) + 4|0);
      HEAP32[$115>>2] = $110;
      break L7;
     } else {
      $116 = $111 | 4;
      HEAP32[$__err>>2] = $116;
      break L7;
     }
     break;
    }
    case 116: case 110:  {
     $117 = HEAP32[$__e>>2]|0;
     $118 = (($17) + 8|0);
     $$sroa$081$0 = $117;
     L62: while(1) {
      $119 = HEAP32[$__b>>2]|0;
      $120 = ($119|0)==(0|0);
      do {
       if ($120) {
        $132 = 0;
       } else {
        $121 = (($119) + 12|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($119) + 16|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ($122|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$119>>2]|0;
         $127 = (($126) + 36|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = (FUNCTION_TABLE_ii[$128 & 511]($119)|0);
         $130 = ($129|0)==(-1);
         if ($130) {
          HEAP32[$__b>>2] = 0;
          $132 = 0;
          break;
         } else {
          $$pre$i$i$i$i26 = HEAP32[$__b>>2]|0;
          $132 = $$pre$i$i$i$i26;
          break;
         }
        } else {
         $132 = $119;
        }
       }
      } while(0);
      $131 = ($132|0)==(0|0);
      $133 = ($$sroa$081$0|0)==(0|0);
      do {
       if ($133) {
        label = 45;
       } else {
        $134 = (($$sroa$081$0) + 12|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (($$sroa$081$0) + 16|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($135|0)==($137|0);
        if (!($138)) {
         if ($131) {
          $$sroa$081$2 = $$sroa$081$0;
          break;
         } else {
          $$pre$i2$i$i6$i = $$sroa$081$0;
          break L62;
         }
        }
        $139 = HEAP32[$$sroa$081$0>>2]|0;
        $140 = (($139) + 36|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = (FUNCTION_TABLE_ii[$141 & 511]($$sroa$081$0)|0);
        $143 = ($142|0)==(-1);
        if ($143) {
         label = 45;
        } else {
         if ($131) {
          $$sroa$081$2 = $$sroa$081$0;
         } else {
          $$pre$i2$i$i6$i = $$sroa$081$0;
          break L62;
         }
        }
       }
      } while(0);
      if ((label|0) == 45) {
       label = 0;
       if ($131) {
        $$pre$i2$i$i6$i = 0;
        break;
       } else {
        $$sroa$081$2 = 0;
       }
      }
      $144 = HEAP32[$__b>>2]|0;
      $145 = (($144) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($144) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if ($149) {
       $150 = HEAP32[$144>>2]|0;
       $151 = (($150) + 36|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = (FUNCTION_TABLE_ii[$152 & 511]($144)|0);
       $$0$i$i$i30 = $153;
      } else {
       $154 = HEAP8[$146>>0]|0;
       $155 = $154&255;
       $$0$i$i$i30 = $155;
      }
      $156 = $$0$i$i$i30&255;
      $isascii1$i$i = ($156<<24>>24)>(-1);
      if (!($isascii1$i$i)) {
       $$pre$i2$i$i6$i = $$sroa$081$2;
       break;
      }
      $sext$i = $$0$i$i$i30 << 24;
      $157 = $sext$i >> 24;
      $158 = HEAP32[$118>>2]|0;
      $159 = (($158) + ($157<<1)|0);
      $160 = HEAP16[$159>>1]|0;
      $161 = $160 & 8192;
      $162 = ($161<<16>>16)==(0);
      if ($162) {
       $$pre$i2$i$i6$i = $$sroa$081$2;
       break;
      }
      $163 = HEAP32[$__b>>2]|0;
      $164 = (($163) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = (($163) + 16|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($165|0)==($167|0);
      if ($168) {
       $169 = HEAP32[$163>>2]|0;
       $170 = (($169) + 40|0);
       $171 = HEAP32[$170>>2]|0;
       (FUNCTION_TABLE_ii[$171 & 511]($163)|0);
       $$sroa$081$0 = $$sroa$081$2;
       continue;
      } else {
       $172 = (($165) + 1|0);
       HEAP32[$164>>2] = $172;
       $$sroa$081$0 = $$sroa$081$2;
       continue;
      }
     }
     $173 = HEAP32[$__b>>2]|0;
     $174 = ($173|0)==(0|0);
     do {
      if ($174) {
       $186 = 0;
      } else {
       $175 = (($173) + 12|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = (($173) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($176|0)==($178|0);
       if ($179) {
        $180 = HEAP32[$173>>2]|0;
        $181 = (($180) + 36|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = (FUNCTION_TABLE_ii[$182 & 511]($173)|0);
        $184 = ($183|0)==(-1);
        if ($184) {
         HEAP32[$__b>>2] = 0;
         $186 = 0;
         break;
        } else {
         $$pre$i$i$i2$i33 = HEAP32[$__b>>2]|0;
         $186 = $$pre$i$i$i2$i33;
         break;
        }
       } else {
        $186 = $173;
       }
      }
     } while(0);
     $185 = ($186|0)==(0|0);
     $187 = ($$pre$i2$i$i6$i|0)==(0|0);
     do {
      if ($187) {
       label = 64;
      } else {
       $188 = (($$pre$i2$i$i6$i) + 12|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = (($$pre$i2$i$i6$i) + 16|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ($189|0)==($191|0);
       if ($192) {
        $193 = HEAP32[$$pre$i2$i$i6$i>>2]|0;
        $194 = (($193) + 36|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = (FUNCTION_TABLE_ii[$195 & 511]($$pre$i2$i$i6$i)|0);
        $197 = ($196|0)==(-1);
        if ($197) {
         label = 64;
         break;
        }
       }
       if ($185) {
        break L7;
       }
      }
     } while(0);
     if ((label|0) == 64) {
      if (!($185)) {
       break L7;
      }
     }
     $198 = HEAP32[$__err>>2]|0;
     $199 = $198 | 2;
     HEAP32[$__err>>2] = $199;
     break;
    }
    case 83:  {
     $246 = HEAP32[$__e>>2]|0;
     $247 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$246,$__err,$17,2)|0);
     $248 = HEAP32[$__err>>2]|0;
     $249 = $248 & 4;
     $250 = ($249|0)==(0);
     $251 = ($247|0)<(61);
     $or$cond$i43 = $250 & $251;
     if ($or$cond$i43) {
      HEAP32[$__tm>>2] = $247;
      break L7;
     } else {
      $252 = $248 | 4;
      HEAP32[$__err>>2] = $252;
      break L7;
     }
     break;
    }
    case 114:  {
     $240 = HEAP32[$__b>>2]|0;
     $241 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$240,$241,$__iob,$__err,$__tm,5488,((5488 + 11|0)));
     $242 = HEAP32[$4>>2]|0;
     HEAP32[$__b>>2] = $242;
     break;
    }
    case 119:  {
     $256 = HEAP32[$__e>>2]|0;
     $257 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$256,$__err,$17,1)|0);
     $258 = HEAP32[$__err>>2]|0;
     $259 = $258 & 4;
     $260 = ($259|0)==(0);
     $261 = ($257|0)<(7);
     $or$cond$i46 = $260 & $261;
     if ($or$cond$i46) {
      $262 = (($__tm) + 24|0);
      HEAP32[$262>>2] = $257;
      break L7;
     } else {
      $263 = $258 | 4;
      HEAP32[$__err>>2] = $263;
      break L7;
     }
     break;
    }
    case 120:  {
     $264 = HEAP32[$this>>2]|0;
     $265 = (($264) + 20|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = HEAP32[$__b>>2]|0;
     HEAP32[$7>>2] = $267;
     $268 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $268;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$8+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$266 & 511]($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $269 = (($this) + 8|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = (($270) + 24|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = (FUNCTION_TABLE_ii[$272 & 511]($269)|0);
     $274 = HEAP32[$__b>>2]|0;
     $275 = HEAP32[$__e>>2]|0;
     $276 = HEAP8[$273>>0]|0;
     $277 = $276 & 1;
     $278 = ($277<<24>>24)==(0);
     if ($278) {
      $283 = (($273) + 1|0);
      $284 = $276&255;
      $285 = $284 >>> 1;
      $287 = $283;$288 = $285;
     } else {
      $279 = (($273) + 8|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = (($273) + 4|0);
      $282 = HEAP32[$281>>2]|0;
      $287 = $280;$288 = $282;
     }
     $286 = (($287) + ($288)|0);
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($9,$this,$274,$275,$__iob,$__err,$__tm,$287,$286);
     $289 = HEAP32[$9>>2]|0;
     HEAP32[$__b>>2] = $289;
     break;
    }
    case 121:  {
     $290 = (($__tm) + 20|0);
     $291 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($290,$__b,$291,$__err,$17);
     break;
    }
    case 89:  {
     $292 = HEAP32[$__e>>2]|0;
     $293 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$292,$__err,$17,4)|0);
     $294 = HEAP32[$__err>>2]|0;
     $295 = $294 & 4;
     $296 = ($295|0)==(0);
     if ($296) {
      $297 = (($__tm) + 20|0);
      $298 = (($293) + -1900)|0;
      HEAP32[$297>>2] = $298;
     }
     break;
    }
    case 37:  {
     $299 = HEAP32[$__e>>2]|0;
     $300 = HEAP32[$__b>>2]|0;
     $301 = ($300|0)==(0|0);
     do {
      if ($301) {
       $313 = 0;
      } else {
       $302 = (($300) + 12|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = (($300) + 16|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = ($303|0)==($305|0);
       if ($306) {
        $307 = HEAP32[$300>>2]|0;
        $308 = (($307) + 36|0);
        $309 = HEAP32[$308>>2]|0;
        $310 = (FUNCTION_TABLE_ii[$309 & 511]($300)|0);
        $311 = ($310|0)==(-1);
        if ($311) {
         HEAP32[$__b>>2] = 0;
         $313 = 0;
         break;
        } else {
         $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
         $313 = $$pre$i$i$i$i;
         break;
        }
       } else {
        $313 = $300;
       }
      }
     } while(0);
     $312 = ($313|0)==(0|0);
     $314 = ($299|0)==(0|0);
     do {
      if ($314) {
       label = 106;
      } else {
       $315 = (($299) + 12|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = (($299) + 16|0);
       $318 = HEAP32[$317>>2]|0;
       $319 = ($316|0)==($318|0);
       if ($319) {
        $320 = HEAP32[$299>>2]|0;
        $321 = (($320) + 36|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (FUNCTION_TABLE_ii[$322 & 511]($299)|0);
        $324 = ($323|0)==(-1);
        if ($324) {
         label = 106;
         break;
        }
       }
       if ($312) {
        $$pre$i2$i$i611$i = $299;
       } else {
        label = 107;
       }
      }
     } while(0);
     if ((label|0) == 106) {
      if ($312) {
       label = 107;
      } else {
       $$pre$i2$i$i611$i = 0;
      }
     }
     if ((label|0) == 107) {
      $325 = HEAP32[$__err>>2]|0;
      $326 = $325 | 6;
      HEAP32[$__err>>2] = $326;
      break L7;
     }
     $327 = HEAP32[$__b>>2]|0;
     $328 = (($327) + 12|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($327) + 16|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($329|0)==($331|0);
     if ($332) {
      $333 = HEAP32[$327>>2]|0;
      $334 = (($333) + 36|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = (FUNCTION_TABLE_ii[$335 & 511]($327)|0);
      $$0$i$i$i = $336;
     } else {
      $337 = HEAP8[$329>>0]|0;
      $338 = $337&255;
      $$0$i$i$i = $338;
     }
     $339 = $$0$i$i$i&255;
     $340 = HEAP32[$17>>2]|0;
     $341 = (($340) + 36|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (FUNCTION_TABLE_iiii[$342 & 511]($17,$339,0)|0);
     $344 = ($343<<24>>24)==(37);
     if (!($344)) {
      $345 = HEAP32[$__err>>2]|0;
      $346 = $345 | 4;
      HEAP32[$__err>>2] = $346;
      break L7;
     }
     $347 = HEAP32[$__b>>2]|0;
     $348 = (($347) + 12|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = (($347) + 16|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = ($349|0)==($351|0);
     if ($352) {
      $353 = HEAP32[$347>>2]|0;
      $354 = (($353) + 40|0);
      $355 = HEAP32[$354>>2]|0;
      (FUNCTION_TABLE_ii[$355 & 511]($347)|0);
      $$pre$i = HEAP32[$__b>>2]|0;
      $358 = $$pre$i;
     } else {
      $356 = (($349) + 1|0);
      HEAP32[$348>>2] = $356;
      $358 = $347;
     }
     $357 = ($358|0)==(0|0);
     do {
      if ($357) {
       $370 = 0;
      } else {
       $359 = (($358) + 12|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = (($358) + 16|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = ($360|0)==($362|0);
       if ($363) {
        $364 = HEAP32[$358>>2]|0;
        $365 = (($364) + 36|0);
        $366 = HEAP32[$365>>2]|0;
        $367 = (FUNCTION_TABLE_ii[$366 & 511]($358)|0);
        $368 = ($367|0)==(-1);
        if ($368) {
         HEAP32[$__b>>2] = 0;
         $370 = 0;
         break;
        } else {
         $$pre$i$i$i2$i = HEAP32[$__b>>2]|0;
         $370 = $$pre$i$i$i2$i;
         break;
        }
       } else {
        $370 = $358;
       }
      }
     } while(0);
     $369 = ($370|0)==(0|0);
     $371 = ($$pre$i2$i$i611$i|0)==(0|0);
     do {
      if ($371) {
       label = 125;
      } else {
       $372 = (($$pre$i2$i$i611$i) + 12|0);
       $373 = HEAP32[$372>>2]|0;
       $374 = (($$pre$i2$i$i611$i) + 16|0);
       $375 = HEAP32[$374>>2]|0;
       $376 = ($373|0)==($375|0);
       if ($376) {
        $377 = HEAP32[$$pre$i2$i$i611$i>>2]|0;
        $378 = (($377) + 36|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = (FUNCTION_TABLE_ii[$379 & 511]($$pre$i2$i$i611$i)|0);
        $381 = ($380|0)==(-1);
        if ($381) {
         label = 125;
         break;
        }
       }
       if ($369) {
        break L7;
       }
      }
     } while(0);
     if ((label|0) == 125) {
      if (!($369)) {
       break L7;
      }
     }
     $382 = HEAP32[$__err>>2]|0;
     $383 = $382 | 2;
     HEAP32[$__err>>2] = $383;
     break;
    }
    default: {
     $384 = HEAP32[$__err>>2]|0;
     $385 = $384 | 4;
     HEAP32[$__err>>2] = $385;
    }
    }
   } while(0);
   $386 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $386;
   STACKTOP = sp;return;
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $29 = (($11) + 4|0);
 $30 = HEAP32[$29>>2]|0;HEAP32[$29>>2] = (($30+-1)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  ___resumeException($27|0);
  // unreachable;
 }
 $32 = HEAP32[$11>>2]|0;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vi[$34 & 511]($11);
 ___resumeException($27|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b$0,$__e$0,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b$0 = $__b$0|0;
 $__e$0 = $__e$0|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$ = 0, $$$pre$i$i$i18 = 0, $$$pre$i$i$i3 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i$i$i16 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i22 = 0, $$0$i$i1$i$i7 = 0, $$0$i$i13 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$4 = 0, $$5 = 0, $$__b$sroa$0$1 = 0;
 var $$__b$sroa$0$13 = 0, $$__b$sroa$0$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $$pre$i3$i$i942 = 0, $$pre$i3$i$i943 = 0, $$pre41 = 0, $$pre41$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b$sroa$0$0 = 0, $__b$sroa$0$1 = 0, $__b$sroa$0$2 = 0, $__b$sroa$0$3 = 0, $__b$sroa$0$4 = 0, $__b$sroa$0$5 = 0, $__cmd$0 = 0;
 var $__e$sroa$0$0 = 0, $__e$sroa$0$1 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__opt$0 = 0, $phitmp$i4$i$i10 = 0, $tmp$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $3 = (($__iob) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_ii(380,(6544|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $$idx = (($4) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($4) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = (($4) + 4|0);
   $14 = HEAP32[$13>>2]|0;HEAP32[$13>>2] = (($14+-1)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$4>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    FUNCTION_TABLE_vi[$18 & 511]($4);
   }
   HEAP32[$__err>>2] = 0;
   $19 = ($__fmtb|0)==($__fmte|0);
   L7: do {
    if ($19) {
     $$pre$i$i$i18 = $__b$0;$__e$sroa$0$10 = $__e$0;
    } else {
     $$0$ph40 = $__fmtb;$$pre41 = 0;$__b$sroa$0$0 = $__b$0;$__e$sroa$0$0 = $__e$0;
     L9: while(1) {
      $21 = $$pre41;$__b$sroa$0$1 = $__b$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
      while(1) {
       $20 = ($21|0)==(0);
       if (!($20)) {
        $$pre$i$i$i18 = $__b$sroa$0$1;$__e$sroa$0$10 = $__e$sroa$0$1;
        break L7;
       }
       $22 = ($__b$sroa$0$1|0)==(0|0);
       if ($22) {
        $195 = 1;$77 = 0;$__b$sroa$0$2 = 0;
       } else {
        $23 = (($__b$sroa$0$1) + 12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($__b$sroa$0$1) + 16|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ($24|0)==($26|0);
        if ($27) {
         $28 = HEAP32[$__b$sroa$0$1>>2]|0;
         $29 = (($28) + 36|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = (FUNCTION_TABLE_ii[$30 & 511]($__b$sroa$0$1)|0);
         $$0$i$i$i$i = $31;
        } else {
         $32 = HEAP32[$24>>2]|0;
         $$0$i$i$i$i = $32;
        }
        $33 = ($$0$i$i$i$i|0)==(-1);
        $$__b$sroa$0$1 = $33 ? 0 : $__b$sroa$0$1;
        $$__b$sroa$0$13 = $33 ? 0 : $__b$sroa$0$1;
        $$ = $33 ? 1 : 0;
        $195 = $$;$77 = $$__b$sroa$0$13;$__b$sroa$0$2 = $$__b$sroa$0$1;
       }
       $34 = ($__e$sroa$0$1|0)==(0|0);
       if ($34) {
        label = 19;
       } else {
        $35 = (($__e$sroa$0$1) + 12|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (($__e$sroa$0$1) + 16|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($36|0)==($38|0);
        if ($39) {
         $40 = HEAP32[$__e$sroa$0$1>>2]|0;
         $41 = (($40) + 36|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (FUNCTION_TABLE_ii[$42 & 511]($__e$sroa$0$1)|0);
         $$0$i$i1$i$i = $43;
        } else {
         $44 = HEAP32[$36>>2]|0;
         $$0$i$i1$i$i = $44;
        }
        $45 = ($$0$i$i1$i$i|0)==(-1);
        if ($45) {
         label = 19;
        } else {
         if ($195) {
          $__e$sroa$0$4 = $__e$sroa$0$1;
         } else {
          $__e$sroa$0$3 = $__e$sroa$0$1;
          label = 21;
          break L9;
         }
        }
       }
       if ((label|0) == 19) {
        label = 0;
        if ($195) {
         $__e$sroa$0$3 = 0;
         label = 21;
         break L9;
        } else {
         $__e$sroa$0$4 = 0;
        }
       }
       $54 = HEAP32[$$0$ph40>>2]|0;
       $55 = HEAP32[$10>>2]|0;
       $56 = (($55) + 52|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_iiii[$57 & 511]($10,$54,0)|0);
       $59 = ($58<<24>>24)==(37);
       if ($59) {
        label = 26;
        break;
       }
       $81 = HEAP32[$$0$ph40>>2]|0;
       $82 = HEAP32[$10>>2]|0;
       $83 = (($82) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (FUNCTION_TABLE_iiii[$84 & 511]($10,8192,$81)|0);
       if ($85) {
        $$0$pn = $$0$ph40;
        label = 36;
        break;
       }
       $140 = (($77) + 12|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = (($77) + 16|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($141|0)==($143|0);
       if ($144) {
        $145 = HEAP32[$77>>2]|0;
        $146 = (($145) + 36|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (FUNCTION_TABLE_ii[$147 & 511]($77)|0);
        $$0$i$i13 = $148;
       } else {
        $149 = HEAP32[$141>>2]|0;
        $$0$i$i13 = $149;
       }
       $150 = HEAP32[$10>>2]|0;
       $151 = (($150) + 28|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = (FUNCTION_TABLE_iii[$152 & 511]($10,$$0$i$i13)|0);
       $154 = HEAP32[$$0$ph40>>2]|0;
       $155 = HEAP32[$10>>2]|0;
       $156 = (($155) + 28|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = (FUNCTION_TABLE_iii[$157 & 511]($10,$154)|0);
       $159 = ($153|0)==($158|0);
       if ($159) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $21 = 4;$__b$sroa$0$1 = $__b$sroa$0$2;$__e$sroa$0$1 = $__e$sroa$0$4;
      }
      L38: do {
       if ((label|0) == 26) {
        label = 0;
        $60 = (($$0$ph40) + 4|0);
        $61 = ($60|0)==($__fmte|0);
        if ($61) {
         label = 27;
         break L9;
        }
        $62 = HEAP32[$60>>2]|0;
        $63 = HEAP32[$10>>2]|0;
        $64 = (($63) + 52|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (FUNCTION_TABLE_iiii[$65 & 511]($10,$62,0)|0);
        if ((($66<<24>>24) == 48) | (($66<<24>>24) == 69)) {
         $67 = (($$0$ph40) + 8|0);
         $68 = ($67|0)==($__fmte|0);
         if ($68) {
          label = 30;
          break L9;
         }
         $69 = HEAP32[$67>>2]|0;
         $70 = HEAP32[$10>>2]|0;
         $71 = (($70) + 52|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (FUNCTION_TABLE_iiii[$72 & 511]($10,$69,0)|0);
         $$1 = $67;$__cmd$0 = $73;$__opt$0 = $66;
        } else {
         $$1 = $60;$__cmd$0 = $66;$__opt$0 = 0;
        }
        $74 = HEAP32[$this>>2]|0;
        $75 = (($74) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        HEAP32[$1>>2] = $77;
        HEAP32[$2>>2] = $__e$sroa$0$4;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$76 & 255]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $78 = HEAP32[$0>>2]|0;
        $79 = (($$1) + 4|0);
        $$0$ph$be = $79;$__b$sroa$0$3 = $78;$__e$sroa$0$5 = $__e$sroa$0$4;
       }
       else if ((label|0) == 36) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 4|0);
         $86 = ($$2|0)==($__fmte|0);
         if ($86) {
          $$2$lcssa = $__fmte;
          break;
         }
         $87 = HEAP32[$$2>>2]|0;
         $88 = HEAP32[$10>>2]|0;
         $89 = (($88) + 12|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (FUNCTION_TABLE_iiii[$90 & 511]($10,8192,$87)|0);
         if ($91) {
          $$0$pn = $$2;
          label = 36;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        $$pre$i$i$i3 = $77;$$pre$i3$i$i9 = $__e$sroa$0$4;$105 = $__e$sroa$0$4;$__b$sroa$0$4 = $__b$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$4;
        while(1) {
         $92 = ($$pre$i$i$i3|0)==(0|0);
         if ($92) {
          $117 = 1;$119 = 0;$__b$sroa$0$5 = $__b$sroa$0$4;
         } else {
          $93 = (($$pre$i$i$i3) + 12|0);
          $94 = HEAP32[$93>>2]|0;
          $95 = (($$pre$i$i$i3) + 16|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = ($94|0)==($96|0);
          if ($97) {
           $98 = HEAP32[$$pre$i$i$i3>>2]|0;
           $99 = (($98) + 36|0);
           $100 = HEAP32[$99>>2]|0;
           $101 = (FUNCTION_TABLE_ii[$100 & 511]($$pre$i$i$i3)|0);
           $$0$i$i$i$i1 = $101;
          } else {
           $102 = HEAP32[$94>>2]|0;
           $$0$i$i$i$i1 = $102;
          }
          $103 = ($$0$i$i$i$i1|0)==(-1);
          $$__b$sroa$0$4 = $103 ? 0 : $__b$sroa$0$4;
          $$$pre$i$i$i3 = $103 ? 0 : $$pre$i$i$i3;
          $$4 = $103 ? 1 : 0;
          $117 = $$4;$119 = $$$pre$i$i$i3;$__b$sroa$0$5 = $$__b$sroa$0$4;
         }
         $104 = ($105|0)==(0|0);
         if ($104) {
          $$pre$i3$i$i943 = $$pre$i3$i$i9;$__e$sroa$0$7 = $__e$sroa$0$6;
          label = 49;
         } else {
          $106 = (($105) + 12|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = (($105) + 16|0);
          $109 = HEAP32[$108>>2]|0;
          $110 = ($107|0)==($109|0);
          if ($110) {
           $111 = HEAP32[$105>>2]|0;
           $112 = (($111) + 36|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = (FUNCTION_TABLE_ii[$113 & 511]($105)|0);
           $$0$i$i1$i$i7 = $114;
          } else {
           $115 = HEAP32[$107>>2]|0;
           $$0$i$i1$i$i7 = $115;
          }
          $116 = ($$0$i$i1$i$i7|0)==(-1);
          if ($116) {
           $$pre$i3$i$i943 = 0;$__e$sroa$0$7 = 0;
           label = 49;
          } else {
           $phitmp$i4$i$i10 = ($$pre$i3$i$i9|0)==(0|0);
           $tmp$i$i12 = $117 ^ $phitmp$i4$i$i10;
           if ($tmp$i$i12) {
            $$pre$i3$i$i942 = $$pre$i3$i$i9;$196 = $$pre$i3$i$i9;$__e$sroa$0$8 = $__e$sroa$0$6;
           } else {
            $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$6;
            break L38;
           }
          }
         }
         if ((label|0) == 49) {
          label = 0;
          if ($117) {
           $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$7;
           break L38;
          } else {
           $$pre$i3$i$i942 = $$pre$i3$i$i943;$196 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
          }
         }
         $118 = (($119) + 12|0);
         $120 = HEAP32[$118>>2]|0;
         $121 = (($119) + 16|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($120|0)==($122|0);
         if ($123) {
          $124 = HEAP32[$119>>2]|0;
          $125 = (($124) + 36|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = (FUNCTION_TABLE_ii[$126 & 511]($119)|0);
          $$0$i$i = $127;
         } else {
          $128 = HEAP32[$120>>2]|0;
          $$0$i$i = $128;
         }
         $129 = HEAP32[$10>>2]|0;
         $130 = (($129) + 12|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (FUNCTION_TABLE_iiii[$131 & 511]($10,8192,$$0$i$i)|0);
         if (!($132)) {
          $$0$ph$be = $$2$lcssa;$__b$sroa$0$3 = $__b$sroa$0$5;$__e$sroa$0$5 = $__e$sroa$0$8;
          break L38;
         }
         $133 = HEAP32[$118>>2]|0;
         $134 = HEAP32[$121>>2]|0;
         $135 = ($133|0)==($134|0);
         if ($135) {
          $136 = HEAP32[$119>>2]|0;
          $137 = (($136) + 40|0);
          $138 = HEAP32[$137>>2]|0;
          (FUNCTION_TABLE_ii[$138 & 511]($119)|0);
          $$pre$i$i$i3 = $119;$$pre$i3$i$i9 = $$pre$i3$i$i942;$105 = $196;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
          continue;
         } else {
          $139 = (($133) + 4|0);
          HEAP32[$118>>2] = $139;
          $$pre$i$i$i3 = $119;$$pre$i3$i$i9 = $$pre$i3$i$i942;$105 = $196;$__b$sroa$0$4 = $__b$sroa$0$5;$__e$sroa$0$6 = $__e$sroa$0$8;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $160 = HEAP32[$140>>2]|0;
        $161 = HEAP32[$142>>2]|0;
        $162 = ($160|0)==($161|0);
        if ($162) {
         $163 = HEAP32[$77>>2]|0;
         $164 = (($163) + 40|0);
         $165 = HEAP32[$164>>2]|0;
         (FUNCTION_TABLE_ii[$165 & 511]($77)|0);
        } else {
         $166 = (($160) + 4|0);
         HEAP32[$140>>2] = $166;
        }
        $167 = (($$0$ph40) + 4|0);
        $$0$ph$be = $167;$__b$sroa$0$3 = $__b$sroa$0$2;$__e$sroa$0$5 = $__e$sroa$0$4;
       }
      } while(0);
      $80 = ($$0$ph$be|0)==($__fmte|0);
      if ($80) {
       $$pre$i$i$i18 = $__b$sroa$0$3;$__e$sroa$0$10 = $__e$sroa$0$5;
       break L7;
      }
      $$pre41$pre = HEAP32[$__err>>2]|0;
      $$0$ph40 = $$0$ph$be;$$pre41 = $$pre41$pre;$__b$sroa$0$0 = $__b$sroa$0$3;$__e$sroa$0$0 = $__e$sroa$0$5;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i18 = $77;$__e$sroa$0$10 = $__e$sroa$0$3;
      break;
     }
     else if ((label|0) == 27) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i18 = $77;$__e$sroa$0$10 = $__e$sroa$0$4;
      break;
     }
     else if ((label|0) == 30) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i18 = $77;$__e$sroa$0$10 = $__e$sroa$0$4;
      break;
     }
    }
   } while(0);
   $168 = ($$pre$i$i$i18|0)==(0|0);
   if ($168) {
    $194 = 0;$197 = 1;
   } else {
    $169 = (($$pre$i$i$i18) + 12|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($$pre$i$i$i18) + 16|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($170|0)==($172|0);
    if ($173) {
     $174 = HEAP32[$$pre$i$i$i18>>2]|0;
     $175 = (($174) + 36|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (FUNCTION_TABLE_ii[$176 & 511]($$pre$i$i$i18)|0);
     $$0$i$i$i$i16 = $177;
    } else {
     $178 = HEAP32[$170>>2]|0;
     $$0$i$i$i$i16 = $178;
    }
    $179 = ($$0$i$i$i$i16|0)==(-1);
    $$$pre$i$i$i18 = $179 ? 0 : $$pre$i$i$i18;
    $$5 = $179 ? 1 : 0;
    $194 = $$$pre$i$i$i18;$197 = $$5;
   }
   $180 = ($__e$sroa$0$10|0)==(0|0);
   if ($180) {
    label = 77;
   } else {
    $181 = (($__e$sroa$0$10) + 12|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($__e$sroa$0$10) + 16|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = ($182|0)==($184|0);
    if ($185) {
     $186 = HEAP32[$__e$sroa$0$10>>2]|0;
     $187 = (($186) + 36|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (FUNCTION_TABLE_ii[$188 & 511]($__e$sroa$0$10)|0);
     $$0$i$i1$i$i22 = $189;
    } else {
     $190 = HEAP32[$182>>2]|0;
     $$0$i$i1$i$i22 = $190;
    }
    $191 = ($$0$i$i1$i$i22|0)==(-1);
    if ($191) {
     label = 77;
    } else {
     if ($197) {
      HEAP32[$agg$result>>2] = $194;
      STACKTOP = sp;return;
     }
    }
   }
   if ((label|0) == 77) {
    if (!($197)) {
     HEAP32[$agg$result>>2] = $194;
     STACKTOP = sp;return;
    }
   }
   $192 = HEAP32[$__err>>2]|0;
   $193 = $192 | 2;
   HEAP32[$__err>>2] = $193;
   HEAP32[$agg$result>>2] = $194;
   STACKTOP = sp;return;
  }
 }
 $46 = ___cxa_find_matching_catch()|0;
 $47 = tempRet0;
 $48 = (($4) + 4|0);
 $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49+-1)|0);
 $50 = ($49|0)==(0);
 if (!($50)) {
  ___resumeException($46|0);
  // unreachable;
 }
 $51 = HEAP32[$4>>2]|0;
 $52 = (($51) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vi[$53 & 511]($4);
 ___resumeException($46|0);
 // unreachable;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = HEAP32[$__e>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$0,$1,$__iob,$__err,$__tm,5616,((5616 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = HEAP32[$__b>>2]|0;
 $6 = HEAP32[$__e>>2]|0;
 $7 = HEAP8[$4>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $14 = (($4) + 4|0);
  $15 = $7&255;
  $16 = $15 >>> 1;
  $18 = $14;$19 = $16;
 } else {
  $10 = (($4) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($4) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $11;$19 = $13;
 }
 $17 = (($18) + ($19<<2)|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$5,$6,$__iob,$__err,$__tm,$18,$17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 24|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 511]($0)|0);
 $4 = (($3) + 168|0);
 $5 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$3,$4,$__ct,$__err,0)|0);
 $6 = $5;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)<(168);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($8|0) / 12)&-1;
 $11 = (($10|0) % 7)&-1;
 HEAP32[$__w>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 16|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e$0,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 511]($0)|0);
 $5 = (($4) + 288|0);
 $6 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$4,$5,$__ct,$__err,0)|0);
 $7 = $6;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)<(288);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($9|0) / 12)&-1;
 $12 = (($11|0) % 12)&-1;
 HEAP32[$__m>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $$idx = (($1) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($1) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($4|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $10 = (($1) + 4|0);
   $11 = HEAP32[$10>>2]|0;HEAP32[$10>>2] = (($11+-1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vi[$15 & 511]($1);
   }
   $16 = (($__tm) + 20|0);
   $17 = HEAP32[$__e>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($16,$__b,$17,$__err,$7);
   $18 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $18;
   STACKTOP = sp;return;
  }
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $21 = (($1) + 4|0);
 $22 = HEAP32[$21>>2]|0;HEAP32[$21>>2] = (($22+-1)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  ___resumeException($19|0);
  // unreachable;
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 511]($1);
 ___resumeException($19|0);
 // unreachable;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y,$__b,$__e$0,$__err,$__ct) {
 $__y = $__y|0;
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,4)|0);
 $1 = HEAP32[$__err>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ($0|0)<(69);
 if ($4) {
  $5 = (($0) + 2000)|0;
  $__t$0 = $5;
 } else {
  $$off = (($0) + -69)|0;
  $6 = ($$off>>>0)<(31);
  $7 = (($0) + 1900)|0;
  $$ = $6 ? $7 : $0;
  $__t$0 = $$;
 }
 $8 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i25 = 0, $$0$i$i$i$i1$i = 0, $$0$i$i$i$i1$i35 = 0, $$0$i$i$i33 = 0, $$0$i$i1$i$i$i = 0, $$0$i$i1$i$i$i31 = 0, $$0$i$i1$i$i7$i = 0, $$0$i$i1$i$i7$i41 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$idx = 0, $$idx$val = 0, $$idx55 = 0, $$idx55$val = 0, $$pre$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i27 = 0, $$pre$i$i$i3$i = 0;
 var $$pre$i$i$i3$i37 = 0, $$pre$i3$i$i9$i = 0, $$pre$i3$i$i915$i = 0, $$sroa$087$0 = 0, $$sroa$087$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i49 = 0, $or$cond$i52 = 0, $or$cond$i8 = 0, $or$cond3$i = 0, $or$cond3$i12 = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i28 = 0;
 var $phitmp$i$i$i4$i = 0, $phitmp$i$i$i4$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp + 16|0;
 $1 = sp;
 $2 = sp + 28|0;
 $3 = sp + 32|0;
 $4 = sp + 40|0;
 $5 = sp + 12|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 HEAP32[$__err>>2] = 0;
 $10 = (($__iob) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;HEAP32[$12>>2] = (($13+1)|0);
 __THREW__ = 0;
 $14 = (invoke_ii(380,(6544|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $$idx = (($11) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx55 = (($11) + 12|0);
  $$idx55$val = HEAP32[$$idx55>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iiii(381,($$idx$val|0),($$idx55$val|0),($14|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = (($11) + 4|0);
   $21 = HEAP32[$20>>2]|0;HEAP32[$20>>2] = (($21+-1)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = HEAP32[$11>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_vi[$25 & 511]($11);
   }
   $26 = $__fmt << 24 >> 24;
   L7: do {
    switch ($26|0) {
    case 106:  {
     $92 = HEAP32[$__e>>2]|0;
     $93 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$92,$__err,$17,3)|0);
     $94 = HEAP32[$__err>>2]|0;
     $95 = $94 & 4;
     $96 = ($95|0)==(0);
     $97 = ($93|0)<(366);
     $or$cond$i15 = $96 & $97;
     if ($or$cond$i15) {
      $98 = (($__tm) + 28|0);
      HEAP32[$98>>2] = $93;
      break L7;
     } else {
      $99 = $94 | 4;
      HEAP32[$__err>>2] = $99;
      break L7;
     }
     break;
    }
    case 104: case 66: case 98:  {
     $37 = (($__tm) + 16|0);
     $38 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$37,$__b,$38,$__err,$17);
     break;
    }
    case 68:  {
     $69 = HEAP32[$__b>>2]|0;
     $70 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$69,$70,$__iob,$__err,$__tm,5648,((5648 + 32|0)));
     $71 = HEAP32[$2>>2]|0;
     HEAP32[$__b>>2] = $71;
     break;
    }
    case 65: case 97:  {
     $35 = (($__tm) + 24|0);
     $36 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$35,$__b,$36,$__err,$17);
     break;
    }
    case 73:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$83,$__err,$17,2)|0);
     $85 = HEAP32[$__err>>2]|0;
     $86 = $85 & 4;
     $87 = ($86|0)==(0);
     $88 = ($84|0)>(0);
     $or$cond$i11 = $87 & $88;
     $89 = ($84|0)<(13);
     $or$cond3$i12 = $or$cond$i11 & $89;
     if ($or$cond3$i12) {
      $90 = (($__tm) + 8|0);
      HEAP32[$90>>2] = $84;
      break L7;
     } else {
      $91 = $85 | 4;
      HEAP32[$__err>>2] = $91;
      break L7;
     }
     break;
    }
    case 109:  {
     $100 = HEAP32[$__e>>2]|0;
     $101 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$100,$__err,$17,2)|0);
     $102 = HEAP32[$__err>>2]|0;
     $103 = $102 & 4;
     $104 = ($103|0)==(0);
     $105 = ($101|0)<(13);
     $or$cond$i18 = $104 & $105;
     if ($or$cond$i18) {
      $106 = (($__tm) + 16|0);
      $107 = (($101) + -1)|0;
      HEAP32[$106>>2] = $107;
      break L7;
     } else {
      $108 = $102 | 4;
      HEAP32[$__err>>2] = $108;
      break L7;
     }
     break;
    }
    case 77:  {
     $109 = HEAP32[$__e>>2]|0;
     $110 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$109,$__err,$17,2)|0);
     $111 = HEAP32[$__err>>2]|0;
     $112 = $111 & 4;
     $113 = ($112|0)==(0);
     $114 = ($110|0)<(60);
     $or$cond$i21 = $113 & $114;
     if ($or$cond$i21) {
      $115 = (($__tm) + 4|0);
      HEAP32[$115>>2] = $110;
      break L7;
     } else {
      $116 = $111 | 4;
      HEAP32[$__err>>2] = $116;
      break L7;
     }
     break;
    }
    case 70:  {
     $72 = HEAP32[$__b>>2]|0;
     $73 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$72,$73,$__iob,$__err,$__tm,5680,((5680 + 32|0)));
     $74 = HEAP32[$3>>2]|0;
     HEAP32[$__b>>2] = $74;
     break;
    }
    case 99:  {
     $39 = (($this) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (FUNCTION_TABLE_ii[$42 & 511]($39)|0);
     $44 = HEAP32[$__b>>2]|0;
     $45 = HEAP32[$__e>>2]|0;
     $46 = HEAP8[$43>>0]|0;
     $47 = $46 & 1;
     $48 = ($47<<24>>24)==(0);
     if ($48) {
      $53 = (($43) + 4|0);
      $54 = $46&255;
      $55 = $54 >>> 1;
      $57 = $53;$58 = $55;
     } else {
      $49 = (($43) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($43) + 4|0);
      $52 = HEAP32[$51>>2]|0;
      $57 = $50;$58 = $52;
     }
     $56 = (($57) + ($58<<2)|0);
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($1,$this,$44,$45,$__iob,$__err,$__tm,$57,$56);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__b>>2] = $59;
     break;
    }
    case 101: case 100:  {
     $60 = HEAP32[$__e>>2]|0;
     $61 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$60,$__err,$17,2)|0);
     $62 = HEAP32[$__err>>2]|0;
     $63 = $62 & 4;
     $64 = ($63|0)==(0);
     $65 = ($61|0)>(0);
     $or$cond$i = $64 & $65;
     $66 = ($61|0)<(32);
     $or$cond3$i = $or$cond$i & $66;
     if ($or$cond3$i) {
      $67 = (($__tm) + 12|0);
      HEAP32[$67>>2] = $61;
      break L7;
     } else {
      $68 = $62 | 4;
      HEAP32[$__err>>2] = $68;
      break L7;
     }
     break;
    }
    case 116: case 110:  {
     $117 = HEAP32[$__e>>2]|0;
     $$sroa$087$0 = $117;
     while(1) {
      $118 = HEAP32[$__b>>2]|0;
      $119 = ($118|0)==(0|0);
      do {
       if ($119) {
        $380 = 1;
       } else {
        $120 = (($118) + 12|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($118) + 16|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($121|0)==($123|0);
        if ($124) {
         $125 = HEAP32[$118>>2]|0;
         $126 = (($125) + 36|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = (FUNCTION_TABLE_ii[$127 & 511]($118)|0);
         $$0$i$i$i$i$i25 = $128;
        } else {
         $129 = HEAP32[$121>>2]|0;
         $$0$i$i$i$i$i25 = $129;
        }
        $130 = ($$0$i$i$i$i$i25|0)==(-1);
        if ($130) {
         HEAP32[$__b>>2] = 0;
         $380 = 1;
         break;
        } else {
         $$pre$i$i$i$i27 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i$i28 = ($$pre$i$i$i$i27|0)==(0|0);
         $380 = $phitmp$i$i$i$i28;
         break;
        }
       }
      } while(0);
      $131 = ($$sroa$087$0|0)==(0|0);
      if ($131) {
       label = 48;
      } else {
       $132 = (($$sroa$087$0) + 12|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = (($$sroa$087$0) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($133|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$$sroa$087$0>>2]|0;
        $138 = (($137) + 36|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (FUNCTION_TABLE_ii[$139 & 511]($$sroa$087$0)|0);
        $$0$i$i1$i$i$i31 = $140;
       } else {
        $141 = HEAP32[$133>>2]|0;
        $$0$i$i1$i$i$i31 = $141;
       }
       $142 = ($$0$i$i1$i$i$i31|0)==(-1);
       if ($142) {
        label = 48;
       } else {
        if ($380) {
         $$sroa$087$2 = $$sroa$087$0;
        } else {
         $$pre$i3$i$i9$i = $$sroa$087$0;
         break;
        }
       }
      }
      if ((label|0) == 48) {
       label = 0;
       if ($380) {
        $$pre$i3$i$i9$i = 0;
        break;
       } else {
        $$sroa$087$2 = 0;
       }
      }
      $143 = HEAP32[$__b>>2]|0;
      $144 = (($143) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($143) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$143>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 511]($143)|0);
       $$0$i$i$i33 = $152;
      } else {
       $153 = HEAP32[$145>>2]|0;
       $$0$i$i$i33 = $153;
      }
      $154 = HEAP32[$17>>2]|0;
      $155 = (($154) + 12|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (FUNCTION_TABLE_iiii[$156 & 511]($17,8192,$$0$i$i$i33)|0);
      if (!($157)) {
       $$pre$i3$i$i9$i = $$sroa$087$2;
       break;
      }
      $158 = HEAP32[$__b>>2]|0;
      $159 = (($158) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (($158) + 16|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($160|0)==($162|0);
      if ($163) {
       $164 = HEAP32[$158>>2]|0;
       $165 = (($164) + 40|0);
       $166 = HEAP32[$165>>2]|0;
       (FUNCTION_TABLE_ii[$166 & 511]($158)|0);
       $$sroa$087$0 = $$sroa$087$2;
       continue;
      } else {
       $167 = (($160) + 4|0);
       HEAP32[$159>>2] = $167;
       $$sroa$087$0 = $$sroa$087$2;
       continue;
      }
     }
     $168 = HEAP32[$__b>>2]|0;
     $169 = ($168|0)==(0|0);
     do {
      if ($169) {
       $381 = 1;
      } else {
       $170 = (($168) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = (($168) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($171|0)==($173|0);
       if ($174) {
        $175 = HEAP32[$168>>2]|0;
        $176 = (($175) + 36|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = (FUNCTION_TABLE_ii[$177 & 511]($168)|0);
        $$0$i$i$i$i1$i35 = $178;
       } else {
        $179 = HEAP32[$171>>2]|0;
        $$0$i$i$i$i1$i35 = $179;
       }
       $180 = ($$0$i$i$i$i1$i35|0)==(-1);
       if ($180) {
        HEAP32[$__b>>2] = 0;
        $381 = 1;
        break;
       } else {
        $$pre$i$i$i3$i37 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i4$i38 = ($$pre$i$i$i3$i37|0)==(0|0);
        $381 = $phitmp$i$i$i4$i38;
        break;
       }
      }
     } while(0);
     $181 = ($$pre$i3$i$i9$i|0)==(0|0);
     if ($181) {
      label = 69;
     } else {
      $182 = (($$pre$i3$i$i9$i) + 12|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (($$pre$i3$i$i9$i) + 16|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($183|0)==($185|0);
      if ($186) {
       $187 = HEAP32[$$pre$i3$i$i9$i>>2]|0;
       $188 = (($187) + 36|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = (FUNCTION_TABLE_ii[$189 & 511]($$pre$i3$i$i9$i)|0);
       $$0$i$i1$i$i7$i41 = $190;
      } else {
       $191 = HEAP32[$183>>2]|0;
       $$0$i$i1$i$i7$i41 = $191;
      }
      $192 = ($$0$i$i1$i$i7$i41|0)==(-1);
      if ($192) {
       label = 69;
      } else {
       if ($381) {
        break L7;
       }
      }
     }
     if ((label|0) == 69) {
      if (!($381)) {
       break L7;
      }
     }
     $193 = HEAP32[$__err>>2]|0;
     $194 = $193 | 2;
     HEAP32[$__err>>2] = $194;
     break;
    }
    case 89:  {
     $287 = HEAP32[$__e>>2]|0;
     $288 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$287,$__err,$17,4)|0);
     $289 = HEAP32[$__err>>2]|0;
     $290 = $289 & 4;
     $291 = ($290|0)==(0);
     if ($291) {
      $292 = (($__tm) + 20|0);
      $293 = (($288) + -1900)|0;
      HEAP32[$292>>2] = $293;
     }
     break;
    }
    case 72:  {
     $75 = HEAP32[$__e>>2]|0;
     $76 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$75,$__err,$17,2)|0);
     $77 = HEAP32[$__err>>2]|0;
     $78 = $77 & 4;
     $79 = ($78|0)==(0);
     $80 = ($76|0)<(24);
     $or$cond$i8 = $79 & $80;
     if ($or$cond$i8) {
      $81 = (($__tm) + 8|0);
      HEAP32[$81>>2] = $76;
      break L7;
     } else {
      $82 = $77 | 4;
      HEAP32[$__err>>2] = $82;
      break L7;
     }
     break;
    }
    case 121:  {
     $285 = (($__tm) + 20|0);
     $286 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($285,$__b,$286,$__err,$17);
     break;
    }
    case 88:  {
     $264 = (($this) + 8|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (($265) + 24|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = (FUNCTION_TABLE_ii[$267 & 511]($264)|0);
     $269 = HEAP32[$__b>>2]|0;
     $270 = HEAP32[$__e>>2]|0;
     $271 = HEAP8[$268>>0]|0;
     $272 = $271 & 1;
     $273 = ($272<<24>>24)==(0);
     if ($273) {
      $278 = (($268) + 4|0);
      $279 = $271&255;
      $280 = $279 >>> 1;
      $282 = $278;$283 = $280;
     } else {
      $274 = (($268) + 8|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (($268) + 4|0);
      $277 = HEAP32[$276>>2]|0;
      $282 = $275;$283 = $277;
     }
     $281 = (($282) + ($283<<2)|0);
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($9,$this,$269,$270,$__iob,$__err,$__tm,$282,$281);
     $284 = HEAP32[$9>>2]|0;
     HEAP32[$__b>>2] = $284;
     break;
    }
    case 37:  {
     $294 = HEAP32[$__e>>2]|0;
     $295 = HEAP32[$__b>>2]|0;
     $296 = ($295|0)==(0|0);
     do {
      if ($296) {
       $382 = 1;
      } else {
       $297 = (($295) + 12|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = (($295) + 16|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = ($298|0)==($300|0);
       if ($301) {
        $302 = HEAP32[$295>>2]|0;
        $303 = (($302) + 36|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = (FUNCTION_TABLE_ii[$304 & 511]($295)|0);
        $$0$i$i$i$i$i = $305;
       } else {
        $306 = HEAP32[$298>>2]|0;
        $$0$i$i$i$i$i = $306;
       }
       $307 = ($$0$i$i$i$i$i|0)==(-1);
       if ($307) {
        HEAP32[$__b>>2] = 0;
        $382 = 1;
        break;
       } else {
        $$pre$i$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i$i = ($$pre$i$i$i$i|0)==(0|0);
        $382 = $phitmp$i$i$i$i;
        break;
       }
      }
     } while(0);
     $308 = ($294|0)==(0|0);
     if ($308) {
      label = 115;
     } else {
      $309 = (($294) + 12|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = (($294) + 16|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = ($310|0)==($312|0);
      if ($313) {
       $314 = HEAP32[$294>>2]|0;
       $315 = (($314) + 36|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = (FUNCTION_TABLE_ii[$316 & 511]($294)|0);
       $$0$i$i1$i$i$i = $317;
      } else {
       $318 = HEAP32[$310>>2]|0;
       $$0$i$i1$i$i$i = $318;
      }
      $319 = ($$0$i$i1$i$i$i|0)==(-1);
      if ($319) {
       label = 115;
      } else {
       if ($382) {
        $$pre$i3$i$i915$i = $294;
       } else {
        label = 117;
       }
      }
     }
     if ((label|0) == 115) {
      if ($382) {
       label = 117;
      } else {
       $$pre$i3$i$i915$i = 0;
      }
     }
     if ((label|0) == 117) {
      $320 = HEAP32[$__err>>2]|0;
      $321 = $320 | 6;
      HEAP32[$__err>>2] = $321;
      break L7;
     }
     $322 = HEAP32[$__b>>2]|0;
     $323 = (($322) + 12|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (($322) + 16|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ($324|0)==($326|0);
     if ($327) {
      $328 = HEAP32[$322>>2]|0;
      $329 = (($328) + 36|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (FUNCTION_TABLE_ii[$330 & 511]($322)|0);
      $$0$i$i$i = $331;
     } else {
      $332 = HEAP32[$324>>2]|0;
      $$0$i$i$i = $332;
     }
     $333 = HEAP32[$17>>2]|0;
     $334 = (($333) + 52|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = (FUNCTION_TABLE_iiii[$335 & 511]($17,$$0$i$i$i,0)|0);
     $337 = ($336<<24>>24)==(37);
     if (!($337)) {
      $338 = HEAP32[$__err>>2]|0;
      $339 = $338 | 4;
      HEAP32[$__err>>2] = $339;
      break L7;
     }
     $340 = HEAP32[$__b>>2]|0;
     $341 = (($340) + 12|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($340) + 16|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = ($342|0)==($344|0);
     if ($345) {
      $346 = HEAP32[$340>>2]|0;
      $347 = (($346) + 40|0);
      $348 = HEAP32[$347>>2]|0;
      (FUNCTION_TABLE_ii[$348 & 511]($340)|0);
      $$pre$i = HEAP32[$__b>>2]|0;
      $351 = $$pre$i;
     } else {
      $349 = (($342) + 4|0);
      HEAP32[$341>>2] = $349;
      $351 = $340;
     }
     $350 = ($351|0)==(0|0);
     do {
      if ($350) {
       $383 = 1;
      } else {
       $352 = (($351) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = (($351) + 16|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($353|0)==($355|0);
       if ($356) {
        $357 = HEAP32[$351>>2]|0;
        $358 = (($357) + 36|0);
        $359 = HEAP32[$358>>2]|0;
        $360 = (FUNCTION_TABLE_ii[$359 & 511]($351)|0);
        $$0$i$i$i$i1$i = $360;
       } else {
        $361 = HEAP32[$353>>2]|0;
        $$0$i$i$i$i1$i = $361;
       }
       $362 = ($$0$i$i$i$i1$i|0)==(-1);
       if ($362) {
        HEAP32[$__b>>2] = 0;
        $383 = 1;
        break;
       } else {
        $$pre$i$i$i3$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i4$i = ($$pre$i$i$i3$i|0)==(0|0);
        $383 = $phitmp$i$i$i4$i;
        break;
       }
      }
     } while(0);
     $363 = ($$pre$i3$i$i915$i|0)==(0|0);
     if ($363) {
      label = 138;
     } else {
      $364 = (($$pre$i3$i$i915$i) + 12|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = (($$pre$i3$i$i915$i) + 16|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ($365|0)==($367|0);
      if ($368) {
       $369 = HEAP32[$$pre$i3$i$i915$i>>2]|0;
       $370 = (($369) + 36|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = (FUNCTION_TABLE_ii[$371 & 511]($$pre$i3$i$i915$i)|0);
       $$0$i$i1$i$i7$i = $372;
      } else {
       $373 = HEAP32[$365>>2]|0;
       $$0$i$i1$i$i7$i = $373;
      }
      $374 = ($$0$i$i1$i$i7$i|0)==(-1);
      if ($374) {
       label = 138;
      } else {
       if ($383) {
        break L7;
       }
      }
     }
     if ((label|0) == 138) {
      if (!($383)) {
       break L7;
      }
     }
     $375 = HEAP32[$__err>>2]|0;
     $376 = $375 | 2;
     HEAP32[$__err>>2] = $376;
     break;
    }
    case 112:  {
     $195 = (($__tm) + 8|0);
     $196 = HEAP32[$__e>>2]|0;
     $197 = (($this) + 8|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($198) + 8|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (FUNCTION_TABLE_ii[$200 & 511]($197)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202 & 1;
     $204 = ($203<<24>>24)==(0);
     if ($204) {
      $207 = $202&255;
      $208 = $207 >>> 1;
      $220 = $208;
     } else {
      $205 = (($201) + 4|0);
      $206 = HEAP32[$205>>2]|0;
      $220 = $206;
     }
     $209 = (($201) + 12|0);
     $210 = HEAP8[$209>>0]|0;
     $211 = $210 & 1;
     $212 = ($211<<24>>24)==(0);
     if ($212) {
      $215 = $210&255;
      $216 = $215 >>> 1;
      $218 = $216;
     } else {
      $213 = (($201) + 16|0);
      $214 = HEAP32[$213>>2]|0;
      $218 = $214;
     }
     $217 = (0 - ($218))|0;
     $219 = ($220|0)==($217|0);
     if ($219) {
      $221 = HEAP32[$__err>>2]|0;
      $222 = $221 | 4;
      HEAP32[$__err>>2] = $222;
      break L7;
     }
     $223 = (($201) + 24|0);
     $224 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$196,$201,$223,$17,$__err,0)|0);
     $225 = $224;
     $226 = $201;
     $227 = (($225) - ($226))|0;
     $228 = ($224|0)==($201|0);
     if ($228) {
      $229 = HEAP32[$195>>2]|0;
      $230 = ($229|0)==(12);
      if ($230) {
       HEAP32[$195>>2] = 0;
       break L7;
      }
     }
     $231 = ($227|0)==(12);
     if ($231) {
      $232 = HEAP32[$195>>2]|0;
      $233 = ($232|0)<(12);
      if ($233) {
       $234 = (($232) + 12)|0;
       HEAP32[$195>>2] = $234;
      }
     }
     break;
    }
    case 114:  {
     $235 = HEAP32[$__b>>2]|0;
     $236 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$235,$236,$__iob,$__err,$__tm,5712,((5712 + 44|0)));
     $237 = HEAP32[$4>>2]|0;
     HEAP32[$__b>>2] = $237;
     break;
    }
    case 82:  {
     $238 = HEAP32[$__b>>2]|0;
     $239 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$238,$239,$__iob,$__err,$__tm,5760,((5760 + 20|0)));
     $240 = HEAP32[$5>>2]|0;
     HEAP32[$__b>>2] = $240;
     break;
    }
    case 83:  {
     $241 = HEAP32[$__e>>2]|0;
     $242 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$241,$__err,$17,2)|0);
     $243 = HEAP32[$__err>>2]|0;
     $244 = $243 & 4;
     $245 = ($244|0)==(0);
     $246 = ($242|0)<(61);
     $or$cond$i49 = $245 & $246;
     if ($or$cond$i49) {
      HEAP32[$__tm>>2] = $242;
      break L7;
     } else {
      $247 = $243 | 4;
      HEAP32[$__err>>2] = $247;
      break L7;
     }
     break;
    }
    case 84:  {
     $248 = HEAP32[$__b>>2]|0;
     $249 = HEAP32[$__e>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$248,$249,$__iob,$__err,$__tm,5784,((5784 + 32|0)));
     $250 = HEAP32[$6>>2]|0;
     HEAP32[$__b>>2] = $250;
     break;
    }
    case 119:  {
     $251 = HEAP32[$__e>>2]|0;
     $252 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$251,$__err,$17,1)|0);
     $253 = HEAP32[$__err>>2]|0;
     $254 = $253 & 4;
     $255 = ($254|0)==(0);
     $256 = ($252|0)<(7);
     $or$cond$i52 = $255 & $256;
     if ($or$cond$i52) {
      $257 = (($__tm) + 24|0);
      HEAP32[$257>>2] = $252;
      break L7;
     } else {
      $258 = $253 | 4;
      HEAP32[$__err>>2] = $258;
      break L7;
     }
     break;
    }
    case 120:  {
     $259 = HEAP32[$this>>2]|0;
     $260 = (($259) + 20|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = HEAP32[$__b>>2]|0;
     HEAP32[$7>>2] = $262;
     $263 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $263;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$8+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$261 & 511]($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    default: {
     $377 = HEAP32[$__err>>2]|0;
     $378 = $377 | 4;
     HEAP32[$__err>>2] = $378;
    }
    }
   } while(0);
   $379 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $379;
   STACKTOP = sp;return;
  }
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $29 = (($11) + 4|0);
 $30 = HEAP32[$29>>2]|0;HEAP32[$29>>2] = (($30+-1)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  ___resumeException($27|0);
  // unreachable;
 }
 $32 = HEAP32[$11>>2]|0;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_vi[$34 & 511]($11);
 ___resumeException($27|0);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(393)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(404,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $25 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 511]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $9;
     $25 = $$$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $25 = $9;
     break;
    }
   }
  } while(0);
  $22 = (($$01$i$i) + 1|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$9 = $25;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0;
 var $__nar$i = 0, $__nb$i = 0, $__ne$i = 0, $mb$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar$i = sp + 416|0;
 $__ne$i = sp + 412|0;
 $mb$i = sp;
 $__nb$i = sp + 408|0;
 $__nar = sp + 8|0;
 $2 = (($this) + 8|0);
 $3 = (($__nar$i) + 100|0);
 HEAP32[$__ne$i>>2] = $3;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($2,$__nar$i,$__ne$i,$__tm,$__fmt,$__mod);
 $4 = $mb$i;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 HEAP32[$__nb$i>>2] = $__nar$i;
 $8 = HEAP32[$2>>2]|0;
 $9 = (_uselocale(($8|0))|0);
 $10 = (_mbsrtowcs($__nar,$__nb$i,100,$mb$i)|0);
 $11 = ($9|0)==(0|0);
 if (!($11)) {
  __THREW__ = 0;
  (invoke_ii(405,($9|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  }
 }
 $16 = ($10|0)==(-1);
 if ($16) {
  __ZNSt3__121__throw_runtime_errorEPKc(7392);
  // unreachable;
 }
 $17 = (($__nar) + ($10<<2)|0);
 $18 = HEAP32[$__s>>2]|0;
 $19 = ($10|0)==(0);
 if ($19) {
  $36 = $18;
  HEAP32[$agg$result>>2] = $36;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$22 = $18;
 }
 while(1) {
  $20 = HEAP32[$$01$i$i>>2]|0;
  $21 = ($22|0)==(0|0);
  if ($21) {
   $37 = 0;
  } else {
   $23 = (($22) + 24|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 28|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24|0)==($26|0);
   if ($27) {
    $28 = HEAP32[$22>>2]|0;
    $29 = (($28) + 52|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iii[$30 & 511]($22,$20)|0);
    $$0$i$i$i$i = $31;
   } else {
    $32 = (($24) + 4|0);
    HEAP32[$23>>2] = $32;
    HEAP32[$24>>2] = $20;
    $$0$i$i$i$i = $20;
   }
   $33 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $33 ? 0 : $22;
   $37 = $$$i;
  }
  $34 = (($$01$i$i) + 4|0);
  $35 = ($34|0)==($17|0);
  if ($35) {
   $36 = $37;
   break;
  } else {
   $$01$i$i = $34;$22 = $37;
  }
 }
 HEAP32[$agg$result>>2] = $36;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0] = 45;
 $1 = (($agg$result) + 2|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$012$i$i = 0, $$03$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 2;
 $0 = (($agg$result) + 4|0);
 $$012$i$i = 1;$$03$i$i = $0;
 while(1) {
  $1 = (($$012$i$i) + -1)|0;
  $2 = (($$03$i$i) + 4|0);
  HEAP32[$$03$i$i>>2] = 45;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012$i$i = $1;$$03$i$i = $2;
  }
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$idx = 0, $$idx$val = 0, $$idx5 = 0, $$idx5$val = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0;
 var $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__wbuf = sp + 132|0;
 $__wb = sp + 8|0;
 $__wn = sp + 16|0;
 $__neg = sp + 130|0;
 $__atoms = sp + 120|0;
 $__nbuf = sp + 20|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 406;
 $1 = (($__wbuf) + 100|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_ii(380,(6552|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   label = 11;
  } else {
   $$idx = (($3) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx5 = (($3) + 12|0);
   $$idx5$val = HEAP32[$$idx5>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_iiii(381,($$idx$val|0),($$idx5$val|0),($6|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $12 = HEAP32[$__e>>2]|0;
    $13 = (($__iob) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iiiiiiiiiiii(407,($__b|0),($12|0),($__intl|0),($3|0),($14|0),($__err|0),($__neg|0),($9|0),($__wb|0),($__wn|0),($1|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 11;
    } else {
     if ($15) {
      $18 = HEAP32[$9>>2]|0;
      $19 = (($18) + 32|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($20|0,($9|0),(6176|0),(((6176 + 10|0))|0),($__atoms|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 11;
       break;
      }
      $23 = HEAP32[$__wn>>2]|0;
      $24 = HEAP32[$__wb>>2]|0;
      $25 = $23;
      $26 = $24;
      $27 = (($25) - ($26))|0;
      $28 = ($27|0)>(98);
      if ($28) {
       $29 = (($27) + 2)|0;
       $30 = (_malloc($29)|0);
       $31 = ($30|0)==(0|0);
       if ($31) {
        $32 = (___cxa_allocate_exception(4)|0);
        HEAP32[$32>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($32|0),(14816|0),(323|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         $35 = ___cxa_find_matching_catch()|0;
         $36 = tempRet0;
         $$0 = $35;$$01 = $36;
         break;
        } else {
         // unreachable;
        }
       } else {
        $41 = $30;$__nc$0 = $30;
       }
      } else {
       $41 = 0;$__nc$0 = $__nbuf;
      }
      $42 = HEAP8[$__neg>>0]|0;
      $43 = ($42<<24>>24)==(0);
      if ($43) {
       $__nc$1 = $__nc$0;
      } else {
       $44 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $44;
      }
      $45 = ($24>>>0)<($23>>>0);
      if ($45) {
       $46 = (($__atoms) + 10|0);
       $47 = $__atoms;
       $__nc$27 = $__nc$1;$__w$08 = $24;
       while(1) {
        $48 = HEAP8[$__w$08>>0]|0;
        $$01$i = $__atoms;
        while(1) {
         $51 = HEAP8[$$01$i>>0]|0;
         $52 = ($51<<24>>24)==($48<<24>>24);
         $50 = (($$01$i) + 1|0);
         if ($52) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $49 = ($50|0)==($46|0);
         if ($49) {
          $$0$lcssa$i = $46;
          break;
         } else {
          $$01$i = $50;
         }
        }
        $53 = $$0$lcssa$i;
        $54 = (($53) - ($47))|0;
        $55 = (6176 + ($54)|0);
        $56 = HEAP8[$55>>0]|0;
        HEAP8[$__nc$27>>0] = $56;
        $57 = (($__w$08) + 1|0);
        $58 = (($__nc$27) + 1|0);
        $59 = HEAP32[$__wn>>2]|0;
        $60 = ($57>>>0)<($59>>>0);
        if ($60) {
         $__nc$27 = $58;$__w$08 = $57;
        } else {
         $__nc$2$lcssa = $58;
         break;
        }
       }
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $61 = (_sscanf($__nbuf,6192,$vararg_buffer)|0);
      $62 = ($61|0)==(1);
      if (!($62)) {
       __THREW__ = 0;
       invoke_vi(408,(6200|0));
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        $39 = ___cxa_find_matching_catch()|0;
        $40 = tempRet0;
        _free($41);
        $$0 = $39;$$01 = $40;
        break;
       }
      }
      _free($41);
     }
     $65 = HEAP32[$__b>>2]|0;
     $66 = ($65|0)==(0|0);
     do {
      if ($66) {
       $80 = 0;
      } else {
       $67 = (($65) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (($65) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = HEAP32[$65>>2]|0;
        $73 = (($72) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($65|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 11;
         break L1;
        }
        $78 = ($75|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $80 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $80 = $$pre$i$i$i;
         break;
        }
       } else {
        $80 = $65;
       }
      }
     } while(0);
     $79 = ($80|0)==(0|0);
     $81 = HEAP32[$__e>>2]|0;
     $82 = ($81|0)==(0|0);
     do {
      if ($82) {
       label = 36;
      } else {
       $83 = (($81) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($81) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)==($86|0);
       if (!($87)) {
        if ($79) {
         break;
        } else {
         label = 38;
         break;
        }
       }
       $88 = HEAP32[$81>>2]|0;
       $89 = (($88) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       __THREW__ = 0;
       $91 = (invoke_ii($90|0,($81|0))|0);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        label = 11;
        break L1;
       }
       $94 = ($91|0)==(-1);
       if ($94) {
        HEAP32[$__e>>2] = 0;
        label = 36;
        break;
       } else {
        if ($79) {
         break;
        } else {
         label = 38;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 36) {
      if ($79) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      $95 = HEAP32[$__err>>2]|0;
      $96 = $95 | 2;
      HEAP32[$__err>>2] = $96;
     }
     $97 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $97;
     $98 = (($3) + 4|0);
     $99 = HEAP32[$98>>2]|0;HEAP32[$98>>2] = (($99+-1)|0);
     $100 = ($99|0)==(0);
     if ($100) {
      $101 = HEAP32[$3>>2]|0;
      $102 = (($101) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      FUNCTION_TABLE_vi[$103 & 511]($3);
     }
     $104 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $105 = ($104|0)==(0|0);
     if ($105) {
      STACKTOP = sp;return;
     }
     $106 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($106|0,($104|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      $109 = ___cxa_find_matching_catch(0|0)|0;
      $110 = tempRet0;
      ___clang_call_terminate($109);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $$0 = $37;$$01 = $38;
 }
 $111 = (($3) + 4|0);
 $112 = HEAP32[$111>>2]|0;HEAP32[$111>>2] = (($112+-1)|0);
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[$3>>2]|0;
  $115 = (($114) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  FUNCTION_TABLE_vi[$116 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $117 = ($$pre|0)==(0|0);
 if ($117) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre17 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre17|0,($$pre|0));
 $118 = __THREW__; __THREW__ = 0;
 $119 = $118&1;
 if ($119) {
  $120 = ___cxa_find_matching_catch(0|0)|0;
  $121 = tempRet0;
  ___clang_call_terminate($120);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i104 = 0, $$0$i$i111 = 0, $$0$i$i120 = 0, $$0$i$i130 = 0, $$0$i$i147 = 0, $$0$i$i33 = 0, $$0$i$i36 = 0, $$0$i$i49 = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i84 = 0, $$0$i$i87 = 0, $$271 = 0, $$272 = 0, $$273 = 0, $$274 = 0;
 var $$276 = 0, $$idx = 0, $$idx$val = 0, $$idx31 = 0, $$idx31$val = 0, $$idx32 = 0, $$idx32$val = 0, $$idx33 = 0, $$idx33$val = 0, $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$phi$trans$insert14 = 0, $$phi$trans$insert17 = 0, $$phi$trans$insert19 = 0, $$phi$trans$insert22 = 0, $$phi$trans$insert26 = 0, $$phi$trans$insert29 = 0, $$phi$trans$insert33 = 0, $$phi$trans$insert7 = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i134 = 0, $$pre$i$i$i151 = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i39 = 0, $$pre$i$i$i70 = 0, $$pre$i$i$i94 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i138 = 0, $$pre$i2$i$i155 = 0, $$pre$i2$i$i155249 = 0, $$pre$i2$i$i155250 = 0, $$pre$i2$i$i261$ph = 0, $$pre$i2$i$i261269 = 0, $$pre$i2$i$i43 = 0, $$pre$i2$i$i43240 = 0, $$pre$i2$i$i43242 = 0, $$pre$i2$i$i74 = 0, $$pre$i2$i$i74255$ph = 0, $$pre$i2$i$i74255266 = 0;
 var $$pre$i2$i$i98 = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0, $$pre16 = 0, $$pre18 = 0, $$pre20 = 0, $$pre21 = 0, $$pre23 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre25 = 0, $$pre253 = 0, $$pre257 = 0, $$pre259 = 0, $$pre27 = 0, $$pre28 = 0, $$pre3 = 0, $$pre30 = 0;
 var $$pre32 = 0, $$pre34 = 0, $$pre4 = 0, $$pre6 = 0, $$pre8 = 0, $$pre9 = 0, $$sum = 0, $$sum262 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0;
 var $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0, $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0;
 var $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0232 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0234 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i128 = 0;
 var $isascii1$i161 = 0, $isascii1$i52 = 0, $isascii1$i63 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $sext = 0, $sext199 = 0, $sext200 = 0, $sext201 = 0, $storemerge$i = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i140 = 0, $tmp$i$i157 = 0, $tmp$i$i45 = 0, $tmp$i$i76 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 96|0;
 $1 = sp + 116|0;
 $2 = sp + 4|0;
 $3 = sp + 180|0;
 $4 = sp + 84|0;
 $5 = sp + 32|0;
 $6 = sp + 36|0;
 $7 = sp + 128|0;
 $8 = sp + 152|0;
 $9 = sp + 168|0;
 $10 = sp + 192|0;
 $__gbuf = sp + 200|0;
 $__gb = sp + 104|0;
 $__gn = sp + 112|0;
 $__ge = sp + 16|0;
 $__pat = sp;
 $__grp = sp + 48|0;
 $__sym = sp + 60|0;
 $__psn = sp + 140|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 72|0;
 $__et = sp + 164|0;
 HEAP32[$10>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $11 = (($__gb) + 4|0);
 HEAP32[$11>>2] = 406;
 HEAP32[$__gn>>2] = $__gbuf;
 $12 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $12;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   __THREW__ = 0;
   $13 = (invoke_ii(380,(6000|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 83;
   } else {
    $$idx32 = (($__loc$0$0$val) + 8|0);
    $$idx32$val = HEAP32[$$idx32>>2]|0;
    $$idx33 = (($__loc$0$0$val) + 12|0);
    $$idx33$val = HEAP32[$$idx33>>2]|0;
    __THREW__ = 0;
    $16 = (invoke_iiii(381,($$idx32$val|0),($$idx33$val|0),($13|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 83;
    } else {
     $19 = HEAP32[$16>>2]|0;
     $20 = (($19) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     invoke_vii($21|0,($0|0),($16|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 83;
     } else {
      $24 = HEAP32[$0>>2]|0;
      HEAP32[$__pat>>2] = $24;
      $25 = HEAP32[$16>>2]|0;
      $26 = (($25) + 32|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      invoke_vii($27|0,($1|0),($16|0));
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       label = 83;
      } else {
       $30 = HEAP8[$__nsn>>0]|0;
       $31 = $30 & 1;
       $32 = ($31<<24>>24)==(0);
       if ($32) {
        $36 = (($__nsn) + 1|0);
        HEAP8[$36>>0] = 0;
        HEAP8[$__nsn>>0] = 0;
       } else {
        $33 = (($__nsn) + 8|0);
        $34 = HEAP32[$33>>2]|0;
        HEAP8[$34>>0] = 0;
        $35 = (($__nsn) + 4|0);
        HEAP32[$35>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(409,($__nsn|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $39 = ___cxa_find_matching_catch(0|0)|0;
        $40 = tempRet0;
        ___clang_call_terminate($39);
        // unreachable;
       }
       ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
       ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
       $$pre3 = HEAP32[$16>>2]|0;
       $$phi$trans$insert = (($$pre3) + 28|0);
       $$pre4 = HEAP32[$$phi$trans$insert>>2]|0;
       __THREW__ = 0;
       invoke_vii($$pre4|0,($2|0),($16|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 83;
       } else {
        $43 = HEAP8[$__psn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $49 = (($__psn) + 1|0);
         HEAP8[$49>>0] = 0;
         HEAP8[$__psn>>0] = 0;
        } else {
         $46 = (($__psn) + 8|0);
         $47 = HEAP32[$46>>2]|0;
         HEAP8[$47>>0] = 0;
         $48 = (($__psn) + 4|0);
         HEAP32[$48>>2] = 0;
        }
        __THREW__ = 0;
        invoke_vi(409,($__psn|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         $52 = ___cxa_find_matching_catch(0|0)|0;
         $53 = tempRet0;
         ___clang_call_terminate($52);
         // unreachable;
        }
        ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
        ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
        $$pre6 = HEAP32[$16>>2]|0;
        $$phi$trans$insert7 = (($$pre6) + 12|0);
        $$pre8 = HEAP32[$$phi$trans$insert7>>2]|0;
        __THREW__ = 0;
        $54 = (invoke_ii($$pre8|0,($16|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         label = 83;
        } else {
         $57 = HEAP32[$16>>2]|0;
         $58 = (($57) + 16|0);
         $59 = HEAP32[$58>>2]|0;
         __THREW__ = 0;
         $60 = (invoke_ii($59|0,($16|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 83;
         } else {
          $63 = HEAP32[$16>>2]|0;
          $64 = (($63) + 20|0);
          $65 = HEAP32[$64>>2]|0;
          __THREW__ = 0;
          invoke_vii($65|0,($3|0),($16|0));
          $66 = __THREW__; __THREW__ = 0;
          $67 = $66&1;
          if ($67) {
           label = 83;
          } else {
           $68 = HEAP8[$__grp>>0]|0;
           $69 = $68 & 1;
           $70 = ($69<<24>>24)==(0);
           if ($70) {
            $74 = (($__grp) + 1|0);
            HEAP8[$74>>0] = 0;
            HEAP8[$__grp>>0] = 0;
           } else {
            $71 = (($__grp) + 8|0);
            $72 = HEAP32[$71>>2]|0;
            HEAP8[$72>>0] = 0;
            $73 = (($__grp) + 4|0);
            HEAP32[$73>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(409,($__grp|0));
           $75 = __THREW__; __THREW__ = 0;
           $76 = $75&1;
           if ($76) {
            $77 = ___cxa_find_matching_catch(0|0)|0;
            $78 = tempRet0;
            ___clang_call_terminate($77);
            // unreachable;
           }
           ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
           ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
           $$pre9 = HEAP32[$16>>2]|0;
           $$phi$trans$insert10 = (($$pre9) + 24|0);
           $$pre11 = HEAP32[$$phi$trans$insert10>>2]|0;
           __THREW__ = 0;
           invoke_vii($$pre11|0,($4|0),($16|0));
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if ($80) {
            label = 83;
           } else {
            $81 = HEAP8[$__sym>>0]|0;
            $82 = $81 & 1;
            $83 = ($82<<24>>24)==(0);
            if ($83) {
             $87 = (($__sym) + 1|0);
             HEAP8[$87>>0] = 0;
             HEAP8[$__sym>>0] = 0;
            } else {
             $84 = (($__sym) + 8|0);
             $85 = HEAP32[$84>>2]|0;
             HEAP8[$85>>0] = 0;
             $86 = (($__sym) + 4|0);
             HEAP32[$86>>2] = 0;
            }
            __THREW__ = 0;
            invoke_vi(409,($__sym|0));
            $88 = __THREW__; __THREW__ = 0;
            $89 = $88&1;
            if ($89) {
             $90 = ___cxa_find_matching_catch(0|0)|0;
             $91 = tempRet0;
             ___clang_call_terminate($90);
             // unreachable;
            } else {
             ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
             ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
             $$pre13 = HEAP32[$16>>2]|0;
             $$phi$trans$insert14 = (($$pre13) + 36|0);
             $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
             __THREW__ = 0;
             $92 = (invoke_ii($$pre15|0,($16|0))|0);
             $93 = __THREW__; __THREW__ = 0;
             $94 = $93&1;
             if ($94) {
              label = 83;
              break;
             } else {
              $__dp$0 = $54;$__ts$0 = $60;$storemerge$i = $92;
              label = 62;
              break;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   __THREW__ = 0;
   $95 = (invoke_ii(380,(5936|0))|0);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   if ($97) {
    label = 83;
   } else {
    $$idx = (($__loc$0$0$val) + 8|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $$idx31 = (($__loc$0$0$val) + 12|0);
    $$idx31$val = HEAP32[$$idx31>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_iiii(381,($$idx$val|0),($$idx31$val|0),($95|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     label = 83;
    } else {
     $101 = HEAP32[$98>>2]|0;
     $102 = (($101) + 44|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     invoke_vii($103|0,($5|0),($98|0));
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 83;
     } else {
      $106 = HEAP32[$5>>2]|0;
      HEAP32[$__pat>>2] = $106;
      $107 = HEAP32[$98>>2]|0;
      $108 = (($107) + 32|0);
      $109 = HEAP32[$108>>2]|0;
      __THREW__ = 0;
      invoke_vii($109|0,($6|0),($98|0));
      $110 = __THREW__; __THREW__ = 0;
      $111 = $110&1;
      if ($111) {
       label = 83;
      } else {
       $112 = HEAP8[$__nsn>>0]|0;
       $113 = $112 & 1;
       $114 = ($113<<24>>24)==(0);
       if ($114) {
        $118 = (($__nsn) + 1|0);
        HEAP8[$118>>0] = 0;
        HEAP8[$__nsn>>0] = 0;
       } else {
        $115 = (($__nsn) + 8|0);
        $116 = HEAP32[$115>>2]|0;
        HEAP8[$116>>0] = 0;
        $117 = (($__nsn) + 4|0);
        HEAP32[$117>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(409,($__nsn|0));
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        $121 = ___cxa_find_matching_catch(0|0)|0;
        $122 = tempRet0;
        ___clang_call_terminate($121);
        // unreachable;
       }
       ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
       ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
       $$pre21 = HEAP32[$98>>2]|0;
       $$phi$trans$insert22 = (($$pre21) + 28|0);
       $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
       __THREW__ = 0;
       invoke_vii($$pre23|0,($7|0),($98|0));
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 83;
       } else {
        $125 = HEAP8[$__psn>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if ($127) {
         $131 = (($__psn) + 1|0);
         HEAP8[$131>>0] = 0;
         HEAP8[$__psn>>0] = 0;
        } else {
         $128 = (($__psn) + 8|0);
         $129 = HEAP32[$128>>2]|0;
         HEAP8[$129>>0] = 0;
         $130 = (($__psn) + 4|0);
         HEAP32[$130>>2] = 0;
        }
        __THREW__ = 0;
        invoke_vi(409,($__psn|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         $134 = ___cxa_find_matching_catch(0|0)|0;
         $135 = tempRet0;
         ___clang_call_terminate($134);
         // unreachable;
        }
        ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
        ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
        $$pre25 = HEAP32[$98>>2]|0;
        $$phi$trans$insert26 = (($$pre25) + 12|0);
        $$pre27 = HEAP32[$$phi$trans$insert26>>2]|0;
        __THREW__ = 0;
        $136 = (invoke_ii($$pre27|0,($98|0))|0);
        $137 = __THREW__; __THREW__ = 0;
        $138 = $137&1;
        if ($138) {
         label = 83;
        } else {
         $139 = HEAP32[$98>>2]|0;
         $140 = (($139) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         __THREW__ = 0;
         $142 = (invoke_ii($141|0,($98|0))|0);
         $143 = __THREW__; __THREW__ = 0;
         $144 = $143&1;
         if ($144) {
          label = 83;
         } else {
          $145 = HEAP32[$98>>2]|0;
          $146 = (($145) + 20|0);
          $147 = HEAP32[$146>>2]|0;
          __THREW__ = 0;
          invoke_vii($147|0,($8|0),($98|0));
          $148 = __THREW__; __THREW__ = 0;
          $149 = $148&1;
          if ($149) {
           label = 83;
          } else {
           $150 = HEAP8[$__grp>>0]|0;
           $151 = $150 & 1;
           $152 = ($151<<24>>24)==(0);
           if ($152) {
            $156 = (($__grp) + 1|0);
            HEAP8[$156>>0] = 0;
            HEAP8[$__grp>>0] = 0;
           } else {
            $153 = (($__grp) + 8|0);
            $154 = HEAP32[$153>>2]|0;
            HEAP8[$154>>0] = 0;
            $155 = (($__grp) + 4|0);
            HEAP32[$155>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(409,($__grp|0));
           $157 = __THREW__; __THREW__ = 0;
           $158 = $157&1;
           if ($158) {
            $159 = ___cxa_find_matching_catch(0|0)|0;
            $160 = tempRet0;
            ___clang_call_terminate($159);
            // unreachable;
           }
           ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
           ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
           $$pre28 = HEAP32[$98>>2]|0;
           $$phi$trans$insert29 = (($$pre28) + 24|0);
           $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
           __THREW__ = 0;
           invoke_vii($$pre30|0,($9|0),($98|0));
           $161 = __THREW__; __THREW__ = 0;
           $162 = $161&1;
           if ($162) {
            label = 83;
           } else {
            $163 = HEAP8[$__sym>>0]|0;
            $164 = $163 & 1;
            $165 = ($164<<24>>24)==(0);
            if ($165) {
             $169 = (($__sym) + 1|0);
             HEAP8[$169>>0] = 0;
             HEAP8[$__sym>>0] = 0;
            } else {
             $166 = (($__sym) + 8|0);
             $167 = HEAP32[$166>>2]|0;
             HEAP8[$167>>0] = 0;
             $168 = (($__sym) + 4|0);
             HEAP32[$168>>2] = 0;
            }
            __THREW__ = 0;
            invoke_vi(409,($__sym|0));
            $170 = __THREW__; __THREW__ = 0;
            $171 = $170&1;
            if ($171) {
             $172 = ___cxa_find_matching_catch(0|0)|0;
             $173 = tempRet0;
             ___clang_call_terminate($172);
             // unreachable;
            } else {
             ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
             ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
             $$pre32 = HEAP32[$98>>2]|0;
             $$phi$trans$insert33 = (($$pre32) + 36|0);
             $$pre34 = HEAP32[$$phi$trans$insert33>>2]|0;
             __THREW__ = 0;
             $174 = (invoke_ii($$pre34|0,($98|0))|0);
             $175 = __THREW__; __THREW__ = 0;
             $176 = $175&1;
             if ($176) {
              label = 83;
              break;
             } else {
              $__dp$0 = $136;$__ts$0 = $142;$storemerge$i = $174;
              label = 62;
              break;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L78: do {
  if ((label|0) == 62) {
   $177 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $177;
   $178 = (($__ct) + 8|0);
   $179 = (($__nsn) + 1|0);
   $180 = (($__nsn) + 4|0);
   $181 = (($__nsn) + 8|0);
   $182 = (($__psn) + 1|0);
   $183 = (($__psn) + 4|0);
   $184 = (($__psn) + 8|0);
   $185 = $__flags & 512;
   $186 = ($185|0)!=(0);
   $187 = (($__sym) + 1|0);
   $188 = (($__sym) + 8|0);
   $189 = (($__sym) + 4|0);
   $190 = (($__spaces) + 1|0);
   $191 = (($__spaces) + 8|0);
   $192 = (($__spaces) + 4|0);
   $193 = (($__pat) + 3|0);
   $194 = (($__grp) + 4|0);
   $1085 = $__gbuf;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0232 = 0;$__trailing_sign$0234 = 0;
   L81: while(1) {
    $195 = HEAP32[$__b>>2]|0;
    $196 = ($195|0)==(0|0);
    do {
     if ($196) {
      $210 = 0;
     } else {
      $197 = (($195) + 12|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($195) + 16|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = ($198|0)==($200|0);
      if ($201) {
       $202 = HEAP32[$195>>2]|0;
       $203 = (($202) + 36|0);
       $204 = HEAP32[$203>>2]|0;
       __THREW__ = 0;
       $205 = (invoke_ii($204|0,($195|0))|0);
       $206 = __THREW__; __THREW__ = 0;
       $207 = $206&1;
       if ($207) {
        label = 82;
        break L81;
       }
       $208 = ($205|0)==(-1);
       if ($208) {
        HEAP32[$__b>>2] = 0;
        $210 = 0;
        break;
       } else {
        $$pre$i$i$i23 = HEAP32[$__b>>2]|0;
        $210 = $$pre$i$i$i23;
        break;
       }
      } else {
       $210 = $195;
      }
     }
    } while(0);
    $209 = ($210|0)==(0|0);
    $211 = ($__e$sroa$0$0|0)==(0|0);
    do {
     if ($211) {
      label = 74;
     } else {
      $212 = (($__e$sroa$0$0) + 12|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($__e$sroa$0$0) + 16|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = ($213|0)==($215|0);
      if (!($216)) {
       if ($209) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
        break;
       } else {
        $1052 = $1085;$1086 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 342;
        break L81;
       }
      }
      $217 = HEAP32[$__e$sroa$0$0>>2]|0;
      $218 = (($217) + 36|0);
      $219 = HEAP32[$218>>2]|0;
      __THREW__ = 0;
      $220 = (invoke_ii($219|0,($__e$sroa$0$0|0))|0);
      $221 = __THREW__; __THREW__ = 0;
      $222 = $221&1;
      if ($222) {
       label = 82;
       break L81;
      }
      $223 = ($220|0)==(-1);
      if ($223) {
       label = 74;
      } else {
       if ($209) {
        $__e$sroa$0$2 = $__e$sroa$0$0;
       } else {
        $1052 = $1085;$1086 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 342;
        break L81;
       }
      }
     }
    } while(0);
    if ((label|0) == 74) {
     label = 0;
     if ($209) {
      $1052 = $1085;$1086 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
      label = 342;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $224 = (($__pat) + ($__p$0232)|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225 << 24 >> 24;
    L101: do {
     switch ($226|0) {
     case 1:  {
      $cond = ($__p$0232|0)==(3);
      if ($cond) {
       $1052 = $1085;$1086 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 342;
       break L81;
      }
      $273 = HEAP32[$__b>>2]|0;
      $274 = (($273) + 12|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (($273) + 16|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = ($275|0)==($277|0);
      if ($278) {
       $279 = HEAP32[$273>>2]|0;
       $280 = (($279) + 36|0);
       $281 = HEAP32[$280>>2]|0;
       __THREW__ = 0;
       $282 = (invoke_ii($281|0,($273|0))|0);
       $283 = __THREW__; __THREW__ = 0;
       $284 = $283&1;
       if ($284) {
        label = 82;
        break L81;
       } else {
        $$0$i$i33 = $282;
       }
      } else {
       $285 = HEAP8[$275>>0]|0;
       $286 = $285&255;
       $$0$i$i33 = $286;
      }
      $287 = $$0$i$i33&255;
      $isascii1$i = ($287<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 108;
       break L81;
      }
      $sext201 = $$0$i$i33 << 24;
      $288 = $sext201 >> 24;
      $289 = HEAP32[$178>>2]|0;
      $290 = (($289) + ($288<<1)|0);
      $291 = HEAP16[$290>>1]|0;
      $292 = $291 & 8192;
      $293 = ($292<<16>>16)==(0);
      if ($293) {
       label = 108;
       break L81;
      }
      $294 = HEAP32[$__b>>2]|0;
      $295 = (($294) + 12|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (($294) + 16|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ($296|0)==($298|0);
      if ($299) {
       $300 = HEAP32[$294>>2]|0;
       $301 = (($300) + 40|0);
       $302 = HEAP32[$301>>2]|0;
       __THREW__ = 0;
       $303 = (invoke_ii($302|0,($294|0))|0);
       $304 = __THREW__; __THREW__ = 0;
       $305 = $304&1;
       if ($305) {
        label = 82;
        break L81;
       } else {
        $$0$i$i36 = $303;
       }
      } else {
       $306 = (($296) + 1|0);
       HEAP32[$295>>2] = $306;
       $307 = HEAP8[$296>>0]|0;
       $308 = $307&255;
       $$0$i$i36 = $308;
      }
      $309 = $$0$i$i36&255;
      __THREW__ = 0;
      invoke_vii(410,($__spaces|0),($309|0));
      $310 = __THREW__; __THREW__ = 0;
      $311 = $310&1;
      if ($311) {
       label = 82;
       break L81;
      } else {
       label = 109;
      }
      break;
     }
     case 0:  {
      label = 109;
      break;
     }
     case 3:  {
      $385 = HEAP8[$__psn>>0]|0;
      $386 = $385 & 1;
      $387 = ($386<<24>>24)==(0);
      if ($387) {
       $389 = $385&255;
       $390 = $389 >>> 1;
       $400 = $390;
      } else {
       $388 = HEAP32[$183>>2]|0;
       $400 = $388;
      }
      $391 = HEAP8[$__nsn>>0]|0;
      $392 = $391 & 1;
      $393 = ($392<<24>>24)==(0);
      if ($393) {
       $395 = $391&255;
       $396 = $395 >>> 1;
       $398 = $396;
      } else {
       $394 = HEAP32[$180>>2]|0;
       $398 = $394;
      }
      $397 = (0 - ($398))|0;
      $399 = ($400|0)==($397|0);
      if ($399) {
       $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
      } else {
       if ($387) {
        $402 = $385&255;
        $403 = $402 >>> 1;
        $405 = $403;
       } else {
        $401 = HEAP32[$183>>2]|0;
        $405 = $401;
       }
       $404 = ($405|0)==(0);
       if (!($404)) {
        if ($393) {
         $407 = $391&255;
         $408 = $407 >>> 1;
         $410 = $408;
        } else {
         $406 = HEAP32[$180>>2]|0;
         $410 = $406;
        }
        $409 = ($410|0)==(0);
        if (!($409)) {
         $492 = HEAP32[$__b>>2]|0;
         $493 = (($492) + 12|0);
         $494 = HEAP32[$493>>2]|0;
         $495 = (($492) + 16|0);
         $496 = HEAP32[$495>>2]|0;
         $497 = ($494|0)==($496|0);
         if ($497) {
          $498 = HEAP32[$492>>2]|0;
          $499 = (($498) + 36|0);
          $500 = HEAP32[$499>>2]|0;
          __THREW__ = 0;
          $501 = (invoke_ii($500|0,($492|0))|0);
          $502 = __THREW__; __THREW__ = 0;
          $503 = $502&1;
          if ($503) {
           label = 82;
           break L81;
          }
          $$pre247 = HEAP8[$__psn>>0]|0;
          $$pre16 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert17 = (($$pre16) + 12|0);
          $$pre18 = HEAP32[$$phi$trans$insert17>>2]|0;
          $$phi$trans$insert19 = (($$pre16) + 16|0);
          $$pre20 = HEAP32[$$phi$trans$insert19>>2]|0;
          $$0$i$i111 = $501;$508 = $$pre247;$514 = $$pre16;$516 = $$pre18;$517 = $$pre20;
         } else {
          $504 = HEAP8[$494>>0]|0;
          $505 = $504&255;
          $$0$i$i111 = $505;$508 = $385;$514 = $492;$516 = $494;$517 = $496;
         }
         $506 = $$0$i$i111&255;
         $507 = $508 & 1;
         $509 = ($507<<24>>24)==(0);
         $510 = HEAP32[$184>>2]|0;
         $$272 = $509 ? $182 : $510;
         $511 = HEAP8[$$272>>0]|0;
         $512 = ($506<<24>>24)==($511<<24>>24);
         $513 = (($514) + 12|0);
         $515 = ($516|0)==($517|0);
         if ($512) {
          if ($515) {
           $518 = HEAP32[$514>>2]|0;
           $519 = (($518) + 40|0);
           $520 = HEAP32[$519>>2]|0;
           __THREW__ = 0;
           (invoke_ii($520|0,($514|0))|0);
           $521 = __THREW__; __THREW__ = 0;
           $522 = $521&1;
           if ($522) {
            label = 82;
            break L81;
           }
          } else {
           $523 = (($516) + 1|0);
           HEAP32[$513>>2] = $523;
          }
          $524 = HEAP8[$__psn>>0]|0;
          $525 = $524 & 1;
          $526 = ($525<<24>>24)==(0);
          if ($526) {
           $528 = $524&255;
           $529 = $528 >>> 1;
           $531 = $529;
          } else {
           $527 = HEAP32[$183>>2]|0;
           $531 = $527;
          }
          $530 = ($531>>>0)>(1);
          $__psn$__trailing_sign$09 = $530 ? $__psn : $__trailing_sign$0234;
          $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L101;
         }
         if ($515) {
          $532 = HEAP32[$514>>2]|0;
          $533 = (($532) + 36|0);
          $534 = HEAP32[$533>>2]|0;
          __THREW__ = 0;
          $535 = (invoke_ii($534|0,($514|0))|0);
          $536 = __THREW__; __THREW__ = 0;
          $537 = $536&1;
          if ($537) {
           label = 82;
           break L81;
          } else {
           $$0$i$i120 = $535;
          }
         } else {
          $538 = HEAP8[$516>>0]|0;
          $539 = $538&255;
          $$0$i$i120 = $539;
         }
         $540 = $$0$i$i120&255;
         $541 = HEAP8[$__nsn>>0]|0;
         $542 = $541 & 1;
         $543 = ($542<<24>>24)==(0);
         $544 = HEAP32[$181>>2]|0;
         $$273 = $543 ? $179 : $544;
         $545 = HEAP8[$$273>>0]|0;
         $546 = ($540<<24>>24)==($545<<24>>24);
         if (!($546)) {
          label = 199;
          break L81;
         }
         $547 = HEAP32[$__b>>2]|0;
         $548 = (($547) + 12|0);
         $549 = HEAP32[$548>>2]|0;
         $550 = (($547) + 16|0);
         $551 = HEAP32[$550>>2]|0;
         $552 = ($549|0)==($551|0);
         if ($552) {
          $553 = HEAP32[$547>>2]|0;
          $554 = (($553) + 40|0);
          $555 = HEAP32[$554>>2]|0;
          __THREW__ = 0;
          (invoke_ii($555|0,($547|0))|0);
          $556 = __THREW__; __THREW__ = 0;
          $557 = $556&1;
          if ($557) {
           label = 82;
           break L81;
          }
         } else {
          $558 = (($549) + 1|0);
          HEAP32[$548>>2] = $558;
         }
         HEAP8[$__neg>>0] = 1;
         $559 = HEAP8[$__nsn>>0]|0;
         $560 = $559 & 1;
         $561 = ($560<<24>>24)==(0);
         if ($561) {
          $563 = $559&255;
          $564 = $563 >>> 1;
          $566 = $564;
         } else {
          $562 = HEAP32[$180>>2]|0;
          $566 = $562;
         }
         $565 = ($566>>>0)>(1);
         $__nsn$__trailing_sign$010 = $565 ? $__nsn : $__trailing_sign$0234;
         $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L101;
        }
       }
       if ($387) {
        $412 = $385&255;
        $413 = $412 >>> 1;
        $415 = $413;
       } else {
        $411 = HEAP32[$183>>2]|0;
        $415 = $411;
       }
       $414 = ($415|0)==(0);
       $416 = HEAP32[$__b>>2]|0;
       $417 = (($416) + 12|0);
       $418 = HEAP32[$417>>2]|0;
       $419 = (($416) + 16|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = ($418|0)==($420|0);
       if ($414) {
        if ($421) {
         $457 = HEAP32[$416>>2]|0;
         $458 = (($457) + 36|0);
         $459 = HEAP32[$458>>2]|0;
         __THREW__ = 0;
         $460 = (invoke_ii($459|0,($416|0))|0);
         $461 = __THREW__; __THREW__ = 0;
         $462 = $461&1;
         if ($462) {
          label = 82;
          break L81;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i104 = $460;$467 = $$pre;
        } else {
         $463 = HEAP8[$418>>0]|0;
         $464 = $463&255;
         $$0$i$i104 = $464;$467 = $391;
        }
        $465 = $$0$i$i104&255;
        $466 = $467 & 1;
        $468 = ($466<<24>>24)==(0);
        $469 = HEAP32[$181>>2]|0;
        $$271 = $468 ? $179 : $469;
        $470 = HEAP8[$$271>>0]|0;
        $471 = ($465<<24>>24)==($470<<24>>24);
        if (!($471)) {
         $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
         break L101;
        }
        $472 = HEAP32[$__b>>2]|0;
        $473 = (($472) + 12|0);
        $474 = HEAP32[$473>>2]|0;
        $475 = (($472) + 16|0);
        $476 = HEAP32[$475>>2]|0;
        $477 = ($474|0)==($476|0);
        if ($477) {
         $478 = HEAP32[$472>>2]|0;
         $479 = (($478) + 40|0);
         $480 = HEAP32[$479>>2]|0;
         __THREW__ = 0;
         (invoke_ii($480|0,($472|0))|0);
         $481 = __THREW__; __THREW__ = 0;
         $482 = $481&1;
         if ($482) {
          label = 82;
          break L81;
         }
        } else {
         $483 = (($474) + 1|0);
         HEAP32[$473>>2] = $483;
        }
        HEAP8[$__neg>>0] = 1;
        $484 = HEAP8[$__nsn>>0]|0;
        $485 = $484 & 1;
        $486 = ($485<<24>>24)==(0);
        if ($486) {
         $488 = $484&255;
         $489 = $488 >>> 1;
         $491 = $489;
        } else {
         $487 = HEAP32[$180>>2]|0;
         $491 = $487;
        }
        $490 = ($491>>>0)>(1);
        $__nsn$__trailing_sign$0 = $490 ? $__nsn : $__trailing_sign$0234;
        $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L101;
       }
       if ($421) {
        $422 = HEAP32[$416>>2]|0;
        $423 = (($422) + 36|0);
        $424 = HEAP32[$423>>2]|0;
        __THREW__ = 0;
        $425 = (invoke_ii($424|0,($416|0))|0);
        $426 = __THREW__; __THREW__ = 0;
        $427 = $426&1;
        if ($427) {
         label = 82;
         break L81;
        }
        $$pre245 = HEAP8[$__psn>>0]|0;
        $$0$i$i84 = $425;$432 = $$pre245;
       } else {
        $428 = HEAP8[$418>>0]|0;
        $429 = $428&255;
        $$0$i$i84 = $429;$432 = $385;
       }
       $430 = $$0$i$i84&255;
       $431 = $432 & 1;
       $433 = ($431<<24>>24)==(0);
       $434 = HEAP32[$184>>2]|0;
       $$ = $433 ? $182 : $434;
       $435 = HEAP8[$$>>0]|0;
       $436 = ($430<<24>>24)==($435<<24>>24);
       if (!($436)) {
        HEAP8[$__neg>>0] = 1;
        $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
        break L101;
       }
       $437 = HEAP32[$__b>>2]|0;
       $438 = (($437) + 12|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = (($437) + 16|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = ($439|0)==($441|0);
       if ($442) {
        $443 = HEAP32[$437>>2]|0;
        $444 = (($443) + 40|0);
        $445 = HEAP32[$444>>2]|0;
        __THREW__ = 0;
        (invoke_ii($445|0,($437|0))|0);
        $446 = __THREW__; __THREW__ = 0;
        $447 = $446&1;
        if ($447) {
         label = 82;
         break L81;
        }
       } else {
        $448 = (($439) + 1|0);
        HEAP32[$438>>2] = $448;
       }
       $449 = HEAP8[$__psn>>0]|0;
       $450 = $449 & 1;
       $451 = ($450<<24>>24)==(0);
       if ($451) {
        $453 = $449&255;
        $454 = $453 >>> 1;
        $456 = $454;
       } else {
        $452 = HEAP32[$183>>2]|0;
        $456 = $452;
       }
       $455 = ($456>>>0)>(1);
       $__psn$__trailing_sign$0 = $455 ? $__psn : $__trailing_sign$0234;
       $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $569 = ($__trailing_sign$0234|0)!=(0|0);
      $570 = ($__p$0232>>>0)<(2);
      $or$cond = $569 | $570;
      if (!($or$cond)) {
       $571 = ($__p$0232|0)==(2);
       if ($571) {
        $572 = HEAP8[$193>>0]|0;
        $573 = ($572<<24>>24)!=(0);
        $574 = $573;
       } else {
        $574 = 0;
       }
       $brmerge = $186 | $574;
       if (!($brmerge)) {
        $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;
        break L101;
       }
      }
      $575 = HEAP8[$__sym>>0]|0;
      $576 = $575 & 1;
      $577 = ($576<<24>>24)==(0);
      $578 = HEAP32[$188>>2]|0;
      $$274 = $577 ? $187 : $578;
      $579 = ($__p$0232|0)==(0);
      L209: do {
       if ($579) {
        $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $$274;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $580 = (($__p$0232) + -1)|0;
        $581 = (($__pat) + ($580)|0);
        $582 = HEAP8[$581>>0]|0;
        $switch = ($582&255)<(2);
        if ($switch) {
         $583 = $575&255;
         $584 = $583 >>> 1;
         $585 = HEAP32[$189>>2]|0;
         $$276 = $577 ? $584 : $585;
         $586 = (($$274) + ($$276)|0);
         $588 = $$274;
         while(1) {
          $587 = ($588|0)==($586|0);
          if ($587) {
           break;
          }
          $589 = HEAP8[$588>>0]|0;
          $isascii1$i161 = ($589<<24>>24)>(-1);
          if (!($isascii1$i161)) {
           break;
          }
          $590 = $589 << 24 >> 24;
          $591 = HEAP32[$178>>2]|0;
          $592 = (($591) + ($590<<1)|0);
          $593 = HEAP16[$592>>1]|0;
          $594 = $593 & 8192;
          $595 = ($594<<16>>16)==(0);
          $596 = (($588) + 1|0);
          if ($595) {
           break;
          } else {
           $588 = $596;
          }
         }
         $597 = $588;
         $598 = $$274;
         $599 = (($597) - ($598))|0;
         $600 = HEAP8[$__spaces>>0]|0;
         $601 = $600 & 1;
         $602 = ($601<<24>>24)==(0);
         if ($602) {
          $604 = $600&255;
          $605 = $604 >>> 1;
          $607 = $605;
         } else {
          $603 = HEAP32[$192>>2]|0;
          $607 = $603;
         }
         $606 = ($599>>>0)>($607>>>0);
         if ($606) {
          $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $$274;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($602) {
           $611 = $600&255;
           $612 = $611 >>> 1;
           $$sum262 = (($612) - ($599))|0;
           $613 = ((($__spaces) + ($$sum262)|0) + 1|0);
           $615 = $190;$616 = $612;$618 = $613;
          } else {
           $608 = HEAP32[$191>>2]|0;
           $609 = HEAP32[$192>>2]|0;
           $$sum = (($609) - ($599))|0;
           $610 = (($608) + ($$sum)|0);
           $615 = $608;$616 = $609;$618 = $610;
          }
          $614 = (($615) + ($616)|0);
          $617 = ($618|0)==($614|0);
          if ($617) {
           $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $588;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $620 = $618;$622 = $$274;
           while(1) {
            $619 = HEAP8[$620>>0]|0;
            $621 = HEAP8[$622>>0]|0;
            $623 = ($619<<24>>24)==($621<<24>>24);
            if (!($623)) {
             $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $$274;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L209;
            }
            $624 = (($620) + 1|0);
            $625 = (($622) + 1|0);
            $626 = ($624|0)==($614|0);
            if ($626) {
             $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $588;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break;
            } else {
             $620 = $624;$622 = $625;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i155 = $__e$sroa$0$2;$628 = $575;$638 = $$274;$656 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      L229: while(1) {
       $627 = $628 & 1;
       $629 = ($627<<24>>24)==(0);
       if ($629) {
        $632 = $628&255;
        $633 = $632 >>> 1;
        $635 = $187;$636 = $633;
       } else {
        $630 = HEAP32[$188>>2]|0;
        $631 = HEAP32[$189>>2]|0;
        $635 = $630;$636 = $631;
       }
       $634 = (($635) + ($636)|0);
       $637 = ($638|0)==($634|0);
       if ($637) {
        $1090 = $$pre$i2$i$i155;$__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $639 = HEAP32[$__b>>2]|0;
       $640 = ($639|0)==(0|0);
       do {
        if ($640) {
         $654 = 0;
        } else {
         $641 = (($639) + 12|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = (($639) + 16|0);
         $644 = HEAP32[$643>>2]|0;
         $645 = ($642|0)==($644|0);
         if ($645) {
          $646 = HEAP32[$639>>2]|0;
          $647 = (($646) + 36|0);
          $648 = HEAP32[$647>>2]|0;
          __THREW__ = 0;
          $649 = (invoke_ii($648|0,($639|0))|0);
          $650 = __THREW__; __THREW__ = 0;
          $651 = $650&1;
          if ($651) {
           label = 80;
           break L81;
          }
          $652 = ($649|0)==(-1);
          if ($652) {
           HEAP32[$__b>>2] = 0;
           $654 = 0;
           break;
          } else {
           $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
           $654 = $$pre$i$i$i151;
           break;
          }
         } else {
          $654 = $639;
         }
        }
       } while(0);
       $653 = ($654|0)==(0|0);
       $655 = ($656|0)==(0|0);
       do {
        if ($655) {
         $$pre$i2$i$i155250 = $$pre$i2$i$i155;$__e$sroa$0$7 = $__e$sroa$0$6;
         label = 235;
        } else {
         $657 = (($656) + 12|0);
         $658 = HEAP32[$657>>2]|0;
         $659 = (($656) + 16|0);
         $660 = HEAP32[$659>>2]|0;
         $661 = ($658|0)==($660|0);
         if (!($661)) {
          if ($653) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$1091 = $656;$__e$sroa$0$8 = $__e$sroa$0$6;
           break;
          } else {
           $1090 = $$pre$i2$i$i155;$__e$sroa$0$9 = $__e$sroa$0$6;
           break L229;
          }
         }
         $662 = HEAP32[$656>>2]|0;
         $663 = (($662) + 36|0);
         $664 = HEAP32[$663>>2]|0;
         __THREW__ = 0;
         $665 = (invoke_ii($664|0,($656|0))|0);
         $666 = __THREW__; __THREW__ = 0;
         $667 = $666&1;
         if ($667) {
          label = 80;
          break L81;
         }
         $668 = ($665|0)==(-1);
         if ($668) {
          $$pre$i2$i$i155250 = 0;$__e$sroa$0$7 = 0;
          label = 235;
         } else {
          $669 = ($$pre$i2$i$i155|0)==(0|0);
          $tmp$i$i157 = $653 ^ $669;
          if ($tmp$i$i157) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$1091 = $$pre$i2$i$i155;$__e$sroa$0$8 = $__e$sroa$0$6;
          } else {
           $1090 = $$pre$i2$i$i155;$__e$sroa$0$9 = $__e$sroa$0$6;
           break L229;
          }
         }
        }
       } while(0);
       if ((label|0) == 235) {
        label = 0;
        if ($653) {
         $1090 = $$pre$i2$i$i155250;$__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i2$i$i155249 = $$pre$i2$i$i155250;$1091 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $670 = HEAP32[$__b>>2]|0;
       $671 = (($670) + 12|0);
       $672 = HEAP32[$671>>2]|0;
       $673 = (($670) + 16|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = ($672|0)==($674|0);
       if ($675) {
        $676 = HEAP32[$670>>2]|0;
        $677 = (($676) + 36|0);
        $678 = HEAP32[$677>>2]|0;
        __THREW__ = 0;
        $679 = (invoke_ii($678|0,($670|0))|0);
        $680 = __THREW__; __THREW__ = 0;
        $681 = $680&1;
        if ($681) {
         label = 80;
         break L81;
        } else {
         $$0$i$i147 = $679;
        }
       } else {
        $682 = HEAP8[$672>>0]|0;
        $683 = $682&255;
        $$0$i$i147 = $683;
       }
       $684 = $$0$i$i147&255;
       $685 = HEAP8[$638>>0]|0;
       $686 = ($684<<24>>24)==($685<<24>>24);
       if (!($686)) {
        $1090 = $$pre$i2$i$i155249;$__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $687 = HEAP32[$__b>>2]|0;
       $688 = (($687) + 12|0);
       $689 = HEAP32[$688>>2]|0;
       $690 = (($687) + 16|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = ($689|0)==($691|0);
       if ($692) {
        $693 = HEAP32[$687>>2]|0;
        $694 = (($693) + 40|0);
        $695 = HEAP32[$694>>2]|0;
        __THREW__ = 0;
        (invoke_ii($695|0,($687|0))|0);
        $696 = __THREW__; __THREW__ = 0;
        $697 = $696&1;
        if ($697) {
         label = 80;
         break L81;
        }
       } else {
        $698 = (($689) + 1|0);
        HEAP32[$688>>2] = $698;
       }
       $699 = (($638) + 1|0);
       $$pre248 = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i155 = $$pre$i2$i$i155249;$628 = $$pre248;$638 = $699;$656 = $1091;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($186) {
       $700 = HEAP8[$__sym>>0]|0;
       $701 = $700 & 1;
       $702 = ($701<<24>>24)==(0);
       if ($702) {
        $705 = $700&255;
        $706 = $705 >>> 1;
        $708 = $187;$709 = $706;
       } else {
        $703 = HEAP32[$188>>2]|0;
        $704 = HEAP32[$189>>2]|0;
        $708 = $703;$709 = $704;
       }
       $707 = (($708) + ($709)|0);
       $710 = ($638|0)==($707|0);
       if ($710) {
        $1087 = $1090;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
       } else {
        label = 250;
        break L81;
       }
      } else {
       $1087 = $1090;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 4:  {
      $$pre$i2$i$i138 = $__e$sroa$0$2;$730 = $__e$sroa$0$2;$785 = $1085;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;
      L269: while(1) {
       $713 = HEAP32[$__b>>2]|0;
       $714 = ($713|0)==(0|0);
       do {
        if ($714) {
         $728 = 0;
        } else {
         $715 = (($713) + 12|0);
         $716 = HEAP32[$715>>2]|0;
         $717 = (($713) + 16|0);
         $718 = HEAP32[$717>>2]|0;
         $719 = ($716|0)==($718|0);
         if ($719) {
          $720 = HEAP32[$713>>2]|0;
          $721 = (($720) + 36|0);
          $722 = HEAP32[$721>>2]|0;
          __THREW__ = 0;
          $723 = (invoke_ii($722|0,($713|0))|0);
          $724 = __THREW__; __THREW__ = 0;
          $725 = $724&1;
          if ($725) {
           label = 78;
           break L81;
          }
          $726 = ($723|0)==(-1);
          if ($726) {
           HEAP32[$__b>>2] = 0;
           $728 = 0;
           break;
          } else {
           $$pre$i$i$i134 = HEAP32[$__b>>2]|0;
           $728 = $$pre$i$i$i134;
           break;
          }
         } else {
          $728 = $713;
         }
        }
       } while(0);
       $727 = ($728|0)==(0|0);
       $729 = ($730|0)==(0|0);
       do {
        if ($729) {
         $1092 = $$pre$i2$i$i138;$__e$sroa$0$11 = $__e$sroa$0$10;
         label = 262;
        } else {
         $731 = (($730) + 12|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = (($730) + 16|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = ($732|0)==($734|0);
         if (!($735)) {
          if ($727) {
           $1093 = $$pre$i2$i$i138;$1094 = $730;$__e$sroa$0$12 = $__e$sroa$0$10;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;$__e$sroa$0$13 = $__e$sroa$0$10;
           break L269;
          }
         }
         $736 = HEAP32[$730>>2]|0;
         $737 = (($736) + 36|0);
         $738 = HEAP32[$737>>2]|0;
         __THREW__ = 0;
         $739 = (invoke_ii($738|0,($730|0))|0);
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 78;
          break L81;
         }
         $742 = ($739|0)==(-1);
         if ($742) {
          $1092 = 0;$__e$sroa$0$11 = 0;
          label = 262;
         } else {
          $743 = ($$pre$i2$i$i138|0)==(0|0);
          $tmp$i$i140 = $727 ^ $743;
          if ($tmp$i$i140) {
           $1093 = $$pre$i2$i$i138;$1094 = $$pre$i2$i$i138;$__e$sroa$0$12 = $__e$sroa$0$10;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;$__e$sroa$0$13 = $__e$sroa$0$10;
           break L269;
          }
         }
        }
       } while(0);
       if ((label|0) == 262) {
        label = 0;
        if ($727) {
         $$pre$i2$i$i98 = $1092;$__e$sroa$0$13 = $__e$sroa$0$11;
         break;
        } else {
         $1093 = $1092;$1094 = 0;$__e$sroa$0$12 = $__e$sroa$0$11;
        }
       }
       $744 = HEAP32[$__b>>2]|0;
       $745 = (($744) + 12|0);
       $746 = HEAP32[$745>>2]|0;
       $747 = (($744) + 16|0);
       $748 = HEAP32[$747>>2]|0;
       $749 = ($746|0)==($748|0);
       if ($749) {
        $750 = HEAP32[$744>>2]|0;
        $751 = (($750) + 36|0);
        $752 = HEAP32[$751>>2]|0;
        __THREW__ = 0;
        $753 = (invoke_ii($752|0,($744|0))|0);
        $754 = __THREW__; __THREW__ = 0;
        $755 = $754&1;
        if ($755) {
         label = 78;
         break L81;
        } else {
         $$0$i$i130 = $753;
        }
       } else {
        $756 = HEAP8[$746>>0]|0;
        $757 = $756&255;
        $$0$i$i130 = $757;
       }
       $758 = $$0$i$i130&255;
       $isascii1$i128 = ($758<<24>>24)>(-1);
       if ($isascii1$i128) {
        $sext199 = $$0$i$i130 << 24;
        $759 = $sext199 >> 24;
        $760 = HEAP32[$178>>2]|0;
        $761 = (($760) + ($759<<1)|0);
        $762 = HEAP16[$761>>1]|0;
        $763 = $762 & 2048;
        $764 = ($763<<16>>16)==(0);
        if ($764) {
         label = 273;
        } else {
         $765 = HEAP32[$__wn>>2]|0;
         $766 = HEAP32[$10>>2]|0;
         $767 = ($765|0)==($766|0);
         if ($767) {
          __THREW__ = 0;
          invoke_viii(411,($__wb|0),($__wn|0),($10|0));
          $768 = __THREW__; __THREW__ = 0;
          $769 = $768&1;
          if ($769) {
           label = 78;
           break L81;
          }
          $$pre257 = HEAP32[$__wn>>2]|0;
          $771 = $$pre257;
         } else {
          $771 = $765;
         }
         $770 = (($771) + 1|0);
         HEAP32[$__wn>>2] = $770;
         HEAP8[$771>>0] = $758;
         $772 = (($__ng$0) + 1)|0;
         $1095 = $785;$__ng$1 = $772;
        }
       } else {
        label = 273;
       }
       if ((label|0) == 273) {
        label = 0;
        $773 = HEAP8[$__grp>>0]|0;
        $774 = $773 & 1;
        $775 = ($774<<24>>24)==(0);
        if ($775) {
         $777 = $773&255;
         $778 = $777 >>> 1;
         $780 = $778;
        } else {
         $776 = HEAP32[$194>>2]|0;
         $780 = $776;
        }
        $779 = ($780|0)!=(0);
        $781 = ($__ng$0|0)!=(0);
        $or$cond6 = $779 & $781;
        $782 = ($758<<24>>24)==($__ts$0<<24>>24);
        $or$cond12 = $or$cond6 & $782;
        if (!($or$cond12)) {
         $$pre$i2$i$i98 = $1093;$__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $783 = HEAP32[$__ge>>2]|0;
        $784 = ($785|0)==($783|0);
        if ($784) {
         __THREW__ = 0;
         invoke_viii(412,($__gb|0),($__gn|0),($__ge|0));
         $786 = __THREW__; __THREW__ = 0;
         $787 = $786&1;
         if ($787) {
          label = 78;
          break L81;
         }
         $$pre259 = HEAP32[$__gn>>2]|0;
         $789 = $$pre259;
        } else {
         $789 = $785;
        }
        $788 = (($789) + 4|0);
        HEAP32[$__gn>>2] = $788;
        HEAP32[$789>>2] = $__ng$0;
        $1095 = $788;$__ng$1 = 0;
       }
       $790 = HEAP32[$__b>>2]|0;
       $791 = (($790) + 12|0);
       $792 = HEAP32[$791>>2]|0;
       $793 = (($790) + 16|0);
       $794 = HEAP32[$793>>2]|0;
       $795 = ($792|0)==($794|0);
       if ($795) {
        $796 = HEAP32[$790>>2]|0;
        $797 = (($796) + 40|0);
        $798 = HEAP32[$797>>2]|0;
        __THREW__ = 0;
        (invoke_ii($798|0,($790|0))|0);
        $799 = __THREW__; __THREW__ = 0;
        $800 = $799&1;
        if ($800) {
         label = 78;
         break L81;
        } else {
         $$pre$i2$i$i138 = $1093;$730 = $1094;$785 = $1095;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $801 = (($792) + 1|0);
        HEAP32[$791>>2] = $801;
        $$pre$i2$i$i138 = $1093;$730 = $1094;$785 = $1095;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $802 = HEAP32[$__gb>>2]|0;
      $803 = ($802|0)!=($785|0);
      $804 = ($__ng$0|0)!=(0);
      $or$cond8 = $803 & $804;
      if ($or$cond8) {
       $805 = HEAP32[$__ge>>2]|0;
       $806 = ($785|0)==($805|0);
       if ($806) {
        __THREW__ = 0;
        invoke_viii(412,($__gb|0),($__gn|0),($__ge|0));
        $807 = __THREW__; __THREW__ = 0;
        $808 = $807&1;
        if ($808) {
         label = 82;
         break L81;
        }
        $$pre253 = HEAP32[$__gn>>2]|0;
        $810 = $$pre253;
       } else {
        $810 = $785;
       }
       $809 = (($810) + 4|0);
       HEAP32[$__gn>>2] = $809;
       HEAP32[$810>>2] = $__ng$0;
       $1096 = $809;
      } else {
       $1096 = $785;
      }
      $811 = ($__fd$0|0)>(0);
      if ($811) {
       $812 = HEAP32[$__b>>2]|0;
       $813 = ($812|0)==(0|0);
       do {
        if ($813) {
         $827 = 0;
        } else {
         $814 = (($812) + 12|0);
         $815 = HEAP32[$814>>2]|0;
         $816 = (($812) + 16|0);
         $817 = HEAP32[$816>>2]|0;
         $818 = ($815|0)==($817|0);
         if ($818) {
          $819 = HEAP32[$812>>2]|0;
          $820 = (($819) + 36|0);
          $821 = HEAP32[$820>>2]|0;
          __THREW__ = 0;
          $822 = (invoke_ii($821|0,($812|0))|0);
          $823 = __THREW__; __THREW__ = 0;
          $824 = $823&1;
          if ($824) {
           label = 82;
           break L81;
          }
          $825 = ($822|0)==(-1);
          if ($825) {
           HEAP32[$__b>>2] = 0;
           $827 = 0;
           break;
          } else {
           $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
           $827 = $$pre$i$i$i94;
           break;
          }
         } else {
          $827 = $812;
         }
        }
       } while(0);
       $826 = ($827|0)==(0|0);
       $828 = ($$pre$i2$i$i98|0)==(0|0);
       do {
        if ($828) {
         $__e$sroa$0$14 = $__e$sroa$0$13;
         label = 301;
        } else {
         $829 = (($$pre$i2$i$i98) + 12|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = (($$pre$i2$i$i98) + 16|0);
         $832 = HEAP32[$831>>2]|0;
         $833 = ($830|0)==($832|0);
         if (!($833)) {
          if ($826) {
           $1098 = $$pre$i2$i$i98;$__e$sroa$0$15 = $__e$sroa$0$13;
           break;
          } else {
           label = 307;
           break L81;
          }
         }
         $834 = HEAP32[$$pre$i2$i$i98>>2]|0;
         $835 = (($834) + 36|0);
         $836 = HEAP32[$835>>2]|0;
         __THREW__ = 0;
         $837 = (invoke_ii($836|0,($$pre$i2$i$i98|0))|0);
         $838 = __THREW__; __THREW__ = 0;
         $839 = $838&1;
         if ($839) {
          label = 82;
          break L81;
         }
         $840 = ($837|0)==(-1);
         if ($840) {
          $__e$sroa$0$14 = 0;
          label = 301;
         } else {
          if ($826) {
           $1098 = $$pre$i2$i$i98;$__e$sroa$0$15 = $__e$sroa$0$13;
          } else {
           label = 307;
           break L81;
          }
         }
        }
       } while(0);
       if ((label|0) == 301) {
        label = 0;
        if ($826) {
         label = 307;
         break L81;
        } else {
         $1098 = 0;$__e$sroa$0$15 = $__e$sroa$0$14;
        }
       }
       $841 = HEAP32[$__b>>2]|0;
       $842 = (($841) + 12|0);
       $843 = HEAP32[$842>>2]|0;
       $844 = (($841) + 16|0);
       $845 = HEAP32[$844>>2]|0;
       $846 = ($843|0)==($845|0);
       if ($846) {
        $847 = HEAP32[$841>>2]|0;
        $848 = (($847) + 36|0);
        $849 = HEAP32[$848>>2]|0;
        __THREW__ = 0;
        $850 = (invoke_ii($849|0,($841|0))|0);
        $851 = __THREW__; __THREW__ = 0;
        $852 = $851&1;
        if ($852) {
         label = 82;
         break L81;
        } else {
         $$0$i$i87 = $850;
        }
       } else {
        $853 = HEAP8[$843>>0]|0;
        $854 = $853&255;
        $$0$i$i87 = $854;
       }
       $855 = $$0$i$i87&255;
       $856 = ($855<<24>>24)==($__dp$0<<24>>24);
       if (!($856)) {
        label = 307;
        break L81;
       }
       $859 = HEAP32[$__b>>2]|0;
       $860 = (($859) + 12|0);
       $861 = HEAP32[$860>>2]|0;
       $862 = (($859) + 16|0);
       $863 = HEAP32[$862>>2]|0;
       $864 = ($861|0)==($863|0);
       if ($864) {
        $865 = HEAP32[$859>>2]|0;
        $866 = (($865) + 40|0);
        $867 = HEAP32[$866>>2]|0;
        __THREW__ = 0;
        (invoke_ii($867|0,($859|0))|0);
        $868 = __THREW__; __THREW__ = 0;
        $869 = $868&1;
        if ($869) {
         label = 82;
         break L81;
        } else {
         $$pre$i2$i$i74 = $1098;$888 = $1098;$948 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $870 = (($861) + 1|0);
        HEAP32[$860>>2] = $870;
        $$pre$i2$i$i74 = $1098;$888 = $1098;$948 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $871 = HEAP32[$__b>>2]|0;
        $872 = ($871|0)==(0|0);
        do {
         if ($872) {
          $886 = 0;
         } else {
          $873 = (($871) + 12|0);
          $874 = HEAP32[$873>>2]|0;
          $875 = (($871) + 16|0);
          $876 = HEAP32[$875>>2]|0;
          $877 = ($874|0)==($876|0);
          if ($877) {
           $878 = HEAP32[$871>>2]|0;
           $879 = (($878) + 36|0);
           $880 = HEAP32[$879>>2]|0;
           __THREW__ = 0;
           $881 = (invoke_ii($880|0,($871|0))|0);
           $882 = __THREW__; __THREW__ = 0;
           $883 = $882&1;
           if ($883) {
            label = 79;
            break L81;
           }
           $884 = ($881|0)==(-1);
           if ($884) {
            HEAP32[$__b>>2] = 0;
            $886 = 0;
            break;
           } else {
            $$pre$i$i$i70 = HEAP32[$__b>>2]|0;
            $886 = $$pre$i$i$i70;
            break;
           }
          } else {
           $886 = $871;
          }
         }
        } while(0);
        $885 = ($886|0)==(0|0);
        $887 = ($888|0)==(0|0);
        do {
         if ($887) {
          $$pre$i2$i$i74255$ph = $$pre$i2$i$i74;$__e$sroa$0$17 = $__e$sroa$0$16;
          label = 322;
         } else {
          $889 = (($888) + 12|0);
          $890 = HEAP32[$889>>2]|0;
          $891 = (($888) + 16|0);
          $892 = HEAP32[$891>>2]|0;
          $893 = ($890|0)==($892|0);
          if (!($893)) {
           if ($885) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$1099 = $888;$__e$sroa$0$18 = $__e$sroa$0$16;
            break;
           } else {
            label = 329;
            break L81;
           }
          }
          $894 = HEAP32[$888>>2]|0;
          $895 = (($894) + 36|0);
          $896 = HEAP32[$895>>2]|0;
          __THREW__ = 0;
          $897 = (invoke_ii($896|0,($888|0))|0);
          $898 = __THREW__; __THREW__ = 0;
          $899 = $898&1;
          if ($899) {
           label = 79;
           break L81;
          }
          $900 = ($897|0)==(-1);
          if ($900) {
           $$pre$i2$i$i74255$ph = 0;$__e$sroa$0$17 = 0;
           label = 322;
           break;
          }
          $901 = ($$pre$i2$i$i74|0)==(0|0);
          $tmp$i$i76 = $885 ^ $901;
          if ($tmp$i$i76) {
           $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$1099 = $$pre$i2$i$i74;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 329;
           break L81;
          }
         }
        } while(0);
        if ((label|0) == 322) {
         label = 0;
         if ($885) {
          label = 329;
          break L81;
         } else {
          $$pre$i2$i$i74255266 = $$pre$i2$i$i74255$ph;$1099 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $902 = HEAP32[$__b>>2]|0;
        $903 = (($902) + 12|0);
        $904 = HEAP32[$903>>2]|0;
        $905 = (($902) + 16|0);
        $906 = HEAP32[$905>>2]|0;
        $907 = ($904|0)==($906|0);
        if ($907) {
         $908 = HEAP32[$902>>2]|0;
         $909 = (($908) + 36|0);
         $910 = HEAP32[$909>>2]|0;
         __THREW__ = 0;
         $911 = (invoke_ii($910|0,($902|0))|0);
         $912 = __THREW__; __THREW__ = 0;
         $913 = $912&1;
         if ($913) {
          label = 79;
          break L81;
         } else {
          $$0$i$i65 = $911;
         }
        } else {
         $914 = HEAP8[$904>>0]|0;
         $915 = $914&255;
         $$0$i$i65 = $915;
        }
        $916 = $$0$i$i65&255;
        $isascii1$i63 = ($916<<24>>24)>(-1);
        if (!($isascii1$i63)) {
         label = 329;
         break L81;
        }
        $sext = $$0$i$i65 << 24;
        $917 = $sext >> 24;
        $918 = HEAP32[$178>>2]|0;
        $919 = (($918) + ($917<<1)|0);
        $920 = HEAP16[$919>>1]|0;
        $921 = $920 & 2048;
        $922 = ($921<<16>>16)==(0);
        if ($922) {
         label = 329;
         break L81;
        }
        $925 = HEAP32[$__wn>>2]|0;
        $926 = HEAP32[$10>>2]|0;
        $927 = ($925|0)==($926|0);
        if ($927) {
         __THREW__ = 0;
         invoke_viii(411,($__wb|0),($__wn|0),($10|0));
         $928 = __THREW__; __THREW__ = 0;
         $929 = $928&1;
         if ($929) {
          label = 79;
          break L81;
         }
        }
        $930 = HEAP32[$__b>>2]|0;
        $931 = (($930) + 12|0);
        $932 = HEAP32[$931>>2]|0;
        $933 = (($930) + 16|0);
        $934 = HEAP32[$933>>2]|0;
        $935 = ($932|0)==($934|0);
        if ($935) {
         $936 = HEAP32[$930>>2]|0;
         $937 = (($936) + 36|0);
         $938 = HEAP32[$937>>2]|0;
         __THREW__ = 0;
         $939 = (invoke_ii($938|0,($930|0))|0);
         $940 = __THREW__; __THREW__ = 0;
         $941 = $940&1;
         if ($941) {
          label = 79;
          break L81;
         } else {
          $$0$i$i58 = $939;
         }
        } else {
         $942 = HEAP8[$932>>0]|0;
         $943 = $942&255;
         $$0$i$i58 = $943;
        }
        $944 = $$0$i$i58&255;
        $945 = HEAP32[$__wn>>2]|0;
        $946 = (($945) + 1|0);
        HEAP32[$__wn>>2] = $946;
        HEAP8[$945>>0] = $944;
        $947 = (($948) + -1)|0;
        $949 = HEAP32[$__b>>2]|0;
        $950 = (($949) + 12|0);
        $951 = HEAP32[$950>>2]|0;
        $952 = (($949) + 16|0);
        $953 = HEAP32[$952>>2]|0;
        $954 = ($951|0)==($953|0);
        if ($954) {
         $955 = HEAP32[$949>>2]|0;
         $956 = (($955) + 40|0);
         $957 = HEAP32[$956>>2]|0;
         __THREW__ = 0;
         (invoke_ii($957|0,($949|0))|0);
         $958 = __THREW__; __THREW__ = 0;
         $959 = $958&1;
         if ($959) {
          label = 79;
          break L81;
         }
        } else {
         $961 = (($951) + 1|0);
         HEAP32[$950>>2] = $961;
        }
        $960 = ($947|0)>(0);
        if ($960) {
         $$pre$i2$i$i74 = $$pre$i2$i$i74255266;$888 = $1099;$948 = $947;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1097 = $$pre$i2$i$i74255266;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $947;
         break;
        }
       }
      } else {
       $1097 = $$pre$i2$i$i98;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $962 = HEAP32[$__wn>>2]|0;
      $963 = HEAP32[$__wb>>2]|0;
      $964 = ($962|0)==($963|0);
      if ($964) {
       label = 340;
       break L81;
      } else {
       $1087 = $1097;$1088 = $1096;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     default: {
      $1087 = $__e$sroa$0$2;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
     }
     }
    } while(0);
    L389: do {
     if ((label|0) == 109) {
      label = 0;
      $314 = ($__p$0232|0)==(3);
      if ($314) {
       $1052 = $1085;$1086 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 342;
       break L81;
      } else {
       $$pre$i2$i$i43 = $__e$sroa$0$2;$332 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $315 = HEAP32[$__b>>2]|0;
       $316 = ($315|0)==(0|0);
       do {
        if ($316) {
         $330 = 0;
        } else {
         $317 = (($315) + 12|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = (($315) + 16|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = ($318|0)==($320|0);
         if ($321) {
          $322 = HEAP32[$315>>2]|0;
          $323 = (($322) + 36|0);
          $324 = HEAP32[$323>>2]|0;
          __THREW__ = 0;
          $325 = (invoke_ii($324|0,($315|0))|0);
          $326 = __THREW__; __THREW__ = 0;
          $327 = $326&1;
          if ($327) {
           label = 81;
           break L81;
          }
          $328 = ($325|0)==(-1);
          if ($328) {
           HEAP32[$__b>>2] = 0;
           $330 = 0;
           break;
          } else {
           $$pre$i$i$i39 = HEAP32[$__b>>2]|0;
           $330 = $$pre$i$i$i39;
           break;
          }
         } else {
          $330 = $315;
         }
        }
       } while(0);
       $329 = ($330|0)==(0|0);
       $331 = ($332|0)==(0|0);
       do {
        if ($331) {
         $$pre$i2$i$i43240 = $$pre$i2$i$i43;$__e$sroa$0$4 = $__e$sroa$0$3;
         label = 121;
        } else {
         $333 = (($332) + 12|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (($332) + 16|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = ($334|0)==($336|0);
         if (!($337)) {
          if ($329) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$1089 = $332;$__e$sroa$0$5 = $__e$sroa$0$3;
           break;
          } else {
           $1087 = $$pre$i2$i$i43;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
           break L389;
          }
         }
         $338 = HEAP32[$332>>2]|0;
         $339 = (($338) + 36|0);
         $340 = HEAP32[$339>>2]|0;
         __THREW__ = 0;
         $341 = (invoke_ii($340|0,($332|0))|0);
         $342 = __THREW__; __THREW__ = 0;
         $343 = $342&1;
         if ($343) {
          label = 81;
          break L81;
         }
         $344 = ($341|0)==(-1);
         if ($344) {
          $$pre$i2$i$i43240 = 0;$__e$sroa$0$4 = 0;
          label = 121;
         } else {
          $345 = ($$pre$i2$i$i43|0)==(0|0);
          $tmp$i$i45 = $329 ^ $345;
          if ($tmp$i$i45) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$1089 = $$pre$i2$i$i43;$__e$sroa$0$5 = $__e$sroa$0$3;
          } else {
           $1087 = $$pre$i2$i$i43;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
           break L389;
          }
         }
        }
       } while(0);
       if ((label|0) == 121) {
        label = 0;
        if ($329) {
         $1087 = $$pre$i2$i$i43240;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
         break L389;
        } else {
         $$pre$i2$i$i43242 = $$pre$i2$i$i43240;$1089 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $346 = HEAP32[$__b>>2]|0;
       $347 = (($346) + 12|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = (($346) + 16|0);
       $350 = HEAP32[$349>>2]|0;
       $351 = ($348|0)==($350|0);
       if ($351) {
        $352 = HEAP32[$346>>2]|0;
        $353 = (($352) + 36|0);
        $354 = HEAP32[$353>>2]|0;
        __THREW__ = 0;
        $355 = (invoke_ii($354|0,($346|0))|0);
        $356 = __THREW__; __THREW__ = 0;
        $357 = $356&1;
        if ($357) {
         label = 81;
         break L81;
        } else {
         $$0$i$i49 = $355;
        }
       } else {
        $358 = HEAP8[$348>>0]|0;
        $359 = $358&255;
        $$0$i$i49 = $359;
       }
       $360 = $$0$i$i49&255;
       $isascii1$i52 = ($360<<24>>24)>(-1);
       if (!($isascii1$i52)) {
        $1087 = $$pre$i2$i$i43242;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
        break L389;
       }
       $sext200 = $$0$i$i49 << 24;
       $361 = $sext200 >> 24;
       $362 = HEAP32[$178>>2]|0;
       $363 = (($362) + ($361<<1)|0);
       $364 = HEAP16[$363>>1]|0;
       $365 = $364 & 8192;
       $366 = ($365<<16>>16)==(0);
       if ($366) {
        $1087 = $$pre$i2$i$i43242;$1088 = $1085;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0234;
        break L389;
       }
       $367 = HEAP32[$__b>>2]|0;
       $368 = (($367) + 12|0);
       $369 = HEAP32[$368>>2]|0;
       $370 = (($367) + 16|0);
       $371 = HEAP32[$370>>2]|0;
       $372 = ($369|0)==($371|0);
       if ($372) {
        $373 = HEAP32[$367>>2]|0;
        $374 = (($373) + 40|0);
        $375 = HEAP32[$374>>2]|0;
        __THREW__ = 0;
        $376 = (invoke_ii($375|0,($367|0))|0);
        $377 = __THREW__; __THREW__ = 0;
        $378 = $377&1;
        if ($378) {
         label = 81;
         break L81;
        } else {
         $$0$i$i55 = $376;
        }
       } else {
        $379 = (($369) + 1|0);
        HEAP32[$368>>2] = $379;
        $380 = HEAP8[$369>>0]|0;
        $381 = $380&255;
        $$0$i$i55 = $381;
       }
       $382 = $$0$i$i55&255;
       __THREW__ = 0;
       invoke_vii(410,($__spaces|0),($382|0));
       $383 = __THREW__; __THREW__ = 0;
       $384 = $383&1;
       if ($384) {
        label = 81;
        break L81;
       } else {
        $$pre$i2$i$i43 = $$pre$i2$i$i43242;$332 = $1089;$__e$sroa$0$3 = $__e$sroa$0$5;
       }
      }
     }
    } while(0);
    $967 = (($__p$0232) + 1)|0;
    $968 = ($967>>>0)<(4);
    if ($968) {
     $1085 = $1088;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0232 = $967;$__trailing_sign$0234 = $__trailing_sign$1;
    } else {
     $1052 = $1088;$1086 = $1087;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 342;
     break;
    }
   }
   L422:    switch (label|0) {
    case 78: {
     $229 = ___cxa_find_matching_catch()|0;
     $230 = tempRet0;
     $lpad$phi$index = $229;$lpad$phi$index7 = $230;
     break L78;
     break;
    }
    case 79: {
     $231 = ___cxa_find_matching_catch()|0;
     $232 = tempRet0;
     $lpad$phi$index = $231;$lpad$phi$index7 = $232;
     break L78;
     break;
    }
    case 80: {
     $233 = ___cxa_find_matching_catch()|0;
     $234 = tempRet0;
     $lpad$phi$index = $233;$lpad$phi$index7 = $234;
     break L78;
     break;
    }
    case 81: {
     $235 = ___cxa_find_matching_catch()|0;
     $236 = tempRet0;
     $lpad$phi$index = $235;$lpad$phi$index7 = $236;
     break L78;
     break;
    }
    case 82: {
     $237 = ___cxa_find_matching_catch()|0;
     $238 = tempRet0;
     $lpad$phi$index = $237;$lpad$phi$index7 = $238;
     break L78;
     break;
    }
    case 108: {
     $312 = HEAP32[$__err>>2]|0;
     $313 = $312 | 4;
     HEAP32[$__err>>2] = $313;
     $$0 = 0;
     break;
    }
    case 199: {
     $567 = HEAP32[$__err>>2]|0;
     $568 = $567 | 4;
     HEAP32[$__err>>2] = $568;
     $$0 = 0;
     break;
    }
    case 250: {
     $711 = HEAP32[$__err>>2]|0;
     $712 = $711 | 4;
     HEAP32[$__err>>2] = $712;
     $$0 = 0;
     break;
    }
    case 307: {
     $857 = HEAP32[$__err>>2]|0;
     $858 = $857 | 4;
     HEAP32[$__err>>2] = $858;
     $$0 = 0;
     break;
    }
    case 329: {
     $923 = HEAP32[$__err>>2]|0;
     $924 = $923 | 4;
     HEAP32[$__err>>2] = $924;
     $$0 = 0;
     break;
    }
    case 340: {
     $965 = HEAP32[$__err>>2]|0;
     $966 = $965 | 4;
     HEAP32[$__err>>2] = $966;
     $$0 = 0;
     break;
    }
    case 342: {
     $969 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L435: do {
      if (!($969)) {
       $970 = (($__trailing_sign$0$lcssa) + 1|0);
       $971 = (($__trailing_sign$0$lcssa) + 8|0);
       $972 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $1086;$998 = $1086;$__i$0 = 1;
       L437: while(1) {
        $973 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $974 = $973 & 1;
        $975 = ($974<<24>>24)==(0);
        if ($975) {
         $977 = $973&255;
         $978 = $977 >>> 1;
         $980 = $978;
        } else {
         $976 = HEAP32[$972>>2]|0;
         $980 = $976;
        }
        $979 = ($__i$0>>>0)<($980>>>0);
        if (!($979)) {
         break L435;
        }
        $981 = HEAP32[$__b>>2]|0;
        $982 = ($981|0)==(0|0);
        do {
         if ($982) {
          $996 = 0;
         } else {
          $983 = (($981) + 12|0);
          $984 = HEAP32[$983>>2]|0;
          $985 = (($981) + 16|0);
          $986 = HEAP32[$985>>2]|0;
          $987 = ($984|0)==($986|0);
          if ($987) {
           $988 = HEAP32[$981>>2]|0;
           $989 = (($988) + 36|0);
           $990 = HEAP32[$989>>2]|0;
           __THREW__ = 0;
           $991 = (invoke_ii($990|0,($981|0))|0);
           $992 = __THREW__; __THREW__ = 0;
           $993 = $992&1;
           if ($993) {
            label = 77;
            break L437;
           }
           $994 = ($991|0)==(-1);
           if ($994) {
            HEAP32[$__b>>2] = 0;
            $996 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $996 = $$pre$i$i$i;
            break;
           }
          } else {
           $996 = $981;
          }
         }
        } while(0);
        $995 = ($996|0)==(0|0);
        $997 = ($998|0)==(0|0);
        do {
         if ($997) {
          $$pre$i2$i$i261$ph = $$pre$i2$i$i;
          label = 359;
         } else {
          $999 = (($998) + 12|0);
          $1000 = HEAP32[$999>>2]|0;
          $1001 = (($998) + 16|0);
          $1002 = HEAP32[$1001>>2]|0;
          $1003 = ($1000|0)==($1002|0);
          if (!($1003)) {
           if ($995) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$1100 = $998;
            break;
           } else {
            label = 367;
            break L437;
           }
          }
          $1004 = HEAP32[$998>>2]|0;
          $1005 = (($1004) + 36|0);
          $1006 = HEAP32[$1005>>2]|0;
          __THREW__ = 0;
          $1007 = (invoke_ii($1006|0,($998|0))|0);
          $1008 = __THREW__; __THREW__ = 0;
          $1009 = $1008&1;
          if ($1009) {
           label = 77;
           break L437;
          }
          $1010 = ($1007|0)==(-1);
          if ($1010) {
           $$pre$i2$i$i261$ph = 0;
           label = 359;
          } else {
           $1011 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $995 ^ $1011;
           if ($tmp$i$i) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$1100 = $$pre$i2$i$i;
           } else {
            label = 367;
            break L437;
           }
          }
         }
        } while(0);
        if ((label|0) == 359) {
         label = 0;
         if ($995) {
          label = 367;
          break;
         } else {
          $$pre$i2$i$i261269 = $$pre$i2$i$i261$ph;$1100 = 0;
         }
        }
        $1012 = HEAP32[$__b>>2]|0;
        $1013 = (($1012) + 12|0);
        $1014 = HEAP32[$1013>>2]|0;
        $1015 = (($1012) + 16|0);
        $1016 = HEAP32[$1015>>2]|0;
        $1017 = ($1014|0)==($1016|0);
        if ($1017) {
         $1018 = HEAP32[$1012>>2]|0;
         $1019 = (($1018) + 36|0);
         $1020 = HEAP32[$1019>>2]|0;
         __THREW__ = 0;
         $1021 = (invoke_ii($1020|0,($1012|0))|0);
         $1022 = __THREW__; __THREW__ = 0;
         $1023 = $1022&1;
         if ($1023) {
          label = 77;
          break;
         } else {
          $$0$i$i = $1021;
         }
        } else {
         $1024 = HEAP8[$1014>>0]|0;
         $1025 = $1024&255;
         $$0$i$i = $1025;
        }
        $1026 = $$0$i$i&255;
        $1027 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1028 = $1027 & 1;
        $1029 = ($1028<<24>>24)==(0);
        if ($1029) {
         $1032 = $970;
        } else {
         $1030 = HEAP32[$971>>2]|0;
         $1032 = $1030;
        }
        $1031 = (($1032) + ($__i$0)|0);
        $1033 = HEAP8[$1031>>0]|0;
        $1034 = ($1026<<24>>24)==($1033<<24>>24);
        if (!($1034)) {
         label = 367;
         break;
        }
        $1037 = (($__i$0) + 1)|0;
        $1038 = HEAP32[$__b>>2]|0;
        $1039 = (($1038) + 12|0);
        $1040 = HEAP32[$1039>>2]|0;
        $1041 = (($1038) + 16|0);
        $1042 = HEAP32[$1041>>2]|0;
        $1043 = ($1040|0)==($1042|0);
        if ($1043) {
         $1044 = HEAP32[$1038>>2]|0;
         $1045 = (($1044) + 40|0);
         $1046 = HEAP32[$1045>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1046|0,($1038|0))|0);
         $1047 = __THREW__; __THREW__ = 0;
         $1048 = $1047&1;
         if ($1048) {
          label = 77;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i261269;$998 = $1100;$__i$0 = $1037;
          continue;
         }
        } else {
         $1049 = (($1040) + 1|0);
         HEAP32[$1039>>2] = $1049;
         $$pre$i2$i$i = $$pre$i2$i$i261269;$998 = $1100;$__i$0 = $1037;
         continue;
        }
       }
       if ((label|0) == 77) {
        $227 = ___cxa_find_matching_catch()|0;
        $228 = tempRet0;
        $lpad$phi$index = $227;$lpad$phi$index7 = $228;
        break L78;
       }
       else if ((label|0) == 367) {
        $1035 = HEAP32[$__err>>2]|0;
        $1036 = $1035 | 4;
        HEAP32[$__err>>2] = $1036;
        $$0 = 0;
        break L422;
       }
      }
     } while(0);
     $1050 = HEAP32[$__gb>>2]|0;
     $1051 = ($1050|0)==($1052|0);
     if ($1051) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1050,$1052,$__et);
      $1053 = HEAP32[$__et>>2]|0;
      $1054 = ($1053|0)==(0);
      if ($1054) {
       $$0 = 1;
      } else {
       $1055 = HEAP32[$__err>>2]|0;
       $1056 = $1055 | 4;
       HEAP32[$__err>>2] = $1056;
       $$0 = 0;
      }
     }
     break;
    }
   }
   $1057 = HEAP8[$__spaces>>0]|0;
   $1058 = $1057 & 1;
   $1059 = ($1058<<24>>24)==(0);
   if (!($1059)) {
    $1060 = HEAP32[$191>>2]|0;
    _free($1060);
   }
   $1061 = HEAP8[$__nsn>>0]|0;
   $1062 = $1061 & 1;
   $1063 = ($1062<<24>>24)==(0);
   if (!($1063)) {
    $1064 = HEAP32[$181>>2]|0;
    _free($1064);
   }
   $1065 = HEAP8[$__psn>>0]|0;
   $1066 = $1065 & 1;
   $1067 = ($1066<<24>>24)==(0);
   if (!($1067)) {
    $1068 = HEAP32[$184>>2]|0;
    _free($1068);
   }
   $1069 = HEAP8[$__sym>>0]|0;
   $1070 = $1069 & 1;
   $1071 = ($1070<<24>>24)==(0);
   if (!($1071)) {
    $1072 = HEAP32[$188>>2]|0;
    _free($1072);
   }
   $1073 = HEAP8[$__grp>>0]|0;
   $1074 = $1073 & 1;
   $1075 = ($1074<<24>>24)==(0);
   if (!($1075)) {
    $1076 = (($__grp) + 8|0);
    $1077 = HEAP32[$1076>>2]|0;
    _free($1077);
   }
   $1078 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $1079 = ($1078|0)==(0|0);
   if ($1079) {
    STACKTOP = sp;return ($$0|0);
   }
   $1080 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   invoke_vi($1080|0,($1078|0));
   $1081 = __THREW__; __THREW__ = 0;
   $1082 = $1081&1;
   if ($1082) {
    $1083 = ___cxa_find_matching_catch(0|0)|0;
    $1084 = tempRet0;
    ___clang_call_terminate($1083);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 83) {
   $239 = ___cxa_find_matching_catch()|0;
   $240 = tempRet0;
   $lpad$phi$index = $239;$lpad$phi$index7 = $240;
  }
 } while(0);
 $241 = HEAP8[$__spaces>>0]|0;
 $242 = $241 & 1;
 $243 = ($242<<24>>24)==(0);
 if (!($243)) {
  $244 = (($__spaces) + 8|0);
  $245 = HEAP32[$244>>2]|0;
  _free($245);
 }
 $246 = HEAP8[$__nsn>>0]|0;
 $247 = $246 & 1;
 $248 = ($247<<24>>24)==(0);
 if (!($248)) {
  $249 = (($__nsn) + 8|0);
  $250 = HEAP32[$249>>2]|0;
  _free($250);
 }
 $251 = HEAP8[$__psn>>0]|0;
 $252 = $251 & 1;
 $253 = ($252<<24>>24)==(0);
 if (!($253)) {
  $254 = (($__psn) + 8|0);
  $255 = HEAP32[$254>>2]|0;
  _free($255);
 }
 $256 = HEAP8[$__sym>>0]|0;
 $257 = $256 & 1;
 $258 = ($257<<24>>24)==(0);
 if (!($258)) {
  $259 = (($__sym) + 8|0);
  $260 = HEAP32[$259>>2]|0;
  _free($260);
 }
 $261 = HEAP8[$__grp>>0]|0;
 $262 = $261 & 1;
 $263 = ($262<<24>>24)==(0);
 if (!($263)) {
  $264 = (($__grp) + 8|0);
  $265 = HEAP32[$264>>2]|0;
  _free($265);
 }
 $266 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $267 = ($266|0)==(0|0);
 if ($267) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $268 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vi($268|0,($266|0));
 $269 = __THREW__; __THREW__ = 0;
 $270 = $269&1;
 if ($270) {
  $271 = ___cxa_find_matching_catch(0|0)|0;
  $272 = tempRet0;
  ___clang_call_terminate($271);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((14984 + 8|0));
 $1 = (_strlen(($msg|0))|0);
 $2 = (($1) + 13)|0;
 __THREW__ = 0;
 $3 = (invoke_ii(375,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($11|0);
  // unreachable;
 } else {
  $6 = (($0) + 4|0);
  HEAP32[$3>>2] = $1;
  $7 = (($3) + 4|0);
  HEAP32[$7>>2] = $1;
  $8 = (($3) + 8|0);
  HEAP32[$8>>2] = 0;
  $9 = (($3) + 12|0);
  $10 = (($1) + 1)|0;
  _memcpy(($9|0),($msg|0),($10|0))|0;
  HEAP32[$6>>2] = $9;
  ___cxa_throw(($0|0),(15128|0),(329|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$01$i = 0, $$idx = 0, $$idx$val = 0, $$idx5 = 0, $$idx5$val = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__neg = 0;
 var $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $scevgep$i = 0, $scevgep3$i = 0, $scevgep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__wbuf = sp + 20|0;
 $__wb = sp + 8|0;
 $__wn = sp;
 $__neg = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 406;
 $1 = (($__wbuf) + 100|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_ii(380,(6552|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $$idx = (($3) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx5 = (($3) + 12|0);
   $$idx5$val = HEAP32[$$idx5>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_iiii(381,($$idx$val|0),($$idx5$val|0),($6|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP8[$__neg>>0] = 0;
    $12 = HEAP32[$__e>>2]|0;
    $13 = (($__iob) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iiiiiiiiiiii(407,($__b|0),($12|0),($__intl|0),($3|0),($14|0),($__err|0),($__neg|0),($9|0),($__wb|0),($__wn|0),($1|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     do {
      if ($15) {
       $18 = HEAP8[$__v>>0]|0;
       $19 = $18 & 1;
       $20 = ($19<<24>>24)==(0);
       if ($20) {
        $24 = (($__v) + 1|0);
        HEAP8[$24>>0] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $21 = (($__v) + 8|0);
        $22 = HEAP32[$21>>2]|0;
        HEAP8[$22>>0] = 0;
        $23 = (($__v) + 4|0);
        HEAP32[$23>>2] = 0;
       }
       $25 = HEAP8[$__neg>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if (!($26)) {
        $27 = HEAP32[$9>>2]|0;
        $28 = (($27) + 28|0);
        $29 = HEAP32[$28>>2]|0;
        __THREW__ = 0;
        $30 = (invoke_iii($29|0,($9|0),45)|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         break L1;
        }
        __THREW__ = 0;
        invoke_vii(410,($__v|0),($30|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         break L1;
        }
       }
       $35 = HEAP32[$9>>2]|0;
       $36 = (($35) + 28|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_iii($37|0,($9|0),48)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        break L1;
       }
       $41 = HEAP32[$__wb>>2]|0;
       $42 = HEAP32[$__wn>>2]|0;
       $43 = (($42) + -1|0);
       $44 = ($41>>>0)<($43>>>0);
       L16: do {
        if ($44) {
         $__w$05 = $41;
         while(1) {
          $47 = HEAP8[$__w$05>>0]|0;
          $48 = ($47<<24>>24)==($38<<24>>24);
          $46 = (($__w$05) + 1|0);
          if (!($48)) {
           $__w$0$lcssa = $__w$05;
           break L16;
          }
          $45 = ($46>>>0)<($43>>>0);
          if ($45) {
           $__w$05 = $46;
          } else {
           $__w$0$lcssa = $46;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $41;
        }
       } while(0);
       $49 = $__w$0$lcssa;
       $50 = HEAP8[$__v>>0]|0;
       $51 = $50 & 1;
       $52 = ($51<<24>>24)==(0);
       if ($52) {
        $53 = $50&255;
        $54 = $53 >>> 1;
        $150 = $50;$64 = 10;$65 = $54;
       } else {
        $55 = (($__v) + 4|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = HEAP32[$__v>>2]|0;
        $58 = $57 & -2;
        $phitmp$i$i = (($58) + -1)|0;
        $59 = $57&255;
        $150 = $59;$64 = $phitmp$i$i;$65 = $56;
       }
       $60 = $42;
       $61 = (($60) - ($49))|0;
       $62 = ($42|0)==($__w$0$lcssa|0);
       if (!($62)) {
        $63 = (($64) - ($65))|0;
        $66 = ($63>>>0)<($61>>>0);
        if ($66) {
         $67 = (($65) + ($61))|0;
         $68 = (($67) - ($64))|0;
         __THREW__ = 0;
         invoke_viiiiii(413,($__v|0),($64|0),($68|0),($65|0),($65|0),0);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if ($70) {
          break L1;
         }
         $$pre$i = HEAP8[$__v>>0]|0;
         $72 = $$pre$i;
        } else {
         $72 = $150;
        }
        $71 = $72 & 1;
        $73 = ($71<<24>>24)==(0);
        if ($73) {
         $76 = (($__v) + 1|0);
         $78 = $76;
        } else {
         $74 = (($__v) + 8|0);
         $75 = HEAP32[$74>>2]|0;
         $78 = $75;
        }
        $77 = (($78) + ($65)|0);
        $79 = (($65) - ($49))|0;
        $scevgep$i = (($42) + ($79)|0);
        $scevgep3$i = $scevgep$i;
        $$01$i = $__w$0$lcssa;$__p$02$i = $77;
        while(1) {
         $80 = HEAP8[$$01$i>>0]|0;
         HEAP8[$__p$02$i>>0] = $80;
         $81 = (($__p$02$i) + 1|0);
         $82 = (($$01$i) + 1|0);
         $83 = ($82|0)==($42|0);
         if ($83) {
          break;
         } else {
          $$01$i = $82;$__p$02$i = $81;
         }
        }
        $scevgep4$i = (($78) + ($scevgep3$i)|0);
        HEAP8[$scevgep4$i>>0] = 0;
        $84 = (($65) + ($61))|0;
        $85 = HEAP8[$__v>>0]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $89 = $84 << 1;
         $90 = $89&255;
         HEAP8[$__v>>0] = $90;
         break;
        } else {
         $88 = (($__v) + 4|0);
         HEAP32[$88>>2] = $84;
         break;
        }
       }
      }
     } while(0);
     $91 = HEAP32[$__b>>2]|0;
     $92 = ($91|0)==(0|0);
     do {
      if ($92) {
       $106 = 0;
      } else {
       $93 = (($91) + 12|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (($91) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ($94|0)==($96|0);
       if ($97) {
        $98 = HEAP32[$91>>2]|0;
        $99 = (($98) + 36|0);
        $100 = HEAP32[$99>>2]|0;
        __THREW__ = 0;
        $101 = (invoke_ii($100|0,($91|0))|0);
        $102 = __THREW__; __THREW__ = 0;
        $103 = $102&1;
        if ($103) {
         break L1;
        }
        $104 = ($101|0)==(-1);
        if ($104) {
         HEAP32[$__b>>2] = 0;
         $106 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $106 = $$pre$i$i$i;
         break;
        }
       } else {
        $106 = $91;
       }
      }
     } while(0);
     $105 = ($106|0)==(0|0);
     $107 = ($12|0)==(0|0);
     do {
      if ($107) {
       label = 42;
      } else {
       $108 = (($12) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($12) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if (!($112)) {
        if ($105) {
         break;
        } else {
         label = 44;
         break;
        }
       }
       $113 = HEAP32[$12>>2]|0;
       $114 = (($113) + 36|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       $116 = (invoke_ii($115|0,($12|0))|0);
       $117 = __THREW__; __THREW__ = 0;
       $118 = $117&1;
       if ($118) {
        break L1;
       }
       $119 = ($116|0)==(-1);
       if ($119) {
        HEAP32[$__e>>2] = 0;
        label = 42;
        break;
       } else {
        if ($105) {
         break;
        } else {
         label = 44;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 42) {
      if ($105) {
       label = 44;
      }
     }
     if ((label|0) == 44) {
      $120 = HEAP32[$__err>>2]|0;
      $121 = $120 | 2;
      HEAP32[$__err>>2] = $121;
     }
     $122 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $122;
     $123 = (($3) + 4|0);
     $124 = HEAP32[$123>>2]|0;HEAP32[$123>>2] = (($124+-1)|0);
     $125 = ($124|0)==(0);
     if ($125) {
      $126 = HEAP32[$3>>2]|0;
      $127 = (($126) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      FUNCTION_TABLE_vi[$128 & 511]($3);
     }
     $129 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $130 = ($129|0)==(0|0);
     if ($130) {
      STACKTOP = sp;return;
     }
     $131 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($131|0,($129|0));
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      $134 = ___cxa_find_matching_catch(0|0)|0;
      $135 = tempRet0;
      ___clang_call_terminate($134);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $136 = ___cxa_find_matching_catch()|0;
 $137 = tempRet0;
 $138 = (($3) + 4|0);
 $139 = HEAP32[$138>>2]|0;HEAP32[$138>>2] = (($139+-1)|0);
 $140 = ($139|0)==(0);
 if ($140) {
  $141 = HEAP32[$3>>2]|0;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vi[$143 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $144 = ($$pre|0)==(0|0);
 if ($144) {
  ___resumeException($136|0);
  // unreachable;
 }
 $145 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($145|0,($$pre|0));
 $146 = __THREW__; __THREW__ = 0;
 $147 = $146&1;
 if ($147) {
  $148 = ___cxa_find_matching_catch(0|0)|0;
  $149 = tempRet0;
  ___clang_call_terminate($148);
  // unreachable;
 } else {
  ___resumeException($136|0);
  // unreachable;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = (($49) + -1)|0;
 $51 = ($50>>>0)<($48>>>0);
 if ($51) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__nbuf = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 456|0;
 $__neg = sp + 560|0;
 $__atoms = sp + 416|0;
 $__nbuf = sp + 460|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 406;
 $1 = (($__wbuf) + 400|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_ii(380,(6544|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if ($8) {
   label = 11;
  } else {
   $$idx = (($3) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx4 = (($3) + 12|0);
   $$idx4$val = HEAP32[$$idx4>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_iiii(381,($$idx$val|0),($$idx4$val|0),($6|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $12 = HEAP32[$__e>>2]|0;
    $13 = (($__iob) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iiiiiiiiiiii(414,($__b|0),($12|0),($__intl|0),($3|0),($14|0),($__err|0),($__neg|0),($9|0),($__wb|0),($__wn|0),($1|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 11;
    } else {
     if ($15) {
      $18 = HEAP32[$9>>2]|0;
      $19 = (($18) + 48|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($20|0,($9|0),(6256|0),(((6256 + 10|0))|0),($__atoms|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 11;
       break;
      }
      $23 = HEAP32[$__wn>>2]|0;
      $24 = HEAP32[$__wb>>2]|0;
      $25 = $23;
      $26 = $24;
      $27 = (($25) - ($26))|0;
      $28 = ($27|0)>(392);
      if ($28) {
       $29 = $27 >> 2;
       $30 = (($29) + 2)|0;
       $31 = (_malloc($30)|0);
       $32 = ($31|0)==(0|0);
       if ($32) {
        $33 = (___cxa_allocate_exception(4)|0);
        HEAP32[$33>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($33|0),(14816|0),(323|0));
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if ($35) {
         $36 = ___cxa_find_matching_catch()|0;
         $37 = tempRet0;
         $$0 = $36;$$01 = $37;
         break;
        } else {
         // unreachable;
        }
       } else {
        $42 = $31;$__nc$0 = $31;
       }
      } else {
       $42 = 0;$__nc$0 = $__nbuf;
      }
      $43 = HEAP8[$__neg>>0]|0;
      $44 = ($43<<24>>24)==(0);
      if ($44) {
       $__nc$1 = $__nc$0;
      } else {
       $45 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $45;
      }
      $46 = ($24>>>0)<($23>>>0);
      if ($46) {
       $47 = (($__atoms) + 40|0);
       $48 = $__atoms;
       $__nc$26 = $__nc$1;$__w$07 = $24;
       while(1) {
        $49 = HEAP32[$__w$07>>2]|0;
        $$01$i = $__atoms;
        while(1) {
         $52 = HEAP32[$$01$i>>2]|0;
         $53 = ($52|0)==($49|0);
         $51 = (($$01$i) + 4|0);
         if ($53) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $50 = ($51|0)==($47|0);
         if ($50) {
          $$0$lcssa$i = $47;
          break;
         } else {
          $$01$i = $51;
         }
        }
        $54 = $$0$lcssa$i;
        $55 = (($54) - ($48))|0;
        $56 = $55 >> 2;
        $57 = (6256 + ($56)|0);
        $58 = HEAP8[$57>>0]|0;
        HEAP8[$__nc$26>>0] = $58;
        $59 = (($__w$07) + 4|0);
        $60 = (($__nc$26) + 1|0);
        $61 = HEAP32[$__wn>>2]|0;
        $62 = ($59>>>0)<($61>>>0);
        if ($62) {
         $__nc$26 = $60;$__w$07 = $59;
        } else {
         $__nc$2$lcssa = $60;
         break;
        }
       }
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $63 = (_sscanf($__nbuf,6192,$vararg_buffer)|0);
      $64 = ($63|0)==(1);
      if (!($64)) {
       __THREW__ = 0;
       invoke_vi(408,(6200|0));
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       if ($66) {
        $40 = ___cxa_find_matching_catch()|0;
        $41 = tempRet0;
        _free($42);
        $$0 = $40;$$01 = $41;
        break;
       }
      }
      _free($42);
     }
     $67 = HEAP32[$__b>>2]|0;
     $68 = ($67|0)==(0|0);
     do {
      if ($68) {
       $124 = 1;
      } else {
       $69 = (($67) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($67) + 16|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($70|0)==($72|0);
       if ($73) {
        $74 = HEAP32[$67>>2]|0;
        $75 = (($74) + 36|0);
        $76 = HEAP32[$75>>2]|0;
        __THREW__ = 0;
        $77 = (invoke_ii($76|0,($67|0))|0);
        $78 = __THREW__; __THREW__ = 0;
        $79 = $78&1;
        if ($79) {
         label = 11;
         break L1;
        } else {
         $$0$i$i$i$i = $77;
        }
       } else {
        $80 = HEAP32[$70>>2]|0;
        $$0$i$i$i$i = $80;
       }
       $81 = ($$0$i$i$i$i|0)==(-1);
       if ($81) {
        HEAP32[$__b>>2] = 0;
        $124 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $124 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $82 = HEAP32[$__e>>2]|0;
     $83 = ($82|0)==(0|0);
     do {
      if ($83) {
       label = 37;
      } else {
       $84 = (($82) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($82) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($85|0)==($87|0);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = (($89) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($82|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         label = 11;
         break L1;
        } else {
         $$0$i$i1$i$i = $92;
        }
       } else {
        $95 = HEAP32[$85>>2]|0;
        $$0$i$i1$i$i = $95;
       }
       $96 = ($$0$i$i1$i$i|0)==(-1);
       if ($96) {
        HEAP32[$__e>>2] = 0;
        label = 37;
        break;
       } else {
        if ($124) {
         break;
        } else {
         label = 39;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($124) {
       label = 39;
      }
     }
     if ((label|0) == 39) {
      $97 = HEAP32[$__err>>2]|0;
      $98 = $97 | 2;
      HEAP32[$__err>>2] = $98;
     }
     $99 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $99;
     $100 = (($3) + 4|0);
     $101 = HEAP32[$100>>2]|0;HEAP32[$100>>2] = (($101+-1)|0);
     $102 = ($101|0)==(0);
     if ($102) {
      $103 = HEAP32[$3>>2]|0;
      $104 = (($103) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      FUNCTION_TABLE_vi[$105 & 511]($3);
     }
     $106 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $107 = ($106|0)==(0|0);
     if ($107) {
      STACKTOP = sp;return;
     }
     $108 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($108|0,($106|0));
     $109 = __THREW__; __THREW__ = 0;
     $110 = $109&1;
     if ($110) {
      $111 = ___cxa_find_matching_catch(0|0)|0;
      $112 = tempRet0;
      ___clang_call_terminate($111);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $$0 = $38;$$01 = $39;
 }
 $113 = (($3) + 4|0);
 $114 = HEAP32[$113>>2]|0;HEAP32[$113>>2] = (($114+-1)|0);
 $115 = ($114|0)==(0);
 if ($115) {
  $116 = HEAP32[$3>>2]|0;
  $117 = (($116) + 8|0);
  $118 = HEAP32[$117>>2]|0;
  FUNCTION_TABLE_vi[$118 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $119 = ($$pre|0)==(0|0);
 if ($119) {
  ___resumeException($$0|0);
  // unreachable;
 }
 $$pre15 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($$pre15|0,($$pre|0));
 $120 = __THREW__; __THREW__ = 0;
 $121 = $120&1;
 if ($121) {
  $122 = ___cxa_find_matching_catch(0|0)|0;
  $123 = tempRet0;
  ___clang_call_terminate($122);
  // unreachable;
 } else {
  ___resumeException($$0|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e$0,$__intl,$__loc$0$0$val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__intl = $__intl|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i$i$i149 = 0, $$0$i$i$i$i174 = 0, $$0$i$i$i$i22 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i83 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i123 = 0, $$0$i$i1$i$i155 = 0, $$0$i$i1$i$i180 = 0, $$0$i$i1$i$i28 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i89 = 0, $$0$i$i101 = 0, $$0$i$i110 = 0, $$0$i$i113 = 0;
 var $$0$i$i135 = 0, $$0$i$i146 = 0, $$0$i$i170 = 0, $$0$i$i37 = 0, $$0$i$i41 = 0, $$0$i$i58 = 0, $$0$i$i64 = 0, $$0$i$i69 = 0, $$0$i$i77 = 0, $$0$i$i80 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$292 = 0, $$idx = 0, $$idx$val = 0, $$idx28 = 0, $$idx28$val = 0, $$idx29 = 0;
 var $$idx29$val = 0, $$idx30 = 0, $$idx30$val = 0, $$phi$trans$insert = 0, $$phi$trans$insert11 = 0, $$phi$trans$insert14 = 0, $$phi$trans$insert17 = 0, $$phi$trans$insert19 = 0, $$phi$trans$insert22 = 0, $$phi$trans$insert26 = 0, $$phi$trans$insert29 = 0, $$phi$trans$insert32 = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0, $$pre$i$i$i151 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i45 = 0;
 var $$pre$i$i$i85 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i125 = 0, $$pre$i3$i$i157 = 0, $$pre$i3$i$i182 = 0, $$pre$i3$i$i182268 = 0, $$pre$i3$i$i182269 = 0, $$pre$i3$i$i279$ph = 0, $$pre$i3$i$i279287 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51260 = 0, $$pre$i3$i$i51262 = 0, $$pre$i3$i$i91 = 0, $$pre$i3$i$i91273$ph = 0, $$pre$i3$i$i91273284 = 0, $$pre10 = 0, $$pre12 = 0, $$pre13 = 0, $$pre15 = 0, $$pre16 = 0;
 var $$pre18 = 0, $$pre20 = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $$pre263 = 0, $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0, $$pre27 = 0, $$pre271 = 0, $$pre275 = 0, $$pre277 = 0, $$pre28 = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $$pre4 = 0, $$pre5 = 0;
 var $$pre7 = 0, $$pre9 = 0, $$sum = 0, $$sum280 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp$0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$10 = 0, $__e$sroa$0$11 = 0, $__e$sroa$0$12 = 0, $__e$sroa$0$13 = 0, $__e$sroa$0$14 = 0, $__e$sroa$0$15 = 0, $__e$sroa$0$16 = 0, $__e$sroa$0$17 = 0, $__e$sroa$0$18 = 0, $__e$sroa$0$19 = 0, $__e$sroa$0$2 = 0, $__e$sroa$0$20 = 0;
 var $__e$sroa$0$3 = 0, $__e$sroa$0$4 = 0, $__e$sroa$0$5 = 0, $__e$sroa$0$6 = 0, $__e$sroa$0$7 = 0, $__e$sroa$0$8 = 0, $__e$sroa$0$9 = 0, $__et = 0, $__fd$0 = 0, $__fd$1 = 0, $__fd$2 = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0;
 var $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0250 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0252 = 0, $__trailing_sign$1 = 0, $__ts$0 = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0;
 var $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $phitmp$i$i$i152 = 0, $phitmp$i$i$i177 = 0, $phitmp$i$i$i25 = 0, $phitmp$i$i$i46 = 0, $phitmp$i$i$i86 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i158 = 0, $phitmp$i4$i$i183 = 0, $phitmp$i4$i$i52 = 0, $phitmp$i4$i$i92 = 0, $storemerge$i = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i160 = 0, $tmp$i$i185 = 0, $tmp$i$i54 = 0, $tmp$i$i94 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 96|0;
 $1 = sp + 116|0;
 $2 = sp + 4|0;
 $3 = sp + 180|0;
 $4 = sp + 84|0;
 $5 = sp + 32|0;
 $6 = sp + 36|0;
 $7 = sp + 128|0;
 $8 = sp + 152|0;
 $9 = sp + 168|0;
 $10 = sp + 192|0;
 $__gbuf = sp + 200|0;
 $__gb = sp + 104|0;
 $__gn = sp + 112|0;
 $__ge = sp + 16|0;
 $__pat = sp;
 $__grp = sp + 48|0;
 $__sym = sp + 60|0;
 $__psn = sp + 140|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 72|0;
 $__et = sp + 164|0;
 HEAP32[$10>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $11 = (($__gb) + 4|0);
 HEAP32[$11>>2] = 406;
 HEAP32[$__gn>>2] = $__gbuf;
 $12 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $12;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 do {
  if ($__intl) {
   __THREW__ = 0;
   $13 = (invoke_ii(380,(6128|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 85;
   } else {
    $$idx29 = (($__loc$0$0$val) + 8|0);
    $$idx29$val = HEAP32[$$idx29>>2]|0;
    $$idx30 = (($__loc$0$0$val) + 12|0);
    $$idx30$val = HEAP32[$$idx30>>2]|0;
    __THREW__ = 0;
    $16 = (invoke_iiii(381,($$idx29$val|0),($$idx30$val|0),($13|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 85;
    } else {
     $19 = HEAP32[$16>>2]|0;
     $20 = (($19) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     invoke_vii($21|0,($0|0),($16|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 85;
     } else {
      $24 = HEAP32[$0>>2]|0;
      HEAP32[$__pat>>2] = $24;
      $25 = HEAP32[$16>>2]|0;
      $26 = (($25) + 32|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      invoke_vii($27|0,($1|0),($16|0));
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       label = 85;
      } else {
       $30 = HEAP8[$__nsn>>0]|0;
       $31 = $30 & 1;
       $32 = ($31<<24>>24)==(0);
       if ($32) {
        $36 = (($__nsn) + 4|0);
        HEAP32[$36>>2] = 0;
        HEAP8[$__nsn>>0] = 0;
       } else {
        $33 = (($__nsn) + 8|0);
        $34 = HEAP32[$33>>2]|0;
        HEAP32[$34>>2] = 0;
        $35 = (($__nsn) + 4|0);
        HEAP32[$35>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(415,($__nsn|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $39 = ___cxa_find_matching_catch(0|0)|0;
        $40 = tempRet0;
        ___clang_call_terminate($39);
        // unreachable;
       }
       ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
       ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
       $$pre4 = HEAP32[$16>>2]|0;
       $$phi$trans$insert = (($$pre4) + 28|0);
       $$pre5 = HEAP32[$$phi$trans$insert>>2]|0;
       __THREW__ = 0;
       invoke_vii($$pre5|0,($2|0),($16|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        label = 85;
       } else {
        $43 = HEAP8[$__psn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $49 = (($__psn) + 4|0);
         HEAP32[$49>>2] = 0;
         HEAP8[$__psn>>0] = 0;
        } else {
         $46 = (($__psn) + 8|0);
         $47 = HEAP32[$46>>2]|0;
         HEAP32[$47>>2] = 0;
         $48 = (($__psn) + 4|0);
         HEAP32[$48>>2] = 0;
        }
        __THREW__ = 0;
        invoke_vi(415,($__psn|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         $52 = ___cxa_find_matching_catch(0|0)|0;
         $53 = tempRet0;
         ___clang_call_terminate($52);
         // unreachable;
        }
        ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
        ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
        $$pre7 = HEAP32[$16>>2]|0;
        $$phi$trans$insert8 = (($$pre7) + 12|0);
        $$pre9 = HEAP32[$$phi$trans$insert8>>2]|0;
        __THREW__ = 0;
        $54 = (invoke_ii($$pre9|0,($16|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         label = 85;
        } else {
         $57 = HEAP32[$16>>2]|0;
         $58 = (($57) + 16|0);
         $59 = HEAP32[$58>>2]|0;
         __THREW__ = 0;
         $60 = (invoke_ii($59|0,($16|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 85;
         } else {
          $63 = HEAP32[$16>>2]|0;
          $64 = (($63) + 20|0);
          $65 = HEAP32[$64>>2]|0;
          __THREW__ = 0;
          invoke_vii($65|0,($3|0),($16|0));
          $66 = __THREW__; __THREW__ = 0;
          $67 = $66&1;
          if ($67) {
           label = 85;
          } else {
           $68 = HEAP8[$__grp>>0]|0;
           $69 = $68 & 1;
           $70 = ($69<<24>>24)==(0);
           if ($70) {
            $74 = (($__grp) + 1|0);
            HEAP8[$74>>0] = 0;
            HEAP8[$__grp>>0] = 0;
           } else {
            $71 = (($__grp) + 8|0);
            $72 = HEAP32[$71>>2]|0;
            HEAP8[$72>>0] = 0;
            $73 = (($__grp) + 4|0);
            HEAP32[$73>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(409,($__grp|0));
           $75 = __THREW__; __THREW__ = 0;
           $76 = $75&1;
           if ($76) {
            $77 = ___cxa_find_matching_catch(0|0)|0;
            $78 = tempRet0;
            ___clang_call_terminate($77);
            // unreachable;
           }
           ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
           ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
           $$pre10 = HEAP32[$16>>2]|0;
           $$phi$trans$insert11 = (($$pre10) + 24|0);
           $$pre12 = HEAP32[$$phi$trans$insert11>>2]|0;
           __THREW__ = 0;
           invoke_vii($$pre12|0,($4|0),($16|0));
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if ($80) {
            label = 85;
           } else {
            $81 = HEAP8[$__sym>>0]|0;
            $82 = $81 & 1;
            $83 = ($82<<24>>24)==(0);
            if ($83) {
             $87 = (($__sym) + 4|0);
             HEAP32[$87>>2] = 0;
             HEAP8[$__sym>>0] = 0;
            } else {
             $84 = (($__sym) + 8|0);
             $85 = HEAP32[$84>>2]|0;
             HEAP32[$85>>2] = 0;
             $86 = (($__sym) + 4|0);
             HEAP32[$86>>2] = 0;
            }
            __THREW__ = 0;
            invoke_vi(415,($__sym|0));
            $88 = __THREW__; __THREW__ = 0;
            $89 = $88&1;
            if ($89) {
             $90 = ___cxa_find_matching_catch(0|0)|0;
             $91 = tempRet0;
             ___clang_call_terminate($90);
             // unreachable;
            } else {
             ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
             ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
             $$pre13 = HEAP32[$16>>2]|0;
             $$phi$trans$insert14 = (($$pre13) + 36|0);
             $$pre15 = HEAP32[$$phi$trans$insert14>>2]|0;
             __THREW__ = 0;
             $92 = (invoke_ii($$pre15|0,($16|0))|0);
             $93 = __THREW__; __THREW__ = 0;
             $94 = $93&1;
             if ($94) {
              label = 85;
              break;
             } else {
              $__dp$0 = $54;$__ts$0 = $60;$storemerge$i = $92;
              label = 62;
              break;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   __THREW__ = 0;
   $95 = (invoke_ii(380,(6064|0))|0);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   if ($97) {
    label = 85;
   } else {
    $$idx = (($__loc$0$0$val) + 8|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $$idx28 = (($__loc$0$0$val) + 12|0);
    $$idx28$val = HEAP32[$$idx28>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_iiii(381,($$idx$val|0),($$idx28$val|0),($95|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     label = 85;
    } else {
     $101 = HEAP32[$98>>2]|0;
     $102 = (($101) + 44|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     invoke_vii($103|0,($5|0),($98|0));
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 85;
     } else {
      $106 = HEAP32[$5>>2]|0;
      HEAP32[$__pat>>2] = $106;
      $107 = HEAP32[$98>>2]|0;
      $108 = (($107) + 32|0);
      $109 = HEAP32[$108>>2]|0;
      __THREW__ = 0;
      invoke_vii($109|0,($6|0),($98|0));
      $110 = __THREW__; __THREW__ = 0;
      $111 = $110&1;
      if ($111) {
       label = 85;
      } else {
       $112 = HEAP8[$__nsn>>0]|0;
       $113 = $112 & 1;
       $114 = ($113<<24>>24)==(0);
       if ($114) {
        $118 = (($__nsn) + 4|0);
        HEAP32[$118>>2] = 0;
        HEAP8[$__nsn>>0] = 0;
       } else {
        $115 = (($__nsn) + 8|0);
        $116 = HEAP32[$115>>2]|0;
        HEAP32[$116>>2] = 0;
        $117 = (($__nsn) + 4|0);
        HEAP32[$117>>2] = 0;
       }
       __THREW__ = 0;
       invoke_vi(415,($__nsn|0));
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        $121 = ___cxa_find_matching_catch(0|0)|0;
        $122 = tempRet0;
        ___clang_call_terminate($121);
        // unreachable;
       }
       ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
       ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
       $$pre21 = HEAP32[$98>>2]|0;
       $$phi$trans$insert22 = (($$pre21) + 28|0);
       $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
       __THREW__ = 0;
       invoke_vii($$pre23|0,($7|0),($98|0));
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 85;
       } else {
        $125 = HEAP8[$__psn>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if ($127) {
         $131 = (($__psn) + 4|0);
         HEAP32[$131>>2] = 0;
         HEAP8[$__psn>>0] = 0;
        } else {
         $128 = (($__psn) + 8|0);
         $129 = HEAP32[$128>>2]|0;
         HEAP32[$129>>2] = 0;
         $130 = (($__psn) + 4|0);
         HEAP32[$130>>2] = 0;
        }
        __THREW__ = 0;
        invoke_vi(415,($__psn|0));
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         $134 = ___cxa_find_matching_catch(0|0)|0;
         $135 = tempRet0;
         ___clang_call_terminate($134);
         // unreachable;
        }
        ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
        ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
        $$pre25 = HEAP32[$98>>2]|0;
        $$phi$trans$insert26 = (($$pre25) + 12|0);
        $$pre27 = HEAP32[$$phi$trans$insert26>>2]|0;
        __THREW__ = 0;
        $136 = (invoke_ii($$pre27|0,($98|0))|0);
        $137 = __THREW__; __THREW__ = 0;
        $138 = $137&1;
        if ($138) {
         label = 85;
        } else {
         $139 = HEAP32[$98>>2]|0;
         $140 = (($139) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         __THREW__ = 0;
         $142 = (invoke_ii($141|0,($98|0))|0);
         $143 = __THREW__; __THREW__ = 0;
         $144 = $143&1;
         if ($144) {
          label = 85;
         } else {
          $145 = HEAP32[$98>>2]|0;
          $146 = (($145) + 20|0);
          $147 = HEAP32[$146>>2]|0;
          __THREW__ = 0;
          invoke_vii($147|0,($8|0),($98|0));
          $148 = __THREW__; __THREW__ = 0;
          $149 = $148&1;
          if ($149) {
           label = 85;
          } else {
           $150 = HEAP8[$__grp>>0]|0;
           $151 = $150 & 1;
           $152 = ($151<<24>>24)==(0);
           if ($152) {
            $156 = (($__grp) + 1|0);
            HEAP8[$156>>0] = 0;
            HEAP8[$__grp>>0] = 0;
           } else {
            $153 = (($__grp) + 8|0);
            $154 = HEAP32[$153>>2]|0;
            HEAP8[$154>>0] = 0;
            $155 = (($__grp) + 4|0);
            HEAP32[$155>>2] = 0;
           }
           __THREW__ = 0;
           invoke_vi(409,($__grp|0));
           $157 = __THREW__; __THREW__ = 0;
           $158 = $157&1;
           if ($158) {
            $159 = ___cxa_find_matching_catch(0|0)|0;
            $160 = tempRet0;
            ___clang_call_terminate($159);
            // unreachable;
           }
           ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
           ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
           $$pre28 = HEAP32[$98>>2]|0;
           $$phi$trans$insert29 = (($$pre28) + 24|0);
           $$pre30 = HEAP32[$$phi$trans$insert29>>2]|0;
           __THREW__ = 0;
           invoke_vii($$pre30|0,($9|0),($98|0));
           $161 = __THREW__; __THREW__ = 0;
           $162 = $161&1;
           if ($162) {
            label = 85;
           } else {
            $163 = HEAP8[$__sym>>0]|0;
            $164 = $163 & 1;
            $165 = ($164<<24>>24)==(0);
            if ($165) {
             $169 = (($__sym) + 4|0);
             HEAP32[$169>>2] = 0;
             HEAP8[$__sym>>0] = 0;
            } else {
             $166 = (($__sym) + 8|0);
             $167 = HEAP32[$166>>2]|0;
             HEAP32[$167>>2] = 0;
             $168 = (($__sym) + 4|0);
             HEAP32[$168>>2] = 0;
            }
            __THREW__ = 0;
            invoke_vi(415,($__sym|0));
            $170 = __THREW__; __THREW__ = 0;
            $171 = $170&1;
            if ($171) {
             $172 = ___cxa_find_matching_catch(0|0)|0;
             $173 = tempRet0;
             ___clang_call_terminate($172);
             // unreachable;
            } else {
             ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
             ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
             $$pre31 = HEAP32[$98>>2]|0;
             $$phi$trans$insert32 = (($$pre31) + 36|0);
             $$pre33 = HEAP32[$$phi$trans$insert32>>2]|0;
             __THREW__ = 0;
             $174 = (invoke_ii($$pre33|0,($98|0))|0);
             $175 = __THREW__; __THREW__ = 0;
             $176 = $175&1;
             if ($176) {
              label = 85;
              break;
             } else {
              $__dp$0 = $136;$__ts$0 = $142;$storemerge$i = $174;
              label = 62;
              break;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 L78: do {
  if ((label|0) == 62) {
   $177 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $177;
   $178 = (($__nsn) + 4|0);
   $179 = (($__nsn) + 8|0);
   $180 = (($__psn) + 4|0);
   $181 = (($__psn) + 8|0);
   $182 = $__flags & 512;
   $183 = ($182|0)!=(0);
   $184 = (($__sym) + 4|0);
   $185 = (($__sym) + 8|0);
   $186 = (($__spaces) + 4|0);
   $187 = (($__spaces) + 8|0);
   $188 = (($__pat) + 3|0);
   $189 = (($__grp) + 4|0);
   $1064 = $__gbuf;$__e$sroa$0$0 = $__e$0;$__fd$0 = $storemerge$i;$__p$0250 = 0;$__trailing_sign$0252 = 0;
   L80: while(1) {
    $190 = HEAP32[$__b>>2]|0;
    $191 = ($190|0)==(0|0);
    do {
     if ($191) {
      $1065 = 1;
     } else {
      $192 = (($190) + 12|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($190) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($193|0)==($195|0);
      if ($196) {
       $197 = HEAP32[$190>>2]|0;
       $198 = (($197) + 36|0);
       $199 = HEAP32[$198>>2]|0;
       __THREW__ = 0;
       $200 = (invoke_ii($199|0,($190|0))|0);
       $201 = __THREW__; __THREW__ = 0;
       $202 = $201&1;
       if ($202) {
        label = 84;
        break L80;
       } else {
        $$0$i$i$i$i22 = $200;
       }
      } else {
       $203 = HEAP32[$193>>2]|0;
       $$0$i$i$i$i22 = $203;
      }
      $204 = ($$0$i$i$i$i22|0)==(-1);
      if ($204) {
       HEAP32[$__b>>2] = 0;
       $1065 = 1;
       break;
      } else {
       $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i25 = ($$pre$i$i$i24|0)==(0|0);
       $1065 = $phitmp$i$i$i25;
       break;
      }
     }
    } while(0);
    $205 = ($__e$sroa$0$0|0)==(0|0);
    if ($205) {
     label = 75;
    } else {
     $206 = (($__e$sroa$0$0) + 12|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($__e$sroa$0$0) + 16|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($207|0)==($209|0);
     if ($210) {
      $211 = HEAP32[$__e$sroa$0$0>>2]|0;
      $212 = (($211) + 36|0);
      $213 = HEAP32[$212>>2]|0;
      __THREW__ = 0;
      $214 = (invoke_ii($213|0,($__e$sroa$0$0|0))|0);
      $215 = __THREW__; __THREW__ = 0;
      $216 = $215&1;
      if ($216) {
       label = 84;
       break;
      } else {
       $$0$i$i1$i$i28 = $214;
      }
     } else {
      $217 = HEAP32[$207>>2]|0;
      $$0$i$i1$i$i28 = $217;
     }
     $218 = ($$0$i$i1$i$i28|0)==(-1);
     if ($218) {
      label = 75;
     } else {
      if ($1065) {
       $__e$sroa$0$2 = $__e$sroa$0$0;
      } else {
       $1031 = $1064;$1066 = $__e$sroa$0$0;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 353;
       break;
      }
     }
    }
    if ((label|0) == 75) {
     label = 0;
     if ($1065) {
      $1031 = $1064;$1066 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
      label = 353;
      break;
     } else {
      $__e$sroa$0$2 = 0;
     }
    }
    $219 = (($__pat) + ($__p$0250)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $220 << 24 >> 24;
    L102: do {
     switch ($221|0) {
     case 2:  {
      $550 = ($__trailing_sign$0252|0)!=(0|0);
      $551 = ($__p$0250>>>0)<(2);
      $or$cond = $550 | $551;
      if (!($or$cond)) {
       $552 = ($__p$0250|0)==(2);
       if ($552) {
        $553 = HEAP8[$188>>0]|0;
        $554 = ($553<<24>>24)!=(0);
        $555 = $554;
       } else {
        $555 = 0;
       }
       $brmerge = $183 | $555;
       if (!($brmerge)) {
        $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = 0;
        break L102;
       }
      }
      $556 = HEAP8[$__sym>>0]|0;
      $557 = $556 & 1;
      $558 = ($557<<24>>24)==(0);
      $559 = HEAP32[$185>>2]|0;
      $$291 = $558 ? $184 : $559;
      $560 = ($__p$0250|0)==(0);
      L110: do {
       if ($560) {
        $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $556;$630 = $$291;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
       } else {
        $561 = (($__p$0250) + -1)|0;
        $562 = (($__pat) + ($561)|0);
        $563 = HEAP8[$562>>0]|0;
        $switch = ($563&255)<(2);
        if ($switch) {
         $565 = $556;$575 = $$291;
         while(1) {
          $564 = $565 & 1;
          $566 = ($564<<24>>24)==(0);
          if ($566) {
           $569 = $565&255;
           $570 = $569 >>> 1;
           $572 = $184;$573 = $570;
          } else {
           $567 = HEAP32[$185>>2]|0;
           $568 = HEAP32[$184>>2]|0;
           $572 = $567;$573 = $568;
          }
          $571 = (($572) + ($573<<2)|0);
          $574 = ($575|0)==($571|0);
          if ($574) {
           $585 = $565;
           break;
          }
          $576 = HEAP32[$575>>2]|0;
          $577 = HEAP32[$__ct>>2]|0;
          $578 = (($577) + 12|0);
          $579 = HEAP32[$578>>2]|0;
          __THREW__ = 0;
          $580 = (invoke_iiii($579|0,($__ct|0),8192,($576|0))|0);
          $581 = __THREW__; __THREW__ = 0;
          $582 = $581&1;
          if ($582) {
           label = 81;
           break L80;
          }
          if (!($580)) {
           label = 215;
           break;
          }
          $583 = (($575) + 4|0);
          $$pre265 = HEAP8[$__sym>>0]|0;
          $565 = $$pre265;$575 = $583;
         }
         if ((label|0) == 215) {
          label = 0;
          $$pre266 = HEAP8[$__sym>>0]|0;
          $585 = $$pre266;
         }
         $584 = $585 & 1;
         $586 = ($584<<24>>24)==(0);
         $587 = HEAP32[$185>>2]|0;
         $$292 = $586 ? $184 : $587;
         $588 = $575;
         $589 = $$292;
         $590 = (($588) - ($589))|0;
         $591 = $590 >> 2;
         $592 = HEAP8[$__spaces>>0]|0;
         $593 = $592 & 1;
         $594 = ($593<<24>>24)==(0);
         if ($594) {
          $596 = $592&255;
          $597 = $596 >>> 1;
          $599 = $597;
         } else {
          $595 = HEAP32[$186>>2]|0;
          $599 = $595;
         }
         $598 = ($591>>>0)>($599>>>0);
         if ($598) {
          $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $585;$630 = $$292;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
         } else {
          if ($594) {
           $603 = $592&255;
           $604 = $603 >>> 1;
           $$sum280 = (($604) - ($591))|0;
           $605 = (($186) + ($$sum280<<2)|0);
           $607 = $186;$608 = $604;$610 = $605;
          } else {
           $600 = HEAP32[$187>>2]|0;
           $601 = HEAP32[$186>>2]|0;
           $$sum = (($601) - ($591))|0;
           $602 = (($600) + ($$sum<<2)|0);
           $607 = $600;$608 = $601;$610 = $602;
          }
          $606 = (($607) + ($608<<2)|0);
          $609 = ($610|0)==($606|0);
          if ($609) {
           $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $585;$630 = $575;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
          } else {
           $612 = $610;$614 = $$292;
           while(1) {
            $611 = HEAP32[$612>>2]|0;
            $613 = HEAP32[$614>>2]|0;
            $615 = ($611|0)==($613|0);
            if (!($615)) {
             $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $585;$630 = $$292;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break L110;
            }
            $616 = (($612) + 4|0);
            $617 = (($614) + 4|0);
            $618 = ($616|0)==($606|0);
            if ($618) {
             $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $585;$630 = $575;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
             break;
            } else {
             $612 = $616;$614 = $617;
            }
           }
          }
         }
        } else {
         $$pre$i3$i$i182 = $__e$sroa$0$2;$620 = $556;$630 = $$291;$647 = $__e$sroa$0$2;$__e$sroa$0$6 = $__e$sroa$0$2;
        }
       }
      } while(0);
      while(1) {
       $619 = $620 & 1;
       $621 = ($619<<24>>24)==(0);
       if ($621) {
        $624 = $620&255;
        $625 = $624 >>> 1;
        $627 = $184;$628 = $625;
       } else {
        $622 = HEAP32[$185>>2]|0;
        $623 = HEAP32[$184>>2]|0;
        $627 = $622;$628 = $623;
       }
       $626 = (($627) + ($628<<2)|0);
       $629 = ($630|0)==($626|0);
       if ($629) {
        $1070 = $$pre$i3$i$i182;$__e$sroa$0$9 = $__e$sroa$0$6;
        break;
       }
       $631 = HEAP32[$__b>>2]|0;
       $632 = ($631|0)==(0|0);
       do {
        if ($632) {
         $661 = 1;
        } else {
         $633 = (($631) + 12|0);
         $634 = HEAP32[$633>>2]|0;
         $635 = (($631) + 16|0);
         $636 = HEAP32[$635>>2]|0;
         $637 = ($634|0)==($636|0);
         if ($637) {
          $638 = HEAP32[$631>>2]|0;
          $639 = (($638) + 36|0);
          $640 = HEAP32[$639>>2]|0;
          __THREW__ = 0;
          $641 = (invoke_ii($640|0,($631|0))|0);
          $642 = __THREW__; __THREW__ = 0;
          $643 = $642&1;
          if ($643) {
           label = 82;
           break L80;
          } else {
           $$0$i$i$i$i174 = $641;
          }
         } else {
          $644 = HEAP32[$634>>2]|0;
          $$0$i$i$i$i174 = $644;
         }
         $645 = ($$0$i$i$i$i174|0)==(-1);
         if ($645) {
          HEAP32[$__b>>2] = 0;
          $661 = 1;
          break;
         } else {
          $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i177 = ($$pre$i$i$i176|0)==(0|0);
          $661 = $phitmp$i$i$i177;
          break;
         }
        }
       } while(0);
       $646 = ($647|0)==(0|0);
       if ($646) {
        $$pre$i3$i$i182269 = $$pre$i3$i$i182;$__e$sroa$0$7 = $__e$sroa$0$6;
        label = 243;
       } else {
        $648 = (($647) + 12|0);
        $649 = HEAP32[$648>>2]|0;
        $650 = (($647) + 16|0);
        $651 = HEAP32[$650>>2]|0;
        $652 = ($649|0)==($651|0);
        if ($652) {
         $653 = HEAP32[$647>>2]|0;
         $654 = (($653) + 36|0);
         $655 = HEAP32[$654>>2]|0;
         __THREW__ = 0;
         $656 = (invoke_ii($655|0,($647|0))|0);
         $657 = __THREW__; __THREW__ = 0;
         $658 = $657&1;
         if ($658) {
          label = 82;
          break L80;
         } else {
          $$0$i$i1$i$i180 = $656;
         }
        } else {
         $659 = HEAP32[$649>>2]|0;
         $$0$i$i1$i$i180 = $659;
        }
        $660 = ($$0$i$i1$i$i180|0)==(-1);
        if ($660) {
         $$pre$i3$i$i182269 = 0;$__e$sroa$0$7 = 0;
         label = 243;
        } else {
         $phitmp$i4$i$i183 = ($$pre$i3$i$i182|0)==(0|0);
         $tmp$i$i185 = $661 ^ $phitmp$i4$i$i183;
         if ($tmp$i$i185) {
          $$pre$i3$i$i182268 = $$pre$i3$i$i182;$1071 = $$pre$i3$i$i182;$__e$sroa$0$8 = $__e$sroa$0$6;
         } else {
          $1070 = $$pre$i3$i$i182;$__e$sroa$0$9 = $__e$sroa$0$6;
          break;
         }
        }
       }
       if ((label|0) == 243) {
        label = 0;
        if ($661) {
         $1070 = $$pre$i3$i$i182269;$__e$sroa$0$9 = $__e$sroa$0$7;
         break;
        } else {
         $$pre$i3$i$i182268 = $$pre$i3$i$i182269;$1071 = 0;$__e$sroa$0$8 = $__e$sroa$0$7;
        }
       }
       $662 = HEAP32[$__b>>2]|0;
       $663 = (($662) + 12|0);
       $664 = HEAP32[$663>>2]|0;
       $665 = (($662) + 16|0);
       $666 = HEAP32[$665>>2]|0;
       $667 = ($664|0)==($666|0);
       if ($667) {
        $668 = HEAP32[$662>>2]|0;
        $669 = (($668) + 36|0);
        $670 = HEAP32[$669>>2]|0;
        __THREW__ = 0;
        $671 = (invoke_ii($670|0,($662|0))|0);
        $672 = __THREW__; __THREW__ = 0;
        $673 = $672&1;
        if ($673) {
         label = 82;
         break L80;
        } else {
         $$0$i$i170 = $671;
        }
       } else {
        $674 = HEAP32[$664>>2]|0;
        $$0$i$i170 = $674;
       }
       $675 = HEAP32[$630>>2]|0;
       $676 = ($$0$i$i170|0)==($675|0);
       if (!($676)) {
        $1070 = $$pre$i3$i$i182268;$__e$sroa$0$9 = $__e$sroa$0$8;
        break;
       }
       $677 = HEAP32[$__b>>2]|0;
       $678 = (($677) + 12|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = (($677) + 16|0);
       $681 = HEAP32[$680>>2]|0;
       $682 = ($679|0)==($681|0);
       if ($682) {
        $683 = HEAP32[$677>>2]|0;
        $684 = (($683) + 40|0);
        $685 = HEAP32[$684>>2]|0;
        __THREW__ = 0;
        (invoke_ii($685|0,($677|0))|0);
        $686 = __THREW__; __THREW__ = 0;
        $687 = $686&1;
        if ($687) {
         label = 82;
         break L80;
        }
       } else {
        $688 = (($679) + 4|0);
        HEAP32[$678>>2] = $688;
       }
       $689 = (($630) + 4|0);
       $$pre267 = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i182 = $$pre$i3$i$i182268;$620 = $$pre267;$630 = $689;$647 = $1071;$__e$sroa$0$6 = $__e$sroa$0$8;
      }
      if ($183) {
       $690 = HEAP8[$__sym>>0]|0;
       $691 = $690 & 1;
       $692 = ($691<<24>>24)==(0);
       if ($692) {
        $695 = $690&255;
        $696 = $695 >>> 1;
        $698 = $184;$699 = $696;
       } else {
        $693 = HEAP32[$185>>2]|0;
        $694 = HEAP32[$184>>2]|0;
        $698 = $693;$699 = $694;
       }
       $697 = (($698) + ($699<<2)|0);
       $700 = ($630|0)==($697|0);
       if ($700) {
        $1067 = $1070;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
       } else {
        label = 258;
        break L80;
       }
      } else {
       $1067 = $1070;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$9;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 4:  {
      $$pre$i3$i$i157 = $__e$sroa$0$2;$719 = $__e$sroa$0$2;$773 = $1064;$__e$sroa$0$10 = $__e$sroa$0$2;$__ng$0 = 0;
      while(1) {
       $703 = HEAP32[$__b>>2]|0;
       $704 = ($703|0)==(0|0);
       do {
        if ($704) {
         $733 = 1;
        } else {
         $705 = (($703) + 12|0);
         $706 = HEAP32[$705>>2]|0;
         $707 = (($703) + 16|0);
         $708 = HEAP32[$707>>2]|0;
         $709 = ($706|0)==($708|0);
         if ($709) {
          $710 = HEAP32[$703>>2]|0;
          $711 = (($710) + 36|0);
          $712 = HEAP32[$711>>2]|0;
          __THREW__ = 0;
          $713 = (invoke_ii($712|0,($703|0))|0);
          $714 = __THREW__; __THREW__ = 0;
          $715 = $714&1;
          if ($715) {
           label = 79;
           break L80;
          } else {
           $$0$i$i$i$i149 = $713;
          }
         } else {
          $716 = HEAP32[$706>>2]|0;
          $$0$i$i$i$i149 = $716;
         }
         $717 = ($$0$i$i$i$i149|0)==(-1);
         if ($717) {
          HEAP32[$__b>>2] = 0;
          $733 = 1;
          break;
         } else {
          $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i152 = ($$pre$i$i$i151|0)==(0|0);
          $733 = $phitmp$i$i$i152;
          break;
         }
        }
       } while(0);
       $718 = ($719|0)==(0|0);
       if ($718) {
        $1072 = $$pre$i3$i$i157;$__e$sroa$0$11 = $__e$sroa$0$10;
        label = 271;
       } else {
        $720 = (($719) + 12|0);
        $721 = HEAP32[$720>>2]|0;
        $722 = (($719) + 16|0);
        $723 = HEAP32[$722>>2]|0;
        $724 = ($721|0)==($723|0);
        if ($724) {
         $725 = HEAP32[$719>>2]|0;
         $726 = (($725) + 36|0);
         $727 = HEAP32[$726>>2]|0;
         __THREW__ = 0;
         $728 = (invoke_ii($727|0,($719|0))|0);
         $729 = __THREW__; __THREW__ = 0;
         $730 = $729&1;
         if ($730) {
          label = 79;
          break L80;
         } else {
          $$0$i$i1$i$i155 = $728;
         }
        } else {
         $731 = HEAP32[$721>>2]|0;
         $$0$i$i1$i$i155 = $731;
        }
        $732 = ($$0$i$i1$i$i155|0)==(-1);
        if ($732) {
         $1072 = 0;$__e$sroa$0$11 = 0;
         label = 271;
        } else {
         $phitmp$i4$i$i158 = ($$pre$i3$i$i157|0)==(0|0);
         $tmp$i$i160 = $733 ^ $phitmp$i4$i$i158;
         if ($tmp$i$i160) {
          $1073 = $$pre$i3$i$i157;$1074 = $$pre$i3$i$i157;$__e$sroa$0$12 = $__e$sroa$0$10;
         } else {
          $$pre$i3$i$i125 = $$pre$i3$i$i157;$__e$sroa$0$13 = $__e$sroa$0$10;
          break;
         }
        }
       }
       if ((label|0) == 271) {
        label = 0;
        if ($733) {
         $$pre$i3$i$i125 = $1072;$__e$sroa$0$13 = $__e$sroa$0$11;
         break;
        } else {
         $1073 = $1072;$1074 = 0;$__e$sroa$0$12 = $__e$sroa$0$11;
        }
       }
       $734 = HEAP32[$__b>>2]|0;
       $735 = (($734) + 12|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = (($734) + 16|0);
       $738 = HEAP32[$737>>2]|0;
       $739 = ($736|0)==($738|0);
       if ($739) {
        $740 = HEAP32[$734>>2]|0;
        $741 = (($740) + 36|0);
        $742 = HEAP32[$741>>2]|0;
        __THREW__ = 0;
        $743 = (invoke_ii($742|0,($734|0))|0);
        $744 = __THREW__; __THREW__ = 0;
        $745 = $744&1;
        if ($745) {
         label = 79;
         break L80;
        } else {
         $$0$i$i146 = $743;
        }
       } else {
        $746 = HEAP32[$736>>2]|0;
        $$0$i$i146 = $746;
       }
       $747 = HEAP32[$__ct>>2]|0;
       $748 = (($747) + 12|0);
       $749 = HEAP32[$748>>2]|0;
       __THREW__ = 0;
       $750 = (invoke_iiii($749|0,($__ct|0),2048,($$0$i$i146|0))|0);
       $751 = __THREW__; __THREW__ = 0;
       $752 = $751&1;
       if ($752) {
        label = 79;
        break L80;
       }
       if ($750) {
        $753 = HEAP32[$__wn>>2]|0;
        $754 = HEAP32[$10>>2]|0;
        $755 = ($753|0)==($754|0);
        if ($755) {
         __THREW__ = 0;
         invoke_viii(417,($__wb|0),($__wn|0),($10|0));
         $756 = __THREW__; __THREW__ = 0;
         $757 = $756&1;
         if ($757) {
          label = 79;
          break L80;
         }
         $$pre275 = HEAP32[$__wn>>2]|0;
         $759 = $$pre275;
        } else {
         $759 = $753;
        }
        $758 = (($759) + 4|0);
        HEAP32[$__wn>>2] = $758;
        HEAP32[$759>>2] = $$0$i$i146;
        $760 = (($__ng$0) + 1)|0;
        $1075 = $773;$__ng$1 = $760;
       } else {
        $761 = HEAP8[$__grp>>0]|0;
        $762 = $761 & 1;
        $763 = ($762<<24>>24)==(0);
        if ($763) {
         $765 = $761&255;
         $766 = $765 >>> 1;
         $768 = $766;
        } else {
         $764 = HEAP32[$189>>2]|0;
         $768 = $764;
        }
        $767 = ($768|0)!=(0);
        $769 = ($__ng$0|0)!=(0);
        $or$cond6 = $767 & $769;
        $770 = ($$0$i$i146|0)==($__ts$0|0);
        $or$cond12 = $or$cond6 & $770;
        if (!($or$cond12)) {
         $$pre$i3$i$i125 = $1073;$__e$sroa$0$13 = $__e$sroa$0$12;
         break;
        }
        $771 = HEAP32[$__ge>>2]|0;
        $772 = ($773|0)==($771|0);
        if ($772) {
         __THREW__ = 0;
         invoke_viii(412,($__gb|0),($__gn|0),($__ge|0));
         $774 = __THREW__; __THREW__ = 0;
         $775 = $774&1;
         if ($775) {
          label = 79;
          break L80;
         }
         $$pre277 = HEAP32[$__gn>>2]|0;
         $777 = $$pre277;
        } else {
         $777 = $773;
        }
        $776 = (($777) + 4|0);
        HEAP32[$__gn>>2] = $776;
        HEAP32[$777>>2] = $__ng$0;
        $1075 = $776;$__ng$1 = 0;
       }
       $778 = HEAP32[$__b>>2]|0;
       $779 = (($778) + 12|0);
       $780 = HEAP32[$779>>2]|0;
       $781 = (($778) + 16|0);
       $782 = HEAP32[$781>>2]|0;
       $783 = ($780|0)==($782|0);
       if ($783) {
        $784 = HEAP32[$778>>2]|0;
        $785 = (($784) + 40|0);
        $786 = HEAP32[$785>>2]|0;
        __THREW__ = 0;
        (invoke_ii($786|0,($778|0))|0);
        $787 = __THREW__; __THREW__ = 0;
        $788 = $787&1;
        if ($788) {
         label = 79;
         break L80;
        } else {
         $$pre$i3$i$i157 = $1073;$719 = $1074;$773 = $1075;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $789 = (($780) + 4|0);
        HEAP32[$779>>2] = $789;
        $$pre$i3$i$i157 = $1073;$719 = $1074;$773 = $1075;$__e$sroa$0$10 = $__e$sroa$0$12;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $790 = HEAP32[$__gb>>2]|0;
      $791 = ($790|0)!=($773|0);
      $792 = ($__ng$0|0)!=(0);
      $or$cond8 = $791 & $792;
      if ($or$cond8) {
       $793 = HEAP32[$__ge>>2]|0;
       $794 = ($773|0)==($793|0);
       if ($794) {
        __THREW__ = 0;
        invoke_viii(412,($__gb|0),($__gn|0),($__ge|0));
        $795 = __THREW__; __THREW__ = 0;
        $796 = $795&1;
        if ($796) {
         label = 84;
         break L80;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $798 = $$pre271;
       } else {
        $798 = $773;
       }
       $797 = (($798) + 4|0);
       HEAP32[$__gn>>2] = $797;
       HEAP32[$798>>2] = $__ng$0;
       $1076 = $797;
      } else {
       $1076 = $773;
      }
      $799 = ($__fd$0|0)>(0);
      if ($799) {
       $800 = HEAP32[$__b>>2]|0;
       $801 = ($800|0)==(0|0);
       do {
        if ($801) {
         $1078 = 1;
        } else {
         $802 = (($800) + 12|0);
         $803 = HEAP32[$802>>2]|0;
         $804 = (($800) + 16|0);
         $805 = HEAP32[$804>>2]|0;
         $806 = ($803|0)==($805|0);
         if ($806) {
          $807 = HEAP32[$800>>2]|0;
          $808 = (($807) + 36|0);
          $809 = HEAP32[$808>>2]|0;
          __THREW__ = 0;
          $810 = (invoke_ii($809|0,($800|0))|0);
          $811 = __THREW__; __THREW__ = 0;
          $812 = $811&1;
          if ($812) {
           label = 84;
           break L80;
          } else {
           $$0$i$i$i$i117 = $810;
          }
         } else {
          $813 = HEAP32[$803>>2]|0;
          $$0$i$i$i$i117 = $813;
         }
         $814 = ($$0$i$i$i$i117|0)==(-1);
         if ($814) {
          HEAP32[$__b>>2] = 0;
          $1078 = 1;
          break;
         } else {
          $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
          $1078 = $phitmp$i$i$i120;
          break;
         }
        }
       } while(0);
       $815 = ($$pre$i3$i$i125|0)==(0|0);
       if ($815) {
        $__e$sroa$0$14 = $__e$sroa$0$13;
        label = 311;
       } else {
        $816 = (($$pre$i3$i$i125) + 12|0);
        $817 = HEAP32[$816>>2]|0;
        $818 = (($$pre$i3$i$i125) + 16|0);
        $819 = HEAP32[$818>>2]|0;
        $820 = ($817|0)==($819|0);
        if ($820) {
         $821 = HEAP32[$$pre$i3$i$i125>>2]|0;
         $822 = (($821) + 36|0);
         $823 = HEAP32[$822>>2]|0;
         __THREW__ = 0;
         $824 = (invoke_ii($823|0,($$pre$i3$i$i125|0))|0);
         $825 = __THREW__; __THREW__ = 0;
         $826 = $825&1;
         if ($826) {
          label = 84;
          break L80;
         } else {
          $$0$i$i1$i$i123 = $824;
         }
        } else {
         $827 = HEAP32[$817>>2]|0;
         $$0$i$i1$i$i123 = $827;
        }
        $828 = ($$0$i$i1$i$i123|0)==(-1);
        if ($828) {
         $__e$sroa$0$14 = 0;
         label = 311;
        } else {
         if ($1078) {
          $1079 = $$pre$i3$i$i125;$__e$sroa$0$15 = $__e$sroa$0$13;
         } else {
          label = 317;
          break L80;
         }
        }
       }
       if ((label|0) == 311) {
        label = 0;
        if ($1078) {
         label = 317;
         break L80;
        } else {
         $1079 = 0;$__e$sroa$0$15 = $__e$sroa$0$14;
        }
       }
       $829 = HEAP32[$__b>>2]|0;
       $830 = (($829) + 12|0);
       $831 = HEAP32[$830>>2]|0;
       $832 = (($829) + 16|0);
       $833 = HEAP32[$832>>2]|0;
       $834 = ($831|0)==($833|0);
       if ($834) {
        $835 = HEAP32[$829>>2]|0;
        $836 = (($835) + 36|0);
        $837 = HEAP32[$836>>2]|0;
        __THREW__ = 0;
        $838 = (invoke_ii($837|0,($829|0))|0);
        $839 = __THREW__; __THREW__ = 0;
        $840 = $839&1;
        if ($840) {
         label = 84;
         break L80;
        } else {
         $$0$i$i110 = $838;
        }
       } else {
        $841 = HEAP32[$831>>2]|0;
        $$0$i$i110 = $841;
       }
       $842 = ($$0$i$i110|0)==($__dp$0|0);
       if (!($842)) {
        label = 317;
        break L80;
       }
       $845 = HEAP32[$__b>>2]|0;
       $846 = (($845) + 12|0);
       $847 = HEAP32[$846>>2]|0;
       $848 = (($845) + 16|0);
       $849 = HEAP32[$848>>2]|0;
       $850 = ($847|0)==($849|0);
       if ($850) {
        $851 = HEAP32[$845>>2]|0;
        $852 = (($851) + 40|0);
        $853 = HEAP32[$852>>2]|0;
        __THREW__ = 0;
        (invoke_ii($853|0,($845|0))|0);
        $854 = __THREW__; __THREW__ = 0;
        $855 = $854&1;
        if ($855) {
         label = 84;
         break L80;
        } else {
         $$pre$i3$i$i91 = $1079;$873 = $1079;$930 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
        }
       } else {
        $856 = (($847) + 4|0);
        HEAP32[$846>>2] = $856;
        $$pre$i3$i$i91 = $1079;$873 = $1079;$930 = $__fd$0;$__e$sroa$0$16 = $__e$sroa$0$15;
       }
       while(1) {
        $857 = HEAP32[$__b>>2]|0;
        $858 = ($857|0)==(0|0);
        do {
         if ($858) {
          $887 = 1;
         } else {
          $859 = (($857) + 12|0);
          $860 = HEAP32[$859>>2]|0;
          $861 = (($857) + 16|0);
          $862 = HEAP32[$861>>2]|0;
          $863 = ($860|0)==($862|0);
          if ($863) {
           $864 = HEAP32[$857>>2]|0;
           $865 = (($864) + 36|0);
           $866 = HEAP32[$865>>2]|0;
           __THREW__ = 0;
           $867 = (invoke_ii($866|0,($857|0))|0);
           $868 = __THREW__; __THREW__ = 0;
           $869 = $868&1;
           if ($869) {
            label = 80;
            break L80;
           } else {
            $$0$i$i$i$i83 = $867;
           }
          } else {
           $870 = HEAP32[$860>>2]|0;
           $$0$i$i$i$i83 = $870;
          }
          $871 = ($$0$i$i$i$i83|0)==(-1);
          if ($871) {
           HEAP32[$__b>>2] = 0;
           $887 = 1;
           break;
          } else {
           $$pre$i$i$i85 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i86 = ($$pre$i$i$i85|0)==(0|0);
           $887 = $phitmp$i$i$i86;
           break;
          }
         }
        } while(0);
        $872 = ($873|0)==(0|0);
        if ($872) {
         $$pre$i3$i$i91273$ph = $$pre$i3$i$i91;$__e$sroa$0$17 = $__e$sroa$0$16;
         label = 333;
        } else {
         $874 = (($873) + 12|0);
         $875 = HEAP32[$874>>2]|0;
         $876 = (($873) + 16|0);
         $877 = HEAP32[$876>>2]|0;
         $878 = ($875|0)==($877|0);
         if ($878) {
          $879 = HEAP32[$873>>2]|0;
          $880 = (($879) + 36|0);
          $881 = HEAP32[$880>>2]|0;
          __THREW__ = 0;
          $882 = (invoke_ii($881|0,($873|0))|0);
          $883 = __THREW__; __THREW__ = 0;
          $884 = $883&1;
          if ($884) {
           label = 80;
           break L80;
          } else {
           $$0$i$i1$i$i89 = $882;
          }
         } else {
          $885 = HEAP32[$875>>2]|0;
          $$0$i$i1$i$i89 = $885;
         }
         $886 = ($$0$i$i1$i$i89|0)==(-1);
         if ($886) {
          $$pre$i3$i$i91273$ph = 0;$__e$sroa$0$17 = 0;
          label = 333;
         } else {
          $phitmp$i4$i$i92 = ($$pre$i3$i$i91|0)==(0|0);
          $tmp$i$i94 = $887 ^ $phitmp$i4$i$i92;
          if ($tmp$i$i94) {
           $$pre$i3$i$i91273284 = $$pre$i3$i$i91;$1080 = $$pre$i3$i$i91;$__e$sroa$0$18 = $__e$sroa$0$16;
          } else {
           label = 340;
           break L80;
          }
         }
        }
        if ((label|0) == 333) {
         label = 0;
         if ($887) {
          label = 340;
          break L80;
         } else {
          $$pre$i3$i$i91273284 = $$pre$i3$i$i91273$ph;$1080 = 0;$__e$sroa$0$18 = $__e$sroa$0$17;
         }
        }
        $888 = HEAP32[$__b>>2]|0;
        $889 = (($888) + 12|0);
        $890 = HEAP32[$889>>2]|0;
        $891 = (($888) + 16|0);
        $892 = HEAP32[$891>>2]|0;
        $893 = ($890|0)==($892|0);
        if ($893) {
         $894 = HEAP32[$888>>2]|0;
         $895 = (($894) + 36|0);
         $896 = HEAP32[$895>>2]|0;
         __THREW__ = 0;
         $897 = (invoke_ii($896|0,($888|0))|0);
         $898 = __THREW__; __THREW__ = 0;
         $899 = $898&1;
         if ($899) {
          label = 80;
          break L80;
         } else {
          $$0$i$i77 = $897;
         }
        } else {
         $900 = HEAP32[$890>>2]|0;
         $$0$i$i77 = $900;
        }
        $901 = HEAP32[$__ct>>2]|0;
        $902 = (($901) + 12|0);
        $903 = HEAP32[$902>>2]|0;
        __THREW__ = 0;
        $904 = (invoke_iiii($903|0,($__ct|0),2048,($$0$i$i77|0))|0);
        $905 = __THREW__; __THREW__ = 0;
        $906 = $905&1;
        if ($906) {
         label = 80;
         break L80;
        }
        if (!($904)) {
         label = 340;
         break L80;
        }
        $909 = HEAP32[$__wn>>2]|0;
        $910 = HEAP32[$10>>2]|0;
        $911 = ($909|0)==($910|0);
        if ($911) {
         __THREW__ = 0;
         invoke_viii(417,($__wb|0),($__wn|0),($10|0));
         $912 = __THREW__; __THREW__ = 0;
         $913 = $912&1;
         if ($913) {
          label = 80;
          break L80;
         }
        }
        $914 = HEAP32[$__b>>2]|0;
        $915 = (($914) + 12|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = (($914) + 16|0);
        $918 = HEAP32[$917>>2]|0;
        $919 = ($916|0)==($918|0);
        if ($919) {
         $920 = HEAP32[$914>>2]|0;
         $921 = (($920) + 36|0);
         $922 = HEAP32[$921>>2]|0;
         __THREW__ = 0;
         $923 = (invoke_ii($922|0,($914|0))|0);
         $924 = __THREW__; __THREW__ = 0;
         $925 = $924&1;
         if ($925) {
          label = 80;
          break L80;
         } else {
          $$0$i$i69 = $923;
         }
        } else {
         $926 = HEAP32[$916>>2]|0;
         $$0$i$i69 = $926;
        }
        $927 = HEAP32[$__wn>>2]|0;
        $928 = (($927) + 4|0);
        HEAP32[$__wn>>2] = $928;
        HEAP32[$927>>2] = $$0$i$i69;
        $929 = (($930) + -1)|0;
        $931 = HEAP32[$__b>>2]|0;
        $932 = (($931) + 12|0);
        $933 = HEAP32[$932>>2]|0;
        $934 = (($931) + 16|0);
        $935 = HEAP32[$934>>2]|0;
        $936 = ($933|0)==($935|0);
        if ($936) {
         $937 = HEAP32[$931>>2]|0;
         $938 = (($937) + 40|0);
         $939 = HEAP32[$938>>2]|0;
         __THREW__ = 0;
         (invoke_ii($939|0,($931|0))|0);
         $940 = __THREW__; __THREW__ = 0;
         $941 = $940&1;
         if ($941) {
          label = 80;
          break L80;
         }
        } else {
         $943 = (($933) + 4|0);
         HEAP32[$932>>2] = $943;
        }
        $942 = ($929|0)>(0);
        if ($942) {
         $$pre$i3$i$i91 = $$pre$i3$i$i91273284;$873 = $1080;$930 = $929;$__e$sroa$0$16 = $__e$sroa$0$18;
        } else {
         $1077 = $$pre$i3$i$i91273284;$__e$sroa$0$19 = $__e$sroa$0$18;$__fd$1 = $929;
         break;
        }
       }
      } else {
       $1077 = $$pre$i3$i$i125;$__e$sroa$0$19 = $__e$sroa$0$13;$__fd$1 = $__fd$0;
      }
      $944 = HEAP32[$__wn>>2]|0;
      $945 = HEAP32[$__wb>>2]|0;
      $946 = ($944|0)==($945|0);
      if ($946) {
       label = 351;
       break L80;
      } else {
       $1067 = $1077;$1068 = $1076;$__e$sroa$0$20 = $__e$sroa$0$19;$__fd$2 = $__fd$1;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0250|0)==(3);
      if ($cond) {
       $1031 = $1064;$1066 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 353;
       break L80;
      }
      $270 = HEAP32[$__b>>2]|0;
      $271 = (($270) + 12|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = (($270) + 16|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($272|0)==($274|0);
      if ($275) {
       $276 = HEAP32[$270>>2]|0;
       $277 = (($276) + 36|0);
       $278 = HEAP32[$277>>2]|0;
       __THREW__ = 0;
       $279 = (invoke_ii($278|0,($270|0))|0);
       $280 = __THREW__; __THREW__ = 0;
       $281 = $280&1;
       if ($281) {
        label = 84;
        break L80;
       } else {
        $$0$i$i37 = $279;
       }
      } else {
       $282 = HEAP32[$272>>2]|0;
       $$0$i$i37 = $282;
      }
      $283 = HEAP32[$__ct>>2]|0;
      $284 = (($283) + 12|0);
      $285 = HEAP32[$284>>2]|0;
      __THREW__ = 0;
      $286 = (invoke_iiii($285|0,($__ct|0),8192,($$0$i$i37|0))|0);
      $287 = __THREW__; __THREW__ = 0;
      $288 = $287&1;
      if ($288) {
       label = 84;
       break L80;
      }
      if (!($286)) {
       label = 110;
       break L80;
      }
      $289 = HEAP32[$__b>>2]|0;
      $290 = (($289) + 12|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (($289) + 16|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = ($291|0)==($293|0);
      if ($294) {
       $295 = HEAP32[$289>>2]|0;
       $296 = (($295) + 40|0);
       $297 = HEAP32[$296>>2]|0;
       __THREW__ = 0;
       $298 = (invoke_ii($297|0,($289|0))|0);
       $299 = __THREW__; __THREW__ = 0;
       $300 = $299&1;
       if ($300) {
        label = 84;
        break L80;
       } else {
        $$0$i$i41 = $298;
       }
      } else {
       $301 = (($291) + 4|0);
       HEAP32[$290>>2] = $301;
       $302 = HEAP32[$291>>2]|0;
       $$0$i$i41 = $302;
      }
      __THREW__ = 0;
      invoke_vii(416,($__spaces|0),($$0$i$i41|0));
      $303 = __THREW__; __THREW__ = 0;
      $304 = $303&1;
      if ($304) {
       label = 84;
       break L80;
      } else {
       label = 111;
      }
      break;
     }
     case 0:  {
      label = 111;
      break;
     }
     case 3:  {
      $374 = HEAP8[$__psn>>0]|0;
      $375 = $374 & 1;
      $376 = ($375<<24>>24)==(0);
      if ($376) {
       $378 = $374&255;
       $379 = $378 >>> 1;
       $389 = $379;
      } else {
       $377 = HEAP32[$180>>2]|0;
       $389 = $377;
      }
      $380 = HEAP8[$__nsn>>0]|0;
      $381 = $380 & 1;
      $382 = ($381<<24>>24)==(0);
      if ($382) {
       $384 = $380&255;
       $385 = $384 >>> 1;
       $387 = $385;
      } else {
       $383 = HEAP32[$178>>2]|0;
       $387 = $383;
      }
      $386 = (0 - ($387))|0;
      $388 = ($389|0)==($386|0);
      if ($388) {
       $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
      } else {
       if ($376) {
        $391 = $374&255;
        $392 = $391 >>> 1;
        $394 = $392;
       } else {
        $390 = HEAP32[$180>>2]|0;
        $394 = $390;
       }
       $393 = ($394|0)==(0);
       if (!($393)) {
        if ($382) {
         $396 = $380&255;
         $397 = $396 >>> 1;
         $399 = $397;
        } else {
         $395 = HEAP32[$178>>2]|0;
         $399 = $395;
        }
        $398 = ($399|0)==(0);
        if (!($398)) {
         $477 = HEAP32[$__b>>2]|0;
         $478 = (($477) + 12|0);
         $479 = HEAP32[$478>>2]|0;
         $480 = (($477) + 16|0);
         $481 = HEAP32[$480>>2]|0;
         $482 = ($479|0)==($481|0);
         if ($482) {
          $483 = HEAP32[$477>>2]|0;
          $484 = (($483) + 36|0);
          $485 = HEAP32[$484>>2]|0;
          __THREW__ = 0;
          $486 = (invoke_ii($485|0,($477|0))|0);
          $487 = __THREW__; __THREW__ = 0;
          $488 = $487&1;
          if ($488) {
           label = 84;
           break L80;
          }
          $$pre264 = HEAP8[$__psn>>0]|0;
          $$pre16 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert17 = (($$pre16) + 12|0);
          $$pre18 = HEAP32[$$phi$trans$insert17>>2]|0;
          $$phi$trans$insert19 = (($$pre16) + 16|0);
          $$pre20 = HEAP32[$$phi$trans$insert19>>2]|0;
          $$0$i$i113 = $486;$491 = $$pre264;$497 = $$pre16;$499 = $$pre18;$500 = $$pre20;
         } else {
          $489 = HEAP32[$479>>2]|0;
          $$0$i$i113 = $489;$491 = $374;$497 = $477;$499 = $479;$500 = $481;
         }
         $490 = $491 & 1;
         $492 = ($490<<24>>24)==(0);
         $493 = HEAP32[$181>>2]|0;
         $$289 = $492 ? $180 : $493;
         $494 = HEAP32[$$289>>2]|0;
         $495 = ($$0$i$i113|0)==($494|0);
         $496 = (($497) + 12|0);
         $498 = ($499|0)==($500|0);
         if ($495) {
          if ($498) {
           $501 = HEAP32[$497>>2]|0;
           $502 = (($501) + 40|0);
           $503 = HEAP32[$502>>2]|0;
           __THREW__ = 0;
           (invoke_ii($503|0,($497|0))|0);
           $504 = __THREW__; __THREW__ = 0;
           $505 = $504&1;
           if ($505) {
            label = 84;
            break L80;
           }
          } else {
           $506 = (($499) + 4|0);
           HEAP32[$496>>2] = $506;
          }
          $507 = HEAP8[$__psn>>0]|0;
          $508 = $507 & 1;
          $509 = ($508<<24>>24)==(0);
          if ($509) {
           $511 = $507&255;
           $512 = $511 >>> 1;
           $514 = $512;
          } else {
           $510 = HEAP32[$180>>2]|0;
           $514 = $510;
          }
          $513 = ($514>>>0)>(1);
          $__psn$__trailing_sign$09 = $513 ? $__psn : $__trailing_sign$0252;
          $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L102;
         }
         if ($498) {
          $515 = HEAP32[$497>>2]|0;
          $516 = (($515) + 36|0);
          $517 = HEAP32[$516>>2]|0;
          __THREW__ = 0;
          $518 = (invoke_ii($517|0,($497|0))|0);
          $519 = __THREW__; __THREW__ = 0;
          $520 = $519&1;
          if ($520) {
           label = 84;
           break L80;
          } else {
           $$0$i$i135 = $518;
          }
         } else {
          $521 = HEAP32[$499>>2]|0;
          $$0$i$i135 = $521;
         }
         $522 = HEAP8[$__nsn>>0]|0;
         $523 = $522 & 1;
         $524 = ($523<<24>>24)==(0);
         $525 = HEAP32[$179>>2]|0;
         $$290 = $524 ? $178 : $525;
         $526 = HEAP32[$$290>>2]|0;
         $527 = ($$0$i$i135|0)==($526|0);
         if (!($527)) {
          label = 202;
          break L80;
         }
         $528 = HEAP32[$__b>>2]|0;
         $529 = (($528) + 12|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = (($528) + 16|0);
         $532 = HEAP32[$531>>2]|0;
         $533 = ($530|0)==($532|0);
         if ($533) {
          $534 = HEAP32[$528>>2]|0;
          $535 = (($534) + 40|0);
          $536 = HEAP32[$535>>2]|0;
          __THREW__ = 0;
          (invoke_ii($536|0,($528|0))|0);
          $537 = __THREW__; __THREW__ = 0;
          $538 = $537&1;
          if ($538) {
           label = 84;
           break L80;
          }
         } else {
          $539 = (($530) + 4|0);
          HEAP32[$529>>2] = $539;
         }
         HEAP8[$__neg>>0] = 1;
         $540 = HEAP8[$__nsn>>0]|0;
         $541 = $540 & 1;
         $542 = ($541<<24>>24)==(0);
         if ($542) {
          $544 = $540&255;
          $545 = $544 >>> 1;
          $547 = $545;
         } else {
          $543 = HEAP32[$178>>2]|0;
          $547 = $543;
         }
         $546 = ($547>>>0)>(1);
         $__nsn$__trailing_sign$010 = $546 ? $__nsn : $__trailing_sign$0252;
         $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L102;
        }
       }
       if ($376) {
        $401 = $374&255;
        $402 = $401 >>> 1;
        $404 = $402;
       } else {
        $400 = HEAP32[$180>>2]|0;
        $404 = $400;
       }
       $403 = ($404|0)==(0);
       $405 = HEAP32[$__b>>2]|0;
       $406 = (($405) + 12|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = (($405) + 16|0);
       $409 = HEAP32[$408>>2]|0;
       $410 = ($407|0)==($409|0);
       if ($403) {
        if ($410) {
         $444 = HEAP32[$405>>2]|0;
         $445 = (($444) + 36|0);
         $446 = HEAP32[$445>>2]|0;
         __THREW__ = 0;
         $447 = (invoke_ii($446|0,($405|0))|0);
         $448 = __THREW__; __THREW__ = 0;
         $449 = $448&1;
         if ($449) {
          label = 84;
          break L80;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i101 = $447;$452 = $$pre;
        } else {
         $450 = HEAP32[$407>>2]|0;
         $$0$i$i101 = $450;$452 = $380;
        }
        $451 = $452 & 1;
        $453 = ($451<<24>>24)==(0);
        $454 = HEAP32[$179>>2]|0;
        $$288 = $453 ? $178 : $454;
        $455 = HEAP32[$$288>>2]|0;
        $456 = ($$0$i$i101|0)==($455|0);
        if (!($456)) {
         $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
         break L102;
        }
        $457 = HEAP32[$__b>>2]|0;
        $458 = (($457) + 12|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = (($457) + 16|0);
        $461 = HEAP32[$460>>2]|0;
        $462 = ($459|0)==($461|0);
        if ($462) {
         $463 = HEAP32[$457>>2]|0;
         $464 = (($463) + 40|0);
         $465 = HEAP32[$464>>2]|0;
         __THREW__ = 0;
         (invoke_ii($465|0,($457|0))|0);
         $466 = __THREW__; __THREW__ = 0;
         $467 = $466&1;
         if ($467) {
          label = 84;
          break L80;
         }
        } else {
         $468 = (($459) + 4|0);
         HEAP32[$458>>2] = $468;
        }
        HEAP8[$__neg>>0] = 1;
        $469 = HEAP8[$__nsn>>0]|0;
        $470 = $469 & 1;
        $471 = ($470<<24>>24)==(0);
        if ($471) {
         $473 = $469&255;
         $474 = $473 >>> 1;
         $476 = $474;
        } else {
         $472 = HEAP32[$178>>2]|0;
         $476 = $472;
        }
        $475 = ($476>>>0)>(1);
        $__nsn$__trailing_sign$0 = $475 ? $__nsn : $__trailing_sign$0252;
        $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L102;
       }
       if ($410) {
        $411 = HEAP32[$405>>2]|0;
        $412 = (($411) + 36|0);
        $413 = HEAP32[$412>>2]|0;
        __THREW__ = 0;
        $414 = (invoke_ii($413|0,($405|0))|0);
        $415 = __THREW__; __THREW__ = 0;
        $416 = $415&1;
        if ($416) {
         label = 84;
         break L80;
        }
        $$pre263 = HEAP8[$__psn>>0]|0;
        $$0$i$i80 = $414;$419 = $$pre263;
       } else {
        $417 = HEAP32[$407>>2]|0;
        $$0$i$i80 = $417;$419 = $374;
       }
       $418 = $419 & 1;
       $420 = ($418<<24>>24)==(0);
       $421 = HEAP32[$181>>2]|0;
       $$ = $420 ? $180 : $421;
       $422 = HEAP32[$$>>2]|0;
       $423 = ($$0$i$i80|0)==($422|0);
       if (!($423)) {
        HEAP8[$__neg>>0] = 1;
        $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
        break L102;
       }
       $424 = HEAP32[$__b>>2]|0;
       $425 = (($424) + 12|0);
       $426 = HEAP32[$425>>2]|0;
       $427 = (($424) + 16|0);
       $428 = HEAP32[$427>>2]|0;
       $429 = ($426|0)==($428|0);
       if ($429) {
        $430 = HEAP32[$424>>2]|0;
        $431 = (($430) + 40|0);
        $432 = HEAP32[$431>>2]|0;
        __THREW__ = 0;
        (invoke_ii($432|0,($424|0))|0);
        $433 = __THREW__; __THREW__ = 0;
        $434 = $433&1;
        if ($434) {
         label = 84;
         break L80;
        }
       } else {
        $435 = (($426) + 4|0);
        HEAP32[$425>>2] = $435;
       }
       $436 = HEAP8[$__psn>>0]|0;
       $437 = $436 & 1;
       $438 = ($437<<24>>24)==(0);
       if ($438) {
        $440 = $436&255;
        $441 = $440 >>> 1;
        $443 = $441;
       } else {
        $439 = HEAP32[$180>>2]|0;
        $443 = $439;
       }
       $442 = ($443>>>0)>(1);
       $__psn$__trailing_sign$0 = $442 ? $__psn : $__trailing_sign$0252;
       $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     default: {
      $1067 = $__e$sroa$0$2;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$2;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
     }
     }
    } while(0);
    L403: do {
     if ((label|0) == 111) {
      label = 0;
      $307 = ($__p$0250|0)==(3);
      if ($307) {
       $1031 = $1064;$1066 = $__e$sroa$0$2;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 353;
       break L80;
      } else {
       $$pre$i3$i$i51 = $__e$sroa$0$2;$324 = $__e$sroa$0$2;$__e$sroa$0$3 = $__e$sroa$0$2;
      }
      while(1) {
       $308 = HEAP32[$__b>>2]|0;
       $309 = ($308|0)==(0|0);
       do {
        if ($309) {
         $338 = 1;
        } else {
         $310 = (($308) + 12|0);
         $311 = HEAP32[$310>>2]|0;
         $312 = (($308) + 16|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = ($311|0)==($313|0);
         if ($314) {
          $315 = HEAP32[$308>>2]|0;
          $316 = (($315) + 36|0);
          $317 = HEAP32[$316>>2]|0;
          __THREW__ = 0;
          $318 = (invoke_ii($317|0,($308|0))|0);
          $319 = __THREW__; __THREW__ = 0;
          $320 = $319&1;
          if ($320) {
           label = 83;
           break L80;
          } else {
           $$0$i$i$i$i43 = $318;
          }
         } else {
          $321 = HEAP32[$311>>2]|0;
          $$0$i$i$i$i43 = $321;
         }
         $322 = ($$0$i$i$i$i43|0)==(-1);
         if ($322) {
          HEAP32[$__b>>2] = 0;
          $338 = 1;
          break;
         } else {
          $$pre$i$i$i45 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i46 = ($$pre$i$i$i45|0)==(0|0);
          $338 = $phitmp$i$i$i46;
          break;
         }
        }
       } while(0);
       $323 = ($324|0)==(0|0);
       if ($323) {
        $$pre$i3$i$i51260 = $$pre$i3$i$i51;$__e$sroa$0$4 = $__e$sroa$0$3;
        label = 124;
       } else {
        $325 = (($324) + 12|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = (($324) + 16|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = ($326|0)==($328|0);
        if ($329) {
         $330 = HEAP32[$324>>2]|0;
         $331 = (($330) + 36|0);
         $332 = HEAP32[$331>>2]|0;
         __THREW__ = 0;
         $333 = (invoke_ii($332|0,($324|0))|0);
         $334 = __THREW__; __THREW__ = 0;
         $335 = $334&1;
         if ($335) {
          label = 83;
          break L80;
         } else {
          $$0$i$i1$i$i49 = $333;
         }
        } else {
         $336 = HEAP32[$326>>2]|0;
         $$0$i$i1$i$i49 = $336;
        }
        $337 = ($$0$i$i1$i$i49|0)==(-1);
        if ($337) {
         $$pre$i3$i$i51260 = 0;$__e$sroa$0$4 = 0;
         label = 124;
        } else {
         $phitmp$i4$i$i52 = ($$pre$i3$i$i51|0)==(0|0);
         $tmp$i$i54 = $338 ^ $phitmp$i4$i$i52;
         if ($tmp$i$i54) {
          $$pre$i3$i$i51262 = $$pre$i3$i$i51;$1069 = $$pre$i3$i$i51;$__e$sroa$0$5 = $__e$sroa$0$3;
         } else {
          $1067 = $$pre$i3$i$i51;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$3;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
          break L403;
         }
        }
       }
       if ((label|0) == 124) {
        label = 0;
        if ($338) {
         $1067 = $$pre$i3$i$i51260;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$4;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
         break L403;
        } else {
         $$pre$i3$i$i51262 = $$pre$i3$i$i51260;$1069 = 0;$__e$sroa$0$5 = $__e$sroa$0$4;
        }
       }
       $339 = HEAP32[$__b>>2]|0;
       $340 = (($339) + 12|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = (($339) + 16|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($341|0)==($343|0);
       if ($344) {
        $345 = HEAP32[$339>>2]|0;
        $346 = (($345) + 36|0);
        $347 = HEAP32[$346>>2]|0;
        __THREW__ = 0;
        $348 = (invoke_ii($347|0,($339|0))|0);
        $349 = __THREW__; __THREW__ = 0;
        $350 = $349&1;
        if ($350) {
         label = 83;
         break L80;
        } else {
         $$0$i$i58 = $348;
        }
       } else {
        $351 = HEAP32[$341>>2]|0;
        $$0$i$i58 = $351;
       }
       $352 = HEAP32[$__ct>>2]|0;
       $353 = (($352) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       __THREW__ = 0;
       $355 = (invoke_iiii($354|0,($__ct|0),8192,($$0$i$i58|0))|0);
       $356 = __THREW__; __THREW__ = 0;
       $357 = $356&1;
       if ($357) {
        label = 83;
        break L80;
       }
       if (!($355)) {
        $1067 = $$pre$i3$i$i51262;$1068 = $1064;$__e$sroa$0$20 = $__e$sroa$0$5;$__fd$2 = $__fd$0;$__trailing_sign$1 = $__trailing_sign$0252;
        break L403;
       }
       $358 = HEAP32[$__b>>2]|0;
       $359 = (($358) + 12|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = (($358) + 16|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = ($360|0)==($362|0);
       if ($363) {
        $364 = HEAP32[$358>>2]|0;
        $365 = (($364) + 40|0);
        $366 = HEAP32[$365>>2]|0;
        __THREW__ = 0;
        $367 = (invoke_ii($366|0,($358|0))|0);
        $368 = __THREW__; __THREW__ = 0;
        $369 = $368&1;
        if ($369) {
         label = 83;
         break L80;
        } else {
         $$0$i$i64 = $367;
        }
       } else {
        $370 = (($360) + 4|0);
        HEAP32[$359>>2] = $370;
        $371 = HEAP32[$360>>2]|0;
        $$0$i$i64 = $371;
       }
       __THREW__ = 0;
       invoke_vii(416,($__spaces|0),($$0$i$i64|0));
       $372 = __THREW__; __THREW__ = 0;
       $373 = $372&1;
       if ($373) {
        label = 83;
        break L80;
       } else {
        $$pre$i3$i$i51 = $$pre$i3$i$i51262;$324 = $1069;$__e$sroa$0$3 = $__e$sroa$0$5;
       }
      }
     }
    } while(0);
    $949 = (($__p$0250) + 1)|0;
    $950 = ($949>>>0)<(4);
    if ($950) {
     $1064 = $1068;$__e$sroa$0$0 = $__e$sroa$0$20;$__fd$0 = $__fd$2;$__p$0250 = $949;$__trailing_sign$0252 = $__trailing_sign$1;
    } else {
     $1031 = $1068;$1066 = $1067;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 353;
     break;
    }
   }
   L438:    switch (label|0) {
    case 79: {
     $224 = ___cxa_find_matching_catch()|0;
     $225 = tempRet0;
     $lpad$phi$index = $224;$lpad$phi$index8 = $225;
     break L78;
     break;
    }
    case 80: {
     $226 = ___cxa_find_matching_catch()|0;
     $227 = tempRet0;
     $lpad$phi$index = $226;$lpad$phi$index8 = $227;
     break L78;
     break;
    }
    case 81: {
     $228 = ___cxa_find_matching_catch()|0;
     $229 = tempRet0;
     $lpad$phi$index = $228;$lpad$phi$index8 = $229;
     break L78;
     break;
    }
    case 82: {
     $230 = ___cxa_find_matching_catch()|0;
     $231 = tempRet0;
     $lpad$phi$index = $230;$lpad$phi$index8 = $231;
     break L78;
     break;
    }
    case 83: {
     $232 = ___cxa_find_matching_catch()|0;
     $233 = tempRet0;
     $lpad$phi$index = $232;$lpad$phi$index8 = $233;
     break L78;
     break;
    }
    case 84: {
     $234 = ___cxa_find_matching_catch()|0;
     $235 = tempRet0;
     $lpad$phi$index = $234;$lpad$phi$index8 = $235;
     break L78;
     break;
    }
    case 110: {
     $305 = HEAP32[$__err>>2]|0;
     $306 = $305 | 4;
     HEAP32[$__err>>2] = $306;
     $$0 = 0;
     break;
    }
    case 202: {
     $548 = HEAP32[$__err>>2]|0;
     $549 = $548 | 4;
     HEAP32[$__err>>2] = $549;
     $$0 = 0;
     break;
    }
    case 258: {
     $701 = HEAP32[$__err>>2]|0;
     $702 = $701 | 4;
     HEAP32[$__err>>2] = $702;
     $$0 = 0;
     break;
    }
    case 317: {
     $843 = HEAP32[$__err>>2]|0;
     $844 = $843 | 4;
     HEAP32[$__err>>2] = $844;
     $$0 = 0;
     break;
    }
    case 340: {
     $907 = HEAP32[$__err>>2]|0;
     $908 = $907 | 4;
     HEAP32[$__err>>2] = $908;
     $$0 = 0;
     break;
    }
    case 351: {
     $947 = HEAP32[$__err>>2]|0;
     $948 = $947 | 4;
     HEAP32[$__err>>2] = $948;
     $$0 = 0;
     break;
    }
    case 353: {
     $951 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L441: do {
      if (!($951)) {
       $952 = (($__trailing_sign$0$lcssa) + 4|0);
       $953 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $1066;$978 = $1066;$__i$0 = 1;
       L443: while(1) {
        $954 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $955 = $954 & 1;
        $956 = ($955<<24>>24)==(0);
        if ($956) {
         $958 = $954&255;
         $959 = $958 >>> 1;
         $961 = $959;
        } else {
         $957 = HEAP32[$952>>2]|0;
         $961 = $957;
        }
        $960 = ($__i$0>>>0)<($961>>>0);
        if (!($960)) {
         break L441;
        }
        $962 = HEAP32[$__b>>2]|0;
        $963 = ($962|0)==(0|0);
        do {
         if ($963) {
          $992 = 1;
         } else {
          $964 = (($962) + 12|0);
          $965 = HEAP32[$964>>2]|0;
          $966 = (($962) + 16|0);
          $967 = HEAP32[$966>>2]|0;
          $968 = ($965|0)==($967|0);
          if ($968) {
           $969 = HEAP32[$962>>2]|0;
           $970 = (($969) + 36|0);
           $971 = HEAP32[$970>>2]|0;
           __THREW__ = 0;
           $972 = (invoke_ii($971|0,($962|0))|0);
           $973 = __THREW__; __THREW__ = 0;
           $974 = $973&1;
           if ($974) {
            label = 78;
            break L443;
           } else {
            $$0$i$i$i$i = $972;
           }
          } else {
           $975 = HEAP32[$965>>2]|0;
           $$0$i$i$i$i = $975;
          }
          $976 = ($$0$i$i$i$i|0)==(-1);
          if ($976) {
           HEAP32[$__b>>2] = 0;
           $992 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $992 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $977 = ($978|0)==(0|0);
        if ($977) {
         $$pre$i3$i$i279$ph = $$pre$i3$i$i;
         label = 371;
        } else {
         $979 = (($978) + 12|0);
         $980 = HEAP32[$979>>2]|0;
         $981 = (($978) + 16|0);
         $982 = HEAP32[$981>>2]|0;
         $983 = ($980|0)==($982|0);
         if ($983) {
          $984 = HEAP32[$978>>2]|0;
          $985 = (($984) + 36|0);
          $986 = HEAP32[$985>>2]|0;
          __THREW__ = 0;
          $987 = (invoke_ii($986|0,($978|0))|0);
          $988 = __THREW__; __THREW__ = 0;
          $989 = $988&1;
          if ($989) {
           label = 78;
           break;
          } else {
           $$0$i$i1$i$i = $987;
          }
         } else {
          $990 = HEAP32[$980>>2]|0;
          $$0$i$i1$i$i = $990;
         }
         $991 = ($$0$i$i1$i$i|0)==(-1);
         if ($991) {
          $$pre$i3$i$i279$ph = 0;
          label = 371;
         } else {
          $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
          $tmp$i$i = $992 ^ $phitmp$i4$i$i;
          if ($tmp$i$i) {
           $$pre$i3$i$i279287 = $$pre$i3$i$i;$1081 = $$pre$i3$i$i;
          } else {
           label = 379;
           break;
          }
         }
        }
        if ((label|0) == 371) {
         label = 0;
         if ($992) {
          label = 379;
          break;
         } else {
          $$pre$i3$i$i279287 = $$pre$i3$i$i279$ph;$1081 = 0;
         }
        }
        $993 = HEAP32[$__b>>2]|0;
        $994 = (($993) + 12|0);
        $995 = HEAP32[$994>>2]|0;
        $996 = (($993) + 16|0);
        $997 = HEAP32[$996>>2]|0;
        $998 = ($995|0)==($997|0);
        if ($998) {
         $999 = HEAP32[$993>>2]|0;
         $1000 = (($999) + 36|0);
         $1001 = HEAP32[$1000>>2]|0;
         __THREW__ = 0;
         $1002 = (invoke_ii($1001|0,($993|0))|0);
         $1003 = __THREW__; __THREW__ = 0;
         $1004 = $1003&1;
         if ($1004) {
          label = 78;
          break;
         } else {
          $$0$i$i = $1002;
         }
        } else {
         $1005 = HEAP32[$995>>2]|0;
         $$0$i$i = $1005;
        }
        $1006 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $1007 = $1006 & 1;
        $1008 = ($1007<<24>>24)==(0);
        if ($1008) {
         $1011 = $952;
        } else {
         $1009 = HEAP32[$953>>2]|0;
         $1011 = $1009;
        }
        $1010 = (($1011) + ($__i$0<<2)|0);
        $1012 = HEAP32[$1010>>2]|0;
        $1013 = ($$0$i$i|0)==($1012|0);
        if (!($1013)) {
         label = 379;
         break;
        }
        $1016 = (($__i$0) + 1)|0;
        $1017 = HEAP32[$__b>>2]|0;
        $1018 = (($1017) + 12|0);
        $1019 = HEAP32[$1018>>2]|0;
        $1020 = (($1017) + 16|0);
        $1021 = HEAP32[$1020>>2]|0;
        $1022 = ($1019|0)==($1021|0);
        if ($1022) {
         $1023 = HEAP32[$1017>>2]|0;
         $1024 = (($1023) + 40|0);
         $1025 = HEAP32[$1024>>2]|0;
         __THREW__ = 0;
         (invoke_ii($1025|0,($1017|0))|0);
         $1026 = __THREW__; __THREW__ = 0;
         $1027 = $1026&1;
         if ($1027) {
          label = 78;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i279287;$978 = $1081;$__i$0 = $1016;
          continue;
         }
        } else {
         $1028 = (($1019) + 4|0);
         HEAP32[$1018>>2] = $1028;
         $$pre$i3$i$i = $$pre$i3$i$i279287;$978 = $1081;$__i$0 = $1016;
         continue;
        }
       }
       if ((label|0) == 78) {
        $222 = ___cxa_find_matching_catch()|0;
        $223 = tempRet0;
        $lpad$phi$index = $222;$lpad$phi$index8 = $223;
        break L78;
       }
       else if ((label|0) == 379) {
        $1014 = HEAP32[$__err>>2]|0;
        $1015 = $1014 | 4;
        HEAP32[$__err>>2] = $1015;
        $$0 = 0;
        break L438;
       }
      }
     } while(0);
     $1029 = HEAP32[$__gb>>2]|0;
     $1030 = ($1029|0)==($1031|0);
     if ($1030) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1029,$1031,$__et);
      $1032 = HEAP32[$__et>>2]|0;
      $1033 = ($1032|0)==(0);
      if ($1033) {
       $$0 = 1;
      } else {
       $1034 = HEAP32[$__err>>2]|0;
       $1035 = $1034 | 4;
       HEAP32[$__err>>2] = $1035;
       $$0 = 0;
      }
     }
     break;
    }
   }
   $1036 = HEAP8[$__spaces>>0]|0;
   $1037 = $1036 & 1;
   $1038 = ($1037<<24>>24)==(0);
   if (!($1038)) {
    $1039 = HEAP32[$187>>2]|0;
    _free($1039);
   }
   $1040 = HEAP8[$__nsn>>0]|0;
   $1041 = $1040 & 1;
   $1042 = ($1041<<24>>24)==(0);
   if (!($1042)) {
    $1043 = HEAP32[$179>>2]|0;
    _free($1043);
   }
   $1044 = HEAP8[$__psn>>0]|0;
   $1045 = $1044 & 1;
   $1046 = ($1045<<24>>24)==(0);
   if (!($1046)) {
    $1047 = HEAP32[$181>>2]|0;
    _free($1047);
   }
   $1048 = HEAP8[$__sym>>0]|0;
   $1049 = $1048 & 1;
   $1050 = ($1049<<24>>24)==(0);
   if (!($1050)) {
    $1051 = HEAP32[$185>>2]|0;
    _free($1051);
   }
   $1052 = HEAP8[$__grp>>0]|0;
   $1053 = $1052 & 1;
   $1054 = ($1053<<24>>24)==(0);
   if (!($1054)) {
    $1055 = (($__grp) + 8|0);
    $1056 = HEAP32[$1055>>2]|0;
    _free($1056);
   }
   $1057 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $1058 = ($1057|0)==(0|0);
   if ($1058) {
    STACKTOP = sp;return ($$0|0);
   }
   $1059 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   invoke_vi($1059|0,($1057|0));
   $1060 = __THREW__; __THREW__ = 0;
   $1061 = $1060&1;
   if ($1061) {
    $1062 = ___cxa_find_matching_catch(0|0)|0;
    $1063 = tempRet0;
    ___clang_call_terminate($1062);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
  else if ((label|0) == 85) {
   $236 = ___cxa_find_matching_catch()|0;
   $237 = tempRet0;
   $lpad$phi$index = $236;$lpad$phi$index8 = $237;
  }
 } while(0);
 $238 = HEAP8[$__spaces>>0]|0;
 $239 = $238 & 1;
 $240 = ($239<<24>>24)==(0);
 if (!($240)) {
  $241 = (($__spaces) + 8|0);
  $242 = HEAP32[$241>>2]|0;
  _free($242);
 }
 $243 = HEAP8[$__nsn>>0]|0;
 $244 = $243 & 1;
 $245 = ($244<<24>>24)==(0);
 if (!($245)) {
  $246 = (($__nsn) + 8|0);
  $247 = HEAP32[$246>>2]|0;
  _free($247);
 }
 $248 = HEAP8[$__psn>>0]|0;
 $249 = $248 & 1;
 $250 = ($249<<24>>24)==(0);
 if (!($250)) {
  $251 = (($__psn) + 8|0);
  $252 = HEAP32[$251>>2]|0;
  _free($252);
 }
 $253 = HEAP8[$__sym>>0]|0;
 $254 = $253 & 1;
 $255 = ($254<<24>>24)==(0);
 if (!($255)) {
  $256 = (($__sym) + 8|0);
  $257 = HEAP32[$256>>2]|0;
  _free($257);
 }
 $258 = HEAP8[$__grp>>0]|0;
 $259 = $258 & 1;
 $260 = ($259<<24>>24)==(0);
 if (!($260)) {
  $261 = (($__grp) + 8|0);
  $262 = HEAP32[$261>>2]|0;
  _free($262);
 }
 $263 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $264 = ($263|0)==(0|0);
 if ($264) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $265 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vi($265|0,($263|0));
 $266 = __THREW__; __THREW__ = 0;
 $267 = $266&1;
 if ($267) {
  $268 = ___cxa_find_matching_catch(0|0)|0;
  $269 = tempRet0;
  ___clang_call_terminate($268);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$01$i = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__neg = 0, $__p$0$lcssa$i = 0, $__p$02$i = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i = 0, $phitmp$i$i$i = 0, $scevgep5$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp;
 $__neg = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $0 = (($__wb) + 4|0);
 HEAP32[$0>>2] = 406;
 $1 = (($__wbuf) + 400|0);
 $2 = (($__iob) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+1)|0);
 __THREW__ = 0;
 $6 = (invoke_ii(380,(6544|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 L1: do {
  if (!($8)) {
   $$idx = (($3) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx4 = (($3) + 12|0);
   $$idx4$val = HEAP32[$$idx4>>2]|0;
   __THREW__ = 0;
   $9 = (invoke_iiii(381,($$idx$val|0),($$idx4$val|0),($6|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP8[$__neg>>0] = 0;
    $12 = HEAP32[$__e>>2]|0;
    $13 = (($__iob) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    __THREW__ = 0;
    $15 = (invoke_iiiiiiiiiiii(414,($__b|0),($12|0),($__intl|0),($3|0),($14|0),($__err|0),($__neg|0),($9|0),($__wb|0),($__wn|0),($1|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     do {
      if ($15) {
       $18 = HEAP8[$__v>>0]|0;
       $19 = $18 & 1;
       $20 = ($19<<24>>24)==(0);
       if ($20) {
        $24 = (($__v) + 4|0);
        HEAP32[$24>>2] = 0;
        HEAP8[$__v>>0] = 0;
       } else {
        $21 = (($__v) + 8|0);
        $22 = HEAP32[$21>>2]|0;
        HEAP32[$22>>2] = 0;
        $23 = (($__v) + 4|0);
        HEAP32[$23>>2] = 0;
       }
       $25 = HEAP8[$__neg>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if (!($26)) {
        $27 = HEAP32[$9>>2]|0;
        $28 = (($27) + 44|0);
        $29 = HEAP32[$28>>2]|0;
        __THREW__ = 0;
        $30 = (invoke_iii($29|0,($9|0),45)|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         break L1;
        }
        __THREW__ = 0;
        invoke_vii(416,($__v|0),($30|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if ($34) {
         break L1;
        }
       }
       $35 = HEAP32[$9>>2]|0;
       $36 = (($35) + 44|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_iii($37|0,($9|0),48)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        break L1;
       }
       $41 = HEAP32[$__wb>>2]|0;
       $42 = HEAP32[$__wn>>2]|0;
       $43 = (($42) + -4|0);
       $44 = ($41>>>0)<($43>>>0);
       L16: do {
        if ($44) {
         $__w$05 = $41;
         while(1) {
          $47 = HEAP32[$__w$05>>2]|0;
          $48 = ($47|0)==($38|0);
          $46 = (($__w$05) + 4|0);
          if (!($48)) {
           $__w$0$lcssa = $__w$05;
           break L16;
          }
          $45 = ($46>>>0)<($43>>>0);
          if ($45) {
           $__w$05 = $46;
          } else {
           $__w$0$lcssa = $46;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $41;
        }
       } while(0);
       $49 = $__w$0$lcssa;
       $50 = HEAP8[$__v>>0]|0;
       $51 = $50 & 1;
       $52 = ($51<<24>>24)==(0);
       if ($52) {
        $53 = $50&255;
        $54 = $53 >>> 1;
        $156 = $50;$65 = 1;$66 = $54;
       } else {
        $55 = (($__v) + 4|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = HEAP32[$__v>>2]|0;
        $58 = $57 & -2;
        $phitmp$i$i = (($58) + -1)|0;
        $59 = $57&255;
        $156 = $59;$65 = $phitmp$i$i;$66 = $56;
       }
       $60 = $42;
       $61 = (($60) - ($49))|0;
       $62 = $61 >> 2;
       $63 = ($62|0)==(0);
       if (!($63)) {
        $64 = (($65) - ($66))|0;
        $67 = ($64>>>0)<($62>>>0);
        if ($67) {
         $68 = (($66) + ($62))|0;
         $69 = (($68) - ($65))|0;
         __THREW__ = 0;
         invoke_viiiiiii(418,($__v|0),($65|0),($69|0),($66|0),($66|0),0,0);
         $70 = __THREW__; __THREW__ = 0;
         $71 = $70&1;
         if ($71) {
          break L1;
         }
         $$pre$i = HEAP8[$__v>>0]|0;
         $73 = $$pre$i;
        } else {
         $73 = $156;
        }
        $72 = $73 & 1;
        $74 = ($72<<24>>24)==(0);
        if ($74) {
         $77 = (($__v) + 4|0);
         $79 = $77;
        } else {
         $75 = (($__v) + 8|0);
         $76 = HEAP32[$75>>2]|0;
         $79 = $76;
        }
        $78 = (($79) + ($66<<2)|0);
        $80 = ($__w$0$lcssa|0)==($42|0);
        if ($80) {
         $__p$0$lcssa$i = $78;
        } else {
         $81 = $43;
         $82 = (($81) - ($49))|0;
         $83 = $82 >>> 2;
         $84 = (($66) + ($83))|0;
         $85 = (($84) + 1)|0;
         $$01$i = $__w$0$lcssa;$__p$02$i = $78;
         while(1) {
          $86 = HEAP32[$$01$i>>2]|0;
          HEAP32[$__p$02$i>>2] = $86;
          $87 = (($__p$02$i) + 4|0);
          $88 = (($$01$i) + 4|0);
          $89 = ($88|0)==($42|0);
          if ($89) {
           break;
          } else {
           $$01$i = $88;$__p$02$i = $87;
          }
         }
         $scevgep5$i = (($79) + ($85<<2)|0);
         $__p$0$lcssa$i = $scevgep5$i;
        }
        HEAP32[$__p$0$lcssa$i>>2] = 0;
        $90 = (($66) + ($62))|0;
        $91 = HEAP8[$__v>>0]|0;
        $92 = $91 & 1;
        $93 = ($92<<24>>24)==(0);
        if ($93) {
         $95 = $90 << 1;
         $96 = $95&255;
         HEAP8[$__v>>0] = $96;
         break;
        } else {
         $94 = (($__v) + 4|0);
         HEAP32[$94>>2] = $90;
         break;
        }
       }
      }
     } while(0);
     $97 = HEAP32[$__b>>2]|0;
     $98 = ($97|0)==(0|0);
     do {
      if ($98) {
       $157 = 1;
      } else {
       $99 = (($97) + 12|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($97) + 16|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($100|0)==($102|0);
       if ($103) {
        $104 = HEAP32[$97>>2]|0;
        $105 = (($104) + 36|0);
        $106 = HEAP32[$105>>2]|0;
        __THREW__ = 0;
        $107 = (invoke_ii($106|0,($97|0))|0);
        $108 = __THREW__; __THREW__ = 0;
        $109 = $108&1;
        if ($109) {
         break L1;
        } else {
         $$0$i$i$i$i = $107;
        }
       } else {
        $110 = HEAP32[$100>>2]|0;
        $$0$i$i$i$i = $110;
       }
       $111 = ($$0$i$i$i$i|0)==(-1);
       if ($111) {
        HEAP32[$__b>>2] = 0;
        $157 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $157 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $112 = ($12|0)==(0|0);
     do {
      if ($112) {
       label = 45;
      } else {
       $113 = (($12) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($12) + 16|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($114|0)==($116|0);
       if ($117) {
        $118 = HEAP32[$12>>2]|0;
        $119 = (($118) + 36|0);
        $120 = HEAP32[$119>>2]|0;
        __THREW__ = 0;
        $121 = (invoke_ii($120|0,($12|0))|0);
        $122 = __THREW__; __THREW__ = 0;
        $123 = $122&1;
        if ($123) {
         break L1;
        } else {
         $$0$i$i1$i$i = $121;
        }
       } else {
        $124 = HEAP32[$114>>2]|0;
        $$0$i$i1$i$i = $124;
       }
       $125 = ($$0$i$i1$i$i|0)==(-1);
       if ($125) {
        HEAP32[$__e>>2] = 0;
        label = 45;
        break;
       } else {
        if ($157) {
         break;
        } else {
         label = 47;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 45) {
      if ($157) {
       label = 47;
      }
     }
     if ((label|0) == 47) {
      $126 = HEAP32[$__err>>2]|0;
      $127 = $126 | 2;
      HEAP32[$__err>>2] = $127;
     }
     $128 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $128;
     $129 = (($3) + 4|0);
     $130 = HEAP32[$129>>2]|0;HEAP32[$129>>2] = (($130+-1)|0);
     $131 = ($130|0)==(0);
     if ($131) {
      $132 = HEAP32[$3>>2]|0;
      $133 = (($132) + 8|0);
      $134 = HEAP32[$133>>2]|0;
      FUNCTION_TABLE_vi[$134 & 511]($3);
     }
     $135 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $136 = ($135|0)==(0|0);
     if ($136) {
      STACKTOP = sp;return;
     }
     $137 = HEAP32[$0>>2]|0;
     __THREW__ = 0;
     invoke_vi($137|0,($135|0));
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if ($139) {
      $140 = ___cxa_find_matching_catch(0|0)|0;
      $141 = tempRet0;
      ___clang_call_terminate($140);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $142 = ___cxa_find_matching_catch()|0;
 $143 = tempRet0;
 $144 = (($3) + 4|0);
 $145 = HEAP32[$144>>2]|0;HEAP32[$144>>2] = (($145+-1)|0);
 $146 = ($145|0)==(0);
 if ($146) {
  $147 = HEAP32[$3>>2]|0;
  $148 = (($147) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vi[$149 & 511]($3);
 }
 $$pre = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $150 = ($$pre|0)==(0|0);
 if ($150) {
  ___resumeException($142|0);
  // unreachable;
 }
 $151 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi($151|0,($$pre|0));
 $152 = __THREW__; __THREW__ = 0;
 $153 = $152&1;
 if ($153) {
  $154 = ___cxa_find_matching_catch(0|0)|0;
  $155 = tempRet0;
  ___clang_call_terminate($154);
  // unreachable;
 } else {
  ___resumeException($142|0);
  // unreachable;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$idx = 0, $$idx$val = 0, $$idx13 = 0, $$idx13$val = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 72|0;
 $__bb = sp + 20|0;
 $__digits = sp + 172|0;
 $__pat = sp + 16|0;
 $__dp = sp + 372|0;
 $__ts = sp + 373|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 52|0;
 $__fd = sp + 24|0;
 $__mbuf = sp + 272|0;
 $__mi = sp + 64|0;
 $__me = sp + 68|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,6312,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   $2 = (invoke_i(393)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $158 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $5 = (invoke_iiiii(398,($__bb|0),($2|0),(6312|0),($vararg_buffer1|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      $158 = 0;
     } else {
      $8 = HEAP32[$__bb>>2]|0;
      $9 = ($8|0)==(0|0);
      if ($9) {
       $10 = (___cxa_allocate_exception(4)|0);
       HEAP32[$10>>2] = ((14760 + 8|0));
       __THREW__ = 0;
       invoke_viii(357,($10|0),(14816|0),(323|0));
       $11 = __THREW__; __THREW__ = 0;
       $12 = $11&1;
       if ($12) {
        $158 = 0;
        break;
       }
       // unreachable;
      }
      $15 = (_malloc($5)|0);
      $16 = ($15|0)==(0|0);
      if (!($16)) {
       $133 = $15;$134 = $8;$__db$0 = $15;$__n$0 = $5;
       break L1;
      }
      $17 = (___cxa_allocate_exception(4)|0);
      HEAP32[$17>>2] = ((14760 + 8|0));
      __THREW__ = 0;
      invoke_viii(357,($17|0),(14816|0),(323|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $158 = $8;
      } else {
       // unreachable;
      }
     }
    }
   } while(0);
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $$2 = $13;$$23 = $14;$156 = 0;$157 = $158;
   _free($156);
   _free($157);
   ___resumeException($$2|0);
   // unreachable;
  } else {
   $133 = 0;$134 = 0;$__db$0 = $__digits;$__n$0 = $0;
  }
 } while(0);
 $20 = (($__iob) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;HEAP32[$22>>2] = (($23+1)|0);
 __THREW__ = 0;
 $24 = (invoke_ii(380,(6552|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  label = 37;
 } else {
  $$idx = (($21) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx13 = (($21) + 12|0);
  $$idx13$val = HEAP32[$$idx13>>2]|0;
  __THREW__ = 0;
  $27 = (invoke_iiii(381,($$idx$val|0),($$idx13$val|0),($24|0))|0);
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if ($29) {
   label = 37;
  } else {
   $30 = HEAP32[$__bb>>2]|0;
   $31 = (($30) + ($__n$0)|0);
   $32 = HEAP32[$27>>2]|0;
   $33 = (($32) + 32|0);
   $34 = HEAP32[$33>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($34|0,($27|0),($30|0),($31|0),($__db$0|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    label = 37;
   } else {
    $37 = ($__n$0|0)==(0);
    if ($37) {
     $40 = 0;
    } else {
     $38 = HEAP8[$30>>0]|0;
     $39 = ($38<<24>>24)==(45);
     $40 = $39;
    }
    HEAP32[$__pat>>2] = 0;
    ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
    ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
    ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viiiiiiiiii(419,($__intl|0),($40|0),($21|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
    $41 = __THREW__; __THREW__ = 0;
    $42 = $41&1;
    do {
     if ($42) {
      $95 = ___cxa_find_matching_catch()|0;
      $96 = tempRet0;
      $$0 = $95;$$01 = $96;
     } else {
      $43 = HEAP32[$__fd>>2]|0;
      $44 = ($__n$0|0)>($43|0);
      if ($44) {
       $45 = (($__n$0) - ($43))|0;
       $46 = $45 << 1;
       $47 = HEAP8[$__sn>>0]|0;
       $48 = $47 & 1;
       $49 = ($48<<24>>24)==(0);
       if ($49) {
        $52 = $47&255;
        $53 = $52 >>> 1;
        $63 = $53;
       } else {
        $50 = (($__sn) + 4|0);
        $51 = HEAP32[$50>>2]|0;
        $63 = $51;
       }
       $54 = HEAP8[$__sym>>0]|0;
       $55 = $54 & 1;
       $56 = ($55<<24>>24)==(0);
       if ($56) {
        $59 = $54&255;
        $60 = $59 >>> 1;
        $65 = $60;
       } else {
        $57 = (($__sym) + 4|0);
        $58 = HEAP32[$57>>2]|0;
        $65 = $58;
       }
       $61 = $46 | 1;
       $62 = (($63) + ($61))|0;
       $64 = (($62) + ($65))|0;
       $$pn = $64;
      } else {
       $66 = HEAP8[$__sn>>0]|0;
       $67 = $66 & 1;
       $68 = ($67<<24>>24)==(0);
       if ($68) {
        $71 = $66&255;
        $72 = $71 >>> 1;
        $81 = $72;
       } else {
        $69 = (($__sn) + 4|0);
        $70 = HEAP32[$69>>2]|0;
        $81 = $70;
       }
       $73 = HEAP8[$__sym>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $78 = $73&255;
        $79 = $78 >>> 1;
        $83 = $79;
       } else {
        $76 = (($__sym) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $83 = $77;
       }
       $80 = (($81) + 2)|0;
       $82 = (($80) + ($83))|0;
       $$pn = $82;
      }
      $84 = (($$pn) + ($43))|0;
      $85 = ($84>>>0)>(100);
      if ($85) {
       $86 = (_malloc($84)|0);
       $87 = ($86|0)==(0|0);
       if ($87) {
        $88 = (___cxa_allocate_exception(4)|0);
        HEAP32[$88>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($88|0),(14816|0),(323|0));
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         $91 = ___cxa_find_matching_catch()|0;
         $92 = tempRet0;
         $$0 = $91;$$01 = $92;
         break;
        } else {
         // unreachable;
        }
       } else {
        $99 = $86;$__mb$0 = $86;
       }
      } else {
       $99 = 0;$__mb$0 = $__mbuf;
      }
      $100 = (($__iob) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($__db$0) + ($__n$0)|0);
      $103 = HEAP8[$__dp>>0]|0;
      $104 = HEAP8[$__ts>>0]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(420,($__mb$0|0),($__mi|0),($__me|0),($101|0),($__db$0|0),($102|0),($27|0),($40|0),($__pat|0),($103|0),($104|0),($__grp|0),($__sym|0),($__sn|0),($43|0));
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if (!($106)) {
       $107 = HEAP32[$__s>>2]|0;
       $108 = HEAP32[$__mi>>2]|0;
       $109 = HEAP32[$__me>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiii(400,($agg$result|0),($107|0),($__mb$0|0),($108|0),($109|0),($__iob|0),($__fl|0));
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if (!($111)) {
        _free($99);
        $112 = HEAP8[$__sn>>0]|0;
        $113 = $112 & 1;
        $114 = ($113<<24>>24)==(0);
        if (!($114)) {
         $115 = (($__sn) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         _free($116);
        }
        $117 = HEAP8[$__sym>>0]|0;
        $118 = $117 & 1;
        $119 = ($118<<24>>24)==(0);
        if (!($119)) {
         $120 = (($__sym) + 8|0);
         $121 = HEAP32[$120>>2]|0;
         _free($121);
        }
        $122 = HEAP8[$__grp>>0]|0;
        $123 = $122 & 1;
        $124 = ($123<<24>>24)==(0);
        if (!($124)) {
         $125 = (($__grp) + 8|0);
         $126 = HEAP32[$125>>2]|0;
         _free($126);
        }
        $127 = (($21) + 4|0);
        $128 = HEAP32[$127>>2]|0;HEAP32[$127>>2] = (($128+-1)|0);
        $129 = ($128|0)==(0);
        if (!($129)) {
         _free($133);
         _free($134);
         STACKTOP = sp;return;
        }
        $130 = HEAP32[$21>>2]|0;
        $131 = (($130) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        FUNCTION_TABLE_vi[$132 & 511]($21);
        _free($133);
        _free($134);
        STACKTOP = sp;return;
       }
      }
      $97 = ___cxa_find_matching_catch()|0;
      $98 = tempRet0;
      _free($99);
      $$0 = $97;$$01 = $98;
     }
    } while(0);
    $135 = HEAP8[$__sn>>0]|0;
    $136 = $135 & 1;
    $137 = ($136<<24>>24)==(0);
    if (!($137)) {
     $138 = (($__sn) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     _free($139);
    }
    $140 = HEAP8[$__sym>>0]|0;
    $141 = $140 & 1;
    $142 = ($141<<24>>24)==(0);
    if (!($142)) {
     $143 = (($__sym) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     _free($144);
    }
    $145 = HEAP8[$__grp>>0]|0;
    $146 = $145 & 1;
    $147 = ($146<<24>>24)==(0);
    if ($147) {
     $$1 = $$0;$$12 = $$01;
    } else {
     $148 = (($__grp) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     _free($149);
     $$1 = $$0;$$12 = $$01;
    }
   }
  }
 }
 if ((label|0) == 37) {
  $93 = ___cxa_find_matching_catch()|0;
  $94 = tempRet0;
  $$1 = $93;$$12 = $94;
 }
 $150 = (($21) + 4|0);
 $151 = HEAP32[$150>>2]|0;HEAP32[$150>>2] = (($151+-1)|0);
 $152 = ($151|0)==(0);
 if (!($152)) {
  $$2 = $$1;$$23 = $$12;$156 = $133;$157 = $134;
  _free($156);
  _free($157);
  ___resumeException($$2|0);
  // unreachable;
 }
 $153 = HEAP32[$21>>2]|0;
 $154 = (($153) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 FUNCTION_TABLE_vi[$155 & 511]($21);
 $$2 = $$1;$$23 = $$12;$156 = $133;$157 = $134;
 _free($156);
 _free($157);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9 = 0, $$idx9$val = 0, $$phi$trans$insert = 0, $$phi$trans$insert11 = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert7 = 0, $$pre = 0, $$pre1 = 0, $$pre10 = 0, $$pre12 = 0, $$pre3 = 0, $$pre5 = 0, $$pre6 = 0, $$pre8 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 92|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 $10 = sp + 28|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNSt3__16locale2id5__getEv(6000)|0);
  $$idx9 = (($__loc$0$0$val) + 8|0);
  $$idx9$val = HEAP32[$$idx9>>2]|0;
  $$idx10 = (($__loc$0$0$val) + 12|0);
  $$idx10$val = HEAP32[$$idx10>>2]|0;
  $13 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx9$val,$$idx10$val,$12)|0);
  $14 = HEAP32[$13>>2]|0;
  do {
   if ($__neg) {
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$16 & 511]($0,$13);
    $17 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$17&255;HEAP8[$__pat+1>>0]=($17>>8)&255;HEAP8[$__pat+2>>0]=($17>>16)&255;HEAP8[$__pat+3>>0]=$17>>24;
    $18 = HEAP32[$13>>2]|0;
    $19 = (($18) + 32|0);
    $20 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_vii[$20 & 511]($1,$13);
    $21 = HEAP8[$__sn>>0]|0;
    $22 = $21 & 1;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $27 = (($__sn) + 1|0);
     HEAP8[$27>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $24 = (($__sn) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     HEAP8[$25>>0] = 0;
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(409,($__sn|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $30 = ___cxa_find_matching_catch(0|0)|0;
     $31 = tempRet0;
     ___clang_call_terminate($30);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $32 = (($14) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    FUNCTION_TABLE_vii[$33 & 511]($2,$13);
    $34 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
    $35 = HEAP32[$13>>2]|0;
    $36 = (($35) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($3,$13);
    $38 = HEAP8[$__sn>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $44 = (($__sn) + 1|0);
     HEAP8[$44>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $41 = (($__sn) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP8[$42>>0] = 0;
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(409,($__sn|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $47 = ___cxa_find_matching_catch(0|0)|0;
     $48 = tempRet0;
     ___clang_call_terminate($47);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $49 = HEAP32[$13>>2]|0;
  $50 = (($49) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 511]($13)|0);
  HEAP8[$__dp>>0] = $52;
  $53 = HEAP32[$13>>2]|0;
  $54 = (($53) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_ii[$55 & 511]($13)|0);
  HEAP8[$__ts>>0] = $56;
  $57 = HEAP32[$13>>2]|0;
  $58 = (($57) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vii[$59 & 511]($4,$13);
  $60 = HEAP8[$__grp>>0]|0;
  $61 = $60 & 1;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   $66 = (($__grp) + 1|0);
   HEAP8[$66>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $63 = (($__grp) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   HEAP8[$64>>0] = 0;
   $65 = (($__grp) + 4|0);
   HEAP32[$65>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__grp|0));
  $67 = __THREW__; __THREW__ = 0;
  $68 = $67&1;
  if ($68) {
   $69 = ___cxa_find_matching_catch(0|0)|0;
   $70 = tempRet0;
   ___clang_call_terminate($69);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $$pre = HEAP32[$13>>2]|0;
  $$phi$trans$insert = (($$pre) + 24|0);
  $$pre1 = HEAP32[$$phi$trans$insert>>2]|0;
  FUNCTION_TABLE_vii[$$pre1 & 511]($5,$13);
  $71 = HEAP8[$__sym>>0]|0;
  $72 = $71 & 1;
  $73 = ($72<<24>>24)==(0);
  if ($73) {
   $77 = (($__sym) + 1|0);
   HEAP8[$77>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $74 = (($__sym) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP8[$75>>0] = 0;
   $76 = (($__sym) + 4|0);
   HEAP32[$76>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__sym|0));
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $$pre3 = HEAP32[$13>>2]|0;
  $$phi$trans$insert4 = (($$pre3) + 36|0);
  $$pre5 = HEAP32[$$phi$trans$insert4>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$$pre5 & 511]($13)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNSt3__16locale2id5__getEv(5936)|0);
  $$idx = (($__loc$0$0$val) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx8 = (($__loc$0$0$val) + 12|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  $84 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx8$val,$83)|0);
  $85 = HEAP32[$84>>2]|0;
  do {
   if ($__neg) {
    $86 = (($85) + 44|0);
    $87 = HEAP32[$86>>2]|0;
    FUNCTION_TABLE_vii[$87 & 511]($6,$84);
    $88 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$88&255;HEAP8[$__pat+1>>0]=($88>>8)&255;HEAP8[$__pat+2>>0]=($88>>16)&255;HEAP8[$__pat+3>>0]=$88>>24;
    $89 = HEAP32[$84>>2]|0;
    $90 = (($89) + 32|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 511]($7,$84);
    $92 = HEAP8[$__sn>>0]|0;
    $93 = $92 & 1;
    $94 = ($93<<24>>24)==(0);
    if ($94) {
     $98 = (($__sn) + 1|0);
     HEAP8[$98>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $95 = (($__sn) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     HEAP8[$96>>0] = 0;
     $97 = (($__sn) + 4|0);
     HEAP32[$97>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(409,($__sn|0));
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     $101 = ___cxa_find_matching_catch(0|0)|0;
     $102 = tempRet0;
     ___clang_call_terminate($101);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $103 = (($85) + 40|0);
    $104 = HEAP32[$103>>2]|0;
    FUNCTION_TABLE_vii[$104 & 511]($8,$84);
    $105 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$105&255;HEAP8[$__pat+1>>0]=($105>>8)&255;HEAP8[$__pat+2>>0]=($105>>16)&255;HEAP8[$__pat+3>>0]=$105>>24;
    $106 = HEAP32[$84>>2]|0;
    $107 = (($106) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 511]($9,$84);
    $109 = HEAP8[$__sn>>0]|0;
    $110 = $109 & 1;
    $111 = ($110<<24>>24)==(0);
    if ($111) {
     $115 = (($__sn) + 1|0);
     HEAP8[$115>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $112 = (($__sn) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     HEAP8[$113>>0] = 0;
     $114 = (($__sn) + 4|0);
     HEAP32[$114>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(409,($__sn|0));
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     $118 = ___cxa_find_matching_catch(0|0)|0;
     $119 = tempRet0;
     ___clang_call_terminate($118);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $120 = HEAP32[$84>>2]|0;
  $121 = (($120) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 511]($84)|0);
  HEAP8[$__dp>>0] = $123;
  $124 = HEAP32[$84>>2]|0;
  $125 = (($124) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 511]($84)|0);
  HEAP8[$__ts>>0] = $127;
  $128 = HEAP32[$84>>2]|0;
  $129 = (($128) + 20|0);
  $130 = HEAP32[$129>>2]|0;
  FUNCTION_TABLE_vii[$130 & 511]($10,$84);
  $131 = HEAP8[$__grp>>0]|0;
  $132 = $131 & 1;
  $133 = ($132<<24>>24)==(0);
  if ($133) {
   $137 = (($__grp) + 1|0);
   HEAP8[$137>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $134 = (($__grp) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   HEAP8[$135>>0] = 0;
   $136 = (($__grp) + 4|0);
   HEAP32[$136>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__grp|0));
  $138 = __THREW__; __THREW__ = 0;
  $139 = $138&1;
  if ($139) {
   $140 = ___cxa_find_matching_catch(0|0)|0;
   $141 = tempRet0;
   ___clang_call_terminate($140);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $$pre6 = HEAP32[$84>>2]|0;
  $$phi$trans$insert7 = (($$pre6) + 24|0);
  $$pre8 = HEAP32[$$phi$trans$insert7>>2]|0;
  FUNCTION_TABLE_vii[$$pre8 & 511]($11,$84);
  $142 = HEAP8[$__sym>>0]|0;
  $143 = $142 & 1;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $148 = (($__sym) + 1|0);
   HEAP8[$148>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $145 = (($__sym) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP8[$146>>0] = 0;
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__sym|0));
  $149 = __THREW__; __THREW__ = 0;
  $150 = $149&1;
  if ($150) {
   $151 = ___cxa_find_matching_catch(0|0)|0;
   $152 = tempRet0;
   ___clang_call_terminate($151);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $$pre10 = HEAP32[$84>>2]|0;
  $$phi$trans$insert11 = (($$pre10) + 36|0);
  $$pre12 = HEAP32[$$phi$trans$insert11>>2]|0;
  $153 = (FUNCTION_TABLE_ii[$$pre12 & 511]($84)|0);
  $storemerge = $153;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i20 = 0, $$01$i$i = 0, $$01$i$i18 = 0, $$012$i$i = 0, $$055 = 0, $$2 = 0, $$lcssa41 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa63 = 0, $__d$032 = 0, $__d$1$lcssa77 = 0, $__d$1$lcssa78 = 0, $__d$135 = 0, $__d$2 = 0, $__d$348 = 0, $__f$0$lcssa75 = 0, $__f$0$lcssa76 = 0, $__f$036 = 0;
 var $__f$142 = 0, $__gl$051 = 0, $__gl$1 = 0, $__ig$050 = 0, $__ig$1 = 0, $__ng$049 = 0, $__ng$1 = 0, $__p$054 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $or$cond3 = 0, $scevgep66 = 0, $scevgep6667 = 0, $scevgep68 = 0, $umax = 0, $umax65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$055 = $__db;$__p$054 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$054)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$055;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$055;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$055;
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 511]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$055;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $or$cond3 = $44 | $4;
   if ($or$cond3) {
    $$2 = $$055;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($51|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i20 = $53;
    } else {
     $$01$i$i18 = $53;$56 = $51;
     while(1) {
      $55 = HEAP8[$56>>0]|0;
      HEAP8[$$01$i$i18>>0] = $55;
      $57 = (($56) + 1|0);
      $58 = (($$01$i$i18) + 1|0);
      $59 = ($57|0)==($50|0);
      if ($59) {
       $$0$lcssa$i$i20 = $58;
       break;
      } else {
       $$01$i$i18 = $58;$56 = $57;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i20;
    $$2 = $$055;
   }
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$055) + 1|0);
   $$$0 = $__neg ? $61 : $$055;
   $62 = ($$$0>>>0)<($__de>>>0);
   L30: do {
    if ($62) {
     $__d$032 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$032>>0]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$032;
       break L30;
      }
      $66 = $65 << 24 >> 24;
      $67 = HEAP32[$12>>2]|0;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 & 2048;
      $71 = ($70<<16>>16)==(0);
      $64 = (($__d$032) + 1|0);
      if ($71) {
       $__d$0$lcssa = $__d$032;
       break L30;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$032 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa63 = $__d$0$lcssa;
   if ($8) {
    $72 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($72) {
     $73 = $$$0;
     $74 = (($73) - ($__d$0$lcssa63))|0;
     $75 = ($74>>>0)<($13>>>0);
     $umax = $75 ? $13 : $74;
     $umax65 = $umax;
     $scevgep66 = (($umax65) + ($__fd)|0);
     $scevgep6667 = $scevgep66;
     $79 = $60;$__d$135 = $__d$0$lcssa;$__f$036 = $__fd;
     while(1) {
      $76 = (($__d$135) + -1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($79) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$79>>0] = $77;
      $80 = (($__f$036) + -1)|0;
      $81 = ($76>>>0)>($$$0>>>0);
      $82 = ($80|0)>(0);
      $or$cond = $81 & $82;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $79 = $$pre;$__d$135 = $76;$__f$036 = $80;
     }
     $scevgep68 = (($__d$0$lcssa) + ($umax)|0);
     if ($82) {
      $__d$1$lcssa78 = $scevgep68;$__f$0$lcssa76 = $scevgep6667;
      label = 32;
     } else {
      $90 = 0;$__d$1$lcssa77 = $scevgep68;$__f$0$lcssa75 = $scevgep6667;
     }
    } else {
     $__d$1$lcssa78 = $__d$0$lcssa;$__f$0$lcssa76 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 511]($__ct,48)|0);
     $90 = $86;$__d$1$lcssa77 = $__d$1$lcssa78;$__f$0$lcssa75 = $__f$0$lcssa76;
    }
    $87 = ($__f$0$lcssa75|0)>(0);
    $88 = HEAP32[$__me>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__me>>2] = $89;
    if ($87) {
     $91 = $88;$__f$142 = $__f$0$lcssa75;
     while(1) {
      HEAP8[$91>>0] = $90;
      $92 = (($__f$142) + -1)|0;
      $93 = ($92|0)>(0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = (($94) + 1|0);
      HEAP32[$__me>>2] = $95;
      if ($93) {
       $91 = $94;$__f$142 = $92;
      } else {
       $$lcssa41 = $94;
       break;
      }
     }
    } else {
     $$lcssa41 = $88;
    }
    HEAP8[$$lcssa41>>0] = $__dp;
    $__d$2 = $__d$1$lcssa77;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $96 = ($__d$2|0)==($$$0|0);
   if ($96) {
    $97 = HEAP32[$__ct>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (FUNCTION_TABLE_iii[$99 & 511]($__ct,48)|0);
    $101 = HEAP32[$__me>>2]|0;
    $102 = (($101) + 1|0);
    HEAP32[$__me>>2] = $102;
    HEAP8[$101>>0] = $100;
   } else {
    $103 = HEAP8[$__grp>>0]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $107 = $103&255;
     $108 = $107 >>> 1;
     $110 = $108;
    } else {
     $106 = HEAP32[$11>>2]|0;
     $110 = $106;
    }
    $109 = ($110|0)==(0);
    if ($109) {
     $__d$348 = $__d$2;$__gl$051 = -1;$__ig$050 = 0;$__ng$049 = 0;
    } else {
     if ($105) {
      $113 = $9;
     } else {
      $111 = HEAP32[$10>>2]|0;
      $113 = $111;
     }
     $112 = HEAP8[$113>>0]|0;
     $114 = $112 << 24 >> 24;
     $__d$348 = $__d$2;$__gl$051 = $114;$__ig$050 = 0;$__ng$049 = 0;
    }
    while(1) {
     $115 = ($__ng$049|0)==($__gl$051|0);
     if ($115) {
      $116 = HEAP32[$__me>>2]|0;
      $117 = (($116) + 1|0);
      HEAP32[$__me>>2] = $117;
      HEAP8[$116>>0] = $__ts;
      $118 = (($__ig$050) + 1)|0;
      $119 = HEAP8[$__grp>>0]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $123 = $119&255;
       $124 = $123 >>> 1;
       $126 = $124;
      } else {
       $122 = HEAP32[$11>>2]|0;
       $126 = $122;
      }
      $125 = ($118>>>0)<($126>>>0);
      if ($125) {
       if ($121) {
        $129 = $9;
       } else {
        $127 = HEAP32[$10>>2]|0;
        $129 = $127;
       }
       $128 = (($129) + ($118)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($130<<24>>24)==(127);
       if ($131) {
        $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
       } else {
        if ($121) {
         $134 = $9;
        } else {
         $132 = HEAP32[$10>>2]|0;
         $134 = $132;
        }
        $133 = (($134) + ($118)|0);
        $135 = HEAP8[$133>>0]|0;
        $136 = $135 << 24 >> 24;
        $__gl$1 = $136;$__ig$1 = $118;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$051;$__ig$1 = $118;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$051;$__ig$1 = $__ig$050;$__ng$1 = $__ng$049;
     }
     $137 = (($__d$348) + -1|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = HEAP32[$__me>>2]|0;
     $140 = (($139) + 1|0);
     HEAP32[$__me>>2] = $140;
     HEAP8[$139>>0] = $138;
     $141 = (($__ng$1) + 1)|0;
     $142 = ($137|0)==($$$0|0);
     if ($142) {
      break;
     } else {
      $__d$348 = $137;$__gl$051 = $__gl$1;$__ig$050 = $__ig$1;$__ng$049 = $141;
     }
    }
   }
   $143 = HEAP32[$__me>>2]|0;
   $144 = ($60|0)==($143|0);
   if ($144) {
    $$2 = $$$0;
   } else {
    $145 = (($143) + -1|0);
    $146 = ($145>>>0)>($60>>>0);
    if ($146) {
     $$012$i$i = $60;$149 = $145;
     while(1) {
      $147 = HEAP8[$$012$i$i>>0]|0;
      $148 = HEAP8[$149>>0]|0;
      HEAP8[$$012$i$i>>0] = $148;
      HEAP8[$149>>0] = $147;
      $150 = (($$012$i$i) + 1|0);
      $151 = (($149) + -1|0);
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $$012$i$i = $150;$149 = $151;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$055;
  }
  }
  $153 = (($__p$054) + 1)|0;
  $exitcond = ($153|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$055 = $$2;$__p$054 = $153;
  }
 }
 $154 = HEAP8[$__sn>>0]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $158 = $154&255;
  $159 = $158 >>> 1;
  $161 = $159;
 } else {
  $157 = HEAP32[$2>>2]|0;
  $161 = $157;
 }
 $160 = ($161>>>0)>(1);
 if ($160) {
  if ($156) {
   $164 = $154&255;
   $165 = $164 >>> 1;
   $$pn = $0;$168 = $165;
  } else {
   $162 = HEAP32[$1>>2]|0;
   $163 = HEAP32[$2>>2]|0;
   $$pn = $162;$168 = $163;
  }
  $166 = (($$pn) + 1|0);
  $167 = (($$pn) + ($168)|0);
  $169 = HEAP32[$__me>>2]|0;
  $170 = ($166|0)==($167|0);
  if ($170) {
   $$0$lcssa$i$i = $169;
  } else {
   $$01$i$i = $169;$172 = $166;
   while(1) {
    $171 = HEAP8[$172>>0]|0;
    HEAP8[$$01$i$i>>0] = $171;
    $173 = (($172) + 1|0);
    $174 = (($$01$i$i) + 1|0);
    $175 = ($173|0)==($167|0);
    if ($175) {
     $$0$lcssa$i$i = $174;
     break;
    } else {
     $$01$i$i = $174;$172 = $173;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $176 = $__flags & 176;
 if ((($176|0) == 32)) {
  $177 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $177;
  STACKTOP = sp;return;
 } else if ((($176|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$idx = 0, $$idx$val = 0, $$idx9 = 0, $$idx9$val = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__mb$0 = 0;
 var $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__pat = sp;
 $__dp = sp + 52|0;
 $__ts = sp + 53|0;
 $__grp = sp + 16|0;
 $__sym = sp + 4|0;
 $__sn = sp + 40|0;
 $__fd = sp + 36|0;
 $__mbuf = sp + 56|0;
 $__mi = sp + 28|0;
 $__me = sp + 32|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6552|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 39;
  } else {
   $$idx = (($1) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx9 = (($1) + 12|0);
   $$idx9$val = HEAP32[$$idx9>>2]|0;
   __THREW__ = 0;
   $7 = (invoke_iiii(381,($$idx$val|0),($$idx9$val|0),($4|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    label = 39;
   } else {
    $10 = HEAP8[$__digits>>0]|0;
    $11 = $10 & 1;
    $12 = ($11<<24>>24)==(0);
    if ($12) {
     $15 = $10&255;
     $16 = $15 >>> 1;
     $18 = $16;
    } else {
     $13 = (($__digits) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $18 = $14;
    }
    $17 = ($18|0)==(0);
    if ($17) {
     $31 = 0;
    } else {
     if ($12) {
      $21 = (($__digits) + 1|0);
      $23 = $21;
     } else {
      $19 = (($__digits) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $23 = $20;
     }
     $22 = HEAP8[$23>>0]|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (($24) + 28|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     $27 = (invoke_iii($26|0,($7|0),45)|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 39;
      break;
     }
     $30 = ($22<<24>>24)==($27<<24>>24);
     $31 = $30;
    }
    HEAP32[$__pat>>2] = 0;
    ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
    ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
    ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viiiiiiiiii(419,($__intl|0),($31|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    do {
     if ($33) {
      $99 = ___cxa_find_matching_catch()|0;
      $100 = tempRet0;
      $$0 = $99;$$01 = $100;
     } else {
      $34 = HEAP8[$__digits>>0]|0;
      $35 = $34 & 1;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $39 = $34&255;
       $40 = $39 >>> 1;
       $43 = $40;
      } else {
       $37 = (($__digits) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $43 = $38;
      }
      $41 = HEAP32[$__fd>>2]|0;
      $42 = ($43|0)>($41|0);
      if ($42) {
       if ($36) {
        $46 = $34&255;
        $47 = $46 >>> 1;
        $49 = $47;
       } else {
        $44 = (($__digits) + 4|0);
        $45 = HEAP32[$44>>2]|0;
        $49 = $45;
       }
       $48 = (($49) - ($41))|0;
       $50 = $48 << 1;
       $51 = HEAP8[$__sn>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $56 = $51&255;
        $57 = $56 >>> 1;
        $67 = $57;
       } else {
        $54 = (($__sn) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $67 = $55;
       }
       $58 = HEAP8[$__sym>>0]|0;
       $59 = $58 & 1;
       $60 = ($59<<24>>24)==(0);
       if ($60) {
        $63 = $58&255;
        $64 = $63 >>> 1;
        $69 = $64;
       } else {
        $61 = (($__sym) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $69 = $62;
       }
       $65 = $50 | 1;
       $66 = (($67) + ($65))|0;
       $68 = (($66) + ($69))|0;
       $$pn = $68;
      } else {
       $70 = HEAP8[$__sn>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = $70&255;
        $76 = $75 >>> 1;
        $85 = $76;
       } else {
        $73 = (($__sn) + 4|0);
        $74 = HEAP32[$73>>2]|0;
        $85 = $74;
       }
       $77 = HEAP8[$__sym>>0]|0;
       $78 = $77 & 1;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        $82 = $77&255;
        $83 = $82 >>> 1;
        $87 = $83;
       } else {
        $80 = (($__sym) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        $87 = $81;
       }
       $84 = (($85) + 2)|0;
       $86 = (($84) + ($87))|0;
       $$pn = $86;
      }
      $88 = (($$pn) + ($41))|0;
      $89 = ($88>>>0)>(100);
      if ($89) {
       $90 = (_malloc($88)|0);
       $91 = ($90|0)==(0|0);
       if ($91) {
        $92 = (___cxa_allocate_exception(4)|0);
        HEAP32[$92>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($92|0),(14816|0),(323|0));
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         $95 = ___cxa_find_matching_catch()|0;
         $96 = tempRet0;
         $$0 = $95;$$01 = $96;
         break;
        } else {
         // unreachable;
        }
       } else {
        $103 = $90;$__mb$0 = $90;
       }
      } else {
       $103 = 0;$__mb$0 = $__mbuf;
      }
      $104 = (($__iob) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      if ($36) {
       $110 = (($__digits) + 1|0);
       $111 = $34&255;
       $112 = $111 >>> 1;
       $114 = $110;$115 = $112;
      } else {
       $106 = (($__digits) + 8|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (($__digits) + 4|0);
       $109 = HEAP32[$108>>2]|0;
       $114 = $107;$115 = $109;
      }
      $113 = (($114) + ($115)|0);
      $116 = HEAP8[$__dp>>0]|0;
      $117 = HEAP8[$__ts>>0]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(420,($__mb$0|0),($__mi|0),($__me|0),($105|0),($114|0),($113|0),($7|0),($31|0),($__pat|0),($116|0),($117|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if (!($119)) {
       $120 = HEAP32[$__s>>2]|0;
       $121 = HEAP32[$__mi>>2]|0;
       $122 = HEAP32[$__me>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiii(400,($agg$result|0),($120|0),($__mb$0|0),($121|0),($122|0),($__iob|0),($__fl|0));
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if (!($124)) {
        _free($103);
        $125 = HEAP8[$__sn>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if (!($127)) {
         $128 = (($__sn) + 8|0);
         $129 = HEAP32[$128>>2]|0;
         _free($129);
        }
        $130 = HEAP8[$__sym>>0]|0;
        $131 = $130 & 1;
        $132 = ($131<<24>>24)==(0);
        if (!($132)) {
         $133 = (($__sym) + 8|0);
         $134 = HEAP32[$133>>2]|0;
         _free($134);
        }
        $135 = HEAP8[$__grp>>0]|0;
        $136 = $135 & 1;
        $137 = ($136<<24>>24)==(0);
        if (!($137)) {
         $138 = (($__grp) + 8|0);
         $139 = HEAP32[$138>>2]|0;
         _free($139);
        }
        $140 = (($1) + 4|0);
        $141 = HEAP32[$140>>2]|0;HEAP32[$140>>2] = (($141+-1)|0);
        $142 = ($141|0)==(0);
        if (!($142)) {
         STACKTOP = sp;return;
        }
        $143 = HEAP32[$1>>2]|0;
        $144 = (($143) + 8|0);
        $145 = HEAP32[$144>>2]|0;
        FUNCTION_TABLE_vi[$145 & 511]($1);
        STACKTOP = sp;return;
       }
      }
      $101 = ___cxa_find_matching_catch()|0;
      $102 = tempRet0;
      _free($103);
      $$0 = $101;$$01 = $102;
     }
    } while(0);
    $146 = HEAP8[$__sn>>0]|0;
    $147 = $146 & 1;
    $148 = ($147<<24>>24)==(0);
    if (!($148)) {
     $149 = (($__sn) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     _free($150);
    }
    $151 = HEAP8[$__sym>>0]|0;
    $152 = $151 & 1;
    $153 = ($152<<24>>24)==(0);
    if (!($153)) {
     $154 = (($__sym) + 8|0);
     $155 = HEAP32[$154>>2]|0;
     _free($155);
    }
    $156 = HEAP8[$__grp>>0]|0;
    $157 = $156 & 1;
    $158 = ($157<<24>>24)==(0);
    if ($158) {
     $$1 = $$0;$$12 = $$01;
    } else {
     $159 = (($__grp) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     _free($160);
     $$1 = $$0;$$12 = $$01;
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  $97 = ___cxa_find_matching_catch()|0;
  $98 = tempRet0;
  $$1 = $97;$$12 = $98;
 }
 $161 = (($1) + 4|0);
 $162 = HEAP32[$161>>2]|0;HEAP32[$161>>2] = (($162+-1)|0);
 $163 = ($162|0)==(0);
 if (!($163)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $164 = HEAP32[$1>>2]|0;
 $165 = (($164) + 8|0);
 $166 = HEAP32[$165>>2]|0;
 FUNCTION_TABLE_vi[$166 & 511]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$215 = 0, $$2314 = 0, $$idx = 0, $$idx$val = 0, $$idx12 = 0, $$idx12$val = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 888|0;
 $__bb = sp + 424|0;
 $__digits = sp + 440|0;
 $__pat = sp + 16|0;
 $__dp = sp + 880|0;
 $__ts = sp + 432|0;
 $__grp = sp + 840|0;
 $__sym = sp + 852|0;
 $__sn = sp + 864|0;
 $__fd = sp + 876|0;
 $__mbuf = sp + 24|0;
 $__mi = sp + 428|0;
 $__me = sp + 884|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $0 = (_snprintf($__buf,100,6312,$vararg_buffer)|0);
 $1 = ($0>>>0)>(99);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   $2 = (invoke_i(393)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   do {
    if ($4) {
     $163 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $5 = (invoke_iiiii(398,($__bb|0),($2|0),(6312|0),($vararg_buffer1|0))|0);
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      $163 = 0;
     } else {
      $8 = HEAP32[$__bb>>2]|0;
      $9 = ($8|0)==(0|0);
      if ($9) {
       $10 = (___cxa_allocate_exception(4)|0);
       HEAP32[$10>>2] = ((14760 + 8|0));
       __THREW__ = 0;
       invoke_viii(357,($10|0),(14816|0),(323|0));
       $11 = __THREW__; __THREW__ = 0;
       $12 = $11&1;
       if ($12) {
        $163 = 0;
        break;
       }
       // unreachable;
      }
      $15 = $5 << 2;
      $16 = (_malloc($15)|0);
      $17 = ($16|0)==(0|0);
      if (!($17)) {
       $138 = $16;$139 = $8;$__db$0 = $16;$__n$0 = $5;
       break L1;
      }
      $18 = (___cxa_allocate_exception(4)|0);
      HEAP32[$18>>2] = ((14760 + 8|0));
      __THREW__ = 0;
      invoke_viii(357,($18|0),(14816|0),(323|0));
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       $163 = $8;
      } else {
       // unreachable;
      }
     }
    }
   } while(0);
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $$215 = $13;$$2314 = $14;$162 = $163;
   _free($162);
   ___resumeException($$215|0);
   // unreachable;
  } else {
   $138 = 0;$139 = 0;$__db$0 = $__digits;$__n$0 = $0;
  }
 } while(0);
 $21 = (($__iob) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24+1)|0);
 __THREW__ = 0;
 $25 = (invoke_ii(380,(6544|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  label = 37;
 } else {
  $$idx = (($22) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx12 = (($22) + 12|0);
  $$idx12$val = HEAP32[$$idx12>>2]|0;
  __THREW__ = 0;
  $28 = (invoke_iiii(381,($$idx$val|0),($$idx12$val|0),($25|0))|0);
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   label = 37;
  } else {
   $31 = HEAP32[$__bb>>2]|0;
   $32 = (($31) + ($__n$0)|0);
   $33 = HEAP32[$28>>2]|0;
   $34 = (($33) + 48|0);
   $35 = HEAP32[$34>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($35|0,($28|0),($31|0),($32|0),($__db$0|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    label = 37;
   } else {
    $38 = ($__n$0|0)==(0);
    if ($38) {
     $41 = 0;
    } else {
     $39 = HEAP8[$31>>0]|0;
     $40 = ($39<<24>>24)==(45);
     $41 = $40;
    }
    HEAP32[$__pat>>2] = 0;
    ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
    ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
    ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viiiiiiiiii(421,($__intl|0),($41|0),($22|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    do {
     if ($43) {
      $97 = ___cxa_find_matching_catch()|0;
      $98 = tempRet0;
      $$0 = $97;$$01 = $98;
     } else {
      $44 = HEAP32[$__fd>>2]|0;
      $45 = ($__n$0|0)>($44|0);
      if ($45) {
       $46 = (($__n$0) - ($44))|0;
       $47 = $46 << 1;
       $48 = HEAP8[$__sn>>0]|0;
       $49 = $48 & 1;
       $50 = ($49<<24>>24)==(0);
       if ($50) {
        $53 = $48&255;
        $54 = $53 >>> 1;
        $64 = $54;
       } else {
        $51 = (($__sn) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $64 = $52;
       }
       $55 = HEAP8[$__sym>>0]|0;
       $56 = $55 & 1;
       $57 = ($56<<24>>24)==(0);
       if ($57) {
        $60 = $55&255;
        $61 = $60 >>> 1;
        $66 = $61;
       } else {
        $58 = (($__sym) + 4|0);
        $59 = HEAP32[$58>>2]|0;
        $66 = $59;
       }
       $62 = $47 | 1;
       $63 = (($64) + ($62))|0;
       $65 = (($63) + ($66))|0;
       $$pn = $65;
      } else {
       $67 = HEAP8[$__sn>>0]|0;
       $68 = $67 & 1;
       $69 = ($68<<24>>24)==(0);
       if ($69) {
        $72 = $67&255;
        $73 = $72 >>> 1;
        $82 = $73;
       } else {
        $70 = (($__sn) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $82 = $71;
       }
       $74 = HEAP8[$__sym>>0]|0;
       $75 = $74 & 1;
       $76 = ($75<<24>>24)==(0);
       if ($76) {
        $79 = $74&255;
        $80 = $79 >>> 1;
        $84 = $80;
       } else {
        $77 = (($__sym) + 4|0);
        $78 = HEAP32[$77>>2]|0;
        $84 = $78;
       }
       $81 = (($82) + 2)|0;
       $83 = (($81) + ($84))|0;
       $$pn = $83;
      }
      $85 = (($$pn) + ($44))|0;
      $86 = ($85>>>0)>(100);
      if ($86) {
       $87 = $85 << 2;
       $88 = (_malloc($87)|0);
       $89 = ($88|0)==(0|0);
       if ($89) {
        $90 = (___cxa_allocate_exception(4)|0);
        HEAP32[$90>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($90|0),(14816|0),(323|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         $93 = ___cxa_find_matching_catch()|0;
         $94 = tempRet0;
         $$0 = $93;$$01 = $94;
         break;
        } else {
         // unreachable;
        }
       } else {
        $102 = $88;$__mb$0 = $88;
       }
      } else {
       $102 = 0;$__mb$0 = $__mbuf;
      }
      $103 = (($__iob) + 4|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($__db$0) + ($__n$0<<2)|0);
      $106 = HEAP32[$__dp>>2]|0;
      $107 = HEAP32[$__ts>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(422,($__mb$0|0),($__mi|0),($__me|0),($104|0),($__db$0|0),($105|0),($28|0),($41|0),($__pat|0),($106|0),($107|0),($__grp|0),($__sym|0),($__sn|0),($44|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if (!($109)) {
       $110 = HEAP32[$__s>>2]|0;
       $111 = HEAP32[$__mi>>2]|0;
       $112 = HEAP32[$__me>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiii(403,($agg$result|0),($110|0),($__mb$0|0),($111|0),($112|0),($__iob|0),($__fl|0));
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if (!($114)) {
        $115 = ($102|0)==(0|0);
        if (!($115)) {
         _free($102);
        }
        $116 = HEAP8[$__sn>>0]|0;
        $117 = $116 & 1;
        $118 = ($117<<24>>24)==(0);
        if (!($118)) {
         $119 = (($__sn) + 8|0);
         $120 = HEAP32[$119>>2]|0;
         _free($120);
        }
        $121 = HEAP8[$__sym>>0]|0;
        $122 = $121 & 1;
        $123 = ($122<<24>>24)==(0);
        if (!($123)) {
         $124 = (($__sym) + 8|0);
         $125 = HEAP32[$124>>2]|0;
         _free($125);
        }
        $126 = HEAP8[$__grp>>0]|0;
        $127 = $126 & 1;
        $128 = ($127<<24>>24)==(0);
        if (!($128)) {
         $129 = (($__grp) + 8|0);
         $130 = HEAP32[$129>>2]|0;
         _free($130);
        }
        $131 = (($22) + 4|0);
        $132 = HEAP32[$131>>2]|0;HEAP32[$131>>2] = (($132+-1)|0);
        $133 = ($132|0)==(0);
        if ($133) {
         $134 = HEAP32[$22>>2]|0;
         $135 = (($134) + 8|0);
         $136 = HEAP32[$135>>2]|0;
         FUNCTION_TABLE_vi[$136 & 511]($22);
        }
        $137 = ($138|0)==(0|0);
        if ($137) {
         _free($139);
         STACKTOP = sp;return;
        }
        _free($138);
        _free($139);
        STACKTOP = sp;return;
       }
      }
      $99 = ___cxa_find_matching_catch()|0;
      $100 = tempRet0;
      $101 = ($102|0)==(0|0);
      if ($101) {
       $$0 = $99;$$01 = $100;
      } else {
       _free($102);
       $$0 = $99;$$01 = $100;
      }
     }
    } while(0);
    $140 = HEAP8[$__sn>>0]|0;
    $141 = $140 & 1;
    $142 = ($141<<24>>24)==(0);
    if (!($142)) {
     $143 = (($__sn) + 8|0);
     $144 = HEAP32[$143>>2]|0;
     _free($144);
    }
    $145 = HEAP8[$__sym>>0]|0;
    $146 = $145 & 1;
    $147 = ($146<<24>>24)==(0);
    if (!($147)) {
     $148 = (($__sym) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     _free($149);
    }
    $150 = HEAP8[$__grp>>0]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $$1 = $$0;$$12 = $$01;
    } else {
     $153 = (($__grp) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     _free($154);
     $$1 = $$0;$$12 = $$01;
    }
   }
  }
 }
 if ((label|0) == 37) {
  $95 = ___cxa_find_matching_catch()|0;
  $96 = tempRet0;
  $$1 = $95;$$12 = $96;
 }
 $155 = (($22) + 4|0);
 $156 = HEAP32[$155>>2]|0;HEAP32[$155>>2] = (($156+-1)|0);
 $157 = ($156|0)==(0);
 if ($157) {
  $158 = HEAP32[$22>>2]|0;
  $159 = (($158) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  FUNCTION_TABLE_vi[$160 & 511]($22);
 }
 $161 = ($138|0)==(0|0);
 if ($161) {
  $$215 = $$1;$$2314 = $$12;$162 = $139;
  _free($162);
  ___resumeException($$215|0);
  // unreachable;
 }
 _free($138);
 $$215 = $$1;$$2314 = $$12;$162 = $139;
 _free($162);
 ___resumeException($$215|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc$0$0$val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc$0$0$val = $__loc$0$0$val|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$idx = 0, $$idx$val = 0, $$idx7 = 0, $$idx7$val = 0, $$idx8 = 0, $$idx8$val = 0, $$idx9 = 0, $$idx9$val = 0, $$phi$trans$insert1 = 0, $$phi$trans$insert11 = 0, $$phi$trans$insert4 = 0, $$phi$trans$insert8 = 0, $$pre = 0, $$pre10 = 0, $$pre12 = 0, $$pre2 = 0, $$pre3 = 0, $$pre5 = 0, $$pre7 = 0, $$pre9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 92|0;
 $3 = sp;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 $10 = sp + 28|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNSt3__16locale2id5__getEv(6128)|0);
  $$idx8 = (($__loc$0$0$val) + 8|0);
  $$idx8$val = HEAP32[$$idx8>>2]|0;
  $$idx9 = (($__loc$0$0$val) + 12|0);
  $$idx9$val = HEAP32[$$idx9>>2]|0;
  $13 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx8$val,$$idx9$val,$12)|0);
  $14 = HEAP32[$13>>2]|0;
  do {
   if ($__neg) {
    $15 = (($14) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    FUNCTION_TABLE_vii[$16 & 511]($0,$13);
    $17 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$17&255;HEAP8[$__pat+1>>0]=($17>>8)&255;HEAP8[$__pat+2>>0]=($17>>16)&255;HEAP8[$__pat+3>>0]=$17>>24;
    $18 = HEAP32[$13>>2]|0;
    $19 = (($18) + 32|0);
    $20 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_vii[$20 & 511]($1,$13);
    $21 = HEAP8[$__sn>>0]|0;
    $22 = $21 & 1;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $27 = (($__sn) + 4|0);
     HEAP32[$27>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $24 = (($__sn) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     HEAP32[$25>>2] = 0;
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(415,($__sn|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $30 = ___cxa_find_matching_catch(0|0)|0;
     $31 = tempRet0;
     ___clang_call_terminate($30);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     break;
    }
   } else {
    $32 = (($14) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    FUNCTION_TABLE_vii[$33 & 511]($2,$13);
    $34 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$34&255;HEAP8[$__pat+1>>0]=($34>>8)&255;HEAP8[$__pat+2>>0]=($34>>16)&255;HEAP8[$__pat+3>>0]=$34>>24;
    $35 = HEAP32[$13>>2]|0;
    $36 = (($35) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    FUNCTION_TABLE_vii[$37 & 511]($3,$13);
    $38 = HEAP8[$__sn>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $41 = (($__sn) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     HEAP32[$42>>2] = 0;
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(415,($__sn|0));
    $45 = __THREW__; __THREW__ = 0;
    $46 = $45&1;
    if ($46) {
     $47 = ___cxa_find_matching_catch(0|0)|0;
     $48 = tempRet0;
     ___clang_call_terminate($47);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $49 = HEAP32[$13>>2]|0;
  $50 = (($49) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 511]($13)|0);
  HEAP32[$__dp>>2] = $52;
  $53 = HEAP32[$13>>2]|0;
  $54 = (($53) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_ii[$55 & 511]($13)|0);
  HEAP32[$__ts>>2] = $56;
  $57 = HEAP32[$13>>2]|0;
  $58 = (($57) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vii[$59 & 511]($4,$13);
  $60 = HEAP8[$__grp>>0]|0;
  $61 = $60 & 1;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   $66 = (($__grp) + 1|0);
   HEAP8[$66>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $63 = (($__grp) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   HEAP8[$64>>0] = 0;
   $65 = (($__grp) + 4|0);
   HEAP32[$65>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__grp|0));
  $67 = __THREW__; __THREW__ = 0;
  $68 = $67&1;
  if ($68) {
   $69 = ___cxa_find_matching_catch(0|0)|0;
   $70 = tempRet0;
   ___clang_call_terminate($69);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  $$pre = HEAP32[$13>>2]|0;
  $$phi$trans$insert1 = (($$pre) + 24|0);
  $$pre2 = HEAP32[$$phi$trans$insert1>>2]|0;
  FUNCTION_TABLE_vii[$$pre2 & 511]($5,$13);
  $71 = HEAP8[$__sym>>0]|0;
  $72 = $71 & 1;
  $73 = ($72<<24>>24)==(0);
  if ($73) {
   $77 = (($__sym) + 4|0);
   HEAP32[$77>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $74 = (($__sym) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP32[$75>>2] = 0;
   $76 = (($__sym) + 4|0);
   HEAP32[$76>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(415,($__sym|0));
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch(0|0)|0;
   $81 = tempRet0;
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  $$pre3 = HEAP32[$13>>2]|0;
  $$phi$trans$insert4 = (($$pre3) + 36|0);
  $$pre5 = HEAP32[$$phi$trans$insert4>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$$pre5 & 511]($13)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNSt3__16locale2id5__getEv(6064)|0);
  $$idx = (($__loc$0$0$val) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx7 = (($__loc$0$0$val) + 12|0);
  $$idx7$val = HEAP32[$$idx7>>2]|0;
  $84 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx7$val,$83)|0);
  $85 = HEAP32[$84>>2]|0;
  do {
   if ($__neg) {
    $86 = (($85) + 44|0);
    $87 = HEAP32[$86>>2]|0;
    FUNCTION_TABLE_vii[$87 & 511]($6,$84);
    $88 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$88&255;HEAP8[$__pat+1>>0]=($88>>8)&255;HEAP8[$__pat+2>>0]=($88>>16)&255;HEAP8[$__pat+3>>0]=$88>>24;
    $89 = HEAP32[$84>>2]|0;
    $90 = (($89) + 32|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 511]($7,$84);
    $92 = HEAP8[$__sn>>0]|0;
    $93 = $92 & 1;
    $94 = ($93<<24>>24)==(0);
    if ($94) {
     $98 = (($__sn) + 4|0);
     HEAP32[$98>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $95 = (($__sn) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     HEAP32[$96>>2] = 0;
     $97 = (($__sn) + 4|0);
     HEAP32[$97>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(415,($__sn|0));
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     $101 = ___cxa_find_matching_catch(0|0)|0;
     $102 = tempRet0;
     ___clang_call_terminate($101);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     break;
    }
   } else {
    $103 = (($85) + 40|0);
    $104 = HEAP32[$103>>2]|0;
    FUNCTION_TABLE_vii[$104 & 511]($8,$84);
    $105 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$105&255;HEAP8[$__pat+1>>0]=($105>>8)&255;HEAP8[$__pat+2>>0]=($105>>16)&255;HEAP8[$__pat+3>>0]=$105>>24;
    $106 = HEAP32[$84>>2]|0;
    $107 = (($106) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 511]($9,$84);
    $109 = HEAP8[$__sn>>0]|0;
    $110 = $109 & 1;
    $111 = ($110<<24>>24)==(0);
    if ($111) {
     $115 = (($__sn) + 4|0);
     HEAP32[$115>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $112 = (($__sn) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     HEAP32[$113>>2] = 0;
     $114 = (($__sn) + 4|0);
     HEAP32[$114>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vi(415,($__sn|0));
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     $118 = ___cxa_find_matching_catch(0|0)|0;
     $119 = tempRet0;
     ___clang_call_terminate($118);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     break;
    }
   }
  } while(0);
  $120 = HEAP32[$84>>2]|0;
  $121 = (($120) + 12|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 511]($84)|0);
  HEAP32[$__dp>>2] = $123;
  $124 = HEAP32[$84>>2]|0;
  $125 = (($124) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 511]($84)|0);
  HEAP32[$__ts>>2] = $127;
  $128 = HEAP32[$84>>2]|0;
  $129 = (($128) + 20|0);
  $130 = HEAP32[$129>>2]|0;
  FUNCTION_TABLE_vii[$130 & 511]($10,$84);
  $131 = HEAP8[$__grp>>0]|0;
  $132 = $131 & 1;
  $133 = ($132<<24>>24)==(0);
  if ($133) {
   $137 = (($__grp) + 1|0);
   HEAP8[$137>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $134 = (($__grp) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   HEAP8[$135>>0] = 0;
   $136 = (($__grp) + 4|0);
   HEAP32[$136>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(409,($__grp|0));
  $138 = __THREW__; __THREW__ = 0;
  $139 = $138&1;
  if ($139) {
   $140 = ___cxa_find_matching_catch(0|0)|0;
   $141 = tempRet0;
   ___clang_call_terminate($140);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  $$pre7 = HEAP32[$84>>2]|0;
  $$phi$trans$insert8 = (($$pre7) + 24|0);
  $$pre9 = HEAP32[$$phi$trans$insert8>>2]|0;
  FUNCTION_TABLE_vii[$$pre9 & 511]($11,$84);
  $142 = HEAP8[$__sym>>0]|0;
  $143 = $142 & 1;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $148 = (($__sym) + 4|0);
   HEAP32[$148>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $145 = (($__sym) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   HEAP32[$146>>2] = 0;
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vi(415,($__sym|0));
  $149 = __THREW__; __THREW__ = 0;
  $150 = $149&1;
  if ($150) {
   $151 = ___cxa_find_matching_catch(0|0)|0;
   $152 = tempRet0;
   ___clang_call_terminate($151);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  $$pre10 = HEAP32[$84>>2]|0;
  $$phi$trans$insert11 = (($$pre10) + 36|0);
  $$pre12 = HEAP32[$$phi$trans$insert11>>2]|0;
  $153 = (FUNCTION_TABLE_ii[$$pre12 & 511]($84)|0);
  $storemerge = $153;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa45 = 0, $$pn = 0, $$pre = 0, $$promoted4$i$i = 0, $$promoted4$i$i16 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7881 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0;
 var $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$146 = 0, $__gl$057 = 0, $__gl$057$ph = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i17 = 0, $scevgep6$i$i = 0;
 var $scevgep6$i$i20 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $or$cond3 = $40 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($47|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i16 = $47;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i17 = (($47) + ($$sum33<<2)|0);
     $51 = $scevgep$i$i17;
     $52 = (($51) - ($$promoted4$i$i16))|0;
     $53 = $52 >>> 2;
     $$01$i$i19 = $49;$55 = $47;
     while(1) {
      $54 = HEAP32[$55>>2]|0;
      HEAP32[$$01$i$i19>>2] = $54;
      $56 = (($55) + 4|0);
      $57 = (($$01$i$i19) + 4|0);
      $58 = ($56|0)==($46|0);
      if ($58) {
       break;
      } else {
       $$01$i$i19 = $57;$55 = $56;
      }
     }
     $59 = (($53) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($59<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$060;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 511]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$060;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$060) + 4|0);
   $$$0 = $__neg ? $61 : $$060;
   $62 = ($$$0>>>0)<($__de>>>0);
   L32: do {
    if ($62) {
     $__d$034 = $$$0;
     while(1) {
      $65 = HEAP32[$__d$034>>2]|0;
      $66 = HEAP32[$__ct>>2]|0;
      $67 = (($66) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiii[$68 & 511]($__ct,2048,$65)|0);
      $64 = (($__d$034) + 4|0);
      if (!($69)) {
       $__d$0$lcssa = $__d$034;
       break L32;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $70 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($70) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $71 = (($__d$137) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($74) + 4|0);
      HEAP32[$74>>2] = $72;
      $75 = (($__f$038) + -1)|0;
      $76 = ($71>>>0)>($$$0>>>0);
      $77 = ($75|0)>(0);
      $or$cond = $76 & $77;
      if ($or$cond) {
       $74 = $73;$__d$137 = $71;$__f$038 = $75;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $73;
     if ($77) {
      $__d$1$lcssa79 = $71;$__f$0$lcssa77 = $75;
      label = 33;
     } else {
      $78 = (($74) + 8|0);
      HEAP32[$__me>>2] = $78;
      $$lcssa45 = $73;$__d$1$lcssa7881 = $71;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $79 = HEAP32[$__ct>>2]|0;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$81 & 511]($__ct,48)|0);
     $83 = ($__f$0$lcssa77|0)>(0);
     $84 = HEAP32[$__me>>2]|0;
     $85 = (($84) + 4|0);
     HEAP32[$__me>>2] = $85;
     if ($83) {
      $86 = $84;$90 = $85;$__f$146 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$86>>2] = $82;
       $87 = (($__f$146) + -1)|0;
       $88 = ($87|0)>(0);
       $89 = (($90) + 4|0);
       if ($88) {
        $86$phi = $90;$90 = $89;$__f$146 = $87;$86 = $86$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($84) + ($$sum75<<2)|0);
      $scevgep71 = (($84) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa45 = $scevgep71;$__d$1$lcssa7881 = $__d$1$lcssa79;
     } else {
      $$lcssa45 = $84;$__d$1$lcssa7881 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa45>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7881;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $91 = ($__d$2|0)==($$$0|0);
   if ($91) {
    $92 = HEAP32[$__ct>>2]|0;
    $93 = (($92) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_iii[$94 & 511]($__ct,48)|0);
    $96 = HEAP32[$__me>>2]|0;
    $97 = (($96) + 4|0);
    HEAP32[$__me>>2] = $97;
    HEAP32[$96>>2] = $95;
    $139 = $97;
   } else {
    $98 = HEAP8[$__grp>>0]|0;
    $99 = $98 & 1;
    $100 = ($99<<24>>24)==(0);
    if ($100) {
     $102 = $98&255;
     $103 = $102 >>> 1;
     $105 = $103;
    } else {
     $101 = HEAP32[$9>>2]|0;
     $105 = $101;
    }
    $104 = ($105|0)==(0);
    if ($104) {
     $__gl$057$ph = -1;
    } else {
     if ($100) {
      $108 = $7;
     } else {
      $106 = HEAP32[$8>>2]|0;
      $108 = $106;
     }
     $107 = HEAP8[$108>>0]|0;
     $109 = $107 << 24 >> 24;
     $__gl$057$ph = $109;
    }
    $$pre = HEAP32[$__me>>2]|0;
    $112 = $$pre;$__d$354 = $__d$2;$__gl$057 = $__gl$057$ph;$__ig$056 = 0;$__ng$055 = 0;
    while(1) {
     $110 = ($__ng$055|0)==($__gl$057|0);
     if ($110) {
      $111 = (($112) + 4|0);
      HEAP32[$__me>>2] = $111;
      HEAP32[$112>>2] = $__ts;
      $113 = (($__ig$056) + 1)|0;
      $114 = HEAP8[$__grp>>0]|0;
      $115 = $114 & 1;
      $116 = ($115<<24>>24)==(0);
      if ($116) {
       $118 = $114&255;
       $119 = $118 >>> 1;
       $121 = $119;
      } else {
       $117 = HEAP32[$9>>2]|0;
       $121 = $117;
      }
      $120 = ($113>>>0)<($121>>>0);
      if ($120) {
       if ($116) {
        $124 = $7;
       } else {
        $122 = HEAP32[$8>>2]|0;
        $124 = $122;
       }
       $123 = (($124) + ($113)|0);
       $125 = HEAP8[$123>>0]|0;
       $126 = ($125<<24>>24)==(127);
       if ($126) {
        $135 = $111;$__gl$1 = -1;$__ig$1 = $113;$__ng$1 = 0;
       } else {
        if ($116) {
         $129 = $7;
        } else {
         $127 = HEAP32[$8>>2]|0;
         $129 = $127;
        }
        $128 = (($129) + ($113)|0);
        $130 = HEAP8[$128>>0]|0;
        $131 = $130 << 24 >> 24;
        $135 = $111;$__gl$1 = $131;$__ig$1 = $113;$__ng$1 = 0;
       }
      } else {
       $135 = $111;$__gl$1 = $__gl$057;$__ig$1 = $113;$__ng$1 = 0;
      }
     } else {
      $135 = $112;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $132 = (($__d$354) + -4|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($135) + 4|0);
     HEAP32[$__me>>2] = $134;
     HEAP32[$135>>2] = $133;
     $136 = (($__ng$1) + 1)|0;
     $137 = ($132|0)==($$$0|0);
     if ($137) {
      $139 = $134;
      break;
     } else {
      $112 = $134;$__d$354 = $132;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $136;
     }
    }
   }
   $138 = ($60|0)==($139|0);
   if ($138) {
    $$2 = $$$0;
   } else {
    $140 = (($139) + -4|0);
    $141 = ($140>>>0)>($60>>>0);
    if ($141) {
     $$012$i$i = $60;$144 = $140;
     while(1) {
      $142 = HEAP32[$$012$i$i>>2]|0;
      $143 = HEAP32[$144>>2]|0;
      HEAP32[$$012$i$i>>2] = $143;
      HEAP32[$144>>2] = $142;
      $145 = (($$012$i$i) + 4|0);
      $146 = (($144) + -4|0);
      $147 = ($145>>>0)<($146>>>0);
      if ($147) {
       $$012$i$i = $145;$144 = $146;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $148 = (($__p$059) + 1)|0;
  $exitcond = ($148|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $148;
  }
 }
 $149 = HEAP8[$__sn>>0]|0;
 $150 = $149 & 1;
 $151 = ($150<<24>>24)==(0);
 if ($151) {
  $153 = $149&255;
  $154 = $153 >>> 1;
  $156 = $154;
 } else {
  $152 = HEAP32[$0>>2]|0;
  $156 = $152;
 }
 $155 = ($156>>>0)>(1);
 if ($155) {
  if ($151) {
   $159 = $149&255;
   $160 = $159 >>> 1;
   $$pn = $0;$163 = $160;
  } else {
   $157 = HEAP32[$1>>2]|0;
   $158 = HEAP32[$0>>2]|0;
   $$pn = $157;$163 = $158;
  }
  $161 = (($$pn) + 4|0);
  $162 = (($$pn) + ($163<<2)|0);
  $164 = HEAP32[$__me>>2]|0;
  $165 = ($161|0)==($162|0);
  if ($165) {
   $$0$lcssa$i$i = $164;
  } else {
   $$promoted4$i$i = $161;
   $$sum = (($163) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $166 = $scevgep$i$i;
   $167 = (($166) - ($$promoted4$i$i))|0;
   $168 = $167 >>> 2;
   $$01$i$i = $164;$170 = $161;
   while(1) {
    $169 = HEAP32[$170>>2]|0;
    HEAP32[$$01$i$i>>2] = $169;
    $171 = (($170) + 4|0);
    $172 = (($$01$i$i) + 4|0);
    $173 = ($171|0)==($162|0);
    if ($173) {
     break;
    } else {
     $$01$i$i = $172;$170 = $171;
    }
   }
   $174 = (($168) + 1)|0;
   $scevgep6$i$i = (($164) + ($174<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if ((($175|0) == 32)) {
  $176 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $176;
  STACKTOP = sp;return;
 } else if ((($175|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$idx = 0, $$idx$val = 0, $$idx8 = 0, $$idx8$val = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0;
 var $__fd = 0, $__grp = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__pat = sp;
 $__dp = sp + 24|0;
 $__ts = sp + 432|0;
 $__grp = sp + 4|0;
 $__sym = sp + 436|0;
 $__sn = sp + 448|0;
 $__fd = sp + 20|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 28|0;
 $__me = sp + 16|0;
 $0 = (($__iob) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+1)|0);
 __THREW__ = 0;
 $4 = (invoke_ii(380,(6544|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 39;
  } else {
   $$idx = (($1) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$idx8 = (($1) + 12|0);
   $$idx8$val = HEAP32[$$idx8>>2]|0;
   __THREW__ = 0;
   $7 = (invoke_iiii(381,($$idx$val|0),($$idx8$val|0),($4|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    label = 39;
   } else {
    $10 = HEAP8[$__digits>>0]|0;
    $11 = $10 & 1;
    $12 = ($11<<24>>24)==(0);
    if ($12) {
     $15 = $10&255;
     $16 = $15 >>> 1;
     $18 = $16;
    } else {
     $13 = (($__digits) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $18 = $14;
    }
    $17 = ($18|0)==(0);
    if ($17) {
     $31 = 0;
    } else {
     if ($12) {
      $21 = (($__digits) + 4|0);
      $23 = $21;
     } else {
      $19 = (($__digits) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $23 = $20;
     }
     $22 = HEAP32[$23>>2]|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (($24) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     $27 = (invoke_iii($26|0,($7|0),45)|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 39;
      break;
     }
     $30 = ($22|0)==($27|0);
     $31 = $30;
    }
    HEAP32[$__pat>>2] = 0;
    ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
    ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
    ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
    __THREW__ = 0;
    invoke_viiiiiiiiii(421,($__intl|0),($31|0),($1|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    do {
     if ($33) {
      $100 = ___cxa_find_matching_catch()|0;
      $101 = tempRet0;
      $$0 = $100;$$01 = $101;
     } else {
      $34 = HEAP8[$__digits>>0]|0;
      $35 = $34 & 1;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $39 = $34&255;
       $40 = $39 >>> 1;
       $43 = $40;
      } else {
       $37 = (($__digits) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $43 = $38;
      }
      $41 = HEAP32[$__fd>>2]|0;
      $42 = ($43|0)>($41|0);
      if ($42) {
       if ($36) {
        $46 = $34&255;
        $47 = $46 >>> 1;
        $49 = $47;
       } else {
        $44 = (($__digits) + 4|0);
        $45 = HEAP32[$44>>2]|0;
        $49 = $45;
       }
       $48 = (($49) - ($41))|0;
       $50 = $48 << 1;
       $51 = HEAP8[$__sn>>0]|0;
       $52 = $51 & 1;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $56 = $51&255;
        $57 = $56 >>> 1;
        $67 = $57;
       } else {
        $54 = (($__sn) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $67 = $55;
       }
       $58 = HEAP8[$__sym>>0]|0;
       $59 = $58 & 1;
       $60 = ($59<<24>>24)==(0);
       if ($60) {
        $63 = $58&255;
        $64 = $63 >>> 1;
        $69 = $64;
       } else {
        $61 = (($__sym) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $69 = $62;
       }
       $65 = $50 | 1;
       $66 = (($67) + ($65))|0;
       $68 = (($66) + ($69))|0;
       $$pn = $68;
      } else {
       $70 = HEAP8[$__sn>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = $70&255;
        $76 = $75 >>> 1;
        $85 = $76;
       } else {
        $73 = (($__sn) + 4|0);
        $74 = HEAP32[$73>>2]|0;
        $85 = $74;
       }
       $77 = HEAP8[$__sym>>0]|0;
       $78 = $77 & 1;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        $82 = $77&255;
        $83 = $82 >>> 1;
        $87 = $83;
       } else {
        $80 = (($__sym) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        $87 = $81;
       }
       $84 = (($85) + 2)|0;
       $86 = (($84) + ($87))|0;
       $$pn = $86;
      }
      $88 = (($$pn) + ($41))|0;
      $89 = ($88>>>0)>(100);
      if ($89) {
       $90 = $88 << 2;
       $91 = (_malloc($90)|0);
       $92 = ($91|0)==(0|0);
       if ($92) {
        $93 = (___cxa_allocate_exception(4)|0);
        HEAP32[$93>>2] = ((14760 + 8|0));
        __THREW__ = 0;
        invoke_viii(357,($93|0),(14816|0),(323|0));
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         $96 = ___cxa_find_matching_catch()|0;
         $97 = tempRet0;
         $$0 = $96;$$01 = $97;
         break;
        } else {
         // unreachable;
        }
       } else {
        $105 = $91;$__mb$0 = $91;
       }
      } else {
       $105 = 0;$__mb$0 = $__mbuf;
      }
      $106 = (($__iob) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      if ($36) {
       $112 = (($__digits) + 4|0);
       $113 = $34&255;
       $114 = $113 >>> 1;
       $116 = $112;$117 = $114;
      } else {
       $108 = (($__digits) + 8|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($__digits) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $116 = $109;$117 = $111;
      }
      $115 = (($116) + ($117<<2)|0);
      $118 = HEAP32[$__dp>>2]|0;
      $119 = HEAP32[$__ts>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(422,($__mb$0|0),($__mi|0),($__me|0),($107|0),($116|0),($115|0),($7|0),($31|0),($__pat|0),($118|0),($119|0),($__grp|0),($__sym|0),($__sn|0),($41|0));
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if (!($121)) {
       $122 = HEAP32[$__s>>2]|0;
       $123 = HEAP32[$__mi>>2]|0;
       $124 = HEAP32[$__me>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiii(403,($agg$result|0),($122|0),($__mb$0|0),($123|0),($124|0),($__iob|0),($__fl|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if (!($126)) {
        $127 = ($105|0)==(0|0);
        if (!($127)) {
         _free($105);
        }
        $128 = HEAP8[$__sn>>0]|0;
        $129 = $128 & 1;
        $130 = ($129<<24>>24)==(0);
        if (!($130)) {
         $131 = (($__sn) + 8|0);
         $132 = HEAP32[$131>>2]|0;
         _free($132);
        }
        $133 = HEAP8[$__sym>>0]|0;
        $134 = $133 & 1;
        $135 = ($134<<24>>24)==(0);
        if (!($135)) {
         $136 = (($__sym) + 8|0);
         $137 = HEAP32[$136>>2]|0;
         _free($137);
        }
        $138 = HEAP8[$__grp>>0]|0;
        $139 = $138 & 1;
        $140 = ($139<<24>>24)==(0);
        if (!($140)) {
         $141 = (($__grp) + 8|0);
         $142 = HEAP32[$141>>2]|0;
         _free($142);
        }
        $143 = (($1) + 4|0);
        $144 = HEAP32[$143>>2]|0;HEAP32[$143>>2] = (($144+-1)|0);
        $145 = ($144|0)==(0);
        if (!($145)) {
         STACKTOP = sp;return;
        }
        $146 = HEAP32[$1>>2]|0;
        $147 = (($146) + 8|0);
        $148 = HEAP32[$147>>2]|0;
        FUNCTION_TABLE_vi[$148 & 511]($1);
        STACKTOP = sp;return;
       }
      }
      $102 = ___cxa_find_matching_catch()|0;
      $103 = tempRet0;
      $104 = ($105|0)==(0|0);
      if ($104) {
       $$0 = $102;$$01 = $103;
      } else {
       _free($105);
       $$0 = $102;$$01 = $103;
      }
     }
    } while(0);
    $149 = HEAP8[$__sn>>0]|0;
    $150 = $149 & 1;
    $151 = ($150<<24>>24)==(0);
    if (!($151)) {
     $152 = (($__sn) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     _free($153);
    }
    $154 = HEAP8[$__sym>>0]|0;
    $155 = $154 & 1;
    $156 = ($155<<24>>24)==(0);
    if (!($156)) {
     $157 = (($__sym) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     _free($158);
    }
    $159 = HEAP8[$__grp>>0]|0;
    $160 = $159 & 1;
    $161 = ($160<<24>>24)==(0);
    if ($161) {
     $$1 = $$0;$$12 = $$01;
    } else {
     $162 = (($__grp) + 8|0);
     $163 = HEAP32[$162>>2]|0;
     _free($163);
     $$1 = $$0;$$12 = $$01;
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  $98 = ___cxa_find_matching_catch()|0;
  $99 = tempRet0;
  $$1 = $98;$$12 = $99;
 }
 $164 = (($1) + 4|0);
 $165 = HEAP32[$164>>2]|0;HEAP32[$164>>2] = (($165+-1)|0);
 $166 = ($165|0)==(0);
 if (!($166)) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $167 = HEAP32[$1>>2]|0;
 $168 = (($167) + 8|0);
 $169 = HEAP32[$168>>2]|0;
 FUNCTION_TABLE_vi[$169 & 511]($1);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $7;$12 = $9;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $4;$12 = $6;
 }
 $10 = (($11) + ($12)|0);
 $13 = ($11>>>0)<($10>>>0);
 do {
  if ($13) {
   $$01$i7 = $11;
   while(1) {
    $18 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(410,($__ndflt|0),($18|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 12;
     break;
    }
    $21 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($21|0)==($10|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $21;
    }
   }
   if ((label|0) == 12) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $lpad$phi$index = $34;$lpad$phi$index2 = $35;
    label = 14;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $22 = ($__c|0)==(-1);
   $23 = $__c << 1;
   $24 = $23;
   $25 = $22 ? (-1) : $24;
   if ($phitmp18) {
    $62 = $25;
    label = 10;
   } else {
    $26 = (($__ndflt) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $29 = $25;$30 = $27;
    label = 11;
   }
  } else {
   $14 = ($__c|0)==(-1);
   $15 = $__c << 1;
   $16 = $15;
   $17 = $14 ? (-1) : $16;
   $62 = $17;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $28 = (($__ndflt) + 1|0);
  $29 = $62;$30 = $28;
  label = 11;
 }
 L16: do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $31 = (invoke_iiiii(423,($29|0),($__set|0),($__msgid|0),($30|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 14;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $38 = (_strlen(($31|0))|0);
   $39 = (($31) + ($38)|0);
   $40 = ($38|0)>(0);
   L21: do {
    if ($40) {
     $$01$i = $31;
     while(1) {
      $41 = HEAP8[$$01$i>>0]|0;
      __THREW__ = 0;
      invoke_vii(410,($agg$result|0),($41|0));
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       break;
      }
      $44 = (($$01$i) + 1|0);
      $exitcond$i = ($44|0)==($39|0);
      if ($exitcond$i) {
       break L21;
      } else {
       $$01$i = $44;
      }
     }
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP8[$agg$result>>0]|0;
     $48 = $47 & 1;
     $49 = ($48<<24>>24)==(0);
     if ($49) {
      $$01 = $45;$$02 = $46;
      break L16;
     }
     $50 = (($agg$result) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     _free($51);
     $$01 = $45;$$02 = $46;
     break L16;
    }
   } while(0);
   $52 = HEAP8[$__ndflt>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    STACKTOP = sp;return;
   }
   $55 = (($__ndflt) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   _free($56);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 14) {
  $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 }
 $57 = HEAP8[$__ndflt>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if ($59) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $60 = (($__ndflt) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 _free($61);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i21 = 0, $$pre2 = 0, $$pre44 = 0, $$pre9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i20 = 0, $__wn$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond3$i = 0, $or$cond3$i17 = 0, $phitmp = 0, $phitmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((8160 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = $3&255;
  $12 = $11 >>> 1;
  $14 = $10;$15 = $12;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $14 = $7;$15 = $9;
 }
 $13 = (($14) + ($15<<2)|0);
 $16 = $__mb$i11;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = 0;
 $20 = ($14>>>0)<($13>>>0);
 L5: do {
  if ($20) {
   $21 = (($__buf$i13) + 32|0);
   $$05$i16 = $14;$23 = ((8160 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i16;
    $22 = (($23) + 12|0);
    $24 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    $25 = (invoke_iiiiiiiii($24|0,($0|0),($__mb$i11|0),($$05$i16|0),($13|0),($__wn$i|0),($__buf$i13|0),($21|0),($__bn$i14|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     label = 23;
     break;
    }
    $28 = ($25|0)==(2);
    $29 = HEAP32[$__wn$i>>2]|0;
    $30 = ($29|0)==($$05$i16|0);
    $or$cond3$i17 = $28 | $30;
    if ($or$cond3$i17) {
     label = 9;
     break;
    }
    $31 = HEAP32[$__bn$i14>>2]|0;
    $32 = ($__buf$i13>>>0)<($31>>>0);
    if ($32) {
     $__p$04$i20 = $__buf$i13;
     while(1) {
      $35 = HEAP8[$__p$04$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(410,($__ndflt|0),($35|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 22;
       break L7;
      }
      $38 = (($__p$04$i20) + 1|0);
      $39 = HEAP32[$__bn$i14>>2]|0;
      $40 = ($38>>>0)<($39>>>0);
      if ($40) {
       $__p$04$i20 = $38;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $42 = $$pre$i21;
    } else {
     $42 = $29;
    }
    $41 = ($42>>>0)<($13>>>0);
    if (!($41)) {
     label = 16;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i16 = $42;$23 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(408,(7392|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $60 = ___cxa_find_matching_catch()|0;
      $61 = tempRet0;
      $lpad$phi38$index = $60;$lpad$phi38$index3 = $61;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     $$pre2 = HEAP8[$__ndflt>>0]|0;
     $phitmp = $$pre2 & 1;
     $phitmp3 = ($phitmp<<24>>24)==(0);
     $119 = $phitmp3;
     label = 17;
     break L5;
    }
    else if ((label|0) == 22) {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi38$index = $56;$lpad$phi38$index3 = $57;
    }
    else if ((label|0) == 23) {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi38$index = $58;$lpad$phi38$index3 = $59;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
  } else {
   $119 = 1;
   label = 17;
  }
 } while(0);
 L27: do {
  if ((label|0) == 17) {
   $43 = ($__c|0)==(-1);
   $44 = $__c << 1;
   $45 = $44;
   $46 = $43 ? (-1) : $45;
   if ($119) {
    $49 = (($__ndflt) + 1|0);
    $50 = $49;
   } else {
    $47 = (($__ndflt) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $50 = $48;
   }
   __THREW__ = 0;
   $51 = (invoke_iiiii(423,($46|0),($__set|0),($__msgid|0),($50|0))|0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch()|0;
    $55 = tempRet0;
    $$1 = $54;$$13 = $55;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $62 = (($1) + 4|0);
   HEAP32[$62>>2] = 0;
   HEAP32[$1>>2] = ((8264 + 8|0));
   $63 = (_strlen(($51|0))|0);
   $64 = (($51) + ($63)|0);
   $65 = $__mb$i;
   $66 = $65;
   HEAP32[$66>>2] = 0;
   $67 = (($65) + 4)|0;
   $68 = $67;
   HEAP32[$68>>2] = 0;
   $69 = ($63|0)>(0);
   L36: do {
    if ($69) {
     $70 = $64;
     $71 = (($__buf$i) + 128|0);
     $$05$i = $51;$73 = ((8264 + 8|0));
     L38: while(1) {
      HEAP32[$__nn$i>>2] = $$05$i;
      $72 = (($73) + 16|0);
      $74 = HEAP32[$72>>2]|0;
      $75 = $$05$i;
      $76 = (($70) - ($75))|0;
      $77 = ($76|0)>(32);
      $78 = (($$05$i) + 32|0);
      $79 = $77 ? $78 : $64;
      __THREW__ = 0;
      $80 = (invoke_iiiiiiiii($74|0,($1|0),($__mb$i|0),($$05$i|0),($79|0),($__nn$i|0),($__buf$i|0),($71|0),($__bn$i|0))|0);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 42;
       break;
      }
      $83 = ($80|0)==(2);
      $84 = HEAP32[$__nn$i>>2]|0;
      $85 = ($84|0)==($$05$i|0);
      $or$cond3$i = $83 | $85;
      if ($or$cond3$i) {
       label = 31;
       break;
      }
      $86 = HEAP32[$__bn$i>>2]|0;
      $87 = ($__buf$i>>>0)<($86>>>0);
      if ($87) {
       $__p$04$i = $__buf$i;
       while(1) {
        $90 = HEAP32[$__p$04$i>>2]|0;
        __THREW__ = 0;
        invoke_vii(416,($agg$result|0),($90|0));
        $91 = __THREW__; __THREW__ = 0;
        $92 = $91&1;
        if ($92) {
         label = 41;
         break L38;
        }
        $93 = (($__p$04$i) + 4|0);
        $94 = HEAP32[$__bn$i>>2]|0;
        $95 = ($93>>>0)<($94>>>0);
        if ($95) {
         $__p$04$i = $93;
        } else {
         break;
        }
       }
       $$pre9$i = HEAP32[$__nn$i>>2]|0;
       $97 = $$pre9$i;
      } else {
       $97 = $84;
      }
      $96 = ($97>>>0)<($64>>>0);
      if (!($96)) {
       break L36;
      }
      $$pre44 = HEAP32[$1>>2]|0;
      $$05$i = $97;$73 = $$pre44;
     }
     do {
      if ((label|0) == 31) {
       __THREW__ = 0;
       invoke_vi(408,(7392|0));
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        $107 = ___cxa_find_matching_catch()|0;
        $108 = tempRet0;
        $lpad$phi$index = $107;$lpad$phi$index10 = $108;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 41) {
       $103 = ___cxa_find_matching_catch()|0;
       $104 = tempRet0;
       $lpad$phi$index = $103;$lpad$phi$index10 = $104;
      }
      else if ((label|0) == 42) {
       $105 = ___cxa_find_matching_catch()|0;
       $106 = tempRet0;
       $lpad$phi$index = $105;$lpad$phi$index10 = $106;
      }
     } while(0);
     $109 = HEAP8[$agg$result>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
      break L27;
     }
     $112 = (($agg$result) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     _free($113);
     $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
     break L27;
    }
   } while(0);
   $98 = HEAP8[$__ndflt>>0]|0;
   $99 = $98 & 1;
   $100 = ($99<<24>>24)==(0);
   if ($100) {
    STACKTOP = sp;return;
   }
   $101 = (($__ndflt) + 8|0);
   $102 = HEAP32[$101>>2]|0;
   _free($102);
   STACKTOP = sp;return;
  }
 } while(0);
 $114 = HEAP8[$__ndflt>>0]|0;
 $115 = $114 & 1;
 $116 = ($115<<24>>24)==(0);
 if ($116) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $117 = (($__ndflt) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 _free($118);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 HEAP32[$0>>2] = ((14960 + 8|0));
 __THREW__ = 0;
 $1 = (invoke_ii(375,19)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($8|0);
  // unreachable;
 } else {
  $4 = (($0) + 4|0);
  HEAP32[$1>>2] = 6;
  $5 = (($1) + 4|0);
  HEAP32[$5>>2] = 6;
  $6 = (($1) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = (($1) + 12|0);
  ;HEAP8[$7+0>>0]=HEAP8[6440+0>>0]|0;HEAP8[$7+1>>0]=HEAP8[6440+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[6440+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[6440+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[6440+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[6440+5>>0]|0;HEAP8[$7+6>>0]=HEAP8[6440+6>>0]|0;
  HEAP32[$4>>2] = $7;
  HEAP32[$0>>2] = ((15040 + 8|0));
  ___cxa_throw(($0|0),(15088|0),(326|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6472 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(424,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $171 = ___cxa_find_matching_catch()|0;
  $172 = tempRet0;
  $$1 = $172;$$12 = $171;
  ___resumeException($$12|0);
  // unreachable;
 }
 $5 = (($this) + 144|0);
 HEAP8[$5>>0] = 2;
 $6 = (($5) + 1|0);
 HEAP8[$6>>0] = 67;
 $7 = (($5) + 2|0);
 HEAP8[$7>>0] = 0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($this) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==($8|0);
 if (!($11)) {
  $__new_last2$i$i$i = $8;
  $scevgep$i$i$i = (($10) + -4|0);
  $12 = $scevgep$i$i$i;
  $13 = (($12) - ($__new_last2$i$i$i))|0;
  $14 = $13 >>> 2;
  $15 = $14 ^ -1;
  $scevgep4$i$i$i = (($10) + ($15<<2)|0);
  HEAP32[$9>>2] = $scevgep4$i$i$i;
 }
 HEAP32[((11320 + 4|0))>>2] = 0;
 HEAP32[11320>>2] = ((4928 + 8|0));
 __THREW__ = 0;
 $16 = (invoke_ii(380,(4960|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 do {
  if ($18) {
   label = 68;
  } else {
   __THREW__ = 0;
   invoke_viii(425,($this|0),(11320|0),($16|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 68;
   } else {
    HEAP32[((11312 + 4|0))>>2] = 0;
    HEAP32[11312>>2] = ((4968 + 8|0));
    __THREW__ = 0;
    $21 = (invoke_ii(380,(5000|0))|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 68;
    } else {
     __THREW__ = 0;
     invoke_viii(425,($this|0),(11312|0),($21|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 68;
     } else {
      __ZNSt3__15ctypeIcEC2EPKtbj(11296,0,0,1);
      __THREW__ = 0;
      $26 = (invoke_ii(380,(6552|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       label = 68;
      } else {
       __THREW__ = 0;
       invoke_viii(425,($this|0),(11296|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 68;
       } else {
        HEAP32[((11288 + 4|0))>>2] = 0;
        HEAP32[11288>>2] = ((7480 + 8|0));
        __THREW__ = 0;
        $31 = (invoke_ii(380,(6544|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 68;
        } else {
         __THREW__ = 0;
         invoke_viii(425,($this|0),(11288|0),($31|0));
         $34 = __THREW__; __THREW__ = 0;
         $35 = $34&1;
         if ($35) {
          label = 68;
         } else {
          HEAP32[((11280 + 4|0))>>2] = 0;
          HEAP32[11280>>2] = ((7696 + 8|0));
          __THREW__ = 0;
          $36 = (invoke_ii(380,(6616|0))|0);
          $37 = __THREW__; __THREW__ = 0;
          $38 = $37&1;
          if ($38) {
           label = 68;
          } else {
           __THREW__ = 0;
           invoke_viii(425,($this|0),(11280|0),($36|0));
           $39 = __THREW__; __THREW__ = 0;
           $40 = $39&1;
           if ($40) {
            label = 68;
           } else {
            HEAP32[((11264 + 4|0))>>2] = 0;
            HEAP32[11264>>2] = ((6632 + 8|0));
            __THREW__ = 0;
            $41 = (invoke_i(393)|0);
            $42 = __THREW__; __THREW__ = 0;
            $43 = $42&1;
            if ($43) {
             $44 = ___cxa_find_matching_catch()|0;
             $45 = tempRet0;
             $eh$lpad$body$index4Z2D = $45;$eh$lpad$body$indexZ2D = $44;
             break;
            }
            HEAP32[((11264 + 8|0))>>2] = $41;
            __THREW__ = 0;
            $46 = (invoke_ii(380,(6624|0))|0);
            $47 = __THREW__; __THREW__ = 0;
            $48 = $47&1;
            if ($48) {
             label = 68;
            } else {
             __THREW__ = 0;
             invoke_viii(425,($this|0),(11264|0),($46|0));
             $49 = __THREW__; __THREW__ = 0;
             $50 = $49&1;
             if ($50) {
              label = 68;
             } else {
              HEAP32[((11256 + 4|0))>>2] = 0;
              HEAP32[11256>>2] = ((7920 + 8|0));
              __THREW__ = 0;
              $51 = (invoke_ii(380,(6680|0))|0);
              $52 = __THREW__; __THREW__ = 0;
              $53 = $52&1;
              if ($53) {
               label = 68;
              } else {
               __THREW__ = 0;
               invoke_viii(425,($this|0),(11256|0),($51|0));
               $54 = __THREW__; __THREW__ = 0;
               $55 = $54&1;
               if ($55) {
                label = 68;
               } else {
                HEAP32[((11248 + 4|0))>>2] = 0;
                HEAP32[11248>>2] = ((8040 + 8|0));
                __THREW__ = 0;
                $56 = (invoke_ii(380,(6688|0))|0);
                $57 = __THREW__; __THREW__ = 0;
                $58 = $57&1;
                if ($58) {
                 label = 68;
                } else {
                 __THREW__ = 0;
                 invoke_viii(425,($this|0),(11248|0),($56|0));
                 $59 = __THREW__; __THREW__ = 0;
                 $60 = $59&1;
                 if ($60) {
                  label = 68;
                 } else {
                  HEAP32[((11224 + 4|0))>>2] = 0;
                  HEAP32[11224>>2] = ((6712 + 8|0));
                  HEAP8[((11224 + 8|0))>>0] = 46;
                  HEAP8[((11224 + 9|0))>>0] = 44;
                  ;HEAP32[((11224 + 12|0))+0>>2]=0|0;HEAP32[((11224 + 12|0))+4>>2]=0|0;HEAP32[((11224 + 12|0))+8>>2]=0|0;
                  __THREW__ = 0;
                  $61 = (invoke_ii(380,(6696|0))|0);
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if ($63) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11224|0),($61|0));
                  $64 = __THREW__; __THREW__ = 0;
                  $65 = $64&1;
                  if ($65) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11192 + 4|0))>>2] = 0;
                  HEAP32[11192>>2] = ((6752 + 8|0));
                  HEAP32[((11192 + 8|0))>>2] = 46;
                  HEAP32[((11192 + 12|0))>>2] = 44;
                  ;HEAP32[((11192 + 16|0))+0>>2]=0|0;HEAP32[((11192 + 16|0))+4>>2]=0|0;HEAP32[((11192 + 16|0))+8>>2]=0|0;
                  __THREW__ = 0;
                  $66 = (invoke_ii(380,(6704|0))|0);
                  $67 = __THREW__; __THREW__ = 0;
                  $68 = $67&1;
                  if ($68) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11192|0),($66|0));
                  $69 = __THREW__; __THREW__ = 0;
                  $70 = $69&1;
                  if ($70) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11184 + 4|0))>>2] = 0;
                  HEAP32[11184>>2] = ((5008 + 8|0));
                  __THREW__ = 0;
                  $71 = (invoke_ii(380,(5072|0))|0);
                  $72 = __THREW__; __THREW__ = 0;
                  $73 = $72&1;
                  if ($73) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11184|0),($71|0));
                  $74 = __THREW__; __THREW__ = 0;
                  $75 = $74&1;
                  if ($75) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11176 + 4|0))>>2] = 0;
                  HEAP32[11176>>2] = ((5128 + 8|0));
                  __THREW__ = 0;
                  $76 = (invoke_ii(380,(5192|0))|0);
                  $77 = __THREW__; __THREW__ = 0;
                  $78 = $77&1;
                  if ($78) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11176|0),($76|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11168 + 4|0))>>2] = 0;
                  HEAP32[11168>>2] = ((5200 + 8|0));
                  __THREW__ = 0;
                  $81 = (invoke_ii(380,(5256|0))|0);
                  $82 = __THREW__; __THREW__ = 0;
                  $83 = $82&1;
                  if ($83) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11168|0),($81|0));
                  $84 = __THREW__; __THREW__ = 0;
                  $85 = $84&1;
                  if ($85) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11160 + 4|0))>>2] = 0;
                  HEAP32[11160>>2] = ((5288 + 8|0));
                  __THREW__ = 0;
                  $86 = (invoke_ii(380,(5344|0))|0);
                  $87 = __THREW__; __THREW__ = 0;
                  $88 = $87&1;
                  if ($88) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11160|0),($86|0));
                  $89 = __THREW__; __THREW__ = 0;
                  $90 = $89&1;
                  if ($90) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11152 + 4|0))>>2] = 0;
                  HEAP32[11152>>2] = ((5880 + 8|0));
                  __THREW__ = 0;
                  $91 = (invoke_ii(380,(5936|0))|0);
                  $92 = __THREW__; __THREW__ = 0;
                  $93 = $92&1;
                  if ($93) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11152|0),($91|0));
                  $94 = __THREW__; __THREW__ = 0;
                  $95 = $94&1;
                  if ($95) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11144 + 4|0))>>2] = 0;
                  HEAP32[11144>>2] = ((5944 + 8|0));
                  __THREW__ = 0;
                  $96 = (invoke_ii(380,(6000|0))|0);
                  $97 = __THREW__; __THREW__ = 0;
                  $98 = $97&1;
                  if ($98) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11144|0),($96|0));
                  $99 = __THREW__; __THREW__ = 0;
                  $100 = $99&1;
                  if ($100) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11136 + 4|0))>>2] = 0;
                  HEAP32[11136>>2] = ((6008 + 8|0));
                  __THREW__ = 0;
                  $101 = (invoke_ii(380,(6064|0))|0);
                  $102 = __THREW__; __THREW__ = 0;
                  $103 = $102&1;
                  if ($103) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11136|0),($101|0));
                  $104 = __THREW__; __THREW__ = 0;
                  $105 = $104&1;
                  if ($105) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11128 + 4|0))>>2] = 0;
                  HEAP32[11128>>2] = ((6072 + 8|0));
                  __THREW__ = 0;
                  $106 = (invoke_ii(380,(6128|0))|0);
                  $107 = __THREW__; __THREW__ = 0;
                  $108 = $107&1;
                  if ($108) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11128|0),($106|0));
                  $109 = __THREW__; __THREW__ = 0;
                  $110 = $109&1;
                  if ($110) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11120 + 4|0))>>2] = 0;
                  HEAP32[11120>>2] = ((6136 + 8|0));
                  __THREW__ = 0;
                  $111 = (invoke_ii(380,(6168|0))|0);
                  $112 = __THREW__; __THREW__ = 0;
                  $113 = $112&1;
                  if ($113) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11120|0),($111|0));
                  $114 = __THREW__; __THREW__ = 0;
                  $115 = $114&1;
                  if ($115) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11112 + 4|0))>>2] = 0;
                  HEAP32[11112>>2] = ((6216 + 8|0));
                  __THREW__ = 0;
                  $116 = (invoke_ii(380,(6248|0))|0);
                  $117 = __THREW__; __THREW__ = 0;
                  $118 = $117&1;
                  if ($118) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11112|0),($116|0));
                  $119 = __THREW__; __THREW__ = 0;
                  $120 = $119&1;
                  if ($120) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11104 + 4|0))>>2] = 0;
                  HEAP32[11104>>2] = ((6272 + 8|0));
                  __THREW__ = 0;
                  $121 = (invoke_ii(380,(6304|0))|0);
                  $122 = __THREW__; __THREW__ = 0;
                  $123 = $122&1;
                  if ($123) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11104|0),($121|0));
                  $124 = __THREW__; __THREW__ = 0;
                  $125 = $124&1;
                  if ($125) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11096 + 4|0))>>2] = 0;
                  HEAP32[11096>>2] = ((6320 + 8|0));
                  __THREW__ = 0;
                  $126 = (invoke_ii(380,(6352|0))|0);
                  $127 = __THREW__; __THREW__ = 0;
                  $128 = $127&1;
                  if ($128) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11096|0),($126|0));
                  $129 = __THREW__; __THREW__ = 0;
                  $130 = $129&1;
                  if ($130) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11080 + 4|0))>>2] = 0;
                  HEAP32[11080>>2] = ((5368 + 8|0));
                  HEAP32[((11080 + 8|0))>>2] = ((5368 + 56|0));
                  __THREW__ = 0;
                  $131 = (invoke_ii(380,(5456|0))|0);
                  $132 = __THREW__; __THREW__ = 0;
                  $133 = $132&1;
                  if ($133) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11080|0),($131|0));
                  $134 = __THREW__; __THREW__ = 0;
                  $135 = $134&1;
                  if ($135) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11064 + 4|0))>>2] = 0;
                  HEAP32[11064>>2] = ((5520 + 8|0));
                  HEAP32[((11064 + 8|0))>>2] = ((5520 + 56|0));
                  __THREW__ = 0;
                  $136 = (invoke_ii(380,(5608|0))|0);
                  $137 = __THREW__; __THREW__ = 0;
                  $138 = $137&1;
                  if ($138) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11064|0),($136|0));
                  $139 = __THREW__; __THREW__ = 0;
                  $140 = $139&1;
                  if ($140) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11048 + 4|0))>>2] = 0;
                  HEAP32[11048>>2] = ((7416 + 8|0));
                  __THREW__ = 0;
                  $141 = (invoke_i(393)|0);
                  $142 = __THREW__; __THREW__ = 0;
                  $143 = $142&1;
                  if ($143) {
                   $144 = ___cxa_find_matching_catch()|0;
                   $145 = tempRet0;
                   $eh$lpad$body$index4Z2D = $145;$eh$lpad$body$indexZ2D = $144;
                   break;
                  }
                  HEAP32[((11048 + 8|0))>>2] = $141;
                  HEAP32[11048>>2] = ((5816 + 8|0));
                  __THREW__ = 0;
                  $146 = (invoke_ii(380,(5840|0))|0);
                  $147 = __THREW__; __THREW__ = 0;
                  $148 = $147&1;
                  if ($148) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11048|0),($146|0));
                  $149 = __THREW__; __THREW__ = 0;
                  $150 = $149&1;
                  if ($150) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11032 + 4|0))>>2] = 0;
                  HEAP32[11032>>2] = ((7416 + 8|0));
                  __THREW__ = 0;
                  $151 = (invoke_i(393)|0);
                  $152 = __THREW__; __THREW__ = 0;
                  $153 = $152&1;
                  if ($153) {
                   $154 = ___cxa_find_matching_catch()|0;
                   $155 = tempRet0;
                   $eh$lpad$body$index4Z2D = $155;$eh$lpad$body$indexZ2D = $154;
                   break;
                  }
                  HEAP32[((11032 + 8|0))>>2] = $151;
                  HEAP32[11032>>2] = ((5848 + 8|0));
                  __THREW__ = 0;
                  $156 = (invoke_ii(380,(5872|0))|0);
                  $157 = __THREW__; __THREW__ = 0;
                  $158 = $157&1;
                  if ($158) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11032|0),($156|0));
                  $159 = __THREW__; __THREW__ = 0;
                  $160 = $159&1;
                  if ($160) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11024 + 4|0))>>2] = 0;
                  HEAP32[11024>>2] = ((6360 + 8|0));
                  __THREW__ = 0;
                  $161 = (invoke_ii(380,(6392|0))|0);
                  $162 = __THREW__; __THREW__ = 0;
                  $163 = $162&1;
                  if ($163) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11024|0),($161|0));
                  $164 = __THREW__; __THREW__ = 0;
                  $165 = $164&1;
                  if ($165) {
                   label = 68;
                   break;
                  }
                  HEAP32[((11016 + 4|0))>>2] = 0;
                  HEAP32[11016>>2] = ((6400 + 8|0));
                  __THREW__ = 0;
                  $166 = (invoke_ii(380,(6432|0))|0);
                  $167 = __THREW__; __THREW__ = 0;
                  $168 = $167&1;
                  if ($168) {
                   label = 68;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_viii(425,($this|0),(11016|0),($166|0));
                  $169 = __THREW__; __THREW__ = 0;
                  $170 = $169&1;
                  if ($170) {
                   label = 68;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 68) {
  $173 = ___cxa_find_matching_catch()|0;
  $174 = tempRet0;
  $eh$lpad$body$index4Z2D = $174;$eh$lpad$body$indexZ2D = $173;
 }
 $175 = HEAP8[$5>>0]|0;
 $176 = $175 & 1;
 $177 = ($176<<24>>24)==(0);
 if (!($177)) {
  $178 = (($this) + 152|0);
  $179 = HEAP32[$178>>2]|0;
  _free($179);
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 $$1 = $eh$lpad$body$index4Z2D;$$12 = $eh$lpad$body$indexZ2D;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6512>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6512|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_vii(426,(10856|0),1);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((6512|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[6496>>2] = 10856;
     HEAP32[6504>>2] = 6496;
     ___cxa_guard_release((6512|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[6504>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$0$i$i$i38 = 0, $$0$i$i$i4 = 0, $$0$i1$i$i = 0, $$0$i3$i$i = 0, $$not$i$i$i$i$i = 0, $$pre$pre = 0, $$pre1$i$i$i = 0, $$pre2 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $__new_last2$i$i$i = 0, $__v$i$i$sroa$12$0 = 0, $__v$i$i$sroa$20 = 0, $or$cond$i$i$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i$sroa$20 = sp;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)>($id>>>0);
 do {
  if ($10) {
   $81 = $5;
  } else {
   $11 = (($id) + 1)|0;
   $12 = ($11>>>0)>($9>>>0);
   if (!($12)) {
    $65 = ($11>>>0)<($9>>>0);
    if (!($65)) {
     $81 = $5;
     break;
    }
    $66 = (($5) + ($11<<2)|0);
    $67 = ($3|0)==($66|0);
    if ($67) {
     $81 = $5;
     break;
    }
    $__new_last2$i$i$i = $66;
    $scevgep$i$i$i = (($3) + -4|0);
    $68 = $scevgep$i$i$i;
    $69 = (($68) - ($__new_last2$i$i$i))|0;
    $70 = $69 >>> 2;
    $71 = $70 ^ -1;
    $scevgep4$i$i$i = (($3) + ($71<<2)|0);
    HEAP32[$2>>2] = $scevgep4$i$i$i;
    $81 = $5;
    break;
   }
   $13 = (($11) - ($9))|0;
   $14 = (($this) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15;
   $17 = (($16) - ($6))|0;
   $18 = $17 >> 2;
   $19 = ($18>>>0)<($13>>>0);
   L8: do {
    if ($19) {
     $26 = (($this) + 24|0);
     $27 = ($11>>>0)>(1073741823);
     do {
      if ($27) {
       __THREW__ = 0;
       invoke_v(427);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        // unreachable;
       }
      } else {
       $30 = (($16) - ($7))|0;
       $31 = $30 >> 2;
       $32 = ($31>>>0)<(536870911);
       if ($32) {
        $33 = $30 >> 1;
        $34 = ($33>>>0)<($11>>>0);
        $35 = $34 ? $11 : $33;
        HEAP32[$__v$i$i$sroa$20>>2] = 0;
        $36 = ($35|0)==(0);
        if ($36) {
         $$0$i$i$i4 = 0;$45 = 0;
        } else {
         $37 = (($this) + 136|0);
         $38 = HEAP8[$37>>0]|0;
         $$not$i$i$i$i$i = ($38<<24>>24)==(0);
         $39 = ($35>>>0)<(29);
         $or$cond$i$i$i$i$i = $$not$i$i$i$i$i & $39;
         if ($or$cond$i$i$i$i$i) {
          HEAP8[$37>>0] = 1;
          $$0$i$i$i4 = $35;$45 = $26;
         } else {
          $$0$i$i$i38 = $35;
          label = 15;
         }
        }
       } else {
        HEAP32[$__v$i$i$sroa$20>>2] = 0;
        $$0$i$i$i38 = 1073741823;
        label = 15;
       }
       if ((label|0) == 15) {
        $40 = $$0$i$i$i38 << 2;
        __THREW__ = 0;
        $41 = (invoke_ii(375,($40|0))|0);
        $42 = __THREW__; __THREW__ = 0;
        $43 = $42&1;
        if ($43) {
         break;
        }
        $$0$i$i$i4 = $$0$i$i$i38;$45 = $41;
       }
       $44 = (($45) + ($9<<2)|0);
       $46 = (($45) + ($$0$i$i$i4<<2)|0);
       HEAP32[$__v$i$i$sroa$20>>2] = $46;
       $$0$i3$i$i = $13;$__v$i$i$sroa$12$0 = $44;
       while(1) {
        $47 = ($__v$i$i$sroa$12$0|0)==(0|0);
        if ($47) {
         $49 = 0;
        } else {
         HEAP32[$__v$i$i$sroa$12$0>>2] = 0;
         $49 = $__v$i$i$sroa$12$0;
        }
        $48 = (($49) + 4|0);
        $50 = (($$0$i3$i$i) + -1)|0;
        $51 = ($50|0)==(0);
        if ($51) {
         break;
        } else {
         $$0$i3$i$i = $50;$__v$i$i$sroa$12$0 = $48;
        }
       }
       $52 = HEAP32[$4>>2]|0;
       $53 = HEAP32[$2>>2]|0;
       $54 = $53;
       $55 = $52;
       $56 = (($54) - ($55))|0;
       $57 = $56 >> 2;
       $$sum = (($9) - ($57))|0;
       $58 = (($45) + ($$sum<<2)|0);
       _memcpy(($58|0),($52|0),($56|0))|0;
       $59 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = $58;
       HEAP32[$2>>2] = $48;
       $60 = HEAP32[$14>>2]|0;
       $61 = HEAP32[$__v$i$i$sroa$20>>2]|0;
       HEAP32[$14>>2] = $61;
       HEAP32[$__v$i$i$sroa$20>>2] = $60;
       $62 = ($59|0)==(0|0);
       if ($62) {
        break L8;
       }
       $63 = ($26|0)==($59|0);
       if ($63) {
        $64 = (($this) + 136|0);
        HEAP8[$64>>0] = 0;
        break L8;
       } else {
        _free($59);
        break L8;
       }
      }
     } while(0);
     $72 = ___cxa_find_matching_catch()|0;
     $73 = tempRet0;
     $74 = ($f|0)==(0|0);
     if ($74) {
      ___resumeException($72|0);
      // unreachable;
     }
     $75 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($75+-1)|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      ___resumeException($72|0);
      // unreachable;
     }
     $77 = HEAP32[$f>>2]|0;
     $78 = (($77) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     FUNCTION_TABLE_vi[$79 & 511]($f);
     ___resumeException($72|0);
     // unreachable;
    } else {
     $$0$i1$i$i = $13;$21 = $3;
     while(1) {
      $20 = ($21|0)==(0|0);
      if ($20) {
       $23 = 0;
      } else {
       HEAP32[$21>>2] = 0;
       $$pre1$i$i$i = HEAP32[$2>>2]|0;
       $23 = $$pre1$i$i$i;
      }
      $22 = (($23) + 4|0);
      HEAP32[$2>>2] = $22;
      $24 = (($$0$i1$i$i) + -1)|0;
      $25 = ($24|0)==(0);
      if ($25) {
       break;
      } else {
       $$0$i1$i$i = $24;$21 = $22;
      }
     }
    }
   } while(0);
   $$pre$pre = HEAP32[$4>>2]|0;
   $81 = $$pre$pre;
  }
 } while(0);
 $80 = (($81) + ($id<<2)|0);
 $82 = HEAP32[$80>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $91 = $81;
  $90 = (($91) + ($id<<2)|0);
  HEAP32[$90>>2] = $f;
  STACKTOP = sp;return;
 }
 $84 = (($82) + 4|0);
 $85 = HEAP32[$84>>2]|0;HEAP32[$84>>2] = (($85+-1)|0);
 $86 = ($85|0)==(0);
 if ($86) {
  $87 = HEAP32[$82>>2]|0;
  $88 = (($87) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  FUNCTION_TABLE_vi[$89 & 511]($82);
 }
 $$pre2 = HEAP32[$4>>2]|0;
 $91 = $$pre2;
 $90 = (($91) + ($id<<2)|0);
 HEAP32[$90>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6472 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $29 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $17 = $29;$19 = $6;
   } else {
    $9 = (($7) + 4|0);
    $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10+-1)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP32[$7>>2]|0;
     $13 = (($12) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     FUNCTION_TABLE_vi[$14 & 511]($7);
    }
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $17 = $$pre;$19 = $$pre2;
   }
   $15 = (($i$01) + 1)|0;
   $16 = $17;
   $18 = $19;
   $20 = (($16) - ($18))|0;
   $21 = $20 >> 2;
   $22 = ($15>>>0)<($21>>>0);
   if ($22) {
    $29 = $17;$6 = $19;$i$01 = $15;
   } else {
    break;
   }
  }
 }
 $23 = (($this) + 144|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
  STACKTOP = sp;return;
 }
 $27 = (($this) + 152|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this$0$1$0$0$val,$this$0$1$0$1$val,$id) {
 $this$0$1$0$0$val = $this$0$1$0$0$val|0;
 $this$0$1$0$1$val = $this$0$1$0$1$val|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this$0$1$0$1$val;
 $1 = $this$0$1$0$0$val;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>($id>>>0);
 if ($4) {
  $5 = (($this$0$1$0$0$val) + ($id<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   STACKTOP = sp;return ($6|0);
  }
 }
 $8 = (___cxa_allocate_exception(4)|0);
 HEAP32[$8>>2] = ((15144 + 8|0));
 ___cxa_throw(($8|0),(15224|0),(332|0));
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6528|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_i(428)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $13 = ___cxa_find_matching_catch(0|0)|0;
     $14 = tempRet0;
     ___cxa_guard_abort((6528|0));
     ___clang_call_terminate($13);
     // unreachable;
    } else {
     $7 = HEAP32[$4>>2]|0;
     HEAP32[6520>>2] = $7;
     $8 = (($7) + 4|0);
     $9 = HEAP32[$8>>2]|0;HEAP32[$8>>2] = (($9+1)|0);
     ___cxa_guard_release((6528|0));
     break;
    }
   }
  }
 } while(0);
 $10 = HEAP32[6520>>2]|0;
 HEAP32[$this>>2] = $10;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;HEAP32[$11>>2] = (($12+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if ($1) {
  $32 = (($this) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  STACKTOP = sp;return ($34|0);
 }
 (_pthread_mutex_lock((3712|0))|0);
 $2 = HEAP32[$this>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  while(1) {
   (_pthread_cond_wait((3736|0),(3712|0))|0);
   $4 = HEAP32[$this>>2]|0;
   $5 = ($4|0)==(1);
   if (!($5)) {
    break;
   }
  }
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  (_pthread_mutex_unlock((3712|0))|0);
  $32 = (($this) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + -1)|0;
  STACKTOP = sp;return ($34|0);
 }
 HEAP32[$this>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(429,(3712|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZNSt3__16locale2id6__initEv($this);
  __THREW__ = 0;
  (invoke_ii(430,(3712|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   HEAP32[$this>>2] = -1;
   __THREW__ = 0;
   (invoke_ii(429,(3712|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_ii(431,(3736|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     $32 = (($this) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($33) + -1)|0;
     STACKTOP = sp;return ($34|0);
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(430,(3712|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$this>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(429,(3712|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(431,(3736|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(378);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(379);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6536>>2]|0;HEAP32[6536>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(432)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $6 = (invoke_i(432)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    label = 5;
    break;
   }
   $11 = HEAP32[$6>>2]|0;
   $12 = (($11) + ($5<<1)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13;
  } else {
   $14 = 0;
  }
  HEAP16[$$03>>1] = $14;
  $15 = (($$012) + 4|0);
  $16 = (($$03) + 2|0);
  $17 = ($15|0)==($high|0);
  if ($17) {
   break;
  } else {
   $$012 = $15;$$03 = $16;
  }
 }
 if ((label|0) == 5) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$01 = $low;
 }
 while(1) {
  $1 = HEAP32[$$01>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(432)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$01;
    label = 7;
    break;
   }
  }
  $12 = (($$01) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$01 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(432)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($13) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$01 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(433)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0;
 var $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $6 = (invoke_i(433)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    label = 5;
    break;
   }
   $11 = HEAP32[$6>>2]|0;
   $12 = (($11) + ($5<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
  } else {
   $14 = $5;
  }
  HEAP32[$$01>>2] = $14;
  $15 = (($$01) + 4|0);
  $16 = ($15|0)==($high|0);
  if ($16) {
   break;
  } else {
   $$01 = $15;
  }
 }
 if ((label|0) == 5) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(434)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0;
 var $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $6 = (invoke_i(434)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    label = 5;
    break;
   }
   $11 = HEAP32[$6>>2]|0;
   $12 = (($11) + ($5<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13;
  } else {
   $14 = $5;
  }
  HEAP32[$$01>>2] = $14;
  $15 = (($$01) + 4|0);
  $16 = ($15|0)==($high|0);
  if ($16) {
   break;
  } else {
   $$01 = $15;
  }
 }
 if ((label|0) == 5) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $7 = (($$012) + 4|0);
  $8 = (($$03) + 1|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   break;
  } else {
   $$012 = $7;$$03 = $8;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6560 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 $6 = (invoke_i(432)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 }
 $11 = HEAP32[$6>>2]|0;
 HEAP32[$2>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6560 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
 }
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6560 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   _free($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(433)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(433)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$02>>0] = $12;
  $13 = (($$02) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(434)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(434)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$02>>0] = $12;
  $13 = (($$02) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$014$$0$i = 0, $$014$lcssa$i = 0, $$01428$i = 0, $$0148 = 0, $$0247 = 0, $$031$i = 0, $$1$lcssa = 0, $$115$i = 0, $$19 = 0, $$2$i = 0, $$3$i = 0, $$old4$i = 0, $$old7$i = 0, $$pre = 0, $$pre101 = 0, $$pre2 = 0, $$pre98 = 0, $$pre99 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf$i = 0, $cnt$0$lcssa$i = 0, $cnt$029$i = 0, $cnt$2$i = 0, $cnt$3$i = 0, $dst$$i = 0, $fend$0$lcssa = 0, $fend$054 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$$i = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond10$i = 0, $or$cond13$i = 0, $or$cond27$i = 0, $or$cond5$i = 0, $or$cond8$i = 0, $p$012 = 0, $phitmp = 0, $s$0$lcssa$i = 0, $s$030$i = 0, $s$1$i = 0, $s$2$i = 0, $tmp = 0, $ws$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf$i = sp + 8|0;
 $ws$i = sp;
 $tmp = sp + 4|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $100 = $frm;
  } else {
   $fend$054 = $frm;
   while(1) {
    $3 = HEAP32[$fend$054>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$054) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$054;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$054 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $100 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $fend$149;
     $9 = $$0148;
     $10 = (($8) - ($9))|0;
     $11 = $10 >> 2;
     $12 = $$0247;
     $13 = (($6) - ($12))|0;
     $14 = HEAP32[$7>>2]|0;
     $15 = (_uselocale(($14|0))|0);
     $16 = HEAP32[$frm_nxt>>2]|0;
     HEAP32[$ws$i>>2] = $16;
     $17 = ($$0247|0)!=(0|0);
     $n$$i = $17 ? $13 : 256;
     $dst$$i = $17 ? $$0247 : $buf$i;
     $18 = ($16|0)!=(0|0);
     $19 = ($n$$i|0)!=(0);
     $or$cond27$i = $18 & $19;
     L9: do {
      if ($or$cond27$i) {
       $$01428$i = $n$$i;$$031$i = $11;$102 = $16;$cnt$029$i = 0;$s$030$i = $dst$$i;
       while(1) {
        $20 = ($$031$i>>>0)>=($$01428$i>>>0);
        $21 = ($$031$i>>>0)>(32);
        $or$cond13$i = $20 | $21;
        if (!($or$cond13$i)) {
         $$0$lcssa$i = $$031$i;$$014$lcssa$i = $$01428$i;$33 = $102;$cnt$0$lcssa$i = $cnt$029$i;$s$0$lcssa$i = $s$030$i;
         label = 13;
         break L9;
        }
        $$014$$0$i = $20 ? $$01428$i : $$031$i;
        $22 = (($$031$i) - ($$014$$0$i))|0;
        $23 = (_wcsrtombs($s$030$i,$ws$i,$$014$$0$i)|0);
        $24 = ($23|0)==(-1);
        if ($24) {
         $cnt$3$i = -1;
         break L9;
        }
        $25 = ($s$030$i|0)==($buf$i|0);
        if ($25) {
         $$115$i = $$01428$i;$s$1$i = $buf$i;
        } else {
         $26 = (($s$030$i) + ($23)|0);
         $27 = (($$01428$i) - ($23))|0;
         $$115$i = $27;$s$1$i = $26;
        }
        $28 = (($23) + ($cnt$029$i))|0;
        $29 = HEAP32[$ws$i>>2]|0;
        $30 = ($29|0)!=(0|0);
        $31 = ($$115$i|0)!=(0);
        $or$cond$i = $30 & $31;
        if ($or$cond$i) {
         $$01428$i = $$115$i;$$031$i = $22;$102 = $29;$cnt$029$i = $28;$s$030$i = $s$1$i;
        } else {
         $$0$lcssa$i = $22;$$014$lcssa$i = $$115$i;$33 = $29;$cnt$0$lcssa$i = $28;$s$0$lcssa$i = $s$1$i;
         label = 13;
         break;
        }
       }
      } else {
       $$0$lcssa$i = $11;$$014$lcssa$i = $n$$i;$33 = $16;$cnt$0$lcssa$i = 0;$s$0$lcssa$i = $dst$$i;
       label = 13;
      }
     } while(0);
     L17: do {
      if ((label|0) == 13) {
       label = 0;
       $32 = ($33|0)!=(0|0);
       $34 = ($$014$lcssa$i|0)!=(0);
       $or$cond5$i = $32 & $34;
       $35 = ($$0$lcssa$i|0)!=(0);
       $or$cond8$i = $or$cond5$i & $35;
       if ($or$cond8$i) {
        $$2$i = $$0$lcssa$i;$$3$i = $$014$lcssa$i;$37 = $33;$cnt$2$i = $cnt$0$lcssa$i;$s$2$i = $s$0$lcssa$i;
        while(1) {
         $36 = HEAP32[$37>>2]|0;
         $38 = (_wcrtomb($s$2$i,$36)|0);
         $39 = (($38) + 1)|0;
         $40 = ($39>>>0)<(2);
         if ($40) {
          break;
         }
         $42 = (($37) + 4|0);
         HEAP32[$ws$i>>2] = $42;
         $43 = (($$2$i) + -1)|0;
         $44 = (($s$2$i) + ($38)|0);
         $45 = (($$3$i) - ($38))|0;
         $46 = (($cnt$2$i) + 1)|0;
         $$old4$i = ($$3$i|0)!=($38|0);
         $$old7$i = ($43|0)!=(0);
         $or$cond10$i = $$old4$i & $$old7$i;
         if ($or$cond10$i) {
          $$2$i = $43;$$3$i = $45;$37 = $42;$cnt$2$i = $46;$s$2$i = $44;
         } else {
          $cnt$3$i = $46;
          break L17;
         }
        }
        $41 = ($38|0)==(0);
        if ($41) {
         HEAP32[$ws$i>>2] = 0;
         $cnt$3$i = $cnt$2$i;
        } else {
         $cnt$3$i = -1;
        }
       } else {
        $cnt$3$i = $cnt$0$lcssa$i;
       }
      }
     } while(0);
     if ($17) {
      $47 = HEAP32[$ws$i>>2]|0;
      HEAP32[$frm_nxt>>2] = $47;
     }
     $48 = ($15|0)==(0|0);
     if (!($48)) {
      __THREW__ = 0;
      (invoke_ii(405,($15|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 22;
       break;
      }
     }
     if ((($cnt$3$i|0) == -1)) {
      label = 24;
      break;
     } else if ((($cnt$3$i|0) == 0)) {
      $$0 = 1;
      label = 47;
      break;
     }
     $71 = HEAP32[$to_nxt>>2]|0;
     $72 = (($71) + ($cnt$3$i)|0);
     HEAP32[$to_nxt>>2] = $72;
     $73 = ($72|0)==($to_end|0);
     if ($73) {
      label = 45;
      break;
     }
     $74 = ($fend$149|0)==($frm_end|0);
     if ($74) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $97 = $$pre98;$99 = $72;$fend$3 = $frm_end;
     } else {
      $75 = HEAP32[$7>>2]|0;
      $76 = (_uselocale(($75|0))|0);
      HEAP8[$tmp>>0] = 0;
      $77 = ($76|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(405,($76|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 36;
        break;
       }
      }
      $82 = HEAP32[$to_nxt>>2]|0;
      $83 = ($82|0)==($to_end|0);
      if ($83) {
       $$0 = 1;
       label = 47;
       break;
      } else {
       $85 = $82;$86 = 0;$n$011 = 0;$p$012 = $tmp;
      }
      while(1) {
       $84 = (($85) + 1|0);
       HEAP32[$to_nxt>>2] = $84;
       HEAP8[$85>>0] = $86;
       $87 = ($n$011|0)==(0);
       if ($87) {
        break;
       }
       $88 = (($p$012) + 1|0);
       $$pre101 = HEAP32[$to_nxt>>2]|0;
       $phitmp = (($n$011) + -1)|0;
       $$pre2 = HEAP8[$88>>0]|0;
       $85 = $$pre101;$86 = $$pre2;$n$011 = $phitmp;$p$012 = $88;
      }
      $89 = HEAP32[$frm_nxt>>2]|0;
      $90 = (($89) + 4|0);
      HEAP32[$frm_nxt>>2] = $90;
      $91 = ($90|0)==($frm_end|0);
      L42: do {
       if ($91) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $90;
        while(1) {
         $94 = HEAP32[$fend$215>>2]|0;
         $95 = ($94|0)==(0);
         $93 = (($fend$215) + 4|0);
         if ($95) {
          $fend$2$lcssa = $fend$215;
          break L42;
         }
         $92 = ($93|0)==($frm_end|0);
         if ($92) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $93;
         }
        }
       }
      } while(0);
      $$pre99 = HEAP32[$to_nxt>>2]|0;
      $97 = $90;$99 = $$pre99;$fend$3 = $fend$2$lcssa;
     }
     $96 = ($97|0)==($frm_end|0);
     $98 = ($99|0)==($to_end|0);
     $or$cond = $96 | $98;
     if ($or$cond) {
      $100 = $97;
      break L1;
     } else {
      $$0148 = $97;$$0247 = $99;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 22) {
     $51 = ___cxa_find_matching_catch(0|0)|0;
     $52 = tempRet0;
     ___clang_call_terminate($51);
     // unreachable;
    }
    else if ((label|0) == 24) {
     HEAP32[$to_nxt>>2] = $$0247;
     $53 = HEAP32[$frm_nxt>>2]|0;
     $54 = ($$0148|0)==($53|0);
     L51: do {
      if ($54) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$58 = $$0247;
       while(1) {
        $55 = HEAP32[$$19>>2]|0;
        $56 = HEAP32[$7>>2]|0;
        $57 = (_uselocale(($56|0))|0);
        $59 = (_wcrtomb($58,$55)|0);
        $60 = ($57|0)==(0|0);
        if (!($60)) {
         __THREW__ = 0;
         (invoke_ii(405,($57|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
        }
        $65 = ($59|0)==(-1);
        if ($65) {
         $$1$lcssa = $$19;
         break L51;
        }
        $66 = HEAP32[$to_nxt>>2]|0;
        $67 = (($66) + ($59)|0);
        HEAP32[$to_nxt>>2] = $67;
        $68 = (($$19) + 4|0);
        $69 = HEAP32[$frm_nxt>>2]|0;
        $70 = ($68|0)==($69|0);
        if ($70) {
         $$1$lcssa = $68;
         break L51;
        } else {
         $$19 = $68;$58 = $67;
        }
       }
       $63 = ___cxa_find_matching_catch(0|0)|0;
       $64 = tempRet0;
       ___clang_call_terminate($63);
       // unreachable;
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 36) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 45) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $100 = $$pre;
     break;
    }
    else if ((label|0) == 47) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($100|0)!=($frm_end|0);
 $101 = $not$&1;
 $$0 = $101;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$014$$i = 0, $$014$lcssa$i = 0, $$01428$i = 0, $$0155 = 0, $$0254 = 0, $$031$i = 0, $$1$lcssa = 0, $$115 = 0, $$115$i = 0, $$2 = 0, $$2$i = 0, $$3$i = 0, $$old4$i = 0, $$old7$i = 0, $$pre = 0, $$pre114 = 0, $$pre115 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt$0$lcssa$i = 0, $cnt$029$i = 0, $cnt$2$i = 0, $cnt$3$i = 0, $fend$0$lcssa = 0, $fend$061 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$3 = 0, $not$ = 0;
 var $not$3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond10$i = 0, $or$cond13$i = 0, $or$cond27$i = 0, $or$cond5$i = 0, $or$cond8$i = 0, $s$i = 0, $save_state = 0, $storemerge14 = 0, $wbuf$i = 0, $wcs$$i = 0, $wn$$i = 0, $ws$0$lcssa$i = 0, $ws$030$i = 0, $ws$1$i = 0, $ws$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf$i = sp + 16|0;
 $s$i = sp + 8|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $107 = $frm;
  } else {
   $fend$061 = $frm;
   while(1) {
    $3 = HEAP8[$fend$061>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$061) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$061;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$061 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   if ($5) {
    $107 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = HEAP32[$frm_nxt>>2]|0;
     HEAP32[$s$i>>2] = $26;
     $27 = ($$0254|0)!=(0|0);
     $wn$$i = $27 ? $23 : 256;
     $wcs$$i = $27 ? $$0254 : $wbuf$i;
     $28 = ($26|0)!=(0|0);
     $29 = ($wn$$i|0)!=(0);
     $or$cond27$i = $28 & $29;
     L9: do {
      if ($or$cond27$i) {
       $$01428$i = $wn$$i;$$031$i = $20;$109 = $26;$cnt$029$i = 0;$ws$030$i = $wcs$$i;
       while(1) {
        $30 = $$031$i >>> 2;
        $31 = ($30>>>0)>=($$01428$i>>>0);
        $32 = ($$031$i>>>0)>(131);
        $or$cond13$i = $31 | $32;
        if (!($or$cond13$i)) {
         $$0$lcssa$i = $$031$i;$$014$lcssa$i = $$01428$i;$44 = $109;$cnt$0$lcssa$i = $cnt$029$i;$ws$0$lcssa$i = $ws$030$i;
         label = 13;
         break L9;
        }
        $$014$$i = $31 ? $$01428$i : $30;
        $33 = (($$031$i) - ($$014$$i))|0;
        $34 = (_mbsrtowcs($ws$030$i,$s$i,$$014$$i,$st)|0);
        $35 = ($34|0)==(-1);
        if ($35) {
         $cnt$3$i = -1;
         break L9;
        }
        $36 = ($ws$030$i|0)==($wbuf$i|0);
        if ($36) {
         $$115$i = $$01428$i;$ws$1$i = $wbuf$i;
        } else {
         $37 = (($ws$030$i) + ($34<<2)|0);
         $38 = (($$01428$i) - ($34))|0;
         $$115$i = $38;$ws$1$i = $37;
        }
        $39 = (($34) + ($cnt$029$i))|0;
        $40 = HEAP32[$s$i>>2]|0;
        $41 = ($40|0)!=(0|0);
        $42 = ($$115$i|0)!=(0);
        $or$cond$i = $41 & $42;
        if ($or$cond$i) {
         $$01428$i = $$115$i;$$031$i = $33;$109 = $40;$cnt$029$i = $39;$ws$030$i = $ws$1$i;
        } else {
         $$0$lcssa$i = $33;$$014$lcssa$i = $$115$i;$44 = $40;$cnt$0$lcssa$i = $39;$ws$0$lcssa$i = $ws$1$i;
         label = 13;
         break;
        }
       }
      } else {
       $$0$lcssa$i = $20;$$014$lcssa$i = $wn$$i;$44 = $26;$cnt$0$lcssa$i = 0;$ws$0$lcssa$i = $wcs$$i;
       label = 13;
      }
     } while(0);
     L17: do {
      if ((label|0) == 13) {
       label = 0;
       $43 = ($44|0)!=(0|0);
       $45 = ($$014$lcssa$i|0)!=(0);
       $or$cond5$i = $43 & $45;
       $46 = ($$0$lcssa$i|0)!=(0);
       $or$cond8$i = $or$cond5$i & $46;
       if ($or$cond8$i) {
        $$2$i = $$0$lcssa$i;$$3$i = $$014$lcssa$i;$47 = $44;$cnt$2$i = $cnt$0$lcssa$i;$ws$2$i = $ws$0$lcssa$i;
        while(1) {
         $48 = (_mbrtowc($ws$2$i,$47,$$2$i,$st)|0);
         $49 = (($48) + 2)|0;
         $50 = ($49>>>0)<(3);
         if ($50) {
          break;
         }
         $51 = (($47) + ($48)|0);
         HEAP32[$s$i>>2] = $51;
         $52 = (($$2$i) - ($48))|0;
         $53 = (($ws$2$i) + 4|0);
         $54 = (($$3$i) + -1)|0;
         $55 = (($cnt$2$i) + 1)|0;
         $$old4$i = ($54|0)!=(0);
         $$old7$i = ($$2$i|0)!=($48|0);
         $or$cond10$i = $$old4$i & $$old7$i;
         if ($or$cond10$i) {
          $$2$i = $52;$$3$i = $54;$47 = $51;$cnt$2$i = $55;$ws$2$i = $53;
         } else {
          $cnt$3$i = $55;
          break L17;
         }
        }
        if ((($48|0) == 0)) {
         HEAP32[$s$i>>2] = 0;
         $cnt$3$i = $cnt$2$i;
         break;
        } else if ((($48|0) == -1)) {
         $cnt$3$i = -1;
         break;
        } else {
         HEAP32[$st>>2] = 0;
         $cnt$3$i = $cnt$2$i;
         break;
        }
       } else {
        $cnt$3$i = $cnt$0$lcssa$i;
       }
      }
     } while(0);
     if ($27) {
      $56 = HEAP32[$s$i>>2]|0;
      HEAP32[$frm_nxt>>2] = $56;
     }
     $57 = ($25|0)==(0|0);
     if (!($57)) {
      __THREW__ = 0;
      (invoke_ii(405,($25|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 23;
       break;
      }
     }
     if ((($cnt$3$i|0) == -1)) {
      label = 25;
      break;
     } else if ((($cnt$3$i|0) == 0)) {
      $$0 = 2;
      label = 49;
      break;
     }
     $81 = HEAP32[$to_nxt>>2]|0;
     $82 = (($81) + ($cnt$3$i<<2)|0);
     HEAP32[$to_nxt>>2] = $82;
     $83 = ($82|0)==($to_end|0);
     if ($83) {
      label = 47;
      break;
     }
     $84 = ($fend$156|0)==($frm_end|0);
     $$pre114 = HEAP32[$frm_nxt>>2]|0;
     if ($84) {
      $104 = $$pre114;$106 = $82;$fend$3 = $frm_end;
     } else {
      $85 = HEAP32[$7>>2]|0;
      $86 = (_uselocale(($85|0))|0);
      $87 = (_mbrtowc($82,$$pre114,1,$st)|0);
      $88 = ($86|0)==(0|0);
      if (!($88)) {
       __THREW__ = 0;
       (invoke_ii(405,($86|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        label = 40;
        break;
       }
      }
      $93 = ($87|0)==(0);
      if (!($93)) {
       $$0 = 2;
       label = 49;
       break;
      }
      $94 = HEAP32[$to_nxt>>2]|0;
      $95 = (($94) + 4|0);
      HEAP32[$to_nxt>>2] = $95;
      $96 = HEAP32[$frm_nxt>>2]|0;
      $97 = (($96) + 1|0);
      HEAP32[$frm_nxt>>2] = $97;
      $98 = ($97|0)==($frm_end|0);
      L41: do {
       if ($98) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $97;
        while(1) {
         $101 = HEAP8[$fend$216>>0]|0;
         $102 = ($101<<24>>24)==(0);
         $100 = (($fend$216) + 1|0);
         if ($102) {
          $fend$2$lcssa = $fend$216;
          break L41;
         }
         $99 = ($100|0)==($frm_end|0);
         if ($99) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $100;
         }
        }
       }
      } while(0);
      $$pre115 = HEAP32[$to_nxt>>2]|0;
      $104 = $97;$106 = $$pre115;$fend$3 = $fend$2$lcssa;
     }
     $103 = ($104|0)==($frm_end|0);
     $105 = ($106|0)==($to_end|0);
     $or$cond = $103 | $105;
     if ($or$cond) {
      $107 = $104;
      break L1;
     } else {
      $$0155 = $104;$$0254 = $106;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 23) {
     $60 = ___cxa_find_matching_catch(0|0)|0;
     $61 = tempRet0;
     ___clang_call_terminate($60);
     // unreachable;
    }
    else if ((label|0) == 25) {
     HEAP32[$to_nxt>>2] = $$0254;
     $62 = HEAP32[$frm_nxt>>2]|0;
     $63 = ($$0155|0)==($62|0);
     L51: do {
      if ($63) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $64 = $$115;
        $65 = (($18) - ($64))|0;
        $66 = HEAP32[$7>>2]|0;
        $67 = (_uselocale(($66|0))|0);
        $68 = (_mbrtowc($storemerge14,$$115,$65,$save_state)|0);
        $69 = ($67|0)==(0|0);
        if (!($69)) {
         __THREW__ = 0;
         (invoke_ii(405,($67|0))|0);
         $70 = __THREW__; __THREW__ = 0;
         $71 = $70&1;
         if ($71) {
          label = 28;
          break;
         }
        }
        if ((($68|0) == -2)) {
         label = 32;
         break;
        } else if ((($68|0) == 0)) {
         $74 = (($$115) + 1|0);
         $$2 = $74;
        } else if ((($68|0) == -1)) {
         label = 31;
         break;
        } else {
         $75 = (($$115) + ($68)|0);
         $$2 = $75;
        }
        $76 = HEAP32[$to_nxt>>2]|0;
        $77 = (($76) + 4|0);
        HEAP32[$to_nxt>>2] = $77;
        $78 = HEAP32[$frm_nxt>>2]|0;
        $79 = ($$2|0)==($78|0);
        if ($79) {
         $$1$lcssa = $$2;
         break L51;
        } else {
         $$115 = $$2;$storemerge14 = $77;
        }
       }
       if ((label|0) == 28) {
        $72 = ___cxa_find_matching_catch(0|0)|0;
        $73 = tempRet0;
        ___clang_call_terminate($72);
        // unreachable;
       }
       else if ((label|0) == 31) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 32) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $80 = $not$3&1;
     $$0 = $80;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 40) {
     $91 = ___cxa_find_matching_catch(0|0)|0;
     $92 = tempRet0;
     ___clang_call_terminate($91);
     // unreachable;
    }
    else if ((label|0) == 47) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $107 = $$pre;
     break;
    }
    else if ((label|0) == 49) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($107|0)!=($frm_end|0);
 $108 = $not$&1;
 $$0 = $108;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return 0;
 }
 __THREW__ = 0;
 (invoke_ii(405,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(405,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if (!($5)) {
  __THREW__ = 0;
  (invoke_ii(405,($2|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $8 = ___cxa_find_matching_catch(0|0)|0;
   $9 = tempRet0;
   ___clang_call_terminate($8);
   // unreachable;
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 $12 = (invoke_ii(405,($10|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $15 = ($12|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __THREW__ = 0;
 (invoke_ii(405,($12|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $4 = ($st|0)!=(0|0);
 $5 = $4 ? $st : 14376;
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $6 = $$016;
  $7 = (($2) - ($6))|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = (_uselocale(($8|0))|0);
  $10 = (_mbrtowc(0,$$016,$7,$5)|0);
  $11 = ($9|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(405,($9|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 5;
    break;
   }
  }
  if ((($10|0) == -2) | (($10|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 10;
   break;
  } else if ((($10|0) == 0)) {
   $16 = (($$016) + 1|0);
   $$1 = $16;$$pn = 1;
  } else {
   $17 = (($$016) + ($10)|0);
   $$1 = $17;$$pn = $10;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $18 = (($nwchar_t$08) + 1)|0;
  $19 = ($18>>>0)>=($mx>>>0);
  $20 = ($$1|0)==($frm_end|0);
  $or$cond = $19 | $20;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 10;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $18;
  }
 }
 if ((label|0) == 5) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 10) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(405,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(405,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $frm_end;
 $2 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($2) {
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = HEAP16[$_frm_nxt$0>>1]|0;
    $5 = $4&65535;
    $6 = ($4&65535)<(128);
    do {
     if ($6) {
      $7 = $_to_nxt$0;
      $8 = (($3) - ($7))|0;
      $9 = ($8|0)<(1);
      if ($9) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $10 = $4&255;
      $11 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $10;
      $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $11;
     } else {
      $12 = ($4&65535)<(2048);
      if ($12) {
       $13 = $_to_nxt$0;
       $14 = (($3) - ($13))|0;
       $15 = ($14|0)<(2);
       if ($15) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $16 = $5 >>> 6;
       $17 = $16 | 192;
       $18 = $17&255;
       $19 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $18;
       $20 = $5 & 63;
       $21 = $20 | 128;
       $22 = $21&255;
       $23 = (($_to_nxt$0) + 2|0);
       HEAP8[$19>>0] = $22;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $23;
       break;
      }
      $24 = ($4&65535)<(55296);
      if ($24) {
       $25 = $_to_nxt$0;
       $26 = (($3) - ($25))|0;
       $27 = ($26|0)<(3);
       if ($27) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $28 = $5 >>> 12;
       $29 = $28 | 224;
       $30 = $29&255;
       $31 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $30;
       $32 = $5 >>> 6;
       $33 = $32 & 63;
       $34 = $33 | 128;
       $35 = $34&255;
       $36 = (($_to_nxt$0) + 2|0);
       HEAP8[$31>>0] = $35;
       $37 = $5 & 63;
       $38 = $37 | 128;
       $39 = $38&255;
       $40 = (($_to_nxt$0) + 3|0);
       HEAP8[$36>>0] = $39;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $40;
       break;
      }
      $41 = ($4&65535)<(56320);
      if (!($41)) {
       $83 = ($4&65535)<(57344);
       if ($83) {
        $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $84 = $_to_nxt$0;
       $85 = (($3) - ($84))|0;
       $86 = ($85|0)<(3);
       if ($86) {
        $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $87 = $5 >>> 12;
       $88 = $87 | 224;
       $89 = $88&255;
       $90 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $89;
       $91 = $5 >>> 6;
       $92 = $91 & 63;
       $93 = $92 | 128;
       $94 = $93&255;
       $95 = (($_to_nxt$0) + 2|0);
       HEAP8[$90>>0] = $94;
       $96 = $5 & 63;
       $97 = $96 | 128;
       $98 = $97&255;
       $99 = (($_to_nxt$0) + 3|0);
       HEAP8[$95>>0] = $98;
       $_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$1 = $99;
       break;
      }
      $42 = $_frm_nxt$0;
      $43 = (($1) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $45 = (($_frm_nxt$0) + 2|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = $47 & 64512;
      $49 = ($48|0)==(56320);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_to_nxt$0;
      $51 = (($3) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = $5 & 960;
      $54 = $53 << 10;
      $55 = (($54) + 65536)|0;
      $56 = ($55>>>0)>(1114111);
      if ($56) {
       $$0$i = 2;$_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $57 = $53 >>> 6;
      $58 = (($57) + 1)|0;
      $59 = $58 >>> 2;
      $60 = $59 | 240;
      $61 = $60&255;
      $62 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $61;
      $63 = $58 << 4;
      $64 = $63 & 48;
      $65 = $5 >>> 2;
      $66 = $65 & 15;
      $67 = $66 | $64;
      $68 = $67 | 128;
      $69 = $68&255;
      $70 = (($_to_nxt$0) + 2|0);
      HEAP8[$62>>0] = $69;
      $71 = $5 << 4;
      $72 = $71 & 48;
      $73 = $47 >>> 6;
      $74 = $73 & 15;
      $75 = $72 | $74;
      $76 = $75 | 128;
      $77 = $76&255;
      $78 = (($_to_nxt$0) + 3|0);
      HEAP8[$70>>0] = $77;
      $79 = $47 & 63;
      $80 = $79 | 128;
      $81 = $80&255;
      $82 = (($_to_nxt$0) + 4|0);
      HEAP8[$78>>0] = $81;
      $_frm_nxt$1 = $45;$_to_nxt$1 = $82;
     }
    } while(0);
    $100 = (($_frm_nxt$1) + 2|0);
    $101 = ($100>>>0)<($frm_end>>>0);
    if ($101) {
     $_frm_nxt$0 = $100;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$2 = $100;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $102 = $_frm_nxt$2;
 $103 = $frm;
 $104 = (($102) - ($103))|0;
 $105 = $104 >> 1;
 $106 = (($frm) + ($105<<1)|0);
 HEAP32[$frm_nxt>>2] = $106;
 $107 = $_to_nxt$2;
 $108 = $to;
 $109 = (($107) - ($108))|0;
 $110 = (($to) + ($109)|0);
 HEAP32[$to_nxt>>2] = $110;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_frm_nxt$0 = 0;
 var $_frm_nxt$1 = 0, $_frm_nxt$2 = 0, $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $_to_nxt$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $3 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $4 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($4)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     label = 31;
     break L1;
    }
    $5 = HEAP8[$_frm_nxt$0>>0]|0;
    $6 = $5&255;
    $7 = ($5<<24>>24)>(-1);
    do {
     if ($7) {
      $8 = $5&255;
      HEAP16[$_to_nxt$0>>1] = $8;
      $9 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $9;$_to_nxt$1 = $_to_nxt$0;
     } else {
      $10 = ($5&255)<(194);
      if ($10) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $11 = ($5&255)<(224);
      if ($11) {
       $12 = $_frm_nxt$0;
       $13 = (($2) - ($12))|0;
       $14 = ($13|0)<(2);
       if ($14) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $15 = (($_frm_nxt$0) + 1|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = $16&255;
       $18 = $17 & 192;
       $19 = ($18|0)==(128);
       if (!($19)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $20 = $6 << 6;
       $21 = $17 & 63;
       $22 = $20 & 1984;
       $23 = $21 | $22;
       $24 = $23&65535;
       HEAP16[$_to_nxt$0>>1] = $24;
       $25 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $25;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $26 = ($5&255)<(240);
      if ($26) {
       $27 = $_frm_nxt$0;
       $28 = (($2) - ($27))|0;
       $29 = ($28|0)<(3);
       if ($29) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $30 = (($_frm_nxt$0) + 1|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = (($_frm_nxt$0) + 2|0);
       $33 = HEAP8[$32>>0]|0;
       if ((($6|0) == 237)) {
        $36 = $31 & -32;
        $37 = ($36<<24>>24)==(-128);
        if (!($37)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else if ((($6|0) == 224)) {
        $34 = $31 & -32;
        $35 = ($34<<24>>24)==(-96);
        if (!($35)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       } else {
        $38 = $31 & -64;
        $39 = ($38<<24>>24)==(-128);
        if (!($39)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
         break L1;
        }
       }
       $40 = $33&255;
       $41 = $40 & 192;
       $42 = ($41|0)==(128);
       if (!($42)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
       $43 = $6 << 12;
       $44 = $31&255;
       $45 = $44 << 6;
       $46 = $45 & 4032;
       $47 = $46 | $43;
       $48 = $40 & 63;
       $49 = $47 | $48;
       $50 = $49&65535;
       HEAP16[$_to_nxt$0>>1] = $50;
       $51 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $51;$_to_nxt$1 = $_to_nxt$0;
       break;
      }
      $52 = ($5&255)<(245);
      if (!($52)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $53 = $_frm_nxt$0;
      $54 = (($2) - ($53))|0;
      $55 = ($54|0)<(4);
      if ($55) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $56 = (($_frm_nxt$0) + 1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = (($_frm_nxt$0) + 2|0);
      $59 = HEAP8[$58>>0]|0;
      $60 = (($_frm_nxt$0) + 3|0);
      $61 = HEAP8[$60>>0]|0;
      if ((($6|0) == 244)) {
       $63 = $57 & -16;
       $64 = ($63<<24>>24)==(-128);
       if (!($64)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else if ((($6|0) == 240)) {
       $$off$i = (($57) + 112)<<24>>24;
       $62 = ($$off$i&255)<(48);
       if (!($62)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      } else {
       $65 = $57 & -64;
       $66 = ($65<<24>>24)==(-128);
       if (!($66)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
        break L1;
       }
      }
      $67 = $59&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $70 = $61&255;
      $71 = $70 & 192;
      $72 = ($71|0)==(128);
      if (!($72)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $73 = $_to_nxt$0;
      $74 = (($3) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $76 = $6 & 7;
      $77 = $76 << 18;
      $78 = $57&255;
      $79 = $78 << 12;
      $80 = $79 & 196608;
      $81 = $80 | $77;
      $82 = ($81>>>0)>(1114111);
      if ($82) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$3 = $_to_nxt$0;
       break L1;
      }
      $83 = $70 & 63;
      $84 = $67 << 6;
      $85 = $76 << 2;
      $86 = $78 >>> 4;
      $87 = $86 & 3;
      $88 = $87 | $85;
      $89 = $88 << 6;
      $90 = (($89) + 16320)|0;
      $91 = $78 << 2;
      $92 = $91 & 60;
      $93 = $67 >>> 4;
      $94 = $93 & 3;
      $95 = $92 | $94;
      $96 = $95 | $90;
      $97 = $96 | 55296;
      $98 = $97&65535;
      HEAP16[$_to_nxt$0>>1] = $98;
      $99 = $84 & 960;
      $100 = $83 | $99;
      $101 = $100 | 56320;
      $102 = $101&65535;
      $103 = (($_to_nxt$0) + 2|0);
      HEAP16[$103>>1] = $102;
      $104 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $104;$_to_nxt$1 = $103;
     }
    } while(0);
    $105 = (($_to_nxt$1) + 2|0);
    $106 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($106) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $105;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$2 = $105;
     label = 31;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$2 = $to;
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $107 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $108 = $107&1;
  $$0$i = $108;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$3 = $_to_nxt$2;
 }
 $109 = $_frm_nxt$3;
 $110 = $frm;
 $111 = (($109) - ($110))|0;
 $112 = (($frm) + ($111)|0);
 HEAP32[$frm_nxt>>2] = $112;
 $113 = $_to_nxt$3;
 $114 = $to;
 $115 = (($113) - ($114))|0;
 $116 = $115 >> 1;
 $117 = (($to) + ($116<<1)|0);
 HEAP32[$to_nxt>>2] = $117;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $9 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$117$i = 0, $frm_nxt$2$i = 0, $nchar16_t$016$i = 0, $nchar16_t$1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15$i = 0, $or$cond2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond15$i = $1 & $2;
 L1: do {
  if ($or$cond15$i) {
   $3 = $frm_end;
   $frm_nxt$117$i = $frm;$nchar16_t$016$i = 0;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$117$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$117$i) + 1|0);
      $frm_nxt$2$i = $7;$nchar16_t$1$i = $nchar16_t$016$i;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$117$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
        break L1;
       }
       $13 = (($frm_nxt$117$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
        break L1;
       }
       $17 = (($frm_nxt$117$i) + 2|0);
       $frm_nxt$2$i = $17;$nchar16_t$1$i = $nchar16_t$016$i;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$117$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
        break L1;
       }
       $22 = (($frm_nxt$117$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$117$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
        break L1;
       }
       $40 = (($frm_nxt$117$i) + 3|0);
       $frm_nxt$2$i = $40;$nchar16_t$1$i = $nchar16_t$016$i;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
       break L1;
      }
      $42 = $frm_nxt$117$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      $45 = (($mx) - ($nchar16_t$016$i))|0;
      $46 = ($45>>>0)<(2);
      $or$cond2$i = $44 | $46;
      if ($or$cond2$i) {
       $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
       break L1;
      }
      $47 = (($frm_nxt$117$i) + 1|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$117$i) + 2|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = (($frm_nxt$117$i) + 3|0);
      $52 = HEAP8[$51>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($48) + 112)<<24>>24;
       $53 = ($$off$i&255)<(48);
       if (!($53)) {
        label = 25;
        break L3;
       }
      } else if ((($5|0) == 244)) {
       $56 = $48 & -16;
       $57 = ($56<<24>>24)==(-128);
       if (!($57)) {
        label = 27;
        break L3;
       }
      } else {
       $60 = $48 & -64;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        label = 29;
        break L3;
       }
      }
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      $66 = $52 & -64;
      $67 = ($66<<24>>24)==(-128);
      $or$cond = $65 & $67;
      if (!($or$cond)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
       break L1;
      }
      $68 = $5 << 18;
      $69 = $68 & 1835008;
      $70 = $48&255;
      $71 = $70 << 12;
      $72 = $71 & 196608;
      $73 = $72 | $69;
      $74 = ($73>>>0)>(1114111);
      if ($74) {
       $frm_nxt$1$lcssa$i = $frm_nxt$117$i;
       break L1;
      }
      $75 = (($nchar16_t$016$i) + 1)|0;
      $76 = (($frm_nxt$117$i) + 4|0);
      $frm_nxt$2$i = $76;$nchar16_t$1$i = $75;
     }
    } while(0);
    $77 = (($nchar16_t$1$i) + 1)|0;
    $78 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $79 = ($77>>>0)<($mx>>>0);
    $or$cond$i = $78 & $79;
    if ($or$cond$i) {
     $frm_nxt$117$i = $frm_nxt$2$i;$nchar16_t$016$i = $77;
    } else {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 25) {
    $54 = $frm;
    $55 = (($42) - ($54))|0;
    $$0$i = $55;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 27) {
    $58 = $frm;
    $59 = (($42) - ($58))|0;
    $$0$i = $59;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 29) {
    $62 = $frm;
    $63 = (($42) - ($62))|0;
    $$0$i = $63;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $80 = $frm_nxt$1$lcssa$i;
 $81 = $frm;
 $82 = (($80) - ($81))|0;
 $$0$i = $82;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $to_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = HEAP32[$_frm_nxt$0>>2]|0;
    $4 = $3 & -2048;
    $5 = ($4|0)==(55296);
    $6 = ($3>>>0)>(1114111);
    $or$cond$i = $5 | $6;
    if ($or$cond$i) {
     $$0$i = 2;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
     break L1;
    }
    $7 = ($3>>>0)<(128);
    do {
     if ($7) {
      $8 = $_to_nxt$0;
      $9 = (($2) - ($8))|0;
      $10 = ($9|0)<(1);
      if ($10) {
       $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $11 = $3&255;
      $12 = (($_to_nxt$0) + 1|0);
      HEAP8[$_to_nxt$0>>0] = $11;
      $_to_nxt$1 = $12;
     } else {
      $13 = ($3>>>0)<(2048);
      if ($13) {
       $14 = $_to_nxt$0;
       $15 = (($2) - ($14))|0;
       $16 = ($15|0)<(2);
       if ($16) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $17 = $3 >>> 6;
       $18 = $17 | 192;
       $19 = $18&255;
       $20 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $19;
       $21 = $3 & 63;
       $22 = $21 | 128;
       $23 = $22&255;
       $24 = (($_to_nxt$0) + 2|0);
       HEAP8[$20>>0] = $23;
       $_to_nxt$1 = $24;
       break;
      }
      $25 = ($3>>>0)<(65536);
      $26 = $_to_nxt$0;
      $27 = (($2) - ($26))|0;
      if ($25) {
       $28 = ($27|0)<(3);
       if ($28) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $29 = $3 >>> 12;
       $30 = $29 | 224;
       $31 = $30&255;
       $32 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $31;
       $33 = $3 >>> 6;
       $34 = $33 & 63;
       $35 = $34 | 128;
       $36 = $35&255;
       $37 = (($_to_nxt$0) + 2|0);
       HEAP8[$32>>0] = $36;
       $38 = $3 & 63;
       $39 = $38 | 128;
       $40 = $39&255;
       $41 = (($_to_nxt$0) + 3|0);
       HEAP8[$37>>0] = $40;
       $_to_nxt$1 = $41;
       break;
      } else {
       $42 = ($27|0)<(4);
       if ($42) {
        $$0$i = 1;$_frm_nxt$1 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $43 = $3 >>> 18;
       $44 = $43 | 240;
       $45 = $44&255;
       $46 = (($_to_nxt$0) + 1|0);
       HEAP8[$_to_nxt$0>>0] = $45;
       $47 = $3 >>> 12;
       $48 = $47 & 63;
       $49 = $48 | 128;
       $50 = $49&255;
       $51 = (($_to_nxt$0) + 2|0);
       HEAP8[$46>>0] = $50;
       $52 = $3 >>> 6;
       $53 = $52 & 63;
       $54 = $53 | 128;
       $55 = $54&255;
       $56 = (($_to_nxt$0) + 3|0);
       HEAP8[$51>>0] = $55;
       $57 = $3 & 63;
       $58 = $57 | 128;
       $59 = $58&255;
       $60 = (($_to_nxt$0) + 4|0);
       HEAP8[$56>>0] = $59;
       $_to_nxt$1 = $60;
       break;
      }
     }
    } while(0);
    $61 = (($_frm_nxt$0) + 4|0);
    $62 = ($61>>>0)<($frm_end>>>0);
    if ($62) {
     $_frm_nxt$0 = $61;$_to_nxt$0 = $_to_nxt$1;
    } else {
     $$0$i = 0;$_frm_nxt$1 = $61;$_to_nxt$2 = $_to_nxt$1;
     break;
    }
   }
  } else {
   $$0$i = 0;$_frm_nxt$1 = $frm;$_to_nxt$2 = $to;
  }
 } while(0);
 $63 = $_frm_nxt$1;
 $64 = $frm;
 $65 = (($63) - ($64))|0;
 $66 = $65 >> 2;
 $67 = (($frm) + ($66<<2)|0);
 HEAP32[$frm_nxt>>2] = $67;
 $68 = $_to_nxt$2;
 $69 = $to;
 $70 = (($68) - ($69))|0;
 $71 = (($to) + ($70)|0);
 HEAP32[$to_nxt>>2] = $71;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $_frm_nxt$0 = 0, $_frm_nxt$1 = 0, $_frm_nxt$2 = 0;
 var $_frm_nxt$3 = 0, $_to_nxt$0 = 0, $_to_nxt$1 = 0, $_to_nxt$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 L1: do {
  if ($1) {
   $2 = $frm_end;
   $_frm_nxt$0 = $frm;$_to_nxt$0 = $to;
   while(1) {
    $3 = ($_to_nxt$0>>>0)<($to_end>>>0);
    if (!($3)) {
     $_frm_nxt$2 = $_frm_nxt$0;$_to_nxt$1 = $_to_nxt$0;
     label = 30;
     break L1;
    }
    $4 = HEAP8[$_frm_nxt$0>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      HEAP32[$_to_nxt$0>>2] = $5;
      $7 = (($_frm_nxt$0) + 1|0);
      $_frm_nxt$1 = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $_frm_nxt$0;
       $11 = (($2) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $13 = (($_frm_nxt$0) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14&255;
       $16 = $15 & 192;
       $17 = ($16|0)==(128);
       if (!($17)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $18 = $5 << 6;
       $19 = $15 & 63;
       $20 = $18 & 1984;
       $21 = $19 | $20;
       HEAP32[$_to_nxt$0>>2] = $21;
       $22 = (($_frm_nxt$0) + 2|0);
       $_frm_nxt$1 = $22;
       break;
      }
      $23 = ($4&255)<(240);
      if ($23) {
       $24 = $_frm_nxt$0;
       $25 = (($2) - ($24))|0;
       $26 = ($25|0)<(3);
       if ($26) {
        $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $27 = (($_frm_nxt$0) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = (($_frm_nxt$0) + 2|0);
       $30 = HEAP8[$29>>0]|0;
       if ((($5|0) == 224)) {
        $31 = $28 & -32;
        $32 = ($31<<24>>24)==(-96);
        if (!($32)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else if ((($5|0) == 237)) {
        $33 = $28 & -32;
        $34 = ($33<<24>>24)==(-128);
        if (!($34)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       } else {
        $35 = $28 & -64;
        $36 = ($35<<24>>24)==(-128);
        if (!($36)) {
         $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
         break L1;
        }
       }
       $37 = $30&255;
       $38 = $37 & 192;
       $39 = ($38|0)==(128);
       if (!($39)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
       $40 = $28&255;
       $41 = $40 << 6;
       $42 = $5 << 12;
       $43 = $41 & 4032;
       $44 = $42 & 61440;
       $45 = $37 & 63;
       $46 = $43 | $44;
       $47 = $46 | $45;
       HEAP32[$_to_nxt$0>>2] = $47;
       $48 = (($_frm_nxt$0) + 3|0);
       $_frm_nxt$1 = $48;
       break;
      }
      $49 = ($4&255)<(245);
      if (!($49)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $50 = $_frm_nxt$0;
      $51 = (($2) - ($50))|0;
      $52 = ($51|0)<(4);
      if ($52) {
       $$0$i = 1;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $53 = (($_frm_nxt$0) + 1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = (($_frm_nxt$0) + 2|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = (($_frm_nxt$0) + 3|0);
      $58 = HEAP8[$57>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($54) + 112)<<24>>24;
       $59 = ($$off$i&255)<(48);
       if (!($59)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else if ((($5|0) == 244)) {
       $60 = $54 & -16;
       $61 = ($60<<24>>24)==(-128);
       if (!($61)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      } else {
       $62 = $54 & -64;
       $63 = ($62<<24>>24)==(-128);
       if (!($63)) {
        $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
        break L1;
       }
      }
      $64 = $56&255;
      $65 = $64 & 192;
      $66 = ($65|0)==(128);
      if (!($66)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $67 = $58&255;
      $68 = $67 & 192;
      $69 = ($68|0)==(128);
      if (!($69)) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      $70 = $5 << 18;
      $71 = $70 & 1835008;
      $72 = $54&255;
      $73 = $72 << 12;
      $74 = $73 & 258048;
      $75 = $74 | $71;
      $76 = $64 << 6;
      $77 = $76 & 4032;
      $78 = $75 | $77;
      $79 = $67 & 63;
      $80 = $78 | $79;
      $81 = ($80>>>0)>(1114111);
      if ($81) {
       $$0$i = 2;$_frm_nxt$3 = $_frm_nxt$0;$_to_nxt$2 = $_to_nxt$0;
       break L1;
      }
      HEAP32[$_to_nxt$0>>2] = $80;
      $82 = (($_frm_nxt$0) + 4|0);
      $_frm_nxt$1 = $82;
     }
    } while(0);
    $83 = (($_to_nxt$0) + 4|0);
    $84 = ($_frm_nxt$1>>>0)<($frm_end>>>0);
    if ($84) {
     $_frm_nxt$0 = $_frm_nxt$1;$_to_nxt$0 = $83;
    } else {
     $_frm_nxt$2 = $_frm_nxt$1;$_to_nxt$1 = $83;
     label = 30;
     break;
    }
   }
  } else {
   $_frm_nxt$2 = $frm;$_to_nxt$1 = $to;
   label = 30;
  }
 } while(0);
 if ((label|0) == 30) {
  $85 = ($_frm_nxt$2>>>0)<($frm_end>>>0);
  $86 = $85&1;
  $$0$i = $86;$_frm_nxt$3 = $_frm_nxt$2;$_to_nxt$2 = $_to_nxt$1;
 }
 $87 = $_frm_nxt$3;
 $88 = $frm;
 $89 = (($87) - ($88))|0;
 $90 = (($frm) + ($89)|0);
 HEAP32[$frm_nxt>>2] = $90;
 $91 = $_to_nxt$2;
 $92 = $to;
 $93 = (($91) - ($92))|0;
 $94 = $93 >> 2;
 $95 = (($to) + ($94<<2)|0);
 HEAP32[$to_nxt>>2] = $95;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$0$i = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $frm_nxt$1$lcssa$i = 0, $frm_nxt$115$i = 0, $frm_nxt$2$i = 0, $nchar32_t$014$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond13$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($frm>>>0)<($frm_end>>>0);
 $2 = ($mx|0)!=(0);
 $or$cond13$i = $1 & $2;
 L1: do {
  if ($or$cond13$i) {
   $3 = $frm_end;
   $frm_nxt$115$i = $frm;$nchar32_t$014$i = 0;
   L3: while(1) {
    $4 = HEAP8[$frm_nxt$115$i>>0]|0;
    $5 = $4&255;
    $6 = ($4<<24>>24)>(-1);
    do {
     if ($6) {
      $7 = (($frm_nxt$115$i) + 1|0);
      $frm_nxt$2$i = $7;
     } else {
      $8 = ($4&255)<(194);
      if ($8) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $9 = ($4&255)<(224);
      if ($9) {
       $10 = $frm_nxt$115$i;
       $11 = (($3) - ($10))|0;
       $12 = ($11|0)<(2);
       if ($12) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $13 = (($frm_nxt$115$i) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & -64;
       $16 = ($15<<24>>24)==(-128);
       if (!($16)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $17 = (($frm_nxt$115$i) + 2|0);
       $frm_nxt$2$i = $17;
       break;
      }
      $18 = ($4&255)<(240);
      if ($18) {
       $19 = $frm_nxt$115$i;
       $20 = (($3) - ($19))|0;
       $21 = ($20|0)<(3);
       if ($21) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $22 = (($frm_nxt$115$i) + 1|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = (($frm_nxt$115$i) + 2|0);
       $25 = HEAP8[$24>>0]|0;
       if ((($5|0) == 224)) {
        $26 = $23 & -32;
        $27 = ($26<<24>>24)==(-96);
        if (!($27)) {
         label = 14;
         break L3;
        }
       } else if ((($5|0) == 237)) {
        $30 = $23 & -32;
        $31 = ($30<<24>>24)==(-128);
        if (!($31)) {
         label = 16;
         break L3;
        }
       } else {
        $34 = $23 & -64;
        $35 = ($34<<24>>24)==(-128);
        if (!($35)) {
         label = 18;
         break L3;
        }
       }
       $38 = $25 & -64;
       $39 = ($38<<24>>24)==(-128);
       if (!($39)) {
        $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
        break L1;
       }
       $40 = (($frm_nxt$115$i) + 3|0);
       $frm_nxt$2$i = $40;
       break;
      }
      $41 = ($4&255)<(245);
      if (!($41)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $42 = $frm_nxt$115$i;
      $43 = (($3) - ($42))|0;
      $44 = ($43|0)<(4);
      if ($44) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $45 = (($frm_nxt$115$i) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($frm_nxt$115$i) + 2|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (($frm_nxt$115$i) + 3|0);
      $50 = HEAP8[$49>>0]|0;
      if ((($5|0) == 240)) {
       $$off$i = (($46) + 112)<<24>>24;
       $51 = ($$off$i&255)<(48);
       if (!($51)) {
        label = 25;
        break L3;
       }
      } else if ((($5|0) == 244)) {
       $54 = $46 & -16;
       $55 = ($54<<24>>24)==(-128);
       if (!($55)) {
        label = 27;
        break L3;
       }
      } else {
       $58 = $46 & -64;
       $59 = ($58<<24>>24)==(-128);
       if (!($59)) {
        label = 29;
        break L3;
       }
      }
      $62 = $48 & -64;
      $63 = ($62<<24>>24)==(-128);
      $64 = $50 & -64;
      $65 = ($64<<24>>24)==(-128);
      $or$cond = $63 & $65;
      if (!($or$cond)) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $66 = $5 << 18;
      $67 = $66 & 1835008;
      $68 = $46&255;
      $69 = $68 << 12;
      $70 = $69 & 196608;
      $71 = $70 | $67;
      $72 = ($71>>>0)>(1114111);
      if ($72) {
       $frm_nxt$1$lcssa$i = $frm_nxt$115$i;
       break L1;
      }
      $73 = (($frm_nxt$115$i) + 4|0);
      $frm_nxt$2$i = $73;
     }
    } while(0);
    $74 = (($nchar32_t$014$i) + 1)|0;
    $75 = ($frm_nxt$2$i>>>0)<($frm_end>>>0);
    $76 = ($74>>>0)<($mx>>>0);
    $or$cond$i = $75 & $76;
    if ($or$cond$i) {
     $frm_nxt$115$i = $frm_nxt$2$i;$nchar32_t$014$i = $74;
    } else {
     $frm_nxt$1$lcssa$i = $frm_nxt$2$i;
     break L1;
    }
   }
   if ((label|0) == 14) {
    $28 = $frm;
    $29 = (($19) - ($28))|0;
    $$0$i = $29;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 16) {
    $32 = $frm;
    $33 = (($19) - ($32))|0;
    $$0$i = $33;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 18) {
    $36 = $frm;
    $37 = (($19) - ($36))|0;
    $$0$i = $37;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 25) {
    $52 = $frm;
    $53 = (($42) - ($52))|0;
    $$0$i = $53;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 27) {
    $56 = $frm;
    $57 = (($42) - ($56))|0;
    $$0$i = $57;
    STACKTOP = sp;return ($$0$i|0);
   }
   else if ((label|0) == 29) {
    $60 = $frm;
    $61 = (($42) - ($60))|0;
    $$0$i = $61;
    STACKTOP = sp;return ($$0$i|0);
   }
  } else {
   $frm_nxt$1$lcssa$i = $frm;
  }
 } while(0);
 $77 = $frm_nxt$1$lcssa$i;
 $78 = $frm;
 $79 = (($77) - ($78))|0;
 $$0$i = $79;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6712 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  _free($this);
  STACKTOP = sp;return;
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6712 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6752 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  _free($this);
  STACKTOP = sp;return;
 }
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6752 + 8|0));
 $0 = (($this) + 16|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 8;
 $0 = (($agg$result) + 1|0);
 HEAP8[$0>>0]=1702195828&255;HEAP8[$0+1>>0]=(1702195828>>8)&255;HEAP8[$0+2>>0]=(1702195828>>16)&255;HEAP8[$0+3>>0]=1702195828>>24;
 $1 = (($agg$result) + 5|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 6792;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (6792))|0;
 $5 = $4 >> 2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,6792,$5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0] = 10;
 $0 = (($agg$result) + 1|0);
 ;HEAP8[$0+0>>0]=HEAP8[6816+0>>0]|0;HEAP8[$0+1>>0]=HEAP8[6816+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[6816+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[6816+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[6816+4>>0]|0;
 $1 = (($agg$result) + 6|0);
 HEAP8[$1>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = 6824;
 while(1) {
  $0 = HEAP32[$$0$i>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0$i) + 4|0);
  if ($1) {
   break;
  } else {
   $$0$i = $2;
  }
 }
 $3 = $$0$i;
 $4 = (($3) - (6824))|0;
 $5 = $4 >> 2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,6824,$5);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6856>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((6856|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[14024>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14024|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13856|0),0,168)|0;
   (___cxa_atexit((435|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14024|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(436,(13856|0),(14032|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(436,(((13856 + 12|0))|0),(14040|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(436,(((13856 + 24|0))|0),(14048|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(436,(((13856 + 36|0))|0),(14056|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(436,(((13856 + 48|0))|0),(14072|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(436,(((13856 + 60|0))|0),(14088|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(436,(((13856 + 72|0))|0),(14096|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(436,(((13856 + 84|0))|0),(14112|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(436,(((13856 + 96|0))|0),(14120|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(436,(((13856 + 108|0))|0),(14128|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(436,(((13856 + 120|0))|0),(14136|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(436,(((13856 + 132|0))|0),(14144|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(436,(((13856 + 144|0))|0),(14152|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(436,(((13856 + 156|0))|0),(14160|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[6848>>2] = 13856;
               ___cxa_guard_release((6856|0));
               $36 = HEAP32[6848>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((6856|0));
 ___resumeException($37|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6872>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[6864>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((6872|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[6864>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[13488>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13488|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13320|0),0,168)|0;
   (___cxa_atexit((437|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13488|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(438,(13320|0),(13496|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(438,(((13320 + 12|0))|0),(13528|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   invoke_vii(438,(((13320 + 24|0))|0),(13560|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vii(438,(((13320 + 36|0))|0),(13592|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     invoke_vii(438,(((13320 + 48|0))|0),(13632|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      invoke_vii(438,(((13320 + 60|0))|0),(13672|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       invoke_vii(438,(((13320 + 72|0))|0),(13704|0));
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        invoke_vii(438,(((13320 + 84|0))|0),(13744|0));
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vii(438,(((13320 + 96|0))|0),(13760|0));
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          invoke_vii(438,(((13320 + 108|0))|0),(13776|0));
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           invoke_vii(438,(((13320 + 120|0))|0),(13792|0));
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            invoke_vii(438,(((13320 + 132|0))|0),(13808|0));
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             invoke_vii(438,(((13320 + 144|0))|0),(13824|0));
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              invoke_vii(438,(((13320 + 156|0))|0),(13840|0));
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[6864>>2] = 13320;
               ___cxa_guard_release((6872|0));
               $36 = HEAP32[6864>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((6872|0));
 ___resumeException($37|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6888>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[6880>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((6888|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[6880>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[13096>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13096|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12808|0),0,288)|0;
   (___cxa_atexit((439|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13096|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(436,(12808|0),(13104|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(436,(((12808 + 12|0))|0),(13112|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(436,(((12808 + 24|0))|0),(13128|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(436,(((12808 + 36|0))|0),(13136|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(436,(((12808 + 48|0))|0),(13144|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(436,(((12808 + 60|0))|0),(13152|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(436,(((12808 + 72|0))|0),(13160|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(436,(((12808 + 84|0))|0),(13168|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(436,(((12808 + 96|0))|0),(13176|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(436,(((12808 + 108|0))|0),(13192|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(436,(((12808 + 120|0))|0),(13200|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(436,(((12808 + 132|0))|0),(13216|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(436,(((12808 + 144|0))|0),(13232|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(436,(((12808 + 156|0))|0),(13240|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(436,(((12808 + 168|0))|0),(13248|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(436,(((12808 + 180|0))|0),(13256|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 192|0))|0),(13144|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 204|0))|0),(13264|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 216|0))|0),(13272|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 228|0))|0),(13280|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 240|0))|0),(13288|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 252|0))|0),(13296|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 264|0))|0),(13304|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(436,(((12808 + 276|0))|0),(13312|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[6880>>2] = 12808;
                  ___cxa_guard_release((6888|0));
                  $56 = HEAP32[6880>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((6888|0));
 ___resumeException($57|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6904>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[6896>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((6904|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[6896>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[12256>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12256|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11968|0),0,288)|0;
   (___cxa_atexit((440|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12256|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(438,(11968|0),(12264|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   invoke_vii(438,(((11968 + 12|0))|0),(12296|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    invoke_vii(438,(((11968 + 24|0))|0),(12336|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     invoke_vii(438,(((11968 + 36|0))|0),(12360|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      invoke_vii(438,(((11968 + 48|0))|0),(12680|0));
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       invoke_vii(438,(((11968 + 60|0))|0),(12384|0));
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        invoke_vii(438,(((11968 + 72|0))|0),(12408|0));
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         invoke_vii(438,(((11968 + 84|0))|0),(12432|0));
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          invoke_vii(438,(((11968 + 96|0))|0),(12464|0));
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           invoke_vii(438,(((11968 + 108|0))|0),(12504|0));
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            invoke_vii(438,(((11968 + 120|0))|0),(12536|0));
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             invoke_vii(438,(((11968 + 132|0))|0),(12576|0));
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              invoke_vii(438,(((11968 + 144|0))|0),(12616|0));
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               invoke_vii(438,(((11968 + 156|0))|0),(12632|0));
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                invoke_vii(438,(((11968 + 168|0))|0),(12648|0));
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 invoke_vii(438,(((11968 + 180|0))|0),(12664|0));
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 192|0))|0),(12680|0));
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 204|0))|0),(12696|0));
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 216|0))|0),(12712|0));
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 228|0))|0),(12728|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 240|0))|0),(12744|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 252|0))|0),(12760|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 264|0))|0),(12776|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vii(438,(((11968 + 276|0))|0),(12792|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[6896>>2] = 11968;
                  ___cxa_guard_release((6904|0));
                  $56 = HEAP32[6896>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((6904|0));
 ___resumeException($57|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6920>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[6912>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((6920|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[6912>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[11944>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11944|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11656|0),0,288)|0;
   (___cxa_atexit((441|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11944|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(436,(11656|0),(11952|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6920|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(436,(((11656 + 12|0))|0),(11960|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6920|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[6912>>2] = 11656;
 ___cxa_guard_release((6920|0));
 $12 = HEAP32[6912>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[6928>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((6936|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[6928>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[11616>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11616|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11328|0),0,288)|0;
   (___cxa_atexit((442|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11616|0));
  }
 }
 __THREW__ = 0;
 invoke_vii(438,(11328|0),(11624|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6936|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(438,(((11328 + 12|0))|0),(11640|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((6936|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[6928>>2] = 11328;
 ___cxa_guard_release((6936|0));
 $12 = HEAP32[6928>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6960>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6944|0);
 }
 $2 = (___cxa_guard_acquire((6960|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6944|0);
 }
 HEAP8[6944>>0] = 16;
 $4 = ((6944 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=623865125&255;HEAP8[$5+1>>0]=(623865125>>8)&255;HEAP8[$5+2>>0]=(623865125>>16)&255;HEAP8[$5+3>>0]=623865125>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=2032480100&255;HEAP8[$7+1>>0]=(2032480100>>8)&255;HEAP8[$7+2>>0]=(2032480100>>16)&255;HEAP8[$7+3>>0]=2032480100>>24;
 HEAP8[((6944 + 9|0))>>0] = 0;
 (___cxa_atexit((443|0),(6944|0),(___dso_handle|0))|0);
 ___cxa_guard_release((6960|0));
 STACKTOP = sp;return (6944|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6984>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (6968|0);
 }
 $2 = (___cxa_guard_acquire((6984|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (6968|0);
 } else {
  $$0$i = 6992;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (6992))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(444,(6968|0),(6992|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((6984|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((445|0),(6968|0),(___dso_handle|0))|0);
 ___cxa_guard_release((6984|0));
 STACKTOP = sp;return (6968|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7048>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7032|0);
 }
 $2 = (___cxa_guard_acquire((7048|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7032|0);
 }
 HEAP8[7032>>0] = 16;
 $4 = ((7032 + 1|0));
 $5 = $4;
 HEAP8[$5>>0]=624576549&255;HEAP8[$5+1>>0]=(624576549>>8)&255;HEAP8[$5+2>>0]=(624576549>>16)&255;HEAP8[$5+3>>0]=624576549>>24;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP8[$7>>0]=1394948685&255;HEAP8[$7+1>>0]=(1394948685>>8)&255;HEAP8[$7+2>>0]=(1394948685>>16)&255;HEAP8[$7+3>>0]=1394948685>>24;
 HEAP8[((7032 + 9|0))>>0] = 0;
 (___cxa_atexit((443|0),(7032|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7048|0));
 STACKTOP = sp;return (7032|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7072>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7056|0);
 }
 $2 = (___cxa_guard_acquire((7072|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7056|0);
 } else {
  $$0$i = 7080;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (7080))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(444,(7056|0),(7080|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((7072|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((445|0),(7056|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7072|0));
 STACKTOP = sp;return (7056|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[7136>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7120|0);
 }
 $2 = (___cxa_guard_acquire((7136|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7120|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(375,32)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_guard_abort((7136|0));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((7120 + 8|0))>>2] = $4;
 HEAP32[7120>>2] = 33;
 HEAP32[((7120 + 4|0))>>2] = 20;
 dest=$4+0|0; src=7144+0|0; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = (($4) + 20|0);
 HEAP8[$7>>0] = 0;
 (___cxa_atexit((443|0),(7120|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7136|0));
 STACKTOP = sp;return (7120|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7184>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7168|0);
 }
 $2 = (___cxa_guard_acquire((7184|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7168|0);
 } else {
  $$0$i = 7192;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (7192))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(444,(7168|0),(7192|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((7184|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((445|0),(7168|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7184|0));
 STACKTOP = sp;return (7168|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP8[7296>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7280|0);
 }
 $2 = (___cxa_guard_acquire((7296|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7280|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(375,16)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  ___cxa_guard_abort((7296|0));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[((7280 + 8|0))>>2] = $4;
 HEAP32[7280>>2] = 17;
 HEAP32[((7280 + 4|0))>>2] = 11;
 dest=$4+0|0; src=7304+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = (($4) + 11|0);
 HEAP8[$7>>0] = 0;
 (___cxa_atexit((443|0),(7280|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7296|0));
 STACKTOP = sp;return (7280|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7336>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7320|0);
 }
 $2 = (___cxa_guard_acquire((7336|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7320|0);
 } else {
  $$0$i = 7344;
 }
 while(1) {
  $4 = HEAP32[$$0$i>>2]|0;
  $5 = ($4|0)==(0);
  $6 = (($$0$i) + 4|0);
  if ($5) {
   break;
  } else {
   $$0$i = $6;
  }
 }
 $7 = $$0$i;
 $8 = (($7) - (7344))|0;
 $9 = $8 >> 2;
 __THREW__ = 0;
 invoke_viii(444,(7320|0),(7344|0),($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  ___cxa_guard_abort((7336|0));
  ___resumeException($12|0);
  // unreachable;
 }
 (___cxa_atexit((445|0),(7320|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7336|0));
 STACKTOP = sp;return (7320|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6632 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(393)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(404,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __GLOBAL__I_a81() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev();
 (___cxa_atexit((446|0),(2688|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6624)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($3) + 12|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx1$val,$4)|0);
 $6 = (($this) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($5)|0);
 $11 = (($this) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 511]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6624)|0);
 $$idx = (($0) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($0) + 12|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx1$val,$1)|0);
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($2)|0);
 $8 = (($this) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 $14 = (($this) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__121__throw_runtime_errorEPKc(3264);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 511]($this)|0);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = (__ZNSt3__16locale2id5__getEv(6616)|0);
 $$idx = (($3) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($3) + 12|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $5 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx1$val,$4)|0);
 $6 = (($this) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 511]($5)|0);
 $11 = (($this) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 511]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 511]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 511]($1);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv(6616)|0);
 $$idx = (($0) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($0) + 12|0);
 $$idx1$val = HEAP32[$$idx1>>2]|0;
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($$idx$val,$$idx1$val,$1)|0);
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 511]($2)|0);
 $8 = (($this) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 511]($9)|0);
 $14 = (($this) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__121__throw_runtime_errorEPKc(3264);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3800 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 HEAP32[$this>>2] = ((3304 + 8|0));
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_ii(380,(6616|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $$idx = (($4) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($4) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = (($this) + 36|0);
   $14 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($14+-1)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    HEAP32[$13>>2] = $10;
    $19 = (($this) + 40|0);
    HEAP32[$19>>2] = $__st;
    $20 = (($this) + 44|0);
    $21 = HEAP32[$10>>2]|0;
    $22 = (($21) + 28|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 511]($10)|0);
    $25 = $24&1;
    HEAP8[$20>>0] = $25;
    STACKTOP = sp;return;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vi[$18 & 511]($4);
   HEAP32[$13>>2] = $10;
   $19 = (($this) + 40|0);
   HEAP32[$19>>2] = $__st;
   $20 = (($this) + 44|0);
   $21 = HEAP32[$10>>2]|0;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 511]($10)|0);
   $25 = $24&1;
   HEAP8[$20>>0] = $25;
   STACKTOP = sp;return;
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $28 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($28+-1)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$4>>2]|0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vi[$32 & 511]($4);
 }
 HEAP32[$this>>2] = ((3800 + 8|0));
 $33 = HEAP32[$3>>2]|0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($35+-1)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  ___resumeException($26|0);
  // unreachable;
 }
 $37 = HEAP32[$33>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 511]($33);
 ___resumeException($26|0);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3864 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 HEAP32[$this>>2] = ((3048 + 8|0));
 $2 = (($this) + 32|0);
 HEAP32[$2>>2] = $__fp;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($6+1)|0);
 __THREW__ = 0;
 $7 = (invoke_ii(380,(6624|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $$idx = (($4) + 8|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx3 = (($4) + 12|0);
  $$idx3$val = HEAP32[$$idx3>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_iiii(381,($$idx$val|0),($$idx3$val|0),($7|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $13 = (($this) + 36|0);
   $14 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($14+-1)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    HEAP32[$13>>2] = $10;
    $19 = (($this) + 40|0);
    HEAP32[$19>>2] = $__st;
    $20 = (($this) + 44|0);
    $21 = HEAP32[$10>>2]|0;
    $22 = (($21) + 28|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 511]($10)|0);
    $25 = $24&1;
    HEAP8[$20>>0] = $25;
    STACKTOP = sp;return;
   }
   $16 = HEAP32[$4>>2]|0;
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   FUNCTION_TABLE_vi[$18 & 511]($4);
   HEAP32[$13>>2] = $10;
   $19 = (($this) + 40|0);
   HEAP32[$19>>2] = $__st;
   $20 = (($this) + 44|0);
   $21 = HEAP32[$10>>2]|0;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 511]($10)|0);
   $25 = $24&1;
   HEAP8[$20>>0] = $25;
   STACKTOP = sp;return;
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $28 = HEAP32[$5>>2]|0;HEAP32[$5>>2] = (($28+-1)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$4>>2]|0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vi[$32 & 511]($4);
 }
 HEAP32[$this>>2] = ((3864 + 8|0));
 $33 = HEAP32[$3>>2]|0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;HEAP32[$34>>2] = (($35+-1)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  ___resumeException($26|0);
  // unreachable;
 }
 $37 = HEAP32[$33>>2]|0;
 $38 = (($37) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 FUNCTION_TABLE_vi[$39 & 511]($33);
 ___resumeException($26|0);
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $$02 = $__first;$__p$01 = $__p$0$ph;
 }
 while(1) {
  $15 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $15;
  $16 = (($$02) + 1|0);
  $17 = (($__p$01) + 1|0);
  $18 = ($16|0)==($__last|0);
  if ($18) {
   break;
  } else {
   $$02 = $16;$__p$01 = $17;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($2)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = $scevgep;
 $18 = (($17) - ($0))|0;
 $19 = $18 >>> 2;
 $20 = (($19) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $21 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $21;
  $22 = (($$02) + 4|0);
  $23 = (($__p$01) + 4|0);
  $24 = ($22|0)==($__last|0);
  if ($24) {
   break;
  } else {
   $$02 = $22;$__p$01 = $23;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$025 = 0, $$027 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$03 = 0, $$index = 0, $$index12 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i2$i$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0;
 var $__consume$0$off036 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$063 = 0, $__ky1$037 = 0, $__ky2$048 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$061 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$333 = 0, $__n_does_match$4 = 0, $__n_does_match$546 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0;
 var $__n_might_match$060 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$332 = 0, $__n_might_match$4 = 0, $__st$062 = 0, $__st$134 = 0, $__st$247 = 0, $__st$326 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($7|0),(14816|0),(323|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch()|0;
   $11 = tempRet0;
   $$index = $10;$$index12 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$063 = $__kb;$__n_does_match$061 = 0;$__n_might_match$060 = $3;$__st$062 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$063>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$063) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$062>>0] = 2;
    $32 = (($__n_might_match$060) + -1)|0;
    $33 = (($__n_does_match$061) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$062>>0] = 1;
    $__n_does_match$1 = $__n_does_match$061;$__n_might_match$1 = $__n_might_match$060;
   }
   $34 = (($__ky$063) + 12|0);
   $35 = (($__st$062) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$063 = $34;$__n_does_match$061 = $__n_does_match$1;$__n_might_match$060 = $__n_might_match$1;$__st$062 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $53 = 0;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__b>>2] = 0;
       $53 = 0;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $53 = $$pre$i$i$i;
       break;
      }
     } else {
      $53 = $38;
     }
    }
   } while(0);
   $52 = ($53|0)==(0|0);
   $54 = ($__e$sroa$0$0|0)==(0|0);
   if ($54) {
    $$pre$i2$i$i17 = 0;$__e$sroa$0$1 = 0;
   } else {
    $55 = (($__e$sroa$0$0) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($__e$sroa$0$0) + 16|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($56|0)==($58|0);
    if ($59) {
     $60 = HEAP32[$__e$sroa$0$0>>2]|0;
     $61 = (($60) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     __THREW__ = 0;
     $63 = (invoke_ii($62|0,($__e$sroa$0$0|0))|0);
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      label = 7;
      break L21;
     }
     $66 = ($63|0)==(-1);
     $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
     $$__e$sroa$0$03 = $66 ? 0 : $__e$sroa$0$0;
     $$pre$i2$i$i17 = $$__e$sroa$0$03;$__e$sroa$0$1 = $$__e$sroa$0$0;
    } else {
     $$pre$i2$i$i17 = $__e$sroa$0$0;$__e$sroa$0$1 = $__e$sroa$0$0;
    }
   }
   $67 = ($$pre$i2$i$i17|0)==(0|0);
   $tmp$i$i = $52 ^ $67;
   $or$cond = $tmp$i$i & $37;
   $68 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    label = 66;
    break L21;
   }
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$68>>2]|0;
    $75 = (($74) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    __THREW__ = 0;
    $77 = (invoke_ii($76|0,($68|0))|0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $77;
    }
   } else {
    $80 = HEAP8[$70>>0]|0;
    $81 = $80&255;
    $$0$i$i = $81;
   }
   $82 = $$0$i$i&255;
   if ($__case_sensitive) {
    $__c$0 = $82;
   } else {
    $83 = HEAP32[$__ct>>2]|0;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    __THREW__ = 0;
    $86 = (invoke_iii($85|0,($__ct|0),($82|0))|0);
    $87 = __THREW__; __THREW__ = 0;
    $88 = $87&1;
    if ($88) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $86;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    $__consume$0$off036 = 0;$__ky1$037 = $__kb;$__n_does_match$333 = $__n_does_match$2$ph;$__n_might_match$332 = $__n_might_match$2$ph;$__st$134 = $__status$0;
    break;
   }
  }
  while(1) {
   $89 = HEAP8[$__st$134>>0]|0;
   $90 = ($89<<24>>24)==(1);
   do {
    if ($90) {
     $91 = HEAP8[$__ky1$037>>0]|0;
     $92 = $91 & 1;
     $93 = ($92<<24>>24)==(0);
     if ($93) {
      $96 = (($__ky1$037) + 1|0);
      $98 = $96;
     } else {
      $94 = (($__ky1$037) + 8|0);
      $95 = HEAP32[$94>>2]|0;
      $98 = $95;
     }
     $97 = (($98) + ($__indx$0)|0);
     $99 = HEAP8[$97>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $99;
     } else {
      $100 = HEAP32[$__ct>>2]|0;
      $101 = (($100) + 12|0);
      $102 = HEAP32[$101>>2]|0;
      __THREW__ = 0;
      $103 = (invoke_iii($102|0,($__ct|0),($99|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       label = 6;
       break L21;
      } else {
       $__kc$0 = $103;
      }
     }
     $106 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($106)) {
      HEAP8[$__st$134>>0] = 0;
      $118 = (($__n_might_match$332) + -1)|0;
      $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $118;
      break;
     }
     $107 = HEAP8[$__ky1$037>>0]|0;
     $108 = $107 & 1;
     $109 = ($108<<24>>24)==(0);
     if ($109) {
      $112 = $107&255;
      $113 = $112 >>> 1;
      $115 = $113;
     } else {
      $110 = (($__ky1$037) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $115 = $111;
     }
     $114 = ($115|0)==($$pre|0);
     if ($114) {
      HEAP8[$__st$134>>0] = 2;
      $116 = (($__n_might_match$332) + -1)|0;
      $117 = (($__n_does_match$333) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $117;$__n_might_match$4 = $116;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
    }
   } while(0);
   $119 = (($__ky1$037) + 12|0);
   $120 = (($__st$134) + 1|0);
   $121 = ($119|0)==($__ke|0);
   if ($121) {
    break;
   } else {
    $__consume$0$off036 = $__consume$1$off0;$__ky1$037 = $119;$__n_does_match$333 = $__n_does_match$4;$__n_might_match$332 = $__n_might_match$4;$__st$134 = $120;
   }
  }
  if (!($__consume$1$off0)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $122 = HEAP32[$__b>>2]|0;
  $123 = (($122) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$122>>2]|0;
   $129 = (($128) + 40|0);
   $130 = HEAP32[$129>>2]|0;
   __THREW__ = 0;
   (invoke_ii($130|0,($122|0))|0);
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    label = 8;
    break;
   }
  } else {
   $133 = (($124) + 1|0);
   HEAP32[$123>>2] = $133;
  }
  $134 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($134>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$048 = $__kb;$__n_does_match$546 = $__n_does_match$4;$__st$247 = $__status$0;
  }
  while(1) {
   $135 = HEAP8[$__st$247>>0]|0;
   $136 = ($135<<24>>24)==(2);
   if ($136) {
    $137 = HEAP8[$__ky2$048>>0]|0;
    $138 = $137 & 1;
    $139 = ($138<<24>>24)==(0);
    if ($139) {
     $142 = $137&255;
     $143 = $142 >>> 1;
     $145 = $143;
    } else {
     $140 = (($__ky2$048) + 4|0);
     $141 = HEAP32[$140>>2]|0;
     $145 = $141;
    }
    $144 = ($145|0)==($$pre|0);
    if ($144) {
     $__n_does_match$6 = $__n_does_match$546;
    } else {
     HEAP8[$__st$247>>0] = 0;
     $146 = (($__n_does_match$546) + -1)|0;
     $__n_does_match$6 = $146;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$546;
   }
   $147 = (($__ky2$048) + 12|0);
   $148 = (($__st$247) + 1|0);
   $149 = ($147|0)==($__ke|0);
   if ($149) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$4;
    continue L21;
   } else {
    $__ky2$048 = $147;$__n_does_match$546 = $__n_does_match$6;$__st$247 = $148;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index4 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index4 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index4 = $17;
 }
 else if ((label|0) == 66) {
  $150 = ($68|0)==(0|0);
  do {
   if ($150) {
    $164 = 0;
    label = 72;
   } else {
    $151 = (($68) + 12|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($68) + 16|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($152|0)==($154|0);
    if ($155) {
     $156 = HEAP32[$68>>2]|0;
     $157 = (($156) + 36|0);
     $158 = HEAP32[$157>>2]|0;
     __THREW__ = 0;
     $159 = (invoke_ii($158|0,($68|0))|0);
     $160 = __THREW__; __THREW__ = 0;
     $161 = $160&1;
     if (!($161)) {
      $162 = ($159|0)==(-1);
      if ($162) {
       HEAP32[$__b>>2] = 0;
       $164 = 0;
       label = 72;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $164 = $$pre$i$i$i13;
       label = 72;
       break;
      }
     }
    } else {
     $164 = $68;
     label = 72;
    }
   }
  } while(0);
  L94: do {
   if ((label|0) == 72) {
    $163 = ($164|0)==(0|0);
    do {
     if ($67) {
      label = 77;
     } else {
      $165 = (($$pre$i2$i$i17) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($$pre$i2$i$i17) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($166|0)==($168|0);
      if (!($169)) {
       if ($163) {
        break;
       } else {
        label = 79;
        break;
       }
      }
      $170 = HEAP32[$$pre$i2$i$i17>>2]|0;
      $171 = (($170) + 36|0);
      $172 = HEAP32[$171>>2]|0;
      __THREW__ = 0;
      $173 = (invoke_ii($172|0,($$pre$i2$i$i17|0))|0);
      $174 = __THREW__; __THREW__ = 0;
      $175 = $174&1;
      if ($175) {
       break L94;
      }
      $176 = ($173|0)==(-1);
      if ($176) {
       label = 77;
      } else {
       if (!($163)) {
        label = 79;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($163) {
      label = 79;
     }
    }
    if ((label|0) == 79) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
    }
    L108: do {
     if ($22) {
      label = 83;
     } else {
      $$027 = $__kb;$__st$326 = $__status$0;
      while(1) {
       $179 = HEAP8[$__st$326>>0]|0;
       $180 = ($179<<24>>24)==(2);
       if ($180) {
        $$025 = $$027;
        break L108;
       }
       $181 = (($$027) + 12|0);
       $182 = (($__st$326) + 1|0);
       $183 = ($181|0)==($__ke|0);
       if ($183) {
        label = 83;
        break;
       } else {
        $$027 = $181;$__st$326 = $182;
       }
      }
     }
    } while(0);
    if ((label|0) == 83) {
     $184 = HEAP32[$__err>>2]|0;
     $185 = $184 | 4;
     HEAP32[$__err>>2] = $185;
     $$025 = $__ke;
    }
    $186 = ($21|0)==(0|0);
    if ($186) {
     STACKTOP = sp;return ($$025|0);
    }
    _free($21);
    STACKTOP = sp;return ($$025|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index4 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index12 = $lpad$phi$index4;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index12 = $lpad$phi$index4;
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,5120,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(405,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e$0,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i12 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i18 = 0, $$029 = 0, $$031 = 0, $$__e$sroa$0$0 = 0, $$__e$sroa$0$03 = 0, $$index = 0, $$index12 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i14 = 0, $$pre$i3$i$i20 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off040 = 0, $__consume$1$off0 = 0, $__e$sroa$0$0 = 0, $__e$sroa$0$0$ph = 0, $__e$sroa$0$1 = 0, $__indx$0 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$067 = 0, $__ky1$041 = 0, $__ky2$052 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$065 = 0, $__n_does_match$1 = 0;
 var $__n_does_match$2$ph = 0, $__n_does_match$337 = 0, $__n_does_match$4 = 0, $__n_does_match$550 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$064 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$336 = 0, $__n_might_match$4 = 0, $__st$066 = 0, $__st$138 = 0, $__st$251 = 0, $__st$330 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $or$cond = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i15 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = ((14760 + 8|0));
   __THREW__ = 0;
   invoke_viii(357,($7|0),(14816|0),(323|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    // unreachable;
   }
   $10 = ___cxa_find_matching_catch()|0;
   $11 = tempRet0;
   $$index = $10;$$index12 = $11;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $21 = $5;$__status$0 = $5;
  }
 } else {
  $21 = 0;$__status$0 = $__statbuf;
 }
 $22 = ($__kb|0)==($__ke|0);
 if ($22) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$067 = $__kb;$__n_does_match$065 = 0;$__n_might_match$064 = $3;$__st$066 = $__status$0;
  while(1) {
   $23 = HEAP8[$__ky$067>>0]|0;
   $24 = $23 & 1;
   $25 = ($24<<24>>24)==(0);
   if ($25) {
    $28 = $23&255;
    $29 = $28 >>> 1;
    $31 = $29;
   } else {
    $26 = (($__ky$067) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $31 = $27;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    HEAP8[$__st$066>>0] = 2;
    $32 = (($__n_might_match$064) + -1)|0;
    $33 = (($__n_does_match$065) + 1)|0;
    $__n_does_match$1 = $33;$__n_might_match$1 = $32;
   } else {
    HEAP8[$__st$066>>0] = 1;
    $__n_does_match$1 = $__n_does_match$065;$__n_might_match$1 = $__n_might_match$064;
   }
   $34 = (($__ky$067) + 12|0);
   $35 = (($__st$066) + 1|0);
   $36 = ($34|0)==($__ke|0);
   if ($36) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$067 = $34;$__n_does_match$065 = $__n_does_match$1;$__n_might_match$064 = $__n_might_match$1;$__st$066 = $35;
   }
  }
 }
 $__e$sroa$0$0$ph = $__e$0;$__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L21: while(1) {
  $37 = ($__n_might_match$2$ph|0)!=(0);
  $__e$sroa$0$0 = $__e$sroa$0$0$ph;$__indx$0 = $__indx$0$ph;
  while(1) {
   $38 = HEAP32[$__b>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if ($39) {
     $67 = 1;
    } else {
     $40 = (($38) + 12|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 16|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if ($44) {
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 7;
       break L21;
      } else {
       $$0$i$i$i$i = $48;
      }
     } else {
      $51 = HEAP32[$41>>2]|0;
      $$0$i$i$i$i = $51;
     }
     $52 = ($$0$i$i$i$i|0)==(-1);
     if ($52) {
      HEAP32[$__b>>2] = 0;
      $67 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $67 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $53 = ($__e$sroa$0$0|0)==(0|0);
   if ($53) {
    $$pre$i3$i$i20 = 0;$68 = 1;$__e$sroa$0$1 = 0;
   } else {
    $54 = (($__e$sroa$0$0) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($__e$sroa$0$0) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $59 = HEAP32[$__e$sroa$0$0>>2]|0;
     $60 = (($59) + 36|0);
     $61 = HEAP32[$60>>2]|0;
     __THREW__ = 0;
     $62 = (invoke_ii($61|0,($__e$sroa$0$0|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 7;
      break L21;
     } else {
      $$0$i$i1$i$i = $62;
     }
    } else {
     $65 = HEAP32[$55>>2]|0;
     $$0$i$i1$i$i = $65;
    }
    $66 = ($$0$i$i1$i$i|0)==(-1);
    $$__e$sroa$0$0 = $66 ? 0 : $__e$sroa$0$0;
    $$__e$sroa$0$03 = $66 ? 0 : $__e$sroa$0$0;
    $$ = $66 ? 1 : 0;
    $$pre$i3$i$i20 = $$__e$sroa$0$03;$68 = $$;$__e$sroa$0$1 = $$__e$sroa$0$0;
   }
   $tmp$i$i = $67 ^ $68;
   $or$cond = $tmp$i$i & $37;
   $69 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    label = 68;
    break L21;
   }
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$69>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    __THREW__ = 0;
    $78 = (invoke_ii($77|0,($69|0))|0);
    $79 = __THREW__; __THREW__ = 0;
    $80 = $79&1;
    if ($80) {
     label = 7;
     break L21;
    } else {
     $$0$i$i = $78;
    }
   } else {
    $81 = HEAP32[$71>>2]|0;
    $$0$i$i = $81;
   }
   if ($__case_sensitive) {
    $__c$0 = $$0$i$i;
   } else {
    $82 = HEAP32[$__ct>>2]|0;
    $83 = (($82) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    __THREW__ = 0;
    $85 = (invoke_iii($84|0,($__ct|0),($$0$i$i|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 7;
     break L21;
    } else {
     $__c$0 = $85;
    }
   }
   $$pre = (($__indx$0) + 1)|0;
   if ($22) {
    $__e$sroa$0$0 = $__e$sroa$0$1;$__indx$0 = $$pre;
   } else {
    $__consume$0$off040 = 0;$__ky1$041 = $__kb;$__n_does_match$337 = $__n_does_match$2$ph;$__n_might_match$336 = $__n_might_match$2$ph;$__st$138 = $__status$0;
    break;
   }
  }
  while(1) {
   $88 = HEAP8[$__st$138>>0]|0;
   $89 = ($88<<24>>24)==(1);
   do {
    if ($89) {
     $90 = HEAP8[$__ky1$041>>0]|0;
     $91 = $90 & 1;
     $92 = ($91<<24>>24)==(0);
     if ($92) {
      $95 = (($__ky1$041) + 4|0);
      $97 = $95;
     } else {
      $93 = (($__ky1$041) + 8|0);
      $94 = HEAP32[$93>>2]|0;
      $97 = $94;
     }
     $96 = (($97) + ($__indx$0<<2)|0);
     $98 = HEAP32[$96>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $98;
     } else {
      $99 = HEAP32[$__ct>>2]|0;
      $100 = (($99) + 28|0);
      $101 = HEAP32[$100>>2]|0;
      __THREW__ = 0;
      $102 = (invoke_iii($101|0,($__ct|0),($98|0))|0);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       label = 6;
       break L21;
      } else {
       $__kc$0 = $102;
      }
     }
     $105 = ($__c$0|0)==($__kc$0|0);
     if (!($105)) {
      HEAP8[$__st$138>>0] = 0;
      $117 = (($__n_might_match$336) + -1)|0;
      $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $117;
      break;
     }
     $106 = HEAP8[$__ky1$041>>0]|0;
     $107 = $106 & 1;
     $108 = ($107<<24>>24)==(0);
     if ($108) {
      $111 = $106&255;
      $112 = $111 >>> 1;
      $114 = $112;
     } else {
      $109 = (($__ky1$041) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $114 = $110;
     }
     $113 = ($114|0)==($$pre|0);
     if ($113) {
      HEAP8[$__st$138>>0] = 2;
      $115 = (($__n_might_match$336) + -1)|0;
      $116 = (($__n_does_match$337) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $116;$__n_might_match$4 = $115;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
    }
   } while(0);
   $118 = (($__ky1$041) + 12|0);
   $119 = (($__st$138) + 1|0);
   $120 = ($118|0)==($__ke|0);
   if ($120) {
    break;
   } else {
    $__consume$0$off040 = $__consume$1$off0;$__ky1$041 = $118;$__n_does_match$337 = $__n_does_match$4;$__n_might_match$336 = $__n_might_match$4;$__st$138 = $119;
   }
  }
  if (!($__consume$1$off0)) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $121 = HEAP32[$__b>>2]|0;
  $122 = (($121) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$121>>2]|0;
   $128 = (($127) + 40|0);
   $129 = HEAP32[$128>>2]|0;
   __THREW__ = 0;
   (invoke_ii($129|0,($121|0))|0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    label = 8;
    break;
   }
  } else {
   $132 = (($123) + 4|0);
   HEAP32[$122>>2] = $132;
  }
  $133 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($133>>>0)<(2);
  if ($$not) {
   $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$4;$__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$052 = $__kb;$__n_does_match$550 = $__n_does_match$4;$__st$251 = $__status$0;
  }
  while(1) {
   $134 = HEAP8[$__st$251>>0]|0;
   $135 = ($134<<24>>24)==(2);
   if ($135) {
    $136 = HEAP8[$__ky2$052>>0]|0;
    $137 = $136 & 1;
    $138 = ($137<<24>>24)==(0);
    if ($138) {
     $141 = $136&255;
     $142 = $141 >>> 1;
     $144 = $142;
    } else {
     $139 = (($__ky2$052) + 4|0);
     $140 = HEAP32[$139>>2]|0;
     $144 = $140;
    }
    $143 = ($144|0)==($$pre|0);
    if ($143) {
     $__n_does_match$6 = $__n_does_match$550;
    } else {
     HEAP8[$__st$251>>0] = 0;
     $145 = (($__n_does_match$550) + -1)|0;
     $__n_does_match$6 = $145;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$550;
   }
   $146 = (($__ky2$052) + 12|0);
   $147 = (($__st$251) + 1|0);
   $148 = ($146|0)==($__ke|0);
   if ($148) {
    $__e$sroa$0$0$ph = $__e$sroa$0$1;$__indx$0$ph = $$pre;$__n_does_match$2$ph = $__n_does_match$6;$__n_might_match$2$ph = $__n_might_match$4;
    continue L21;
   } else {
    $__ky2$052 = $146;$__n_does_match$550 = $__n_does_match$6;$__st$251 = $147;
   }
  }
 }
 if ((label|0) == 6) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  $lpad$phi$index = $12;$lpad$phi$index4 = $13;
 }
 else if ((label|0) == 7) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $lpad$phi$index = $14;$lpad$phi$index4 = $15;
 }
 else if ((label|0) == 8) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $lpad$phi$index = $16;$lpad$phi$index4 = $17;
 }
 else if ((label|0) == 68) {
  $149 = ($69|0)==(0|0);
  do {
   if ($149) {
    $187 = 1;
    label = 75;
   } else {
    $150 = (($69) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($69) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($151|0)==($153|0);
    if ($154) {
     $155 = HEAP32[$69>>2]|0;
     $156 = (($155) + 36|0);
     $157 = HEAP32[$156>>2]|0;
     __THREW__ = 0;
     $158 = (invoke_ii($157|0,($69|0))|0);
     $159 = __THREW__; __THREW__ = 0;
     $160 = $159&1;
     if ($160) {
      break;
     } else {
      $$0$i$i$i$i12 = $158;
     }
    } else {
     $161 = HEAP32[$151>>2]|0;
     $$0$i$i$i$i12 = $161;
    }
    $162 = ($$0$i$i$i$i12|0)==(-1);
    if ($162) {
     HEAP32[$__b>>2] = 0;
     $187 = 1;
     label = 75;
     break;
    } else {
     $$pre$i$i$i14 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i15 = ($$pre$i$i$i14|0)==(0|0);
     $187 = $phitmp$i$i$i15;
     label = 75;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    $163 = ($$pre$i3$i$i20|0)==(0|0);
    if ($163) {
     label = 80;
    } else {
     $164 = (($$pre$i3$i$i20) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($$pre$i3$i$i20) + 16|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = ($165|0)==($167|0);
     if ($168) {
      $169 = HEAP32[$$pre$i3$i$i20>>2]|0;
      $170 = (($169) + 36|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($$pre$i3$i$i20|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       break;
      } else {
       $$0$i$i1$i$i18 = $172;
      }
     } else {
      $175 = HEAP32[$165>>2]|0;
      $$0$i$i1$i$i18 = $175;
     }
     $176 = ($$0$i$i1$i$i18|0)==(-1);
     if ($176) {
      label = 80;
     } else {
      if (!($187)) {
       label = 82;
      }
     }
    }
    if ((label|0) == 80) {
     if ($187) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     $177 = HEAP32[$__err>>2]|0;
     $178 = $177 | 2;
     HEAP32[$__err>>2] = $178;
    }
    L114: do {
     if ($22) {
      label = 86;
     } else {
      $$031 = $__kb;$__st$330 = $__status$0;
      while(1) {
       $179 = HEAP8[$__st$330>>0]|0;
       $180 = ($179<<24>>24)==(2);
       if ($180) {
        $$029 = $$031;
        break L114;
       }
       $181 = (($$031) + 12|0);
       $182 = (($__st$330) + 1|0);
       $183 = ($181|0)==($__ke|0);
       if ($183) {
        label = 86;
        break;
       } else {
        $$031 = $181;$__st$330 = $182;
       }
      }
     }
    } while(0);
    if ((label|0) == 86) {
     $184 = HEAP32[$__err>>2]|0;
     $185 = $184 | 4;
     HEAP32[$__err>>2] = $185;
     $$029 = $__ke;
    }
    $186 = ($21|0)==(0|0);
    if ($186) {
     STACKTOP = sp;return ($$029|0);
    }
    _free($21);
    STACKTOP = sp;return ($$029|0);
   }
  } while(0);
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $lpad$phi$index = $18;$lpad$phi$index4 = $19;
 }
 $20 = ($21|0)==(0|0);
 if ($20) {
  $$index = $lpad$phi$index;$$index12 = $lpad$phi$index4;
  ___resumeException($$index|0);
  // unreachable;
 }
 _free($21);
 $$index = $lpad$phi$index;$$index12 = $lpad$phi$index4;
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(405,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = (($__iob) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>($3|0);
 $7 = (($5) - ($3))|0;
 $__ns$0 = $6 ? $7 : 0;
 $8 = $__op;
 $9 = (($8) - ($2))|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$__s$0>>2]|0;
  $12 = (($11) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 511]($__s$0,$__ob,$9)|0);
  $15 = ($14|0)==($9|0);
  if (!($15)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $16 = ($__ns$0|0)>(0);
 do {
  if ($16) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $17 = HEAP8[$__sp>>0]|0;
   $18 = $17 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = (($__sp) + 1|0);
    $26 = $22;
   } else {
    $20 = (($__sp) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $26 = $21;
   }
   $23 = HEAP32[$__s$0>>2]|0;
   $24 = (($23) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   $27 = (invoke_iiii($25|0,($__s$0|0),($26|0),($__ns$0|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $38 = HEAP8[$__sp>>0]|0;
    $39 = $38 & 1;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     ___resumeException($36|0);
     // unreachable;
    }
    $41 = (($__sp) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    _free($42);
    ___resumeException($36|0);
    // unreachable;
   }
   $30 = ($27|0)==($__ns$0|0);
   if ($30) {
    $43 = HEAP8[$__sp>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if ($45) {
     break;
    }
    $46 = (($__sp) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    _free($47);
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $31 = HEAP8[$__sp>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    STACKTOP = sp;return;
   }
   $34 = (($__sp) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   _free($35);
   STACKTOP = sp;return;
  }
 } while(0);
 $48 = (($1) - ($8))|0;
 $49 = ($48|0)>(0);
 if ($49) {
  $50 = HEAP32[$__s$0>>2]|0;
  $51 = (($50) + 48|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_iiii[$52 & 511]($__s$0,$__op,$48)|0);
  $54 = ($53|0)==($48|0);
  if (!($54)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__va = 0, $ap2$i = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_malloc(240)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0$i = -1;
  } else {
   $vacopy_currentptr = HEAP32[$__va>>2]|0;
   HEAP32[$ap2$i>>2] = $vacopy_currentptr;
   $3 = (_vsnprintf($1,240,$__format,$ap2$i)|0);
   $4 = ($3>>>0)<(240);
   if ($4) {
    $5 = (($3) + 1)|0;
    $6 = (_realloc($1,$5)|0);
    $7 = ($6|0)!=(0|0);
    $8 = $7 ? $6 : $1;
    HEAP32[$__s>>2] = $8;
    $$0$i = $3;
    break;
   }
   _free($1);
   $9 = ($3|0)<(0);
   if ($9) {
    $$0$i = -1;
   } else {
    $10 = (($3) + 1)|0;
    $11 = (_malloc($10)|0);
    HEAP32[$__s>>2] = $11;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0$i = -1;
    } else {
     $13 = (_vsnprintf($11,$10,$__format,$__va)|0);
     $$0$i = $13;
    }
   }
  }
 } while(0);
 $14 = ($0|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return ($$0$i|0);
 }
 __THREW__ = 0;
 (invoke_ii(405,($0|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch(0|0)|0;
  $18 = tempRet0;
  ___clang_call_terminate($17);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s$0,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s$0 = $__s$0|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = ($__s$0|0)==(0|0);
 if ($0) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $1 = $__oe;
 $2 = $__ob;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($2))|0;
 $11 = $10 >> 2;
 $12 = ($10|0)>(0);
 if ($12) {
  $13 = HEAP32[$__s$0>>2]|0;
  $14 = (($13) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 511]($__s$0,$__ob,$11)|0);
  $17 = ($16|0)==($11|0);
  if (!($17)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $18 = ($__ns$0|0)>(0);
 do {
  if ($18) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $19 = HEAP8[$__sp>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $24 = (($__sp) + 4|0);
    $28 = $24;
   } else {
    $22 = (($__sp) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $28 = $23;
   }
   $25 = HEAP32[$__s$0>>2]|0;
   $26 = (($25) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   $29 = (invoke_iiii($27|0,($__s$0|0),($28|0),($__ns$0|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $40 = HEAP8[$__sp>>0]|0;
    $41 = $40 & 1;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     ___resumeException($38|0);
     // unreachable;
    }
    $43 = (($__sp) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    _free($44);
    ___resumeException($38|0);
    // unreachable;
   }
   $32 = ($29|0)==($__ns$0|0);
   if ($32) {
    $45 = HEAP8[$__sp>>0]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     break;
    }
    $48 = (($__sp) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    _free($49);
    break;
   }
   HEAP32[$agg$result>>2] = 0;
   $33 = HEAP8[$__sp>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    STACKTOP = sp;return;
   }
   $36 = (($__sp) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   _free($37);
   STACKTOP = sp;return;
  }
 } while(0);
 $50 = (($1) - ($9))|0;
 $51 = $50 >> 2;
 $52 = ($50|0)>(0);
 if ($52) {
  $53 = HEAP32[$__s$0>>2]|0;
  $54 = (($53) + 48|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_iiii[$55 & 511]($__s$0,$__op,$51)|0);
  $57 = ($56|0)==($51|0);
  if (!($57)) {
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $__s$0;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$$pre$i2$i$i8 = 0, $$$pre$i2$i$i82 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i13 = 0, $or$cond = 0, $sext = 0, $sext25 = 0, $tmp$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 511]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = ($__e$0|0)==(0|0);
 do {
  if ($14) {
   label = 10;
  } else {
   $15 = (($__e$0) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($__e$0) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$__e$0>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 511]($__e$0)|0);
    $24 = ($23|0)==(-1);
    if ($24) {
     label = 10;
     break;
    }
   }
   if ($12) {
    $155 = $__e$0;
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  if ($12) {
   label = 11;
  } else {
   $155 = 0;
  }
 }
 if ((label|0) == 11) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 511]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP8[$29>>0]|0;
  $38 = $37&255;
  $$0$i$i = $38;
 }
 $39 = $$0$i$i&255;
 $isascii1$i = ($39<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = (($__ct) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($40<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 & 2048;
  $46 = ($45<<16>>16)==(0);
  if (!($46)) {
   $49 = HEAP32[$__ct>>2]|0;
   $50 = (($49) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 511]($__ct,$39,0)|0);
   $53 = $52 << 24 >> 24;
   $54 = HEAP32[$__b>>2]|0;
   $55 = (($54) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$54>>2]|0;
    $61 = (($60) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    (FUNCTION_TABLE_ii[$62 & 511]($54)|0);
    $$0$in = $__n;$$pre$i2$i$i8 = $155;$79 = $155;$__r$0$in = $53;
   } else {
    $63 = (($56) + 1|0);
    HEAP32[$55>>2] = $63;
    $$0$in = $__n;$$pre$i2$i$i8 = $155;$79 = $155;$__r$0$in = $53;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $64 = HEAP32[$__b>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $77 = 0;
     } else {
      $66 = (($64) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($64) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_ii[$73 & 511]($64)|0);
       $75 = ($74|0)==(-1);
       if ($75) {
        HEAP32[$__b>>2] = 0;
        $77 = 0;
        break;
       } else {
        $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
        $77 = $$pre$i$i$i4;
        break;
       }
      } else {
       $77 = $64;
      }
     }
    } while(0);
    $76 = ($77|0)==(0|0);
    $78 = ($79|0)==(0|0);
    if ($78) {
     $$pre$i2$i$i21 = $$pre$i2$i$i8;$91 = 0;
    } else {
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==($83|0);
     if ($84) {
      $85 = HEAP32[$79>>2]|0;
      $86 = (($85) + 36|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (FUNCTION_TABLE_ii[$87 & 511]($79)|0);
      $89 = ($88|0)==(-1);
      $$$pre$i2$i$i8 = $89 ? 0 : $$pre$i2$i$i8;
      $$$pre$i2$i$i82 = $89 ? 0 : $$pre$i2$i$i8;
      $$pre$i2$i$i21 = $$$pre$i2$i$i8;$91 = $$$pre$i2$i$i82;
     } else {
      $$pre$i2$i$i21 = $$pre$i2$i$i8;$91 = $79;
     }
    }
    $90 = ($91|0)==(0|0);
    $tmp$i$i10 = $76 ^ $90;
    $92 = ($$0|0)>(0);
    $or$cond = $tmp$i$i10 & $92;
    $93 = HEAP32[$__b>>2]|0;
    if (!($or$cond)) {
     label = 38;
     break;
    }
    $94 = (($93) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($93) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$93>>2]|0;
     $100 = (($99) + 36|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 511]($93)|0);
     $$0$i$i11 = $102;
    } else {
     $103 = HEAP8[$95>>0]|0;
     $104 = $103&255;
     $$0$i$i11 = $104;
    }
    $105 = $$0$i$i11&255;
    $isascii1$i13 = ($105<<24>>24)>(-1);
    if (!($isascii1$i13)) {
     $$02 = $__r$0;
     label = 49;
     break;
    }
    $sext25 = $$0$i$i11 << 24;
    $106 = $sext25 >> 24;
    $107 = HEAP32[$41>>2]|0;
    $108 = (($107) + ($106<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109 & 2048;
    $111 = ($110<<16>>16)==(0);
    if ($111) {
     $$02 = $__r$0;
     label = 49;
     break;
    }
    $112 = ($__r$0*10)|0;
    $113 = HEAP32[$__ct>>2]|0;
    $114 = (($113) + 36|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (FUNCTION_TABLE_iiii[$115 & 511]($__ct,$105,0)|0);
    $117 = $116 << 24 >> 24;
    $118 = (($117) + ($112))|0;
    $119 = HEAP32[$__b>>2]|0;
    $120 = (($119) + 12|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($119) + 16|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($121|0)==($123|0);
    if ($124) {
     $125 = HEAP32[$119>>2]|0;
     $126 = (($125) + 40|0);
     $127 = HEAP32[$126>>2]|0;
     (FUNCTION_TABLE_ii[$127 & 511]($119)|0);
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$79 = $91;$__r$0$in = $118;
     continue;
    } else {
     $128 = (($121) + 1|0);
     HEAP32[$120>>2] = $128;
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$79 = $91;$__r$0$in = $118;
     continue;
    }
   }
   if ((label|0) == 38) {
    $129 = ($93|0)==(0|0);
    do {
     if ($129) {
      $141 = 0;
     } else {
      $130 = (($93) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($93) + 16|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = ($131|0)==($133|0);
      if ($134) {
       $135 = HEAP32[$93>>2]|0;
       $136 = (($135) + 36|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = (FUNCTION_TABLE_ii[$137 & 511]($93)|0);
       $139 = ($138|0)==(-1);
       if ($139) {
        HEAP32[$__b>>2] = 0;
        $141 = 0;
        break;
       } else {
        $$pre$i$i$i17 = HEAP32[$__b>>2]|0;
        $141 = $$pre$i$i$i17;
        break;
       }
      } else {
       $141 = $93;
      }
     }
    } while(0);
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i21|0)==(0|0);
    do {
     if ($142) {
      label = 47;
     } else {
      $143 = (($$pre$i2$i$i21) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i21) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i2$i$i21>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (FUNCTION_TABLE_ii[$150 & 511]($$pre$i2$i$i21)|0);
       $152 = ($151|0)==(-1);
       if ($152) {
        label = 47;
        break;
       }
      }
      if ($140) {
       $$02 = $__r$0;
       STACKTOP = sp;return ($$02|0);
      }
     }
    } while(0);
    if ((label|0) == 47) {
     if (!($140)) {
      $$02 = $__r$0;
      STACKTOP = sp;return ($$02|0);
     }
    }
    $153 = HEAP32[$__err>>2]|0;
    $154 = $153 | 2;
    HEAP32[$__err>>2] = $154;
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
   else if ((label|0) == 49) {
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 $47 = HEAP32[$__err>>2]|0;
 $48 = $47 | 4;
 HEAP32[$__err>>2] = $48;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e$0,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e$0 = $__e$0|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$$pre$i3$i$i11 = 0, $$$pre$i3$i$i112 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$in = 0, $$02 = 0, $$phitmp$i4$i$i12 = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0, $$pre$i3$i$i26 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i6 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $146 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 511]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $146 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $146 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = ($__e$0|0)==(0|0);
 if ($13) {
  label = 13;
 } else {
  $14 = (($__e$0) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($__e$0) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)==($17|0);
  if ($18) {
   $19 = HEAP32[$__e$0>>2]|0;
   $20 = (($19) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 511]($__e$0)|0);
   $$0$i$i1$i$i = $22;
  } else {
   $23 = HEAP32[$15>>2]|0;
   $$0$i$i1$i$i = $23;
  }
  $24 = ($$0$i$i1$i$i|0)==(-1);
  if ($24) {
   label = 13;
  } else {
   if ($146) {
    $147 = $__e$0;
   } else {
    label = 15;
   }
  }
 }
 if ((label|0) == 13) {
  if ($146) {
   label = 15;
  } else {
   $147 = 0;
  }
 }
 if ((label|0) == 15) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 6;
  HEAP32[$__err>>2] = $26;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29|0)==($31|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 511]($27)|0);
  $$0$i$i = $36;
 } else {
  $37 = HEAP32[$29>>2]|0;
  $$0$i$i = $37;
 }
 $38 = HEAP32[$__ct>>2]|0;
 $39 = (($38) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iiii[$40 & 511]($__ct,2048,$$0$i$i)|0);
 if (!($41)) {
  $42 = HEAP32[$__err>>2]|0;
  $43 = $42 | 4;
  HEAP32[$__err>>2] = $43;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $44 = HEAP32[$__ct>>2]|0;
 $45 = (($44) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_iiii[$46 & 511]($__ct,$$0$i$i,0)|0);
 $48 = $47 << 24 >> 24;
 $49 = HEAP32[$__b>>2]|0;
 $50 = (($49) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51|0)==($53|0);
 if ($54) {
  $55 = HEAP32[$49>>2]|0;
  $56 = (($55) + 40|0);
  $57 = HEAP32[$56>>2]|0;
  (FUNCTION_TABLE_ii[$57 & 511]($49)|0);
  $$0$in = $__n;$$pre$i3$i$i11 = $147;$73 = $147;$__r$0$in = $48;
 } else {
  $58 = (($51) + 4|0);
  HEAP32[$50>>2] = $58;
  $$0$in = $__n;$$pre$i3$i$i11 = $147;$73 = $147;$__r$0$in = $48;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $59 = HEAP32[$__b>>2]|0;
  $60 = ($59|0)==(0|0);
  do {
   if ($60) {
    $85 = 1;
   } else {
    $61 = (($59) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($59) + 16|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($62|0)==($64|0);
    if ($65) {
     $66 = HEAP32[$59>>2]|0;
     $67 = (($66) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (FUNCTION_TABLE_ii[$68 & 511]($59)|0);
     $$0$i$i$i$i3 = $69;
    } else {
     $70 = HEAP32[$62>>2]|0;
     $$0$i$i$i$i3 = $70;
    }
    $71 = ($$0$i$i$i$i3|0)==(-1);
    if ($71) {
     HEAP32[$__b>>2] = 0;
     $85 = 1;
     break;
    } else {
     $$pre$i$i$i5 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i6 = ($$pre$i$i$i5|0)==(0|0);
     $85 = $phitmp$i$i$i6;
     break;
    }
   }
  } while(0);
  $72 = ($73|0)==(0|0);
  if ($72) {
   $$pre$i3$i$i26 = $$pre$i3$i$i11;$148 = 0;$86 = 1;
  } else {
   $74 = (($73) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($75|0)==($77|0);
   if ($78) {
    $79 = HEAP32[$73>>2]|0;
    $80 = (($79) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_ii[$81 & 511]($73)|0);
    $$0$i$i1$i$i9 = $82;
   } else {
    $83 = HEAP32[$75>>2]|0;
    $$0$i$i1$i$i9 = $83;
   }
   $84 = ($$0$i$i1$i$i9|0)==(-1);
   $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
   $$$pre$i3$i$i11 = $84 ? 0 : $$pre$i3$i$i11;
   $$$pre$i3$i$i112 = $84 ? 0 : $$pre$i3$i$i11;
   $$phitmp$i4$i$i12 = $84 ? 1 : $phitmp$i4$i$i12;
   $$pre$i3$i$i26 = $$$pre$i3$i$i11;$148 = $$$pre$i3$i$i112;$86 = $$phitmp$i4$i$i12;
  }
  $tmp$i$i14 = $85 ^ $86;
  $87 = ($$0|0)>(0);
  $or$cond = $tmp$i$i14 & $87;
  $88 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   break;
  }
  $89 = (($88) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  if ($93) {
   $94 = HEAP32[$88>>2]|0;
   $95 = (($94) + 36|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (FUNCTION_TABLE_ii[$96 & 511]($88)|0);
   $$0$i$i15 = $97;
  } else {
   $98 = HEAP32[$90>>2]|0;
   $$0$i$i15 = $98;
  }
  $99 = HEAP32[$__ct>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_iiii[$101 & 511]($__ct,2048,$$0$i$i15)|0);
  if (!($102)) {
   $$02 = $__r$0;
   label = 59;
   break;
  }
  $103 = ($__r$0*10)|0;
  $104 = HEAP32[$__ct>>2]|0;
  $105 = (($104) + 52|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_iiii[$106 & 511]($__ct,$$0$i$i15,0)|0);
  $108 = $107 << 24 >> 24;
  $109 = (($108) + ($103))|0;
  $110 = HEAP32[$__b>>2]|0;
  $111 = (($110) + 12|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($110) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112|0)==($114|0);
  if ($115) {
   $116 = HEAP32[$110>>2]|0;
   $117 = (($116) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   (FUNCTION_TABLE_ii[$118 & 511]($110)|0);
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$73 = $148;$__r$0$in = $109;
   continue;
  } else {
   $119 = (($112) + 4|0);
   HEAP32[$111>>2] = $119;
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$73 = $148;$__r$0$in = $109;
   continue;
  }
 }
 if ((label|0) == 59) {
  STACKTOP = sp;return ($$02|0);
 }
 $120 = ($88|0)==(0|0);
 do {
  if ($120) {
   $149 = 1;
  } else {
   $121 = (($88) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($88) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$88>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 511]($88)|0);
    $$0$i$i$i$i18 = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i$i$i18 = $130;
   }
   $131 = ($$0$i$i$i$i18|0)==(-1);
   if ($131) {
    HEAP32[$__b>>2] = 0;
    $149 = 1;
    break;
   } else {
    $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
    $149 = $phitmp$i$i$i21;
    break;
   }
  }
 } while(0);
 $132 = ($$pre$i3$i$i26|0)==(0|0);
 if ($132) {
  label = 56;
 } else {
  $133 = (($$pre$i3$i$i26) + 12|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($$pre$i3$i$i26) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($134|0)==($136|0);
  if ($137) {
   $138 = HEAP32[$$pre$i3$i$i26>>2]|0;
   $139 = (($138) + 36|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (FUNCTION_TABLE_ii[$140 & 511]($$pre$i3$i$i26)|0);
   $$0$i$i1$i$i24 = $141;
  } else {
   $142 = HEAP32[$134>>2]|0;
   $$0$i$i1$i$i24 = $142;
  }
  $143 = ($$0$i$i1$i$i24|0)==(-1);
  if ($143) {
   label = 56;
  } else {
   if ($149) {
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 if ((label|0) == 56) {
  if (!($149)) {
   $$02 = $__r$0;
   STACKTOP = sp;return ($$02|0);
  }
 }
 $144 = HEAP32[$__err>>2]|0;
 $145 = $144 | 2;
 HEAP32[$__err>>2] = $145;
 $$02 = $__r$0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(406|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = (___cxa_allocate_exception(4)|0);
  HEAP32[$16>>2] = ((14760 + 8|0));
  ___cxa_throw(($16|0),(14816|0),(323|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $24 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $24 = $14;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $24 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 447;
 $23 = (($24) + ($12)|0);
 HEAP32[$__n>>2] = $23;
 $25 = HEAP32[$__b>>2]|0;
 $26 = (($25) + ($$)|0);
 HEAP32[$__e>>2] = $26;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(406|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0);
  HEAP32[$17>>2] = ((14760 + 8|0));
  ___cxa_throw(($17|0),(14816|0),(323|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $26 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $26 = $15;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $26 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 447;
 $24 = $$ >>> 2;
 $25 = (($26) + ($13<<2)|0);
 HEAP32[$__n>>2] = $25;
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 HEAP32[$__e>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(406|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = (___cxa_allocate_exception(4)|0);
  HEAP32[$17>>2] = ((14760 + 8|0));
  ___cxa_throw(($17|0),(14816|0),(323|0));
  // unreachable;
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $26 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $18 = ($$pr|0)==(0|0);
   if ($18) {
    $26 = $15;
   } else {
    $19 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($19|0,($$pr|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $26 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 447;
 $24 = $$ >>> 2;
 $25 = (($26) + ($13<<2)|0);
 HEAP32[$__n>>2] = $25;
 $27 = HEAP32[$__b>>2]|0;
 $28 = (($27) + ($24<<2)|0);
 HEAP32[$__e>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(448,($this|0),($__n|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch()|0;
  $13 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($12|0);
  // unreachable;
 }
 $$pre$i = HEAP32[$0>>2]|0;
 $$0$i = $__n;$7 = $$pre$i;
 while(1) {
  $6 = ($7|0)==(0|0);
  if ($6) {
   $9 = 0;
  } else {
   HEAP32[$7>>2] = 0;
   $$pre1$i = HEAP32[$0>>2]|0;
   $9 = $$pre1$i;
  }
  $8 = (($9) + 4|0);
  HEAP32[$0>>2] = $8;
  $10 = (($$0$i) + -1)|0;
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  } else {
   $$0$i = $10;$7 = $8;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = (($this) + 16|0);
 $10 = ($9|0)==($0|0);
 if ($10) {
  $11 = (($this) + 128|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
 } else {
  _free($0);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor112($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((13856 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((13856 + 164|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((13856 + 144|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((13856 + 152|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((13856 + 132|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((13856 + 140|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((13856 + 120|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((13856 + 128|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((13856 + 108|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((13856 + 116|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((13856 + 96|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((13856 + 104|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((13856 + 84|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((13856 + 92|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((13856 + 72|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((13856 + 80|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((13856 + 60|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((13856 + 68|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((13856 + 48|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((13856 + 56|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((13856 + 36|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((13856 + 44|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((13856 + 24|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((13856 + 32|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((13856 + 12|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((13856 + 20|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[13856>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = HEAP32[((13856 + 8|0))>>2]|0;
 _free($56);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor97($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((13320 + 156|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((13320 + 164|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((13320 + 144|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((13320 + 152|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((13320 + 132|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((13320 + 140|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((13320 + 120|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((13320 + 128|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((13320 + 108|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((13320 + 116|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((13320 + 96|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((13320 + 104|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((13320 + 84|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((13320 + 92|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((13320 + 72|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((13320 + 80|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((13320 + 60|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((13320 + 68|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((13320 + 48|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((13320 + 56|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((13320 + 36|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((13320 + 44|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((13320 + 24|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((13320 + 32|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((13320 + 12|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((13320 + 20|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[13320>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if ($55) {
  STACKTOP = sp;return;
 }
 $56 = HEAP32[((13320 + 8|0))>>2]|0;
 _free($56);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor73($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((12808 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((12808 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((12808 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((12808 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((12808 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((12808 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((12808 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((12808 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((12808 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((12808 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((12808 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((12808 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((12808 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((12808 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((12808 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((12808 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((12808 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((12808 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((12808 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((12808 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((12808 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((12808 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((12808 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((12808 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((12808 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((12808 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((12808 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((12808 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((12808 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((12808 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((12808 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((12808 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((12808 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((12808 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((12808 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((12808 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((12808 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((12808 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((12808 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((12808 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((12808 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((12808 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((12808 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((12808 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((12808 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((12808 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[12808>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((12808 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor48($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11968 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11968 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((11968 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((11968 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((11968 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((11968 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((11968 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((11968 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((11968 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((11968 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((11968 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11968 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((11968 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((11968 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((11968 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((11968 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((11968 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((11968 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((11968 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((11968 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((11968 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11968 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((11968 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((11968 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((11968 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((11968 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((11968 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((11968 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((11968 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((11968 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((11968 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11968 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((11968 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((11968 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((11968 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((11968 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((11968 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((11968 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((11968 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((11968 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((11968 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11968 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((11968 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((11968 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((11968 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((11968 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[11968>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((11968 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11656 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11656 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((11656 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((11656 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((11656 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((11656 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((11656 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((11656 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((11656 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((11656 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((11656 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11656 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((11656 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((11656 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((11656 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((11656 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((11656 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((11656 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((11656 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((11656 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((11656 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11656 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((11656 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((11656 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((11656 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((11656 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((11656 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((11656 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((11656 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((11656 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((11656 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11656 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((11656 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((11656 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((11656 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((11656 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((11656 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((11656 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((11656 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((11656 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((11656 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11656 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((11656 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((11656 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((11656 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((11656 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[11656>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((11656 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[((11328 + 276|0))>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = HEAP32[((11328 + 284|0))>>2]|0;
  _free($4);
 }
 $5 = HEAP8[((11328 + 264|0))>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = HEAP32[((11328 + 272|0))>>2]|0;
  _free($8);
 }
 $9 = HEAP8[((11328 + 252|0))>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = HEAP32[((11328 + 260|0))>>2]|0;
  _free($12);
 }
 $13 = HEAP8[((11328 + 240|0))>>0]|0;
 $14 = $13 & 1;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = HEAP32[((11328 + 248|0))>>2]|0;
  _free($16);
 }
 $17 = HEAP8[((11328 + 228|0))>>0]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if (!($19)) {
  $20 = HEAP32[((11328 + 236|0))>>2]|0;
  _free($20);
 }
 $21 = HEAP8[((11328 + 216|0))>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[((11328 + 224|0))>>2]|0;
  _free($24);
 }
 $25 = HEAP8[((11328 + 204|0))>>0]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = HEAP32[((11328 + 212|0))>>2]|0;
  _free($28);
 }
 $29 = HEAP8[((11328 + 192|0))>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  $32 = HEAP32[((11328 + 200|0))>>2]|0;
  _free($32);
 }
 $33 = HEAP8[((11328 + 180|0))>>0]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  $36 = HEAP32[((11328 + 188|0))>>2]|0;
  _free($36);
 }
 $37 = HEAP8[((11328 + 168|0))>>0]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if (!($39)) {
  $40 = HEAP32[((11328 + 176|0))>>2]|0;
  _free($40);
 }
 $41 = HEAP8[((11328 + 156|0))>>0]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $44 = HEAP32[((11328 + 164|0))>>2]|0;
  _free($44);
 }
 $45 = HEAP8[((11328 + 144|0))>>0]|0;
 $46 = $45 & 1;
 $47 = ($46<<24>>24)==(0);
 if (!($47)) {
  $48 = HEAP32[((11328 + 152|0))>>2]|0;
  _free($48);
 }
 $49 = HEAP8[((11328 + 132|0))>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if (!($51)) {
  $52 = HEAP32[((11328 + 140|0))>>2]|0;
  _free($52);
 }
 $53 = HEAP8[((11328 + 120|0))>>0]|0;
 $54 = $53 & 1;
 $55 = ($54<<24>>24)==(0);
 if (!($55)) {
  $56 = HEAP32[((11328 + 128|0))>>2]|0;
  _free($56);
 }
 $57 = HEAP8[((11328 + 108|0))>>0]|0;
 $58 = $57 & 1;
 $59 = ($58<<24>>24)==(0);
 if (!($59)) {
  $60 = HEAP32[((11328 + 116|0))>>2]|0;
  _free($60);
 }
 $61 = HEAP8[((11328 + 96|0))>>0]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if (!($63)) {
  $64 = HEAP32[((11328 + 104|0))>>2]|0;
  _free($64);
 }
 $65 = HEAP8[((11328 + 84|0))>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if (!($67)) {
  $68 = HEAP32[((11328 + 92|0))>>2]|0;
  _free($68);
 }
 $69 = HEAP8[((11328 + 72|0))>>0]|0;
 $70 = $69 & 1;
 $71 = ($70<<24>>24)==(0);
 if (!($71)) {
  $72 = HEAP32[((11328 + 80|0))>>2]|0;
  _free($72);
 }
 $73 = HEAP8[((11328 + 60|0))>>0]|0;
 $74 = $73 & 1;
 $75 = ($74<<24>>24)==(0);
 if (!($75)) {
  $76 = HEAP32[((11328 + 68|0))>>2]|0;
  _free($76);
 }
 $77 = HEAP8[((11328 + 48|0))>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if (!($79)) {
  $80 = HEAP32[((11328 + 56|0))>>2]|0;
  _free($80);
 }
 $81 = HEAP8[((11328 + 36|0))>>0]|0;
 $82 = $81 & 1;
 $83 = ($82<<24>>24)==(0);
 if (!($83)) {
  $84 = HEAP32[((11328 + 44|0))>>2]|0;
  _free($84);
 }
 $85 = HEAP8[((11328 + 24|0))>>0]|0;
 $86 = $85 & 1;
 $87 = ($86<<24>>24)==(0);
 if (!($87)) {
  $88 = HEAP32[((11328 + 32|0))>>2]|0;
  _free($88);
 }
 $89 = HEAP8[((11328 + 12|0))>>0]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if (!($91)) {
  $92 = HEAP32[((11328 + 20|0))>>2]|0;
  _free($92);
 }
 $93 = HEAP8[11328>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  STACKTOP = sp;return;
 }
 $96 = HEAP32[((11328 + 8|0))>>2]|0;
 _free($96);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (_strtoll($__a,$__p2,$__base)|0);
 $4 = tempRet0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($5|0)==(34);
 do {
  if ($9) {
   HEAP32[$__err>>2] = 4;
   $20 = ($4|0)>(0);
   $21 = ($3>>>0)>(0);
   $22 = ($4|0)==(0);
   $23 = $22 & $21;
   $24 = $20 | $23;
   if ($24) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $10 = ($4|0)<(-1);
   $11 = ($3>>>0)<(2147483648);
   $12 = ($4|0)==(-1);
   $13 = $12 & $11;
   $14 = $10 | $13;
   if ($14) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $15 = ($4|0)>(0);
   $16 = ($3>>>0)>(2147483647);
   $17 = ($4|0)==(0);
   $18 = $17 & $16;
   $19 = $15 | $18;
   if ($19) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $3;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $17 = 0;$18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (_strtoll($__a,$__p2,$__base)|0);
 $4 = tempRet0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $17 = 0;$18 = 0;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
  $10 = ($4|0)>(0);
  $11 = ($3>>>0)>(0);
  $12 = ($4|0)==(0);
  $13 = $12 & $11;
  $14 = $10 | $13;
  $15 = $14 ? -1 : 0;
  $16 = $14 ? 2147483647 : -2147483648;
  tempRet0 = $16;
  STACKTOP = sp;return ($15|0);
 } else {
  $17 = $4;$18 = $3;
  tempRet0 = $17;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($5>>>0)>(65535);
 $14 = ($6|0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $17 = $5&65535;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($5>>>0)>(4294967295);
 $14 = ($6|0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $5 = (_strtoull($__a,$__p2,$__base)|0);
 $6 = tempRet0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = $4;
 }
 $9 = HEAP32[$__p2>>2]|0;
 $10 = ($9|0)==($__a_end|0);
 if (!($10)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(34);
 $12 = ($6>>>0)>(0);
 $13 = ($5>>>0)>(4294967295);
 $14 = ($6|0)==(0);
 $15 = $14 & $13;
 $16 = $12 | $15;
 $or$cond = $11 | $16;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $12 = 0;$13 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $12 = 0;$13 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $5 = (_strtoull($__a,$__p2,$__base)|0);
   $6 = tempRet0;
   $7 = HEAP32[$3>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[$3>>2] = $4;
   }
   $9 = HEAP32[$__p2>>2]|0;
   $10 = ($9|0)==($__a_end|0);
   if (!($10)) {
    HEAP32[$__err>>2] = 4;
    $12 = 0;$13 = 0;
    break;
   }
   $11 = ($7|0)==(34);
   if ($11) {
    HEAP32[$__err>>2] = 4;
    $12 = -1;$13 = -1;
   } else {
    $12 = $6;$13 = $5;
   }
  }
 } while(0);
 tempRet0 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 (__ZNSt3__16__clocEv()|0);
 $3 = (+_strtold_l($__a,$__p2));
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$1>>2] = $2;
 }
 $6 = HEAP32[$__p2>>2]|0;
 $7 = ($6|0)==($__a_end|0);
 if (!($7)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $8 = ($4|0)==(34);
 if ($8) {
  HEAP32[$__err>>2] = 4;
 }
 $9 = $3;
 $$0 = $9;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $3 = (+_strtold_l($__a,$__p2));
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$1>>2] = $2;
   }
   $6 = HEAP32[$__p2>>2]|0;
   $7 = ($6|0)==($__a_end|0);
   if (!($7)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $8 = ($4|0)==(34);
   if ($8) {
    HEAP32[$__err>>2] = 4;
    $$0 = $3;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   (__ZNSt3__16__clocEv()|0);
   $3 = (+_strtold_l($__a,$__p2));
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$1>>2] = $2;
   }
   $6 = HEAP32[$__p2>>2]|0;
   $7 = ($6|0)==($__a_end|0);
   if (!($7)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $8 = ($4|0)==(34);
   if ($8) {
    HEAP32[$__err>>2] = 4;
    $$0 = $3;
   } else {
    $$0 = $3;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 14384 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (14168 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$148 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$830 = 0, $$in1 = 0, $$old1 = 0, $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0;
 var $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1033 = 0, $s$1034 = 0, $s$19 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   }
   while(1) {
    $64 = HEAP8[$s$518>>0]|0;
    $65 = $64&255;
    $66 = (($65) + -1)|0;
    $67 = ($66>>>0)<(127);
    L33: do {
     if ($67) {
      $68 = $s$518;
      $69 = $68 & 3;
      $70 = ($69|0)==(0);
      $71 = ($$4716>>>0)>(4);
      $or$cond = $70 & $71;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $72 = HEAP32[$s$6>>2]|0;
        $73 = (($72) + -16843009)|0;
        $74 = $73 | $72;
        $75 = $74 & -2139062144;
        $76 = ($75|0)==(0);
        $77 = $72&255;
        if (!($76)) {
         $$2 = $$1;$$6 = $$5;$95 = $77;$s$7 = $s$6;
         break L33;
        }
        $78 = (($s$6) + 1|0);
        $79 = $72 & 255;
        $80 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $79;
        $81 = (($s$6) + 2|0);
        $82 = HEAP8[$78>>0]|0;
        $83 = $82&255;
        $84 = (($$1) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$6) + 3|0);
        $86 = HEAP8[$81>>0]|0;
        $87 = $86&255;
        $88 = (($$1) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$6) + 4|0);
        $90 = HEAP8[$85>>0]|0;
        $91 = $90&255;
        $92 = (($$1) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$5) + -4)|0;
        $$old1 = ($93>>>0)>(4);
        if ($$old1) {
         $$1 = $92;$$5 = $93;$s$6 = $89;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$89>>0]|0;
       $$2 = $92;$$6 = $93;$95 = $$pre$pre;$s$7 = $89;
      } else {
       $$2 = $$0217;$$6 = $$4716;$95 = $64;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$95 = $64;$s$7 = $s$518;
     }
    } while(0);
    $94 = $95&255;
    $96 = (($94) + -1)|0;
    $97 = ($96>>>0)<(127);
    if (!($97)) {
     break;
    }
    $98 = (($s$7) + 1|0);
    $99 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $94;
    $100 = (($$6) + -1)|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $s$5$lcssa = $98;
     label = 26;
     break L7;
    } else {
     $$0217 = $99;$$4716 = $100;$s$518 = $98;
    }
   }
   $102 = (($94) + -194)|0;
   $103 = ($102>>>0)>(50);
   if ($103) {
    $$432 = $$2;$$830 = $$6;$144 = $95;$s$1034 = $s$7;
    label = 48;
    break;
   }
   $104 = (($s$7) + 1|0);
   $105 = (14168 + ($102<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $106;$s$8 = $104;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$148 = $$03;$s$19 = $s$0;
      while(1) {
       $19 = (($s$19) + 4|0);
       $20 = (($$148) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$148 = $20;$s$19 = $19;
       } else {
        $$14$lcssa = $20;$$in1 = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in1 = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in1&255;
     $27 = $$in1&255;
     $$25 = $$14$lcssa;$149 = $26;$29 = $27;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$149 = $7;$29 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$149 = $7;$29 = $7;$s$2 = $s$0;
   }
   $28 = $29&255;
   $30 = (($28) + -1)|0;
   $31 = ($30>>>0)<(127);
   if ($31) {
    $32 = (($s$2) + 1|0);
    $33 = (($$25) + -1)|0;
    $$03 = $33;$s$0 = $32;
    label = 7;
    continue;
   }
   $34 = (($28) + -194)|0;
   $35 = ($34>>>0)>(50);
   if ($35) {
    $$432 = $ws;$$830 = $$25;$144 = $149;$s$1034 = $s$2;
    label = 48;
    break;
   }
   $36 = (($s$2) + 1|0);
   $37 = (14168 + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$36 = $$25;$c$2 = $38;$s$3 = $36;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $39 = HEAP8[$s$3>>0]|0;
   $40 = $39&255;
   $41 = $40 >>> 3;
   $42 = (($41) + -16)|0;
   $43 = $c$2 >> 26;
   $44 = (($41) + ($43))|0;
   $45 = $42 | $44;
   $46 = ($45>>>0)>(7);
   if ($46) {
    label = 17;
    break;
   }
   $48 = (($s$3) + 1|0);
   $49 = $c$2 & 33554432;
   $50 = ($49|0)==(0);
   if ($50) {
    $s$4 = $48;
   } else {
    $51 = HEAP8[$48>>0]|0;
    $52 = $51 & -64;
    $53 = ($52<<24>>24)==(-128);
    if (!($53)) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55>>0]|0;
     $59 = $58 & -64;
     $60 = ($59<<24>>24)==(-128);
     if (!($60)) {
      label = 23;
      break;
     }
     $62 = (($s$3) + 3|0);
     $s$4 = $62;
    }
   }
   $63 = (($$36) + -1)|0;
   $$03 = $63;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $107 = HEAP8[$s$8>>0]|0;
   $108 = $107&255;
   $109 = $108 >>> 3;
   $110 = (($109) + -16)|0;
   $111 = $c$4 >> 26;
   $112 = (($109) + ($111))|0;
   $113 = $110 | $112;
   $114 = ($113>>>0)>(7);
   if ($114) {
    label = 37;
    break;
   }
   $116 = $c$4 << 6;
   $117 = (($s$8) + 1|0);
   $118 = (($108) + -128)|0;
   $119 = $118 | $116;
   $120 = ($119|0)<(0);
   if ($120) {
    $121 = HEAP8[$117>>0]|0;
    $122 = $121&255;
    $123 = $122 & 192;
    $124 = ($123|0)==(128);
    if (!($124)) {
     label = 40;
     break;
    }
    $126 = $119 << 6;
    $127 = (($s$8) + 2|0);
    $128 = (($122) + -128)|0;
    $129 = $128 | $126;
    $130 = ($129|0)<(0);
    if ($130) {
     $131 = HEAP8[$127>>0]|0;
     $132 = $131&255;
     $133 = $132 & 192;
     $134 = ($133|0)==(128);
     if (!($134)) {
      label = 43;
      break;
     }
     $136 = $129 << 6;
     $137 = (($s$8) + 3|0);
     $138 = (($132) + -128)|0;
     $139 = $138 | $136;
     $c$5 = $139;$s$9 = $137;
    } else {
     $c$5 = $129;$s$9 = $127;
    }
   } else {
    $c$5 = $119;$s$9 = $117;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$02$ph = $140;$$47$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $47 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $47;
  label = 46;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $54;
  label = 46;
 }
 else if ((label|0) == 23) {
  $61 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $61;
  label = 46;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 37) {
  $115 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $115;
  label = 46;
 }
 else if ((label|0) == 40) {
  $125 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $119;$s$10 = $125;
  label = 46;
 }
 else if ((label|0) == 43) {
  $135 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $129;$s$10 = $135;
  label = 46;
 }
 if ((label|0) == 46) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$pre = HEAP8[$s$10>>0]|0;
   $$432 = $$4;$$830 = $$8;$144 = $$pre;$s$1034 = $s$10;
   label = 48;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $143 = ($144<<24>>24)==(0);
  if ($143) {
   $145 = ($$432|0)==(0|0);
   if (!($145)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$830))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$431|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsrtombs($s,$ws,$n) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$414>>>0)<($35>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0$lcssa$i = 0, $$012$i = 0, $$1$lcssa$i = 0, $$15$i = 0, $$22$i = 0, $$3$i = 0, $$lcssa$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, $or$cond$i = 0, $or$cond11$i = 0, $phitmp = 0, $s$0$lcssa$i = 0, $s$013$i = 0, $s$13$i = 0, $s$2$i = 0, $w$0$lcssa$i = 0, $w$06$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = $1;
 $4 = $3 & 3;
 $5 = ($4|0)!=(0);
 $6 = ($2|0)!=(0);
 $or$cond11$i = $5 & $6;
 L1: do {
  if ($or$cond11$i) {
   $$012$i = $2;$s$013$i = $1;
   while(1) {
    $7 = HEAP8[$s$013$i>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3$i = $$012$i;$s$2$i = $s$013$i;
     break L1;
    }
    $9 = (($s$013$i) + 1|0);
    $10 = (($$012$i) + -1)|0;
    $11 = $9;
    $12 = $11 & 3;
    $13 = ($12|0)!=(0);
    $14 = ($10|0)!=(0);
    $or$cond$i = $13 & $14;
    if ($or$cond$i) {
     $$012$i = $10;$s$013$i = $9;
    } else {
     $$0$lcssa$i = $10;$$lcssa$i = $14;$s$0$lcssa$i = $9;
     label = 4;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $2;$$lcssa$i = $6;$s$0$lcssa$i = $1;
   label = 4;
  }
 } while(0);
 L5: do {
  if ((label|0) == 4) {
   if ($$lcssa$i) {
    $$pre = HEAP8[$s$0$lcssa$i>>0]|0;
    $phitmp = ($$pre<<24>>24)==(0);
    if ($phitmp) {
     $$3$i = $$0$lcssa$i;$s$2$i = $s$0$lcssa$i;
    } else {
     $15 = ($$0$lcssa$i>>>0)>(3);
     L9: do {
      if ($15) {
       $$15$i = $$0$lcssa$i;$w$06$i = $s$0$lcssa$i;
       while(1) {
        $16 = HEAP32[$w$06$i>>2]|0;
        $17 = (($16) + -16843009)|0;
        $18 = $16 & -2139062144;
        $19 = $18 ^ -2139062144;
        $20 = $19 & $17;
        $21 = ($20|0)==(0);
        if (!($21)) {
         $$1$lcssa$i = $$15$i;$w$0$lcssa$i = $w$06$i;
         break L9;
        }
        $22 = (($w$06$i) + 4|0);
        $23 = (($$15$i) + -4)|0;
        $24 = ($23>>>0)>(3);
        if ($24) {
         $$15$i = $23;$w$06$i = $22;
        } else {
         $$1$lcssa$i = $23;$w$0$lcssa$i = $22;
         break;
        }
       }
      } else {
       $$1$lcssa$i = $$0$lcssa$i;$w$0$lcssa$i = $s$0$lcssa$i;
      }
     } while(0);
     $25 = ($$1$lcssa$i|0)==(0);
     if ($25) {
      $$3$i = 0;$s$2$i = $w$0$lcssa$i;
     } else {
      $$22$i = $$1$lcssa$i;$s$13$i = $w$0$lcssa$i;
      while(1) {
       $26 = HEAP8[$s$13$i>>0]|0;
       $27 = ($26<<24>>24)==(0);
       if ($27) {
        $$3$i = $$22$i;$s$2$i = $s$13$i;
        break L5;
       }
       $28 = (($s$13$i) + 1|0);
       $29 = (($$22$i) + -1)|0;
       $30 = ($29|0)==(0);
       if ($30) {
        $$3$i = 0;$s$2$i = $28;
        break;
       } else {
        $$22$i = $29;$s$13$i = $28;
       }
      }
     }
    }
   } else {
    $$3$i = 0;$s$2$i = $s$0$lcssa$i;
   }
  }
 } while(0);
 $31 = ($$3$i|0)!=(0);
 $32 = $31 ? $s$2$i : 0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $k$0 = $2;
 } else {
  $34 = $32;
  $35 = (($34) - ($3))|0;
  $k$0 = $35;
 }
 $36 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $36 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $37 = (($1) + ($k$0$len)|0);
 $38 = (($f) + 4|0);
 HEAP32[$38>>2] = $37;
 $39 = (($1) + ($k$0)|0);
 $40 = (($f) + 8|0);
 HEAP32[$40>>2] = $39;
 HEAP32[$0>>2] = $39;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$i = 0, $$10$i = 0, $$11$i = 0, $$12$i = 0, $$13$i = 0, $$8$i = 0, $$lcssa21$i = 0, $$not$i = 0, $$old4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi243$iZ2D = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre229$i = 0, $$pre231$i = 0, $$pre235$i = 0, $$pre237$i = 0, $$pre238$i = 0;
 var $$pre240$i = 0, $$pre241$i = 0, $$pre242$i = 0, $$size$0$i = 0, $$width$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0$i = 0, $alloc$0224$i = 0, $alloc$1$i = 0, $alloc$2$i = 0, $ap2$i$i = 0, $arglist_current = 0, $arglist_current2 = 0;
 var $arglist_next = 0, $arglist_next3 = 0, $base$0$i = 0, $c$030$i = 0, $dest$0$i = 0, $f = 0, $factor$i = 0, $factor17$i = 0, $i$0$i$i = 0, $i$0$ph$i = 0, $i$0$ph49$i = 0, $i$0$ph49$lcssa$i = 0, $i$0$ph49$us56$i = 0, $i$1$lcssa$i = 0, $i$2$i = 0, $i$2$ph$i = 0, $i$2$ph$i$phi = 0, $i$3$i = 0, $i$4$i = 0, $invert$0$i = 0;
 var $isdigit$i = 0, $isdigit7$i = 0, $isdigit723$i = 0, $isdigittmp$i = 0, $isdigittmp6$i = 0, $isdigittmp622$i = 0, $k$0$ph$i = 0, $k$1$ph$i = 0, $matches$0$$i = 0, $matches$0135$i = 0, $matches$1$i = 0, $matches$2$i = 0, $matches$3$i = 0, $not$$i = 0, $or$cond$i$i = 0, $or$cond$us$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond9$i = 0, $p$0141$i = 0;
 var $p$1$i = 0, $p$10$i = 0, $p$11$i = 0, $p$2$i = 0, $p$3$lcssa$i = 0, $p$324$i = 0, $p$4$i = 0, $p$5$i = 0, $p$6$i = 0, $p$7$i = 0, $p$7$ph$i = 0, $p$8$i = 0, $p$9$i = 0, $pos$0140$i = 0, $pos$1$i = 0, $pos$2$i = 0, $s$0133$i = 0, $s$1$i = 0, $s$2$ph$i = 0, $s$3$i = 0;
 var $s$4$i = 0, $s$5$i = 0, $s$6$i = 0, $s$7$i = 0, $s$8$i = 0, $scanset$i = 0, $size$0$i = 0, $st$i = 0, $storemerge = 0, $vacopy_currentptr = 0, $wc$i = 0, $wcs$0134$i = 0, $wcs$1$i = 0, $wcs$2$i = 0, $wcs$3$ph$i = 0, $wcs$3$ph165$i = 0, $wcs$4$i = 0, $wcs$5$i = 0, $wcs$6$i = 0, $wcs$7$i = 0;
 var $wcs$8$i = 0, $wcs$9$i = 0, $width$0$lcssa$i = 0, $width$025$i = 0, $width$1$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i$i = sp + 128|0;
 $st$i = sp + 120|0;
 $scanset$i = sp + 145|0;
 $wc$i = sp + 112|0;
 $0 = sp + 144|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = (($f) + 32|0);
 HEAP32[$1>>2] = 449;
 $2 = (($f) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = (($f) + 84|0);
 HEAP32[$4>>2] = $s;
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $matches$3$i = 0;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 $7 = (($f) + 4|0);
 $8 = (($f) + 100|0);
 $9 = (($f) + 108|0);
 $10 = (($f) + 8|0);
 $11 = (($scanset$i) + 10|0);
 $12 = (($scanset$i) + 33|0);
 $13 = (($st$i) + 4|0);
 $14 = (($scanset$i) + 46|0);
 $15 = (($scanset$i) + 94|0);
 $16 = (($f) + 104|0);
 $18 = $5;$matches$0135$i = 0;$p$0141$i = $fmt;$pos$0140$i = 0;$s$0133$i = 0;$wcs$0134$i = 0;
 L4: while(1) {
  $17 = ($18<<24>>24)==(32);
  L6: do {
   if ($17) {
    $p$1$i = $p$0141$i;
    label = 5;
   } else {
    $19 = $18&255;
    $20 = (($19) + -9)|0;
    $21 = ($20>>>0)<(5);
    if ($21) {
     $p$1$i = $p$0141$i;
     label = 5;
    } else {
     $52 = ($18<<24>>24)==(37);
     L9: do {
      if ($52) {
       $53 = (($p$0141$i) + 1|0);
       $54 = HEAP8[$53>>0]|0;
       do {
        if ((($54<<24>>24) == 37)) {
         break L9;
        } else if ((($54<<24>>24) == 42)) {
         $78 = (($p$0141$i) + 2|0);
         $dest$0$i = 0;$p$2$i = $78;
        } else {
         $79 = $54&255;
         $isdigittmp$i = (($79) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         if ($isdigit$i) {
          $80 = (($p$0141$i) + 2|0);
          $81 = HEAP8[$80>>0]|0;
          $82 = ($81<<24>>24)==(36);
          if ($82) {
           $vacopy_currentptr = HEAP32[$ap>>2]|0;
           HEAP32[$ap2$i$i>>2] = $vacopy_currentptr;
           $i$0$i$i = $isdigittmp$i;
           while(1) {
            $83 = ($i$0$i$i>>>0)>(1);
            $arglist_current = HEAP32[$ap2$i$i>>2]|0;
            $84 = HEAP32[$arglist_current>>2]|0;
            $arglist_next = (($arglist_current) + 4|0);
            HEAP32[$ap2$i$i>>2] = $arglist_next;
            $85 = (($i$0$i$i) + -1)|0;
            if ($83) {
             $i$0$i$i = $85;
            } else {
             break;
            }
           }
           $86 = (($p$0141$i) + 3|0);
           $dest$0$i = $84;$p$2$i = $86;
           break;
          }
         }
         $arglist_current2 = HEAP32[$ap>>2]|0;
         $87 = HEAP32[$arglist_current2>>2]|0;
         $arglist_next3 = (($arglist_current2) + 4|0);
         HEAP32[$ap>>2] = $arglist_next3;
         $dest$0$i = $87;$p$2$i = $53;
        }
       } while(0);
       $88 = HEAP8[$p$2$i>>0]|0;
       $89 = $88&255;
       $isdigittmp622$i = (($89) + -48)|0;
       $isdigit723$i = ($isdigittmp622$i>>>0)<(10);
       if ($isdigit723$i) {
        $93 = $89;$p$324$i = $p$2$i;$width$025$i = 0;
        while(1) {
         $90 = ($width$025$i*10)|0;
         $91 = (($90) + -48)|0;
         $92 = (($91) + ($93))|0;
         $94 = (($p$324$i) + 1|0);
         $95 = HEAP8[$94>>0]|0;
         $96 = $95&255;
         $isdigittmp6$i = (($96) + -48)|0;
         $isdigit7$i = ($isdigittmp6$i>>>0)<(10);
         if ($isdigit7$i) {
          $93 = $96;$p$324$i = $94;$width$025$i = $92;
         } else {
          $$lcssa21$i = $95;$p$3$lcssa$i = $94;$width$0$lcssa$i = $92;
          break;
         }
        }
       } else {
        $$lcssa21$i = $88;$p$3$lcssa$i = $p$2$i;$width$0$lcssa$i = 0;
       }
       $97 = ($$lcssa21$i<<24>>24)==(109);
       if ($97) {
        $98 = ($dest$0$i|0)!=(0|0);
        $99 = $98&1;
        $100 = (($p$3$lcssa$i) + 1|0);
        $$pre$i = HEAP8[$100>>0]|0;
        $103 = $$pre$i;$alloc$0$i = $99;$p$4$i = $100;$s$1$i = 0;$wcs$1$i = 0;
       } else {
        $103 = $$lcssa21$i;$alloc$0$i = 0;$p$4$i = $p$3$lcssa$i;$s$1$i = $s$0133$i;$wcs$1$i = $wcs$0134$i;
       }
       $101 = (($p$4$i) + 1|0);
       $102 = $103&255;
       switch ($102|0) {
       case 104:  {
        $104 = HEAP8[$101>>0]|0;
        $105 = ($104<<24>>24)==(104);
        $106 = (($p$4$i) + 2|0);
        $$10$i = $105 ? $106 : $101;
        $$11$i = $105 ? -2 : -1;
        $p$5$i = $$10$i;$size$0$i = $$11$i;
        break;
       }
       case 106:  {
        $p$5$i = $101;$size$0$i = 3;
        break;
       }
       case 116: case 122:  {
        $p$5$i = $101;$size$0$i = 1;
        break;
       }
       case 108:  {
        $107 = HEAP8[$101>>0]|0;
        $108 = ($107<<24>>24)==(108);
        $109 = (($p$4$i) + 2|0);
        $$12$i = $108 ? $109 : $101;
        $$13$i = $108 ? 3 : 1;
        $p$5$i = $$12$i;$size$0$i = $$13$i;
        break;
       }
       case 76:  {
        $p$5$i = $101;$size$0$i = 2;
        break;
       }
       case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
        $p$5$i = $p$4$i;$size$0$i = 0;
        break;
       }
       default: {
        $alloc$0224$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
        label = 169;
        break L4;
       }
       }
       $110 = HEAP8[$p$5$i>>0]|0;
       $111 = $110&255;
       $112 = $111 & 47;
       $113 = ($112|0)==(3);
       $114 = $111 | 32;
       $$$i = $113 ? $114 : $111;
       $$size$0$i = $113 ? 1 : $size$0$i;
       if ((($$$i|0) == 99)) {
        $115 = ($width$0$lcssa$i|0)<(1);
        $$width$0$i = $115 ? 1 : $width$0$lcssa$i;
        $pos$1$i = $pos$0140$i;$width$1$i = $$width$0$i;
       } else if ((($$$i|0) == 110)) {
        $116 = ($pos$0140$i|0)<(0);
        $117 = $116 << 31 >> 31;
        $118 = ($dest$0$i|0)==(0|0);
        if ($118) {
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
        }
        switch ($$size$0$i|0) {
        case 3:  {
         $121 = $dest$0$i;
         $122 = $121;
         HEAP32[$122>>2] = $pos$0140$i;
         $123 = (($121) + 4)|0;
         $124 = $123;
         HEAP32[$124>>2] = $117;
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case -2:  {
         $119 = $pos$0140$i&255;
         HEAP8[$dest$0$i>>0] = $119;
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case -1:  {
         $120 = $pos$0140$i&65535;
         HEAP16[$dest$0$i>>1] = $120;
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case 0:  {
         HEAP32[$dest$0$i>>2] = $pos$0140$i;
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        case 1:  {
         HEAP32[$dest$0$i>>2] = $pos$0140$i;
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
         break;
        }
        default: {
         $matches$1$i = $matches$0135$i;$p$11$i = $p$5$i;$pos$2$i = $pos$0140$i;$s$5$i = $s$1$i;$wcs$6$i = $wcs$1$i;
         break L6;
        }
        }
       } else if ((($$$i|0) == 91)) {
        $pos$1$i = $pos$0140$i;$width$1$i = $width$0$lcssa$i;
       } else {
        HEAP32[$16>>2] = 0;
        $125 = HEAP32[$10>>2]|0;
        $126 = HEAP32[$7>>2]|0;
        $127 = $125;
        $128 = $126;
        $129 = (($127) - ($128))|0;
        HEAP32[$9>>2] = $129;
        HEAP32[$8>>2] = $125;
        $131 = $126;$132 = $125;
        L39: while(1) {
         $130 = ($131>>>0)<($132>>>0);
         if ($130) {
          $133 = (($131) + 1|0);
          HEAP32[$7>>2] = $133;
          $134 = HEAP8[$131>>0]|0;
          $135 = $134&255;
          $137 = $135;
         } else {
          $136 = (___shgetc($f)|0);
          $137 = $136;
         }
         switch ($137|0) {
         case 9: case 10: case 11: case 12: case 13: case 32:  {
          break;
         }
         default: {
          break L39;
         }
         }
         $$pre = HEAP32[$7>>2]|0;
         $$pre12 = HEAP32[$8>>2]|0;
         $131 = $$pre;$132 = $$pre12;
        }
        $138 = HEAP32[$8>>2]|0;
        $139 = ($138|0)==(0|0);
        $$pre229$i = HEAP32[$7>>2]|0;
        if ($139) {
         $144 = $$pre229$i;
        } else {
         $140 = (($$pre229$i) + -1|0);
         HEAP32[$7>>2] = $140;
         $144 = $140;
        }
        $141 = HEAP32[$9>>2]|0;
        $142 = HEAP32[$10>>2]|0;
        $143 = $144;
        $145 = $142;
        $146 = (($141) + ($pos$0140$i))|0;
        $147 = (($146) + ($143))|0;
        $148 = (($147) - ($145))|0;
        $pos$1$i = $148;$width$1$i = $width$0$lcssa$i;
       }
       HEAP32[$16>>2] = $width$1$i;
       $149 = HEAP32[$10>>2]|0;
       $150 = HEAP32[$7>>2]|0;
       $151 = $149;
       $152 = $150;
       $153 = (($151) - ($152))|0;
       HEAP32[$9>>2] = $153;
       $154 = ($width$1$i|0)!=(0);
       $155 = ($153|0)>($width$1$i|0);
       $or$cond$i$i = $154 & $155;
       if ($or$cond$i$i) {
        $156 = (($150) + ($width$1$i)|0);
        $storemerge = $156;
       } else {
        $storemerge = $149;
       }
       HEAP32[$8>>2] = $storemerge;
       $157 = ($150>>>0)<($storemerge>>>0);
       if ($157) {
        $158 = (($150) + 1|0);
        HEAP32[$7>>2] = $158;
        $162 = $storemerge;
       } else {
        $159 = (___shgetc($f)|0);
        $160 = ($159|0)<(0);
        if ($160) {
         $alloc$0224$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
         label = 169;
         break L4;
        }
        $$pre231$i = HEAP32[$8>>2]|0;
        $162 = $$pre231$i;
       }
       $161 = ($162|0)==(0|0);
       if (!($161)) {
        $163 = HEAP32[$7>>2]|0;
        $164 = (($163) + -1|0);
        HEAP32[$7>>2] = $164;
       }
       L70: do {
        switch ($$$i|0) {
        case 111:  {
         $base$0$i = 8;
         label = 151;
         break;
        }
        case 117: case 100:  {
         $base$0$i = 10;
         label = 151;
         break;
        }
        case 105:  {
         $base$0$i = 0;
         label = 151;
         break;
        }
        case 120: case 88: case 112:  {
         $base$0$i = 16;
         label = 151;
         break;
        }
        case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
         $345 = (+___floatscan($f,$$size$0$i,0));
         $346 = HEAP32[$9>>2]|0;
         $347 = HEAP32[$7>>2]|0;
         $348 = HEAP32[$10>>2]|0;
         $349 = $347;
         $350 = $348;
         $351 = (($350) - ($349))|0;
         $352 = ($346|0)==($351|0);
         if ($352) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0135$i;$s$8$i = $s$1$i;$wcs$9$i = $wcs$1$i;
          break L4;
         }
         $353 = ($dest$0$i|0)==(0|0);
         if ($353) {
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
         } else {
          if ((($$size$0$i|0) == 0)) {
           $354 = $345;
           HEAPF32[$dest$0$i>>2] = $354;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else if ((($$size$0$i|0) == 1)) {
           HEAPF64[$dest$0$i>>3] = $345;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else if ((($$size$0$i|0) == 2)) {
           HEAPF64[$dest$0$i>>3] = $345;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          } else {
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L70;
          }
         }
         break;
        }
        case 91: case 99: case 115:  {
         $165 = ($$$i|0)==(99);
         $166 = $$$i & 239;
         $167 = ($166|0)==(99);
         L82: do {
          if ($167) {
           $168 = ($$$i|0)==(115);
           _memset(($scanset$i|0),-1,257)|0;
           HEAP8[$scanset$i>>0] = 0;
           if ($168) {
            HEAP8[$12>>0] = 0;
            ;HEAP8[$11+0>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
            $p$9$i = $p$5$i;
           } else {
            $p$9$i = $p$5$i;
           }
          } else {
           $169 = (($p$5$i) + 1|0);
           $170 = HEAP8[$169>>0]|0;
           $171 = ($170<<24>>24)==(94);
           $172 = (($p$5$i) + 2|0);
           $invert$0$i = $171&1;
           $p$6$i = $171 ? $172 : $169;
           $173 = $171&1;
           _memset(($scanset$i|0),($173|0),257)|0;
           HEAP8[$scanset$i>>0] = 0;
           $174 = HEAP8[$p$6$i>>0]|0;
           if ((($174<<24>>24) == 45)) {
            $175 = (($p$6$i) + 1|0);
            $176 = $invert$0$i ^ 1;
            $177 = $176&255;
            HEAP8[$14>>0] = $177;
            $$pre$phi243$iZ2D = $177;$p$7$ph$i = $175;
           } else if ((($174<<24>>24) == 93)) {
            $178 = (($p$6$i) + 1|0);
            $179 = $invert$0$i ^ 1;
            $180 = $179&255;
            HEAP8[$15>>0] = $180;
            $$pre$phi243$iZ2D = $180;$p$7$ph$i = $178;
           } else {
            $$pre241$i = $invert$0$i ^ 1;
            $$pre242$i = $$pre241$i&255;
            $$pre$phi243$iZ2D = $$pre242$i;$p$7$ph$i = $p$6$i;
           }
           $p$7$i = $p$7$ph$i;
           while(1) {
            $181 = HEAP8[$p$7$i>>0]|0;
            if ((($181<<24>>24) == 93)) {
             $p$9$i = $p$7$i;
             break L82;
            } else if ((($181<<24>>24) == 0)) {
             $alloc$0224$i = $alloc$0$i;$s$6$i = $s$1$i;$wcs$7$i = $wcs$1$i;
             label = 169;
             break L4;
            } else if ((($181<<24>>24) == 45)) {
             $182 = (($p$7$i) + 1|0);
             $183 = HEAP8[$182>>0]|0;
             if ((($183<<24>>24) == 93) | (($183<<24>>24) == 0)) {
              $194 = 45;$p$8$i = $p$7$i;
             } else {
              $184 = (($p$7$i) + -1|0);
              $185 = HEAP8[$184>>0]|0;
              $186 = ($185&255)<($183&255);
              if ($186) {
               $187 = $185&255;
               $c$030$i = $187;
               while(1) {
                $188 = (($c$030$i) + 1)|0;
                $189 = (($scanset$i) + ($188)|0);
                HEAP8[$189>>0] = $$pre$phi243$iZ2D;
                $190 = HEAP8[$182>>0]|0;
                $191 = $190&255;
                $192 = ($188|0)<($191|0);
                if ($192) {
                 $c$030$i = $188;
                } else {
                 $194 = $190;$p$8$i = $182;
                 break;
                }
               }
              } else {
               $194 = $183;$p$8$i = $182;
              }
             }
            } else {
             $194 = $181;$p$8$i = $p$7$i;
            }
            $193 = $194&255;
            $195 = (($193) + 1)|0;
            $196 = (($scanset$i) + ($195)|0);
            HEAP8[$196>>0] = $$pre$phi243$iZ2D;
            $197 = (($p$8$i) + 1|0);
            $p$7$i = $197;
           }
          }
         } while(0);
         $198 = (($width$1$i) + 1)|0;
         $$8$i = $165 ? $198 : 31;
         $199 = ($$size$0$i|0)==(1);
         $200 = ($alloc$0$i|0)!=(0);
         L101: do {
          if ($199) {
           if ($200) {
            $201 = $$8$i << 2;
            $202 = (_malloc($201)|0);
            $203 = ($202|0)==(0|0);
            if ($203) {
             $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $202;
             label = 169;
             break L4;
            } else {
             $wcs$2$i = $202;
            }
           } else {
            $wcs$2$i = $dest$0$i;
           }
           HEAP32[$st$i>>2] = 0;
           HEAP32[$13>>2] = 0;
           $i$0$ph$i = 0;$k$0$ph$i = $$8$i;$wcs$3$ph$i = $wcs$2$i;
           L107: while(1) {
            $204 = ($wcs$3$ph$i|0)==(0|0);
            if ($204) {
             $205 = ($i$0$ph$i|0)==($k$0$ph$i|0);
             $or$cond$us$i = $200 & $205;
             while(1) {
              $208 = HEAP32[$7>>2]|0;
              $218 = HEAP32[$8>>2]|0;
              $219 = ($208>>>0)<($218>>>0);
              if ($219) {
               $207 = (($208) + 1|0);
               HEAP32[$7>>2] = $207;
               $209 = HEAP8[$208>>0]|0;
               $210 = $209&255;
               $212 = $210;
              } else {
               $206 = (___shgetc($f)|0);
               $212 = $206;
              }
              $211 = (($212) + 1)|0;
              $213 = (($scanset$i) + ($211)|0);
              $214 = HEAP8[$213>>0]|0;
              $215 = ($214<<24>>24)==(0);
              if ($215) {
               $i$0$ph49$lcssa$i = $i$0$ph$i;$wcs$3$ph165$i = 0;
               break L107;
              }
              $216 = $212&255;
              HEAP8[$0>>0] = $216;
              $217 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
              if ((($217|0) == -1)) {
               $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = 0;
               label = 169;
               break L4;
              } else if ((($217|0) == -2)) {
               continue;
              }
              if ($or$cond$us$i) {
               $i$1$lcssa$i = $i$0$ph$i;
               break;
              }
             }
            } else {
             if ($200) {
              $i$0$ph49$us56$i = $i$0$ph$i;
             } else {
              $i$0$ph49$i = $i$0$ph$i;
              label = 105;
              break;
             }
             while(1) {
              while(1) {
               $222 = HEAP32[$7>>2]|0;
               $236 = HEAP32[$8>>2]|0;
               $237 = ($222>>>0)<($236>>>0);
               if ($237) {
                $221 = (($222) + 1|0);
                HEAP32[$7>>2] = $221;
                $223 = HEAP8[$222>>0]|0;
                $224 = $223&255;
                $226 = $224;
               } else {
                $220 = (___shgetc($f)|0);
                $226 = $220;
               }
               $225 = (($226) + 1)|0;
               $227 = (($scanset$i) + ($225)|0);
               $228 = HEAP8[$227>>0]|0;
               $229 = ($228<<24>>24)==(0);
               if ($229) {
                $i$0$ph49$lcssa$i = $i$0$ph49$us56$i;$wcs$3$ph165$i = $wcs$3$ph$i;
                break L107;
               }
               $230 = $226&255;
               HEAP8[$0>>0] = $230;
               $231 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($231|0) == -1)) {
                $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
                label = 169;
                break L4;
               } else if (!((($231|0) == -2))) {
                break;
               }
              }
              $232 = HEAP32[$wc$i>>2]|0;
              $233 = (($i$0$ph49$us56$i) + 1)|0;
              $234 = (($wcs$3$ph$i) + ($i$0$ph49$us56$i<<2)|0);
              HEAP32[$234>>2] = $232;
              $235 = ($233|0)==($k$0$ph$i|0);
              if ($235) {
               $i$1$lcssa$i = $k$0$ph$i;
               break;
              } else {
               $i$0$ph49$us56$i = $233;
              }
             }
            }
            $factor$i = $k$0$ph$i << 1;
            $255 = $factor$i | 1;
            $256 = $255 << 2;
            $257 = (_realloc($wcs$3$ph$i,$256)|0);
            $258 = ($257|0)==(0|0);
            if ($258) {
             $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
             label = 169;
             break L4;
            }
            $i$0$ph$i = $i$1$lcssa$i;$k$0$ph$i = $255;$wcs$3$ph$i = $257;
           }
           L132: do {
            if ((label|0) == 105) {
             while(1) {
              label = 0;
              while(1) {
               $238 = HEAP32[$7>>2]|0;
               $239 = HEAP32[$8>>2]|0;
               $240 = ($238>>>0)<($239>>>0);
               if ($240) {
                $241 = (($238) + 1|0);
                HEAP32[$7>>2] = $241;
                $242 = HEAP8[$238>>0]|0;
                $243 = $242&255;
                $246 = $243;
               } else {
                $244 = (___shgetc($f)|0);
                $246 = $244;
               }
               $245 = (($246) + 1)|0;
               $247 = (($scanset$i) + ($245)|0);
               $248 = HEAP8[$247>>0]|0;
               $249 = ($248<<24>>24)==(0);
               if ($249) {
                $i$0$ph49$lcssa$i = $i$0$ph49$i;$wcs$3$ph165$i = $wcs$3$ph$i;
                break L132;
               }
               $250 = $246&255;
               HEAP8[$0>>0] = $250;
               $251 = (_mbrtowc($wc$i,$0,1,$st$i)|0);
               if ((($251|0) == -1)) {
                $alloc$0224$i = 0;$s$6$i = 0;$wcs$7$i = $wcs$3$ph$i;
                label = 169;
                break L4;
               } else if (!((($251|0) == -2))) {
                break;
               }
              }
              $252 = HEAP32[$wc$i>>2]|0;
              $253 = (($i$0$ph49$i) + 1)|0;
              $254 = (($wcs$3$ph$i) + ($i$0$ph49$i<<2)|0);
              HEAP32[$254>>2] = $252;
              $i$0$ph49$i = $253;
              label = 105;
             }
            }
           } while(0);
           $259 = HEAP32[$st$i>>2]|0;
           $260 = ($259|0)==(0);
           if ($260) {
            $i$4$i = $i$0$ph49$lcssa$i;$s$3$i = 0;$wcs$4$i = $wcs$3$ph165$i;
           } else {
            $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = $wcs$3$ph165$i;
            label = 169;
            break L4;
           }
          } else {
           if ($200) {
            $261 = (_malloc($$8$i)|0);
            $262 = ($261|0)==(0|0);
            if ($262) {
             $alloc$0224$i = $alloc$0$i;$s$6$i = 0;$wcs$7$i = 0;
             label = 169;
             break L4;
            } else {
             $i$2$ph$i = 0;$k$1$ph$i = $$8$i;$s$2$ph$i = $261;
            }
            while(1) {
             $i$2$i = $i$2$ph$i;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = HEAP32[$8>>2]|0;
              $265 = ($263>>>0)<($264>>>0);
              if ($265) {
               $266 = (($263) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset$i) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4$i = $i$2$i;$s$3$i = $s$2$ph$i;$wcs$4$i = 0;
               break L101;
              }
              $275 = $271&255;
              $276 = (($i$2$i) + 1)|0;
              $277 = (($s$2$ph$i) + ($i$2$i)|0);
              HEAP8[$277>>0] = $275;
              $278 = ($276|0)==($k$1$ph$i|0);
              if ($278) {
               break;
              } else {
               $i$2$i = $276;
              }
             }
             $factor17$i = $k$1$ph$i << 1;
             $279 = $factor17$i | 1;
             $280 = (_realloc($s$2$ph$i,$279)|0);
             $281 = ($280|0)==(0|0);
             if ($281) {
              $alloc$0224$i = $alloc$0$i;$s$6$i = $s$2$ph$i;$wcs$7$i = 0;
              label = 169;
              break L4;
             } else {
              $i$2$ph$i$phi = $k$1$ph$i;$k$1$ph$i = $279;$s$2$ph$i = $280;$i$2$ph$i = $i$2$ph$i$phi;
             }
            }
           }
           $282 = ($dest$0$i|0)==(0|0);
           if ($282) {
            $300 = $162;
            while(1) {
             $298 = HEAP32[$7>>2]|0;
             $299 = ($298>>>0)<($300>>>0);
             if ($299) {
              $301 = (($298) + 1|0);
              HEAP32[$7>>2] = $301;
              $302 = HEAP8[$298>>0]|0;
              $303 = $302&255;
              $306 = $303;
             } else {
              $304 = (___shgetc($f)|0);
              $306 = $304;
             }
             $305 = (($306) + 1)|0;
             $307 = (($scanset$i) + ($305)|0);
             $308 = HEAP8[$307>>0]|0;
             $309 = ($308<<24>>24)==(0);
             if ($309) {
              $i$4$i = 0;$s$3$i = 0;$wcs$4$i = 0;
              break L101;
             }
             $$pre237$i = HEAP32[$8>>2]|0;
             $300 = $$pre237$i;
            }
           } else {
            $285 = $162;$i$3$i = 0;
            while(1) {
             $283 = HEAP32[$7>>2]|0;
             $284 = ($283>>>0)<($285>>>0);
             if ($284) {
              $286 = (($283) + 1|0);
              HEAP32[$7>>2] = $286;
              $287 = HEAP8[$283>>0]|0;
              $288 = $287&255;
              $291 = $288;
             } else {
              $289 = (___shgetc($f)|0);
              $291 = $289;
             }
             $290 = (($291) + 1)|0;
             $292 = (($scanset$i) + ($290)|0);
             $293 = HEAP8[$292>>0]|0;
             $294 = ($293<<24>>24)==(0);
             if ($294) {
              $i$4$i = $i$3$i;$s$3$i = $dest$0$i;$wcs$4$i = 0;
              break L101;
             }
             $295 = $291&255;
             $296 = (($i$3$i) + 1)|0;
             $297 = (($dest$0$i) + ($i$3$i)|0);
             HEAP8[$297>>0] = $295;
             $$pre238$i = HEAP32[$8>>2]|0;
             $285 = $$pre238$i;$i$3$i = $296;
            }
           }
          }
         } while(0);
         $310 = HEAP32[$8>>2]|0;
         $311 = ($310|0)==(0|0);
         $$pre235$i = HEAP32[$7>>2]|0;
         if ($311) {
          $316 = $$pre235$i;
         } else {
          $312 = (($$pre235$i) + -1|0);
          HEAP32[$7>>2] = $312;
          $316 = $312;
         }
         $313 = HEAP32[$9>>2]|0;
         $314 = HEAP32[$10>>2]|0;
         $315 = $316;
         $317 = $314;
         $318 = (($315) - ($317))|0;
         $319 = (($318) + ($313))|0;
         $320 = ($319|0)==(0);
         if ($320) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0135$i;$s$8$i = $s$3$i;$wcs$9$i = $wcs$4$i;
          break L4;
         }
         $$not$i = $165 ^ 1;
         $321 = ($319|0)==($width$1$i|0);
         $or$cond9$i = $321 | $$not$i;
         if (!($or$cond9$i)) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0135$i;$s$8$i = $s$3$i;$wcs$9$i = $wcs$4$i;
          break L4;
         }
         do {
          if ($200) {
           if ($199) {
            HEAP32[$dest$0$i>>2] = $wcs$4$i;
            break;
           } else {
            HEAP32[$dest$0$i>>2] = $s$3$i;
            break;
           }
          }
         } while(0);
         if ($165) {
          $p$10$i = $p$9$i;$s$4$i = $s$3$i;$wcs$5$i = $wcs$4$i;
         } else {
          $322 = ($wcs$4$i|0)==(0|0);
          if (!($322)) {
           $323 = (($wcs$4$i) + ($i$4$i<<2)|0);
           HEAP32[$323>>2] = 0;
          }
          $324 = ($s$3$i|0)==(0|0);
          if ($324) {
           $p$10$i = $p$9$i;$s$4$i = 0;$wcs$5$i = $wcs$4$i;
           break L70;
          }
          $325 = (($s$3$i) + ($i$4$i)|0);
          HEAP8[$325>>0] = 0;
          $p$10$i = $p$9$i;$s$4$i = $s$3$i;$wcs$5$i = $wcs$4$i;
         }
         break;
        }
        default: {
         $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
        }
        }
       } while(0);
       L190: do {
        if ((label|0) == 151) {
         label = 0;
         $326 = (___intscan($f,$base$0$i,0,-1,-1)|0);
         $327 = tempRet0;
         $328 = HEAP32[$9>>2]|0;
         $329 = HEAP32[$7>>2]|0;
         $330 = HEAP32[$10>>2]|0;
         $331 = $329;
         $332 = $330;
         $333 = (($332) - ($331))|0;
         $334 = ($328|0)==($333|0);
         if ($334) {
          $alloc$2$i = $alloc$0$i;$matches$2$i = $matches$0135$i;$s$8$i = $s$1$i;$wcs$9$i = $wcs$1$i;
          break L4;
         }
         $335 = ($$$i|0)==(112);
         $336 = ($dest$0$i|0)!=(0|0);
         $or$cond3$i = $335 & $336;
         if ($or$cond3$i) {
          $337 = $326;
          HEAP32[$dest$0$i>>2] = $337;
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
          break;
         }
         $338 = ($dest$0$i|0)==(0|0);
         if ($338) {
          $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
         } else {
          switch ($$size$0$i|0) {
          case -2:  {
           $339 = $326&255;
           HEAP8[$dest$0$i>>0] = $339;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case -1:  {
           $340 = $326&65535;
           HEAP16[$dest$0$i>>1] = $340;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 0:  {
           HEAP32[$dest$0$i>>2] = $326;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 1:  {
           HEAP32[$dest$0$i>>2] = $326;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          case 3:  {
           $341 = $dest$0$i;
           $342 = $341;
           HEAP32[$342>>2] = $326;
           $343 = (($341) + 4)|0;
           $344 = $343;
           HEAP32[$344>>2] = $327;
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
           break;
          }
          default: {
           $p$10$i = $p$5$i;$s$4$i = $s$1$i;$wcs$5$i = $wcs$1$i;
           break L190;
          }
          }
         }
        }
       } while(0);
       $355 = HEAP32[$9>>2]|0;
       $356 = HEAP32[$7>>2]|0;
       $357 = HEAP32[$10>>2]|0;
       $358 = $356;
       $359 = $357;
       $360 = (($355) + ($pos$1$i))|0;
       $361 = (($360) + ($358))|0;
       $362 = (($361) - ($359))|0;
       $not$$i = ($dest$0$i|0)!=(0|0);
       $363 = $not$$i&1;
       $matches$0$$i = (($363) + ($matches$0135$i))|0;
       $matches$1$i = $matches$0$$i;$p$11$i = $p$10$i;$pos$2$i = $362;$s$5$i = $s$4$i;$wcs$6$i = $wcs$5$i;
       break L6;
      }
     } while(0);
     $55 = $52&1;
     $56 = (($p$0141$i) + ($55)|0);
     HEAP32[$16>>2] = 0;
     $57 = HEAP32[$10>>2]|0;
     $58 = HEAP32[$7>>2]|0;
     $59 = $57;
     $60 = $58;
     $61 = (($59) - ($60))|0;
     HEAP32[$9>>2] = $61;
     HEAP32[$8>>2] = $57;
     $62 = ($58>>>0)<($57>>>0);
     if ($62) {
      $63 = (($58) + 1|0);
      HEAP32[$7>>2] = $63;
      $64 = HEAP8[$58>>0]|0;
      $65 = $64&255;
      $70 = $65;
     } else {
      $66 = (___shgetc($f)|0);
      $70 = $66;
     }
     $67 = HEAP8[$56>>0]|0;
     $68 = $67&255;
     $69 = ($70|0)==($68|0);
     if (!($69)) {
      label = 22;
      break L4;
     }
     $77 = (($pos$0140$i) + 1)|0;
     $matches$1$i = $matches$0135$i;$p$11$i = $56;$pos$2$i = $77;$s$5$i = $s$0133$i;$wcs$6$i = $wcs$0134$i;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   while(1) {
    label = 0;
    $22 = (($p$1$i) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(32);
    if ($24) {
     $p$1$i = $22;
     label = 5;
     continue;
    }
    $25 = $23&255;
    $26 = (($25) + -9)|0;
    $27 = ($26>>>0)<(5);
    if ($27) {
     $p$1$i = $22;
     label = 5;
    } else {
     break;
    }
   }
   HEAP32[$16>>2] = 0;
   $28 = HEAP32[$10>>2]|0;
   $29 = HEAP32[$7>>2]|0;
   $30 = $28;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   HEAP32[$9>>2] = $32;
   HEAP32[$8>>2] = $28;
   $34 = $29;$35 = $28;
   L215: while(1) {
    $33 = ($34>>>0)<($35>>>0);
    if ($33) {
     $36 = (($34) + 1|0);
     HEAP32[$7>>2] = $36;
     $37 = HEAP8[$34>>0]|0;
     $38 = $37&255;
     $40 = $38;
    } else {
     $39 = (___shgetc($f)|0);
     $40 = $39;
    }
    switch ($40|0) {
    case 9: case 10: case 11: case 12: case 13: case 32:  {
     break;
    }
    default: {
     break L215;
    }
    }
    $$pre13 = HEAP32[$7>>2]|0;
    $$pre14 = HEAP32[$8>>2]|0;
    $34 = $$pre13;$35 = $$pre14;
   }
   $41 = HEAP32[$8>>2]|0;
   $42 = ($41|0)==(0|0);
   $$pre240$i = HEAP32[$7>>2]|0;
   if ($42) {
    $47 = $$pre240$i;
   } else {
    $43 = (($$pre240$i) + -1|0);
    HEAP32[$7>>2] = $43;
    $47 = $43;
   }
   $44 = HEAP32[$9>>2]|0;
   $45 = HEAP32[$10>>2]|0;
   $46 = $47;
   $48 = $45;
   $49 = (($44) + ($pos$0140$i))|0;
   $50 = (($49) + ($46))|0;
   $51 = (($50) - ($48))|0;
   $matches$1$i = $matches$0135$i;$p$11$i = $p$1$i;$pos$2$i = $51;$s$5$i = $s$0133$i;$wcs$6$i = $wcs$0134$i;
  }
  $364 = (($p$11$i) + 1|0);
  $365 = HEAP8[$364>>0]|0;
  $366 = ($365<<24>>24)==(0);
  if ($366) {
   $matches$3$i = $matches$1$i;
   label = 173;
   break;
  } else {
   $18 = $365;$matches$0135$i = $matches$1$i;$p$0141$i = $364;$pos$0140$i = $pos$2$i;$s$0133$i = $s$5$i;$wcs$0134$i = $wcs$6$i;
  }
 }
 if ((label|0) == 22) {
  $71 = HEAP32[$8>>2]|0;
  $72 = ($71|0)==(0|0);
  if (!($72)) {
   $73 = HEAP32[$7>>2]|0;
   $74 = (($73) + -1|0);
   HEAP32[$7>>2] = $74;
  }
  $75 = ($70|0)>(-1);
  $76 = ($matches$0135$i|0)!=(0);
  $or$cond5$i = $75 | $76;
  if ($or$cond5$i) {
   $matches$3$i = $matches$0135$i;
   STACKTOP = sp;return ($matches$3$i|0);
  } else {
   $alloc$1$i = 0;$s$7$i = $s$0133$i;$wcs$8$i = $wcs$0134$i;
   label = 170;
  }
 }
 else if ((label|0) == 169) {
  $$old4$i = ($matches$0135$i|0)==(0);
  if ($$old4$i) {
   $alloc$1$i = $alloc$0224$i;$s$7$i = $s$6$i;$wcs$8$i = $wcs$7$i;
   label = 170;
  } else {
   $alloc$2$i = $alloc$0224$i;$matches$2$i = $matches$0135$i;$s$8$i = $s$6$i;$wcs$9$i = $wcs$7$i;
  }
 }
 else if ((label|0) == 173) {
  STACKTOP = sp;return ($matches$3$i|0);
 }
 if ((label|0) == 170) {
  $alloc$2$i = $alloc$1$i;$matches$2$i = -1;$s$8$i = $s$7$i;$wcs$9$i = $wcs$8$i;
 }
 $367 = ($alloc$2$i|0)==(0);
 if ($367) {
  $matches$3$i = $matches$2$i;
  STACKTOP = sp;return ($matches$3$i|0);
 }
 _free($s$8$i);
 _free($wcs$9$i);
 $matches$3$i = $matches$2$i;
 STACKTOP = sp;return ($matches$3$i|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if ($5) {
   STACKTOP = sp;return;
  } else {
   $$in = $n;
  }
  while(1) {
   $6 = (($$in) + -1)|0;
   $7 = (($s) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($d) + ($6<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)==(0);
   if ($10) {
    break;
   } else {
    $$in = $6;
   }
  }
  STACKTOP = sp;return;
 } else {
  if ($5) {
   STACKTOP = sp;return;
  } else {
   $$025 = $s;$$07 = $d;$$16 = $n;
  }
  while(1) {
   $11 = (($$16) + -1)|0;
   $12 = (($$025) + 4|0);
   $13 = HEAP32[$$025>>2]|0;
   $14 = (($$07) + 4|0);
   HEAP32[$$07>>2] = $13;
   $15 = ($11|0)==(0);
   if ($15) {
    break;
   } else {
    $$025 = $12;$$07 = $14;$$16 = $11;
   }
  }
  STACKTOP = sp;return;
 }
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = HEAP32[14928>>2]|0;HEAP32[14928>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 4;
   break;
  }
  $5 = $3;
  FUNCTION_TABLE_v[$5 & 511]();
  $6 = (_malloc($$size)|0);
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $$lcssa = $6;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = (___cxa_allocate_exception(4)|0);
  HEAP32[$8>>2] = ((14760 + 8|0));
  ___cxa_throw(($8|0),(14816|0),(323|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (14784|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(450,(14832|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(450,(14872|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(379);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_iii(451,(14584|0),(452|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $3 = ($0|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_vii(450,(14592|0),($vararg_buffer|0));
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
    // unreachable;
   }
   $6 = HEAP32[14576>>2]|0;
   __THREW__ = 0;
   $7 = (invoke_ii(453,($6|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = ($7|0)==(0|0);
    if (!($10)) {
     $11 = HEAP32[$7>>2]|0;
     $12 = ($11|0)==(0|0);
     if (!($12)) {
      $13 = (($11) + 48|0);
      $14 = $13;
      $15 = $14;
      $16 = HEAP32[$15>>2]|0;
      $17 = (($14) + 4)|0;
      $18 = $17;
      $19 = HEAP32[$18>>2]|0;
      $20 = $16 & -256;
      $21 = ($20|0)==(1126902528);
      $22 = ($19|0)==(1129074247);
      $23 = $21 & $22;
      if ($23) {
       $24 = (($11) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       __ZSt11__terminatePFvvE($25);
       // unreachable;
      }
     }
    }
    $26 = HEAP32[3600]|0;HEAP32[3600] = (($26+0)|0);
    $27 = $26;
    __ZSt11__terminatePFvvE($27);
    // unreachable;
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch(0|0)|0;
 $29 = tempRet0;
 ___clang_call_terminate($28);
 // unreachable;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14960 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14960 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14984 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14960 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  _free($this);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -12|0);
 _free($7);
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (15168|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,15336)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below) {
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(15648|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,15448)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = (($5) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($this) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = (($this) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(15632|0);
     $or$cond = $18 | $19;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,15336)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,15336)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = (($info) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = (($info) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = (($info) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = (($30) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 511]($25,$info,$33,1);
          $34 = (($info) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = (($info) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$1 = 1;
          } else {
           $$1 = 0;
          }
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$dst_type) {
 $static_ptr = $static_ptr|0;
 $dst_type = $dst_type|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = 15280;
 $9 = (($info) + 12|0);
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$9+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+40>>1]=0|0;HEAP8[$9+42>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return (0)|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below) {
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 44|0;
 $0 = (_pthread_once((14584|0),(452|0))|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _abort_message(14592,$vararg_buffer);
  // unreachable;
 }
 $2 = HEAP32[14576>>2]|0;
 $3 = (_pthread_getspecific(($2|0))|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _abort_message(14560,$vararg_buffer12);
  // unreachable;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _abort_message(14560,$vararg_buffer12);
  // unreachable;
 }
 $7 = (($5) + 80|0);
 $8 = (($5) + 48|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $11 & -256;
 $16 = ($15|0)==(1126902528);
 $17 = ($14|0)==(1129074247);
 $18 = $16 & $17;
 if (!($18)) {
  HEAP32[$vararg_buffer9>>2] = 14408;
  _abort_message(14520,$vararg_buffer9);
  // unreachable;
 }
 $19 = ($11|0)==(1126902529);
 $20 = ($14|0)==(1129074247);
 $21 = $19 & $20;
 if ($21) {
  $22 = (($5) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 } else {
  $24 = $7;
 }
 HEAP32[$thrown_object>>2] = $24;
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(14952,$25,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_ii[$32 & 511]($29)|0);
  HEAP32[$vararg_buffer1>>2] = 14408;
  $vararg_ptr3 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $27;
  $vararg_ptr4 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $33;
  _abort_message(14424,$vararg_buffer1);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer5>>2] = 14408;
  $vararg_ptr8 = (($vararg_buffer5) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $27;
  _abort_message(14472,$vararg_buffer5);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((14576|0),(454|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14648,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[14576>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14704,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[16032>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((16032 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((16032 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[16032>>2] = $22;
     } else {
      $23 = HEAP32[((16032 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((16032 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((16032 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((16032 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[16032>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((16032 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((16032 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((16032 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((16032 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[16032>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[16032>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((16032 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((16032 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((16032 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((16032 + 8|0))>>2] = $81;
     HEAP32[((16032 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((16032 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((16032 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((16032 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((16032 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((16032 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((16032 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((16032 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((16032 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((16032 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((16032 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((16032 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((16032 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[16032>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[16032>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((16032 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((16032 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((16032 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((16032 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((16032 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((16032 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((16032 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((16032 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((16032 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((16032 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((16032 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((16032 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((16032 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((16032 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((16032 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((16032 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((16032 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[16032>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[16032>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((16032 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((16032 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((16032 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((16032 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((16032 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((16032 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((16032 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((16032 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((16032 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((16032 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((16032 + 20|0))>>2] = $514;
   HEAP32[((16032 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((16032 + 8|0))>>2] = 0;
   HEAP32[((16032 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((16032 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((16032 + 12|0))>>2] = $528;
  $529 = HEAP32[((16032 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((16032 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[16504>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((16504 + 8|0))>>2] = $538;
    HEAP32[((16504 + 4|0))>>2] = $538;
    HEAP32[((16504 + 12|0))>>2] = -1;
    HEAP32[((16504 + 16|0))>>2] = -1;
    HEAP32[((16504 + 20|0))>>2] = 0;
    HEAP32[((16032 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[16504>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((16504 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((16032 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((16032 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((16032 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((16032 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((16032 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((16032 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((16504 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((16032 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((16032 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((16504 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((16032 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((16032 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((16032 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((16032 + 432|0))>>2] = $633;
  $634 = HEAP32[((16032 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((16032 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((16032 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((16032 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((16032 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((16032 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((16032 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((16032 + 460|0))>>2] = 0;
    $641 = HEAP32[16504>>2]|0;
    HEAP32[((16032 + 36|0))>>2] = $641;
    HEAP32[((16032 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((16032 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((16032 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((16032 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((16032 + 24|0))>>2] = $654;
    HEAP32[((16032 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((16504 + 16|0))>>2]|0;
    HEAP32[((16032 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((16032 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((16032 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((16032 + 24|0))>>2] = $684;
       HEAP32[((16032 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((16504 + 16|0))>>2]|0;
       HEAP32[((16032 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((16032 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((16032 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((16032 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((16032 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((16032 + 12|0))>>2] = $731;
        HEAP32[((16032 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((16032 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((16032 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((16032 + 8|0))>>2] = $737;
         HEAP32[((16032 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((16032 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[16032>>2]|0;
            $764 = $763 & $762;
            HEAP32[16032>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((16032 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((16032 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((16032 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((16032 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((16032 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((16032 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((16032 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[16032>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[16032>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((16032 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((16032 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((16032 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((16032 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((16032 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((16032 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((16032 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((16032 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((16032 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((16032 + 24|0))>>2] = $953;
    HEAP32[((16032 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((16504 + 16|0))>>2]|0;
    HEAP32[((16032 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((16032 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((16032 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((16032 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((16032 + 448|0))+12>>2]|0;
    HEAP32[((16032 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((16032 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((16032 + 460|0))>>2] = 0;
    HEAP32[((16032 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((16032 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[16032>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[16032>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((16032 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((16032 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((16032 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((16032 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((16032 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((16032 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((16032 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((16032 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((16032 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((16032 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((16032 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((16032 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((16032 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((16032 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((16032 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((16032 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[16032>>2]|0;
     $36 = $35 & $34;
     HEAP32[16032>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((16032 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((16032 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((16032 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((16032 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((16032 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((16032 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((16032 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((16032 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((16032 + 12|0))>>2] = $120;
   HEAP32[((16032 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((16032 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((16032 + 20|0))>>2] = 0;
   HEAP32[((16032 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((16032 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((16032 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((16032 + 8|0))>>2] = $128;
   HEAP32[((16032 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((16032 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((16032 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[16032>>2]|0;
     $152 = $151 & $150;
     HEAP32[16032>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((16032 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((16032 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((16032 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((16032 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((16032 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((16032 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((16032 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((16032 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((16032 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((16032 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((16032 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((16032 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[16032>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[16032>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((16032 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((16032 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((16032 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((16032 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((16032 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((16032 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((16032 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((16032 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((16032 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((16032 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((16032 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((16032 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19$i25 = 0, $$sum2 = 0, $$sum22 = 0, $$sum22$i29 = 0, $$sum23 = 0, $$sum23$i3 = 0, $$sum24 = 0, $$sum26 = 0;
 var $$sum27 = 0, $$sum2728$i = 0, $$sum28 = 0, $$sum30 = 0, $$sum4 = 0, $$sum5 = 0, $$sum5$i13 = 0, $$sum78$i = 0, $$sum9 = 0, $$sum910$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $R$0$i = 0, $R$1$i = 0, $RP$0$i = 0, $cond$i = 0, $mem$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond30$i = 0, $storemerge$i = 0, $storemerge21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  STACKTOP = sp;return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $21 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $21 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $8 = (($oldmem) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & -8;
 $$sum = (($10) + -8)|0;
 $11 = (($oldmem) + ($$sum)|0);
 $12 = HEAP32[((16032 + 16|0))>>2]|0;
 $13 = $9 & 3;
 $notlhs$i = ($7>>>0)>=($12>>>0);
 $notrhs$i = ($13|0)!=(1);
 $or$cond$not$i = $notrhs$i & $notlhs$i;
 $14 = ($$sum|0)>(-8);
 $or$cond30$i = $or$cond$not$i & $14;
 if (!($or$cond30$i)) {
  _abort();
  // unreachable;
 }
 $$sum2728$i = $10 | 4;
 $$sum1 = (($$sum2728$i) + -8)|0;
 $15 = (($oldmem) + ($$sum1)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  _abort();
  // unreachable;
 }
 $19 = ($13|0)==(0);
 do {
  if ($19) {
   $20 = ($21>>>0)<(256);
   $22 = $21 | 4;
   $23 = ($10>>>0)<($22>>>0);
   $or$cond = $20 | $23;
   if (!($or$cond)) {
    $24 = (($10) - ($21))|0;
    $25 = HEAP32[((16504 + 8|0))>>2]|0;
    $26 = $25 << 1;
    $27 = ($24>>>0)>($26>>>0);
    if (!($27)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
   }
  } else {
   $28 = ($10>>>0)<($21>>>0);
   if (!($28)) {
    $29 = (($10) - ($21))|0;
    $30 = ($29>>>0)>(15);
    if (!($30)) {
     $mem$0 = $oldmem;
     STACKTOP = sp;return ($mem$0|0);
    }
    $$sum2 = (($21) + -8)|0;
    $31 = (($oldmem) + ($$sum2)|0);
    $32 = $9 & 1;
    $33 = $32 | $21;
    $34 = $33 | 2;
    HEAP32[$8>>2] = $34;
    $$sum23$i3 = $21 | 4;
    $$sum4 = (($$sum23$i3) + -8)|0;
    $35 = (($oldmem) + ($$sum4)|0);
    $36 = $29 | 3;
    HEAP32[$35>>2] = $36;
    $37 = HEAP32[$15>>2]|0;
    $38 = $37 | 1;
    HEAP32[$15>>2] = $38;
    _dispose_chunk($31,$29);
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $39 = HEAP32[((16032 + 24|0))>>2]|0;
   $40 = ($11|0)==($39|0);
   if ($40) {
    $41 = HEAP32[((16032 + 12|0))>>2]|0;
    $42 = (($41) + ($10))|0;
    $43 = ($42>>>0)>($21>>>0);
    if (!($43)) {
     break;
    }
    $44 = (($42) - ($21))|0;
    $$sum28 = (($21) + -8)|0;
    $45 = (($oldmem) + ($$sum28)|0);
    $46 = $9 & 1;
    $47 = $46 | $21;
    $48 = $47 | 2;
    HEAP32[$8>>2] = $48;
    $$sum22$i29 = $21 | 4;
    $$sum30 = (($$sum22$i29) + -8)|0;
    $49 = (($oldmem) + ($$sum30)|0);
    $50 = $44 | 1;
    HEAP32[$49>>2] = $50;
    HEAP32[((16032 + 24|0))>>2] = $45;
    HEAP32[((16032 + 12|0))>>2] = $44;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $51 = HEAP32[((16032 + 20|0))>>2]|0;
   $52 = ($11|0)==($51|0);
   if ($52) {
    $53 = HEAP32[((16032 + 8|0))>>2]|0;
    $54 = (($53) + ($10))|0;
    $55 = ($54>>>0)<($21>>>0);
    if ($55) {
     break;
    }
    $56 = (($54) - ($21))|0;
    $57 = ($56>>>0)>(15);
    if ($57) {
     $$sum23 = (($21) + -8)|0;
     $58 = (($oldmem) + ($$sum23)|0);
     $$sum24 = (($54) + -8)|0;
     $59 = (($oldmem) + ($$sum24)|0);
     $60 = $9 & 1;
     $61 = $60 | $21;
     $62 = $61 | 2;
     HEAP32[$8>>2] = $62;
     $$sum19$i25 = $21 | 4;
     $$sum26 = (($$sum19$i25) + -8)|0;
     $63 = (($oldmem) + ($$sum26)|0);
     $64 = $56 | 1;
     HEAP32[$63>>2] = $64;
     HEAP32[$59>>2] = $56;
     $$sum27 = (($54) + -4)|0;
     $65 = (($oldmem) + ($$sum27)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $66 & -2;
     HEAP32[$65>>2] = $67;
     $storemerge$i = $58;$storemerge21$i = $56;
    } else {
     $68 = $9 & 1;
     $69 = $68 | $54;
     $70 = $69 | 2;
     HEAP32[$8>>2] = $70;
     $$sum22 = (($54) + -4)|0;
     $71 = (($oldmem) + ($$sum22)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 | 1;
     HEAP32[$71>>2] = $73;
     $storemerge$i = 0;$storemerge21$i = 0;
    }
    HEAP32[((16032 + 8|0))>>2] = $storemerge21$i;
    HEAP32[((16032 + 20|0))>>2] = $storemerge$i;
    $mem$0 = $oldmem;
    STACKTOP = sp;return ($mem$0|0);
   }
   $74 = $16 & 2;
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = $16 & -8;
    $77 = (($76) + ($10))|0;
    $78 = ($77>>>0)<($21>>>0);
    if (!($78)) {
     $79 = (($77) - ($21))|0;
     $80 = $16 >>> 3;
     $81 = ($16>>>0)<(256);
     do {
      if ($81) {
       $82 = (($oldmem) + ($10)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($oldmem) + ($$sum2728$i)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $80 << 1;
       $87 = ((16032 + ($86<<2)|0) + 40|0);
       $88 = ($83|0)==($87|0);
       if (!($88)) {
        $89 = ($83>>>0)<($12>>>0);
        if ($89) {
         _abort();
         // unreachable;
        }
        $90 = (($83) + 12|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==($11|0);
        if (!($92)) {
         _abort();
         // unreachable;
        }
       }
       $93 = ($85|0)==($83|0);
       if ($93) {
        $94 = 1 << $80;
        $95 = $94 ^ -1;
        $96 = HEAP32[16032>>2]|0;
        $97 = $96 & $95;
        HEAP32[16032>>2] = $97;
        break;
       }
       $98 = ($85|0)==($87|0);
       if ($98) {
        $$pre$i = (($85) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $99 = ($85>>>0)<($12>>>0);
        if ($99) {
         _abort();
         // unreachable;
        }
        $100 = (($85) + 8|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)==($11|0);
        if ($102) {
         $$pre$phi$iZ2D = $100;
        } else {
         _abort();
         // unreachable;
        }
       }
       $103 = (($83) + 12|0);
       HEAP32[$103>>2] = $85;
       HEAP32[$$pre$phi$iZ2D>>2] = $83;
      } else {
       $$sum5 = (($10) + 16)|0;
       $104 = (($oldmem) + ($$sum5)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($oldmem) + ($$sum2728$i)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)==($11|0);
       do {
        if ($108) {
         $$sum17 = (($10) + 12)|0;
         $118 = (($oldmem) + ($$sum17)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ($119|0)==(0|0);
         if ($120) {
          $$sum18 = (($10) + 8)|0;
          $121 = (($oldmem) + ($$sum18)|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = ($122|0)==(0|0);
          if ($123) {
           $R$1$i = 0;
           break;
          } else {
           $R$0$i = $122;$RP$0$i = $121;
          }
         } else {
          $R$0$i = $119;$RP$0$i = $118;
         }
         while(1) {
          $124 = (($R$0$i) + 20|0);
          $125 = HEAP32[$124>>2]|0;
          $126 = ($125|0)==(0|0);
          if (!($126)) {
           $R$0$i = $125;$RP$0$i = $124;
           continue;
          }
          $127 = (($R$0$i) + 16|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = ($128|0)==(0|0);
          if ($129) {
           break;
          } else {
           $R$0$i = $128;$RP$0$i = $127;
          }
         }
         $130 = ($RP$0$i>>>0)<($12>>>0);
         if ($130) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i>>2] = 0;
          $R$1$i = $R$0$i;
          break;
         }
        } else {
         $109 = (($oldmem) + ($10)|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($110>>>0)<($12>>>0);
         if ($111) {
          _abort();
          // unreachable;
         }
         $112 = (($110) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = ($113|0)==($11|0);
         if (!($114)) {
          _abort();
          // unreachable;
         }
         $115 = (($107) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = ($116|0)==($11|0);
         if ($117) {
          HEAP32[$112>>2] = $107;
          HEAP32[$115>>2] = $110;
          $R$1$i = $107;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $131 = ($105|0)==(0|0);
       if (!($131)) {
        $$sum9 = (($10) + 20)|0;
        $132 = (($oldmem) + ($$sum9)|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = ((16032 + ($133<<2)|0) + 304|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($11|0)==($135|0);
        if ($136) {
         HEAP32[$134>>2] = $R$1$i;
         $cond$i = ($R$1$i|0)==(0|0);
         if ($cond$i) {
          $137 = 1 << $133;
          $138 = $137 ^ -1;
          $139 = HEAP32[((16032 + 4|0))>>2]|0;
          $140 = $139 & $138;
          HEAP32[((16032 + 4|0))>>2] = $140;
          break;
         }
        } else {
         $141 = HEAP32[((16032 + 16|0))>>2]|0;
         $142 = ($105>>>0)<($141>>>0);
         if ($142) {
          _abort();
          // unreachable;
         }
         $143 = (($105) + 16|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($144|0)==($11|0);
         if ($145) {
          HEAP32[$143>>2] = $R$1$i;
         } else {
          $146 = (($105) + 20|0);
          HEAP32[$146>>2] = $R$1$i;
         }
         $147 = ($R$1$i|0)==(0|0);
         if ($147) {
          break;
         }
        }
        $148 = HEAP32[((16032 + 16|0))>>2]|0;
        $149 = ($R$1$i>>>0)<($148>>>0);
        if ($149) {
         _abort();
         // unreachable;
        }
        $150 = (($R$1$i) + 24|0);
        HEAP32[$150>>2] = $105;
        $$sum10 = (($10) + 8)|0;
        $151 = (($oldmem) + ($$sum10)|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = ($152|0)==(0|0);
        do {
         if (!($153)) {
          $154 = ($152>>>0)<($148>>>0);
          if ($154) {
           _abort();
           // unreachable;
          } else {
           $155 = (($R$1$i) + 16|0);
           HEAP32[$155>>2] = $152;
           $156 = (($152) + 24|0);
           HEAP32[$156>>2] = $R$1$i;
           break;
          }
         }
        } while(0);
        $$sum11 = (($10) + 12)|0;
        $157 = (($oldmem) + ($$sum11)|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)==(0|0);
        if (!($159)) {
         $160 = HEAP32[((16032 + 16|0))>>2]|0;
         $161 = ($158>>>0)<($160>>>0);
         if ($161) {
          _abort();
          // unreachable;
         } else {
          $162 = (($R$1$i) + 20|0);
          HEAP32[$162>>2] = $158;
          $163 = (($158) + 24|0);
          HEAP32[$163>>2] = $R$1$i;
          break;
         }
        }
       }
      }
     } while(0);
     $164 = ($79>>>0)<(16);
     if ($164) {
      $165 = $9 & 1;
      $166 = $77 | $165;
      $167 = $166 | 2;
      HEAP32[$8>>2] = $167;
      $$sum910$i = $77 | 4;
      $$sum16 = (($$sum910$i) + -8)|0;
      $168 = (($oldmem) + ($$sum16)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = $169 | 1;
      HEAP32[$168>>2] = $170;
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     } else {
      $$sum12 = (($21) + -8)|0;
      $171 = (($oldmem) + ($$sum12)|0);
      $172 = $9 & 1;
      $173 = $172 | $21;
      $174 = $173 | 2;
      HEAP32[$8>>2] = $174;
      $$sum5$i13 = $21 | 4;
      $$sum14 = (($$sum5$i13) + -8)|0;
      $175 = (($oldmem) + ($$sum14)|0);
      $176 = $79 | 3;
      HEAP32[$175>>2] = $176;
      $$sum78$i = $77 | 4;
      $$sum15 = (($$sum78$i) + -8)|0;
      $177 = (($oldmem) + ($$sum15)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 | 1;
      HEAP32[$177>>2] = $179;
      _dispose_chunk($171,$79);
      $mem$0 = $oldmem;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
   }
  }
 } while(0);
 $180 = (_malloc($bytes)|0);
 $181 = ($180|0)==(0|0);
 if ($181) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $182 = HEAP32[$8>>2]|0;
 $183 = $182 & -8;
 $184 = $182 & 3;
 $185 = ($184|0)==(0);
 $186 = $185 ? 8 : 4;
 $187 = (($183) - ($186))|0;
 $188 = ($187>>>0)<($bytes>>>0);
 $189 = $188 ? $187 : $bytes;
 _memcpy(($180|0),($oldmem|0),($189|0))|0;
 _free($oldmem);
 $mem$0 = $180;
 STACKTOP = sp;return ($mem$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$pre = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $292 = 0;$293 = 0;
  tempRet0 = $292;
  STACKTOP = sp;return ($293|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 L5: while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  switch ($13|0) {
  case 9: case 10: case 11: case 12: case 13: case 32:  {
   break;
  }
  default: {
   break L5;
  }
  }
 }
 $14 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $15 = HEAP32[$3>>2]|0;
   $16 = $14 << 31 >> 31;
   $17 = HEAP32[$4>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = (($15) + 1|0);
    HEAP32[$3>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$neg$0 = $16;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$neg$0 = $16;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $23 = ($base|0)==(0);
 $24 = $base & -17;
 $25 = ($24|0)==(0);
 $26 = ($c$0|0)==(48);
 $or$cond5 = $25 & $26;
 do {
  if ($or$cond5) {
   $27 = HEAP32[$3>>2]|0;
   $28 = HEAP32[$4>>2]|0;
   $29 = ($27>>>0)<($28>>>0);
   if ($29) {
    $30 = (($27) + 1|0);
    HEAP32[$3>>2] = $30;
    $31 = HEAP8[$27>>0]|0;
    $32 = $31&255;
    $35 = $32;
   } else {
    $33 = (___shgetc($f)|0);
    $35 = $33;
   }
   $34 = $35 | 32;
   $36 = ($34|0)==(120);
   if (!($36)) {
    if ($23) {
     $$126 = 8;$c$127 = $35;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $35;
     label = 32;
     break;
    }
   }
   $37 = HEAP32[$3>>2]|0;
   $38 = HEAP32[$4>>2]|0;
   $39 = ($37>>>0)<($38>>>0);
   if ($39) {
    $40 = (($37) + 1|0);
    HEAP32[$3>>2] = $40;
    $41 = HEAP8[$37>>0]|0;
    $42 = $41&255;
    $44 = $42;
   } else {
    $43 = (___shgetc($f)|0);
    $44 = $43;
   }
   $$sum23 = (($44) + 1)|0;
   $45 = (16528 + ($$sum23)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46&255)>(15);
   if ($47) {
    $48 = HEAP32[$4>>2]|0;
    $49 = ($48|0)==(0|0);
    if (!($49)) {
     $50 = HEAP32[$3>>2]|0;
     $51 = (($50) + -1|0);
     HEAP32[$3>>2] = $51;
    }
    $52 = ($pok|0)==(0);
    if ($52) {
     $55 = (($f) + 104|0);
     HEAP32[$55>>2] = 0;
     $56 = (($f) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = HEAP32[$3>>2]|0;
     $59 = $57;
     $60 = $58;
     $61 = (($59) - ($60))|0;
     $62 = (($f) + 108|0);
     HEAP32[$62>>2] = $61;
     HEAP32[$4>>2] = $57;
     $292 = 0;$293 = 0;
     tempRet0 = $292;
     STACKTOP = sp;return ($293|0);
    }
    if ($49) {
     $292 = 0;$293 = 0;
     tempRet0 = $292;
     STACKTOP = sp;return ($293|0);
    }
    $53 = HEAP32[$3>>2]|0;
    $54 = (($53) + -1|0);
    HEAP32[$3>>2] = $54;
    $292 = 0;$293 = 0;
    tempRet0 = $292;
    STACKTOP = sp;return ($293|0);
   } else {
    $$126 = 16;$c$127 = $44;
    label = 46;
   }
  } else {
   $$base24 = $23 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $63 = (16528 + ($$sum)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = ($65>>>0)<($$base24>>>0);
   if ($66) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $67 = HEAP32[$4>>2]|0;
    $68 = ($67|0)==(0|0);
    $$pre = HEAP32[$3>>2]|0;
    if ($68) {
     $75 = $$pre;
    } else {
     $69 = (($$pre) + -1|0);
     HEAP32[$3>>2] = $69;
     $75 = $69;
    }
    $70 = (($f) + 104|0);
    HEAP32[$70>>2] = 0;
    $71 = (($f) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72;
    $74 = $75;
    $76 = (($73) - ($74))|0;
    $77 = (($f) + 108|0);
    HEAP32[$77>>2] = $76;
    HEAP32[$4>>2] = $72;
    $78 = (___errno_location()|0);
    HEAP32[$78>>2] = 22;
    $292 = 0;$293 = 0;
    tempRet0 = $292;
    STACKTOP = sp;return ($293|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $79 = ($$1|0)==(10);
  if ($79) {
   $80 = (($c$1) + -48)|0;
   $81 = ($80>>>0)<(10);
   if ($81) {
    $84 = $80;$x$073 = 0;
    while(1) {
     $82 = ($x$073*10)|0;
     $83 = (($82) + ($84))|0;
     $85 = HEAP32[$3>>2]|0;
     $86 = HEAP32[$4>>2]|0;
     $87 = ($85>>>0)<($86>>>0);
     if ($87) {
      $88 = (($85) + 1|0);
      HEAP32[$3>>2] = $88;
      $89 = HEAP8[$85>>0]|0;
      $90 = $89&255;
      $c$2$be = $90;
     } else {
      $91 = (___shgetc($f)|0);
      $c$2$be = $91;
     }
     $92 = (($c$2$be) + -48)|0;
     $93 = ($92>>>0)<(10);
     $94 = ($83>>>0)<(429496729);
     $or$cond7 = $93 & $94;
     if ($or$cond7) {
      $84 = $92;$x$073 = $83;
     } else {
      break;
     }
    }
    $294 = $83;$295 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $294 = 0;$295 = 0;$c$2$lcssa = $c$1;
   }
   $95 = (($c$2$lcssa) + -48)|0;
   $96 = ($95>>>0)<(10);
   if ($96) {
    $102 = $95;$97 = $294;$98 = $295;$c$362 = $c$2$lcssa;
    while(1) {
     $99 = (___muldi3(($97|0),($98|0),10,0)|0);
     $100 = tempRet0;
     $101 = ($102|0)<(0);
     $103 = $101 << 31 >> 31;
     $104 = $102 ^ -1;
     $105 = $103 ^ -1;
     $106 = ($100>>>0)>($105>>>0);
     $107 = ($99>>>0)>($104>>>0);
     $108 = ($100|0)==($105|0);
     $109 = $108 & $107;
     $110 = $106 | $109;
     if ($110) {
      $$lcssa = $102;$296 = $97;$297 = $98;$c$3$lcssa = $c$362;
      break;
     }
     $111 = (_i64Add(($99|0),($100|0),($102|0),($103|0))|0);
     $112 = tempRet0;
     $113 = HEAP32[$3>>2]|0;
     $114 = HEAP32[$4>>2]|0;
     $115 = ($113>>>0)<($114>>>0);
     if ($115) {
      $116 = (($113) + 1|0);
      HEAP32[$3>>2] = $116;
      $117 = HEAP8[$113>>0]|0;
      $118 = $117&255;
      $c$3$be = $118;
     } else {
      $119 = (___shgetc($f)|0);
      $c$3$be = $119;
     }
     $120 = (($c$3$be) + -48)|0;
     $121 = ($120>>>0)<(10);
     $122 = ($112>>>0)<(429496729);
     $123 = ($111>>>0)<(2576980378);
     $124 = ($112|0)==(429496729);
     $125 = $124 & $123;
     $126 = $122 | $125;
     $or$cond9 = $121 & $126;
     if ($or$cond9) {
      $102 = $120;$97 = $111;$98 = $112;$c$362 = $c$3$be;
     } else {
      $$lcssa = $120;$296 = $111;$297 = $112;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $127 = ($$lcssa>>>0)>(9);
    if ($127) {
     $266 = $297;$268 = $296;
    } else {
     $$125 = 10;$298 = $296;$299 = $297;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $266 = $295;$268 = $294;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $128 = (($$126) + -1)|0;
   $129 = $128 & $$126;
   $130 = ($129|0)==(0);
   if ($130) {
    $135 = ($$126*23)|0;
    $136 = $135 >>> 5;
    $137 = $136 & 7;
    $138 = (16792 + ($137)|0);
    $139 = HEAP8[$138>>0]|0;
    $140 = $139 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $141 = (16528 + ($$sum1737)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = ($143>>>0)<($$126>>>0);
    if ($144) {
     $147 = $143;$x$138 = 0;
     while(1) {
      $145 = $x$138 << $140;
      $146 = $147 | $145;
      $148 = HEAP32[$3>>2]|0;
      $149 = HEAP32[$4>>2]|0;
      $150 = ($148>>>0)<($149>>>0);
      if ($150) {
       $151 = (($148) + 1|0);
       HEAP32[$3>>2] = $151;
       $152 = HEAP8[$148>>0]|0;
       $153 = $152&255;
       $c$4$be = $153;
      } else {
       $154 = (___shgetc($f)|0);
       $c$4$be = $154;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $155 = (16528 + ($$sum17)|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&255;
      $158 = ($157>>>0)<($$126>>>0);
      $159 = ($146>>>0)<(134217728);
      $or$cond11 = $158 & $159;
      if ($or$cond11) {
       $147 = $157;$x$138 = $146;
      } else {
       break;
      }
     }
     $163 = $156;$166 = 0;$168 = $146;$c$4$lcssa = $c$4$be;
    } else {
     $163 = $142;$166 = 0;$168 = 0;$c$4$lcssa = $c$127;
    }
    $160 = (_bitshift64Lshr(-1,-1,($140|0))|0);
    $161 = tempRet0;
    $162 = $163&255;
    $164 = ($162>>>0)>=($$126>>>0);
    $165 = ($166>>>0)>($161>>>0);
    $167 = ($168>>>0)>($160>>>0);
    $169 = ($166|0)==($161|0);
    $170 = $169 & $167;
    $171 = $165 | $170;
    $or$cond31 = $164 | $171;
    if ($or$cond31) {
     $$125 = $$126;$298 = $168;$299 = $166;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $172 = $168;$173 = $166;$177 = $163;
    }
    while(1) {
     $174 = (_bitshift64Shl(($172|0),($173|0),($140|0))|0);
     $175 = tempRet0;
     $176 = $177&255;
     $178 = $176 | $174;
     $179 = HEAP32[$3>>2]|0;
     $180 = HEAP32[$4>>2]|0;
     $181 = ($179>>>0)<($180>>>0);
     if ($181) {
      $182 = (($179) + 1|0);
      HEAP32[$3>>2] = $182;
      $183 = HEAP8[$179>>0]|0;
      $184 = $183&255;
      $c$5$be = $184;
     } else {
      $185 = (___shgetc($f)|0);
      $c$5$be = $185;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $186 = (16528 + ($$sum18)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = ($188>>>0)>=($$126>>>0);
     $190 = ($175>>>0)>($161>>>0);
     $191 = ($178>>>0)>($160>>>0);
     $192 = ($175|0)==($161|0);
     $193 = $192 & $191;
     $194 = $190 | $193;
     $or$cond = $189 | $194;
     if ($or$cond) {
      $$125 = $$126;$298 = $178;$299 = $175;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $172 = $178;$173 = $175;$177 = $187;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $131 = (16528 + ($$sum2155)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = ($133>>>0)<($$126>>>0);
   if ($134) {
    $197 = $133;$x$256 = 0;
    while(1) {
     $195 = Math_imul($x$256, $$126)|0;
     $196 = (($197) + ($195))|0;
     $198 = HEAP32[$3>>2]|0;
     $199 = HEAP32[$4>>2]|0;
     $200 = ($198>>>0)<($199>>>0);
     if ($200) {
      $201 = (($198) + 1|0);
      HEAP32[$3>>2] = $201;
      $202 = HEAP8[$198>>0]|0;
      $203 = $202&255;
      $c$6$be = $203;
     } else {
      $204 = (___shgetc($f)|0);
      $c$6$be = $204;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $205 = (16528 + ($$sum21)|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206&255;
     $208 = ($207>>>0)<($$126>>>0);
     $209 = ($196>>>0)<(119304647);
     $or$cond13 = $208 & $209;
     if ($or$cond13) {
      $197 = $207;$x$256 = $196;
     } else {
      break;
     }
    }
    $211 = $206;$300 = $196;$301 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $211 = $132;$300 = 0;$301 = 0;$c$6$lcssa = $c$127;
   }
   $210 = $211&255;
   $212 = ($210>>>0)<($$126>>>0);
   if ($212) {
    $213 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $214 = tempRet0;
    $216 = $301;$218 = $300;$225 = $211;$c$747 = $c$6$lcssa;
    while(1) {
     $215 = ($216>>>0)>($214>>>0);
     $217 = ($218>>>0)>($213>>>0);
     $219 = ($216|0)==($214|0);
     $220 = $219 & $217;
     $221 = $215 | $220;
     if ($221) {
      $$125 = $$126;$298 = $218;$299 = $216;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $222 = (___muldi3(($218|0),($216|0),($$126|0),0)|0);
     $223 = tempRet0;
     $224 = $225&255;
     $226 = $224 ^ -1;
     $227 = ($223>>>0)>(4294967295);
     $228 = ($222>>>0)>($226>>>0);
     $229 = ($223|0)==(-1);
     $230 = $229 & $228;
     $231 = $227 | $230;
     if ($231) {
      $$125 = $$126;$298 = $218;$299 = $216;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $232 = (_i64Add(($224|0),0,($222|0),($223|0))|0);
     $233 = tempRet0;
     $234 = HEAP32[$3>>2]|0;
     $235 = HEAP32[$4>>2]|0;
     $236 = ($234>>>0)<($235>>>0);
     if ($236) {
      $237 = (($234) + 1|0);
      HEAP32[$3>>2] = $237;
      $238 = HEAP8[$234>>0]|0;
      $239 = $238&255;
      $c$7$be = $239;
     } else {
      $240 = (___shgetc($f)|0);
      $c$7$be = $240;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $241 = (16528 + ($$sum22)|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $244 = ($243>>>0)<($$126>>>0);
     if ($244) {
      $216 = $233;$218 = $232;$225 = $242;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$298 = $232;$299 = $233;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$298 = $300;$299 = $301;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $245 = (16528 + ($$sum19)|0);
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = ($247>>>0)<($$125>>>0);
  if ($248) {
   while(1) {
    $249 = HEAP32[$3>>2]|0;
    $250 = HEAP32[$4>>2]|0;
    $251 = ($249>>>0)<($250>>>0);
    if ($251) {
     $252 = (($249) + 1|0);
     HEAP32[$3>>2] = $252;
     $253 = HEAP8[$249>>0]|0;
     $254 = $253&255;
     $c$9$be = $254;
    } else {
     $255 = (___shgetc($f)|0);
     $c$9$be = $255;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $256 = (16528 + ($$sum20)|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $257&255;
    $259 = ($258>>>0)<($$125>>>0);
    if (!($259)) {
     break;
    }
   }
   $260 = (___errno_location()|0);
   HEAP32[$260>>2] = 34;
   $266 = $1;$268 = $0;
  } else {
   $266 = $299;$268 = $298;
  }
 }
 $261 = HEAP32[$4>>2]|0;
 $262 = ($261|0)==(0|0);
 if (!($262)) {
  $263 = HEAP32[$3>>2]|0;
  $264 = (($263) + -1|0);
  HEAP32[$3>>2] = $264;
 }
 $265 = ($266>>>0)<($1>>>0);
 $267 = ($268>>>0)<($0>>>0);
 $269 = ($266|0)==($1|0);
 $270 = $269 & $267;
 $271 = $265 | $270;
 if (!($271)) {
  $272 = $0 & 1;
  $273 = ($272|0)!=(0);
  $274 = (0)!=(0);
  $275 = $273 | $274;
  $276 = ($neg$0|0)!=(0);
  $or$cond15 = $275 | $276;
  if (!($or$cond15)) {
   $277 = (___errno_location()|0);
   HEAP32[$277>>2] = 34;
   $278 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $279 = tempRet0;
   $292 = $279;$293 = $278;
   tempRet0 = $292;
   STACKTOP = sp;return ($293|0);
  }
  $280 = ($266>>>0)>($1>>>0);
  $281 = ($268>>>0)>($0>>>0);
  $282 = ($266|0)==($1|0);
  $283 = $282 & $281;
  $284 = $280 | $283;
  if ($284) {
   $285 = (___errno_location()|0);
   HEAP32[$285>>2] = 34;
   $292 = $1;$293 = $0;
   tempRet0 = $292;
   STACKTOP = sp;return ($293|0);
  }
 }
 $286 = ($neg$0|0)<(0);
 $287 = $286 << 31 >> 31;
 $288 = $268 ^ $neg$0;
 $289 = $266 ^ $287;
 $290 = (_i64Subtract(($288|0),($289|0),($neg$0|0),($287|0))|0);
 $291 = tempRet0;
 $292 = $291;$293 = $290;
 tempRet0 = $292;
 STACKTOP = sp;return ($293|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i$i = 0, $$$i$i13 = 0, $$$i1 = 0, $$$i3 = 0, $$$i8 = 0, $$0 = 0.0, $$0$i = 0, $$0$i$i = 0, $$0$i$i15 = 0, $$0$i10 = 0, $$0$i5 = 0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0;
 var $$1$i = 0, $$1$i$i = 0, $$1$i$i14 = 0, $$1$i4 = 0, $$1$i9 = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0, $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre = 0;
 var $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$pre29 = 0, $$promoted$i = 0, $$promoted23 = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0;
 var $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0;
 var $56 = 0, $560 = 0.0, $561 = 0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0.0;
 var $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0.0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0.0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0, $829 = 0.0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0.0, $845 = 0, $846 = 0, $847 = 0.0;
 var $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0;
 var $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0;
 var $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0;
 var $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0, $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0;
 var $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0, $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0;
 var $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0, $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0;
 var $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0, $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0;
 var $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$i = 0.0, $y$0$i$i16 = 0.0, $y$0$i11 = 0.0, $y$0$i2 = 0.0;
 var $y$0$i6 = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0, $z$4$i = 0;
 var $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 L6: while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  switch ($9|0) {
  case 9: case 10: case 11: case 12: case 13: case 32:  {
   break;
  }
  default: {
   break L6;
  }
  }
 }
 $10 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = $10&1;
   $13 = $12 << 1;
   $14 = (1 - ($13))|0;
   $15 = HEAP32[$1>>2]|0;
   $16 = ($11>>>0)<($15>>>0);
   if ($16) {
    $17 = (($11) + 1|0);
    HEAP32[$0>>2] = $17;
    $18 = HEAP8[$11>>0]|0;
    $19 = $18&255;
    $c$0 = $19;$sign$0 = $14;
    break;
   } else {
    $20 = (___shgetc($f)|0);
    $c$0 = $20;$sign$0 = $14;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $21 = $c$171 | 32;
  $22 = (16808 + ($i$070)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($21|0)==($24|0);
  if (!($25)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $26 = ($i$070>>>0)<(7);
  do {
   if ($26) {
    $27 = HEAP32[$0>>2]|0;
    $28 = HEAP32[$1>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if ($29) {
     $30 = (($27) + 1|0);
     HEAP32[$0>>2] = $30;
     $31 = HEAP8[$27>>0]|0;
     $32 = $31&255;
     $c$2 = $32;
     break;
    } else {
     $33 = (___shgetc($f)|0);
     $c$2 = $33;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $34 = (($i$070) + 1)|0;
  $35 = ($34>>>0)<(8);
  if ($35) {
   $c$171 = $c$2;$i$070 = $34;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $34;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $36 = ($i$0$lcssa>>>0)>(3);
   $37 = ($pok|0)!=(0);
   $or$cond5 = $36 & $37;
   if ($or$cond5) {
    $38 = ($i$0$lcssa|0)==(8);
    if ($38) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $49 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($49) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $50 = $c$369 | 32;
      $51 = (17392 + ($i$268)|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52 << 24 >> 24;
      $54 = ($50|0)==($53|0);
      if (!($54)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $55 = ($i$268>>>0)<(2);
      do {
       if ($55) {
        $56 = HEAP32[$0>>2]|0;
        $57 = HEAP32[$1>>2]|0;
        $58 = ($56>>>0)<($57>>>0);
        if ($58) {
         $59 = (($56) + 1|0);
         HEAP32[$0>>2] = $59;
         $60 = HEAP8[$56>>0]|0;
         $61 = $60&255;
         $c$4 = $61;
         break;
        } else {
         $62 = (___shgetc($f)|0);
         $c$4 = $62;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $63 = (($i$268) + 1)|0;
      $64 = ($63>>>0)<(3);
      if ($64) {
       $c$369 = $c$4;$i$268 = $63;
      } else {
       $c$5 = $c$4;$i$3 = $63;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $125 = ($c$5|0)==(48);
    do {
     if ($125) {
      $126 = HEAP32[$0>>2]|0;
      $127 = HEAP32[$1>>2]|0;
      $128 = ($126>>>0)<($127>>>0);
      if ($128) {
       $129 = (($126) + 1|0);
       HEAP32[$0>>2] = $129;
       $130 = HEAP8[$126>>0]|0;
       $131 = $130&255;
       $134 = $131;
      } else {
       $132 = (___shgetc($f)|0);
       $134 = $132;
      }
      $133 = $134 | 32;
      $135 = ($133|0)==(120);
      if (!($135)) {
       $390 = HEAP32[$1>>2]|0;
       $391 = ($390|0)==(0|0);
       if ($391) {
        $c$6 = 48;
        break;
       }
       $392 = HEAP32[$0>>2]|0;
       $393 = (($392) + -1|0);
       HEAP32[$0>>2] = $393;
       $c$6 = 48;
       break;
      }
      $136 = HEAP32[$0>>2]|0;
      $137 = HEAP32[$1>>2]|0;
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $139 = (($136) + 1|0);
       HEAP32[$0>>2] = $139;
       $140 = HEAP8[$136>>0]|0;
       $141 = $140&255;
       $c$0$i = $141;$gotdig$0$i = 0;
      } else {
       $142 = (___shgetc($f)|0);
       $c$0$i = $142;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 71;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $181 = 0;$183 = 0;$233 = 0;$235 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $143 = HEAP32[$0>>2]|0;
       $144 = HEAP32[$1>>2]|0;
       $145 = ($143>>>0)<($144>>>0);
       if ($145) {
        $146 = (($143) + 1|0);
        HEAP32[$0>>2] = $146;
        $147 = HEAP8[$143>>0]|0;
        $148 = $147&255;
        $c$0$i = $148;$gotdig$0$i = 1;
        continue;
       } else {
        $149 = (___shgetc($f)|0);
        $c$0$i = $149;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 71) {
       $150 = HEAP32[$0>>2]|0;
       $151 = HEAP32[$1>>2]|0;
       $152 = ($150>>>0)<($151>>>0);
       if ($152) {
        $153 = (($150) + 1|0);
        HEAP32[$0>>2] = $153;
        $154 = HEAP8[$150>>0]|0;
        $155 = $154&255;
        $c$1$ph$i = $155;
       } else {
        $156 = (___shgetc($f)|0);
        $c$1$ph$i = $156;
       }
       $157 = ($c$1$ph$i|0)==(48);
       if ($157) {
        $165 = 0;$166 = 0;
        while(1) {
         $158 = HEAP32[$0>>2]|0;
         $159 = HEAP32[$1>>2]|0;
         $160 = ($158>>>0)<($159>>>0);
         if ($160) {
          $161 = (($158) + 1|0);
          HEAP32[$0>>2] = $161;
          $162 = HEAP8[$158>>0]|0;
          $163 = $162&255;
          $170 = $163;
         } else {
          $164 = (___shgetc($f)|0);
          $170 = $164;
         }
         $167 = (_i64Add(($165|0),($166|0),-1,-1)|0);
         $168 = tempRet0;
         $169 = ($170|0)==(48);
         if ($169) {
          $165 = $167;$166 = $168;
         } else {
          $181 = 0;$183 = 0;$233 = $167;$235 = $168;$c$2$i = $170;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $181 = 0;$183 = 0;$233 = 0;$235 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L78: while(1) {
       $171 = (($c$2$i) + -48)|0;
       $172 = ($171>>>0)<(10);
       do {
        if ($172) {
         $d$0$i = $171;
         label = 84;
        } else {
         $173 = $c$2$i | 32;
         $174 = (($173) + -97)|0;
         $175 = ($174>>>0)<(6);
         $176 = ($c$2$i|0)==(46);
         $or$cond$i = $175 | $176;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L78;
         }
         if ($176) {
          $177 = ($gotrad$0$i|0)==(0);
          if ($177) {
           $850 = $183;$851 = $181;$852 = $183;$853 = $181;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L78;
          }
         } else {
          $178 = ($c$2$i|0)>(57);
          $179 = (($173) + -87)|0;
          $$$i = $178 ? $179 : $171;
          $d$0$i = $$$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $180 = ($181|0)<(0);
        $182 = ($183>>>0)<(8);
        $184 = ($181|0)==(0);
        $185 = $184 & $182;
        $186 = $180 | $185;
        do {
         if ($186) {
          $187 = $x$0$i << 4;
          $188 = (($d$0$i) + ($187))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $188;$y$1$i = $y$0$i;
         } else {
          $189 = ($181|0)<(0);
          $190 = ($183>>>0)<(14);
          $191 = ($181|0)==(0);
          $192 = $191 & $190;
          $193 = $189 | $192;
          if ($193) {
           $194 = (+($d$0$i|0));
           $195 = $scale$0$i * 0.0625;
           $196 = $195 * $194;
           $197 = $y$0$i + $196;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $195;$x$1$i = $x$0$i;$y$1$i = $197;
           break;
          }
          $198 = ($d$0$i|0)==(0);
          $199 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $198 | $199;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $200 = $scale$0$i * 0.5;
           $201 = $y$0$i + $200;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $201;
          }
         }
        } while(0);
        $202 = (_i64Add(($183|0),($181|0),1,0)|0);
        $203 = tempRet0;
        $850 = $233;$851 = $235;$852 = $202;$853 = $203;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $204 = HEAP32[$0>>2]|0;
       $205 = HEAP32[$1>>2]|0;
       $206 = ($204>>>0)<($205>>>0);
       if ($206) {
        $207 = (($204) + 1|0);
        HEAP32[$0>>2] = $207;
        $208 = HEAP8[$204>>0]|0;
        $209 = $208&255;
        $181 = $853;$183 = $852;$233 = $850;$235 = $851;$c$2$i = $209;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $210 = (___shgetc($f)|0);
        $181 = $853;$183 = $852;$233 = $850;$235 = $851;$c$2$i = $210;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $211 = ($gotdig$2$i|0)==(0);
      if ($211) {
       $212 = HEAP32[$1>>2]|0;
       $213 = ($212|0)==(0|0);
       if (!($213)) {
        $214 = HEAP32[$0>>2]|0;
        $215 = (($214) + -1|0);
        HEAP32[$0>>2] = $215;
       }
       $216 = ($pok|0)==(0);
       if ($216) {
        $221 = (($f) + 104|0);
        HEAP32[$221>>2] = 0;
        $222 = (($f) + 8|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = HEAP32[$0>>2]|0;
        $225 = $223;
        $226 = $224;
        $227 = (($225) - ($226))|0;
        $228 = (($f) + 108|0);
        HEAP32[$228>>2] = $227;
        HEAP32[$1>>2] = $223;
       } else {
        if (!($213)) {
         $217 = HEAP32[$0>>2]|0;
         $218 = (($217) + -1|0);
         HEAP32[$0>>2] = $218;
         $219 = ($gotrad$0$i|0)==(0);
         if (!($219)) {
          $220 = (($217) + -2|0);
          HEAP32[$0>>2] = $220;
         }
        }
       }
       $229 = (+($sign$0|0));
       $230 = $229 * 0.0;
       $$0 = $230;
       STACKTOP = sp;return (+$$0);
      }
      $231 = ($gotrad$0$i|0)==(0);
      $232 = $231 ? $183 : $233;
      $234 = $231 ? $181 : $235;
      $236 = ($181|0)<(0);
      $237 = ($183>>>0)<(8);
      $238 = ($181|0)==(0);
      $239 = $238 & $237;
      $240 = $236 | $239;
      if ($240) {
       $242 = $183;$243 = $181;$x$318$i = $x$0$i;
       while(1) {
        $241 = $x$318$i << 4;
        $244 = (_i64Add(($242|0),($243|0),1,0)|0);
        $245 = tempRet0;
        $246 = ($245|0)<(0);
        $247 = ($244>>>0)<(8);
        $248 = ($245|0)==(0);
        $249 = $248 & $247;
        $250 = $246 | $249;
        if ($250) {
         $242 = $244;$243 = $245;$x$318$i = $241;
        } else {
         $x$3$lcssa$i = $241;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $251 = $c$2$lcssa$i | 32;
      $252 = ($251|0)==(112);
      do {
       if ($252) {
        $253 = (_scanexp($f,$pok)|0);
        $254 = tempRet0;
        $255 = ($253|0)==(0);
        $256 = ($254|0)==(-2147483648);
        $257 = $255 & $256;
        if ($257) {
         $258 = ($pok|0)==(0);
         if ($258) {
          $263 = (($f) + 104|0);
          HEAP32[$263>>2] = 0;
          $264 = (($f) + 8|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = HEAP32[$0>>2]|0;
          $267 = $265;
          $268 = $266;
          $269 = (($267) - ($268))|0;
          $270 = (($f) + 108|0);
          HEAP32[$270>>2] = $269;
          HEAP32[$1>>2] = $265;
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $259 = HEAP32[$1>>2]|0;
          $260 = ($259|0)==(0|0);
          if ($260) {
           $279 = 0;$280 = 0;
           break;
          }
          $261 = HEAP32[$0>>2]|0;
          $262 = (($261) + -1|0);
          HEAP32[$0>>2] = $262;
          $279 = 0;$280 = 0;
          break;
         }
        } else {
         $279 = $253;$280 = $254;
        }
       } else {
        $271 = HEAP32[$1>>2]|0;
        $272 = ($271|0)==(0|0);
        if ($272) {
         $279 = 0;$280 = 0;
        } else {
         $273 = HEAP32[$0>>2]|0;
         $274 = (($273) + -1|0);
         HEAP32[$0>>2] = $274;
         $279 = 0;$280 = 0;
        }
       }
      } while(0);
      $275 = (_bitshift64Shl(($232|0),($234|0),2)|0);
      $276 = tempRet0;
      $277 = (_i64Add(($275|0),($276|0),-32,-1)|0);
      $278 = tempRet0;
      $281 = (_i64Add(($277|0),($278|0),($279|0),($280|0))|0);
      $282 = tempRet0;
      $283 = ($x$3$lcssa$i|0)==(0);
      if ($283) {
       $284 = (+($sign$0|0));
       $285 = $284 * 0.0;
       $$0 = $285;
       STACKTOP = sp;return (+$$0);
      }
      $286 = (0 - ($emin$0$ph))|0;
      $287 = ($282|0)>(0);
      $288 = ($281>>>0)>($286>>>0);
      $289 = ($282|0)==(0);
      $290 = $289 & $288;
      $291 = $287 | $290;
      if ($291) {
       $292 = (___errno_location()|0);
       HEAP32[$292>>2] = 34;
       $293 = (+($sign$0|0));
       $294 = $293 * 1.7976931348623157E+308;
       $295 = $294 * 1.7976931348623157E+308;
       $$0 = $295;
       STACKTOP = sp;return (+$$0);
      }
      $296 = (($emin$0$ph) + -106)|0;
      $297 = ($296|0)<(0);
      $298 = $297 << 31 >> 31;
      $299 = ($282|0)<($298|0);
      $300 = ($281>>>0)<($296>>>0);
      $301 = ($282|0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $305 = (___errno_location()|0);
       HEAP32[$305>>2] = 34;
       $306 = (+($sign$0|0));
       $307 = $306 * 2.2250738585072014E-308;
       $308 = $307 * 2.2250738585072014E-308;
       $$0 = $308;
       STACKTOP = sp;return (+$$0);
      }
      $304 = ($x$3$lcssa$i|0)>(-1);
      if ($304) {
       $313 = $281;$314 = $282;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $309 = !($y$314$i >= 0.5);
        $310 = $x$413$i << 1;
        if ($309) {
         $$pn$i = $y$314$i;$x$5$i = $310;
        } else {
         $311 = $310 | 1;
         $312 = $y$314$i + -1.0;
         $$pn$i = $312;$x$5$i = $311;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $315 = (_i64Add(($313|0),($314|0),-1,-1)|0);
        $316 = tempRet0;
        $317 = ($x$5$i|0)>(-1);
        if ($317) {
         $313 = $315;$314 = $316;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $322 = $315;$323 = $316;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $322 = $281;$323 = $282;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $318 = ($emin$0$ph|0)<(0);
      $319 = $318 << 31 >> 31;
      $320 = (_i64Subtract(32,0,($emin$0$ph|0),($319|0))|0);
      $321 = tempRet0;
      $324 = (_i64Add(($322|0),($323|0),($320|0),($321|0))|0);
      $325 = tempRet0;
      $326 = (0)>($325|0);
      $327 = ($bits$0$ph>>>0)>($324>>>0);
      $328 = (0)==($325|0);
      $329 = $328 & $327;
      $330 = $326 | $329;
      if ($330) {
       $331 = ($324|0)<(0);
       if ($331) {
        $$0611$i = 0;
        label = 127;
       } else {
        $$06$i = $324;
        label = 125;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 125;
      }
      if ((label|0) == 125) {
       $332 = ($$06$i|0)<(53);
       if ($332) {
        $$0611$i = $$06$i;
        label = 127;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 127) {
       $333 = (84 - ($$0611$i))|0;
       $334 = ($333|0)>(1023);
       do {
        if ($334) {
         $335 = (($333) + -1023)|0;
         $336 = ($335|0)>(1023);
         if (!($336)) {
          $$0$i10 = $335;$y$0$i11 = 8.9884656743115795E+307;
          break;
         }
         $337 = (($333) + -2046)|0;
         $338 = ($337|0)>(1023);
         $$$i8 = $338 ? 1023 : $337;
         $$0$i10 = $$$i8;$y$0$i11 = inf;
        } else {
         $339 = ($333|0)<(-1022);
         if (!($339)) {
          $$0$i10 = $333;$y$0$i11 = 1.0;
          break;
         }
         $340 = (($333) + 1022)|0;
         $341 = ($340|0)<(-1022);
         if (!($341)) {
          $$0$i10 = $340;$y$0$i11 = 2.2250738585072014E-308;
          break;
         }
         $342 = (($333) + 2044)|0;
         $343 = ($342|0)<(-1022);
         $$1$i9 = $343 ? -1022 : $342;
         $$0$i10 = $$1$i9;$y$0$i11 = 0.0;
        }
       } while(0);
       $344 = (($$0$i10) + 1023)|0;
       $345 = (_bitshift64Shl(($344|0),0,52)|0);
       $346 = tempRet0;
       HEAP32[tempDoublePtr>>2] = $345;HEAP32[tempDoublePtr+4>>2] = $346;$347 = +HEAPF64[tempDoublePtr>>3];
       $348 = $y$0$i11 * $347;
       $349 = (+($sign$0|0));
       HEAPF64[tempDoublePtr>>3] = $348;$350 = HEAP32[tempDoublePtr>>2]|0;
       $351 = HEAP32[tempDoublePtr+4>>2]|0;
       HEAPF64[tempDoublePtr>>3] = $349;$352 = HEAP32[tempDoublePtr>>2]|0;
       $353 = HEAP32[tempDoublePtr+4>>2]|0;
       $354 = $351 & 2147483647;
       $355 = $353 & -2147483648;
       $356 = $355 | $354;
       HEAP32[tempDoublePtr>>2] = $350;HEAP32[tempDoublePtr+4>>2] = $356;$357 = +HEAPF64[tempDoublePtr>>3];
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $349;$bias$0$i = $357;
      }
      $358 = ($$0612$i|0)<(32);
      $359 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $358 & $359;
      $360 = $x$4$lcssa$i & 1;
      $361 = ($360|0)==(0);
      $or$cond8$i = $or$cond5$i & $361;
      $362 = $or$cond8$i&1;
      $x$6$i = (($362) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $363 = (+($x$6$i>>>0));
      $364 = $$pre$phi$iZ2D * $363;
      $365 = $bias$0$i + $364;
      $366 = $$pre$phi$iZ2D * $y$5$i;
      $367 = $366 + $365;
      $368 = $367 - $bias$0$i;
      $369 = $368 != 0.0;
      if (!($369)) {
       $370 = (___errno_location()|0);
       HEAP32[$370>>2] = 34;
      }
      $371 = ($322|0)>(1023);
      do {
       if ($371) {
        $372 = $368 * 8.9884656743115795E+307;
        $373 = (($322) + -1023)|0;
        $374 = ($373|0)>(1023);
        if (!($374)) {
         $$0$i$i15 = $373;$y$0$i$i16 = $372;
         break;
        }
        $375 = $372 * 8.9884656743115795E+307;
        $376 = (($322) + -2046)|0;
        $377 = ($376|0)>(1023);
        $$$i$i13 = $377 ? 1023 : $376;
        $$0$i$i15 = $$$i$i13;$y$0$i$i16 = $375;
       } else {
        $378 = ($322|0)<(-1022);
        if (!($378)) {
         $$0$i$i15 = $322;$y$0$i$i16 = $368;
         break;
        }
        $379 = $368 * 2.2250738585072014E-308;
        $380 = (($322) + 1022)|0;
        $381 = ($380|0)<(-1022);
        if (!($381)) {
         $$0$i$i15 = $380;$y$0$i$i16 = $379;
         break;
        }
        $382 = $379 * 2.2250738585072014E-308;
        $383 = (($322) + 2044)|0;
        $384 = ($383|0)<(-1022);
        $$1$i$i14 = $384 ? -1022 : $383;
        $$0$i$i15 = $$1$i$i14;$y$0$i$i16 = $382;
       }
      } while(0);
      $385 = (($$0$i$i15) + 1023)|0;
      $386 = (_bitshift64Shl(($385|0),0,52)|0);
      $387 = tempRet0;
      HEAP32[tempDoublePtr>>2] = $386;HEAP32[tempDoublePtr+4>>2] = $387;$388 = +HEAPF64[tempDoublePtr>>3];
      $389 = $y$0$i$i16 * $388;
      $$0 = $389;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $394 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 150;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$854 = 0;$855 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $395 = HEAP32[$0>>2]|0;
     $396 = HEAP32[$1>>2]|0;
     $397 = ($395>>>0)<($396>>>0);
     if ($397) {
      $398 = (($395) + 1|0);
      HEAP32[$0>>2] = $398;
      $399 = HEAP8[$395>>0]|0;
      $400 = $399&255;
      $$011$i = $400;$gotdig$0$i11 = 1;
      continue;
     } else {
      $401 = (___shgetc($f)|0);
      $$011$i = $401;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 150) {
     $402 = HEAP32[$0>>2]|0;
     $403 = HEAP32[$1>>2]|0;
     $404 = ($402>>>0)<($403>>>0);
     if ($404) {
      $405 = (($402) + 1|0);
      HEAP32[$0>>2] = $405;
      $406 = HEAP8[$402>>0]|0;
      $407 = $406&255;
      $$1$ph$i = $407;
     } else {
      $408 = (___shgetc($f)|0);
      $$1$ph$i = $408;
     }
     $409 = ($$1$ph$i|0)==(48);
     if ($409) {
      $410 = 0;$411 = 0;
      while(1) {
       $412 = (_i64Add(($410|0),($411|0),-1,-1)|0);
       $413 = tempRet0;
       $414 = HEAP32[$0>>2]|0;
       $415 = HEAP32[$1>>2]|0;
       $416 = ($414>>>0)<($415>>>0);
       if ($416) {
        $417 = (($414) + 1|0);
        HEAP32[$0>>2] = $417;
        $418 = HEAP8[$414>>0]|0;
        $419 = $418&255;
        $$1$be$i = $419;
       } else {
        $420 = (___shgetc($f)|0);
        $$1$be$i = $420;
       }
       $421 = ($$1$be$i|0)==(48);
       if ($421) {
        $410 = $412;$411 = $413;
       } else {
        $$2$i = $$1$be$i;$854 = $412;$855 = $413;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$854 = 0;$855 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $422 = (($$2$i) + -48)|0;
    $423 = ($422>>>0)<(10);
    $424 = ($$2$i|0)==(46);
    $or$cond112$i = $423 | $424;
    L194: do {
     if ($or$cond112$i) {
      $425 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$428 = 0;$429 = 0;$856 = $424;$857 = $422;$858 = $854;$859 = $855;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L196: while(1) {
       do {
        if ($856) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $860 = $428;$861 = $429;$862 = $428;$863 = $429;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L196;
         }
        } else {
         $427 = ($k$0118$i|0)<(125);
         $430 = (_i64Add(($428|0),($429|0),1,0)|0);
         $431 = tempRet0;
         $432 = ($$3120$i|0)!=(48);
         if (!($427)) {
          if (!($432)) {
           $860 = $858;$861 = $859;$862 = $430;$863 = $431;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $442 = HEAP32[$425>>2]|0;
          $443 = $442 | 1;
          HEAP32[$425>>2] = $443;
          $860 = $858;$861 = $859;$862 = $430;$863 = $431;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $432 ? $430 : $lnz$0115$i;
         $433 = ($j$0119$i|0)==(0);
         $434 = (($x$i) + ($k$0118$i<<2)|0);
         if ($433) {
          $storemerge$i = $857;
         } else {
          $435 = HEAP32[$434>>2]|0;
          $436 = ($435*10)|0;
          $437 = (($$3120$i) + -48)|0;
          $438 = (($437) + ($436))|0;
          $storemerge$i = $438;
         }
         HEAP32[$434>>2] = $storemerge$i;
         $439 = (($j$0119$i) + 1)|0;
         $440 = ($439|0)==(9);
         $441 = $440&1;
         $$k$0$i = (($441) + ($k$0118$i))|0;
         $$13$i = $440 ? 0 : $439;
         $860 = $858;$861 = $859;$862 = $430;$863 = $431;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $444 = HEAP32[$0>>2]|0;
       $445 = HEAP32[$1>>2]|0;
       $446 = ($444>>>0)<($445>>>0);
       if ($446) {
        $447 = (($444) + 1|0);
        HEAP32[$0>>2] = $447;
        $448 = HEAP8[$444>>0]|0;
        $449 = $448&255;
        $$3$be$i = $449;
       } else {
        $450 = (___shgetc($f)|0);
        $$3$be$i = $450;
       }
       $451 = (($$3$be$i) + -48)|0;
       $452 = ($451>>>0)<(10);
       $453 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $452 | $453;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$428 = $862;$429 = $863;$856 = $453;$857 = $451;$858 = $860;$859 = $861;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$456 = $862;$457 = $860;$459 = $863;$460 = $861;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 173;
        break L194;
       }
      }
      $426 = ($gotdig$3116$i|0)!=(0);
      $864 = $428;$865 = $429;$866 = $858;$867 = $859;$868 = $426;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 181;
     } else {
      $$3$lcssa$i = $$2$i;$456 = 0;$457 = $854;$459 = 0;$460 = $855;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 173;
     }
    } while(0);
    do {
     if ((label|0) == 173) {
      $454 = ($gotrad$1$lcssa$i|0)==(0);
      $455 = $454 ? $456 : $457;
      $458 = $454 ? $459 : $460;
      $461 = ($gotdig$3$lcssa$i|0)!=(0);
      $462 = $$3$lcssa$i | 32;
      $463 = ($462|0)==(101);
      $or$cond15$i = $461 & $463;
      if (!($or$cond15$i)) {
       $486 = ($$3$lcssa$i|0)>(-1);
       if ($486) {
        $864 = $456;$865 = $459;$866 = $455;$867 = $458;$868 = $461;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 181;
        break;
       } else {
        $869 = $456;$870 = $459;$871 = $461;$872 = $455;$873 = $458;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 183;
        break;
       }
      }
      $464 = (_scanexp($f,$pok)|0);
      $465 = tempRet0;
      $466 = ($464|0)==(0);
      $467 = ($465|0)==(-2147483648);
      $468 = $466 & $467;
      do {
       if ($468) {
        $469 = ($pok|0)==(0);
        if ($469) {
         $474 = (($f) + 104|0);
         HEAP32[$474>>2] = 0;
         $475 = (($f) + 8|0);
         $476 = HEAP32[$475>>2]|0;
         $477 = HEAP32[$0>>2]|0;
         $478 = $476;
         $479 = $477;
         $480 = (($478) - ($479))|0;
         $481 = (($f) + 108|0);
         HEAP32[$481>>2] = $480;
         HEAP32[$1>>2] = $476;
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $470 = HEAP32[$1>>2]|0;
         $471 = ($470|0)==(0|0);
         if ($471) {
          $482 = 0;$483 = 0;
          break;
         }
         $472 = HEAP32[$0>>2]|0;
         $473 = (($472) + -1|0);
         HEAP32[$0>>2] = $473;
         $482 = 0;$483 = 0;
         break;
        }
       } else {
        $482 = $464;$483 = $465;
       }
      } while(0);
      $484 = (_i64Add(($482|0),($483|0),($455|0),($458|0))|0);
      $485 = tempRet0;
      $505 = $484;$506 = $456;$508 = $485;$509 = $459;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 181) {
     $487 = HEAP32[$1>>2]|0;
     $488 = ($487|0)==(0|0);
     if ($488) {
      $869 = $864;$870 = $865;$871 = $868;$872 = $866;$873 = $867;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 183;
     } else {
      $489 = HEAP32[$0>>2]|0;
      $490 = (($489) + -1|0);
      HEAP32[$0>>2] = $490;
      if ($868) {
       $505 = $866;$506 = $864;$508 = $867;$509 = $865;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       $497 = $490;
       label = 185;
      }
     }
    }
    if ((label|0) == 183) {
     if ($871) {
      $505 = $872;$506 = $869;$508 = $873;$509 = $870;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      $$pre29 = HEAP32[$0>>2]|0;
      $497 = $$pre29;
      label = 185;
     }
    }
    if ((label|0) == 185) {
     $491 = (___errno_location()|0);
     HEAP32[$491>>2] = 22;
     $492 = (($f) + 104|0);
     HEAP32[$492>>2] = 0;
     $493 = (($f) + 8|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = $494;
     $496 = $497;
     $498 = (($495) - ($496))|0;
     $499 = (($f) + 108|0);
     HEAP32[$499>>2] = $498;
     HEAP32[$1>>2] = $494;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $500 = HEAP32[$x$i>>2]|0;
    $501 = ($500|0)==(0);
    if ($501) {
     $502 = (+($sign$0|0));
     $503 = $502 * 0.0;
     $$0 = $503;
     STACKTOP = sp;return (+$$0);
    }
    $504 = ($505|0)==($506|0);
    $507 = ($508|0)==($509|0);
    $510 = $504 & $507;
    $511 = ($509|0)<(0);
    $512 = ($506>>>0)<(10);
    $513 = ($509|0)==(0);
    $514 = $513 & $512;
    $515 = $511 | $514;
    $or$cond3$i16 = $510 & $515;
    if ($or$cond3$i16) {
     $516 = ($bits$0$ph>>>0)>(30);
     $517 = $500 >>> $bits$0$ph;
     $518 = ($517|0)==(0);
     $or$cond17$i = $516 | $518;
     if ($or$cond17$i) {
      $519 = (+($sign$0|0));
      $520 = (+($500>>>0));
      $521 = $519 * $520;
      $$0 = $521;
      STACKTOP = sp;return (+$$0);
     }
    }
    $522 = (($emin$0$ph|0) / -2)&-1;
    $523 = ($522|0)<(0);
    $524 = $523 << 31 >> 31;
    $525 = ($508|0)>($524|0);
    $526 = ($505>>>0)>($522>>>0);
    $527 = ($508|0)==($524|0);
    $528 = $527 & $526;
    $529 = $525 | $528;
    if ($529) {
     $530 = (___errno_location()|0);
     HEAP32[$530>>2] = 34;
     $531 = (+($sign$0|0));
     $532 = $531 * 1.7976931348623157E+308;
     $533 = $532 * 1.7976931348623157E+308;
     $$0 = $533;
     STACKTOP = sp;return (+$$0);
    }
    $534 = (($emin$0$ph) + -106)|0;
    $535 = ($534|0)<(0);
    $536 = $535 << 31 >> 31;
    $537 = ($508|0)<($536|0);
    $538 = ($505>>>0)<($534>>>0);
    $539 = ($508|0)==($536|0);
    $540 = $539 & $538;
    $541 = $537 | $540;
    if ($541) {
     $542 = (___errno_location()|0);
     HEAP32[$542>>2] = 34;
     $543 = (+($sign$0|0));
     $544 = $543 * 2.2250738585072014E-308;
     $545 = $544 * 2.2250738585072014E-308;
     $$0 = $545;
     STACKTOP = sp;return (+$$0);
    }
    $546 = ($j$0108$i|0)==(0);
    if ($546) {
     $k$3$i = $k$0104$i;
    } else {
     $547 = ($j$0108$i|0)<(9);
     if ($547) {
      $548 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$548>>2]|0;
      $550 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $549 = ($550*10)|0;
       $551 = (($j$388$i) + 1)|0;
       $exitcond$i = ($551|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $550 = $549;$j$388$i = $551;
       }
      }
      HEAP32[$548>>2] = $549;
     }
     $552 = (($k$0104$i) + 1)|0;
     $k$3$i = $552;
    }
    $553 = ($lnz$098$i|0)<(9);
    if ($553) {
     $554 = ($lnz$098$i|0)<=($505|0);
     $555 = ($505|0)<(18);
     $or$cond5$i17 = $554 & $555;
     if ($or$cond5$i17) {
      $556 = ($505|0)==(9);
      if ($556) {
       $557 = (+($sign$0|0));
       $558 = HEAP32[$x$i>>2]|0;
       $559 = (+($558>>>0));
       $560 = $557 * $559;
       $$0 = $560;
       STACKTOP = sp;return (+$$0);
      }
      $561 = ($505|0)<(9);
      if ($561) {
       $562 = (+($sign$0|0));
       $563 = HEAP32[$x$i>>2]|0;
       $564 = (+($563>>>0));
       $565 = $562 * $564;
       $566 = (8 - ($505))|0;
       $567 = (16832 + ($566<<2)|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (+($568|0));
       $570 = $565 / $569;
       $$0 = $570;
       STACKTOP = sp;return (+$$0);
      }
      $571 = Math_imul($505, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $572 = (($$neg37$i) + ($571))|0;
      $573 = ($572|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $574 = $$pre$i18 >>> $572;
      $575 = ($574|0)==(0);
      $or$cond187$i = $573 | $575;
      if ($or$cond187$i) {
       $576 = (+($sign$0|0));
       $577 = (+($$pre$i18>>>0));
       $578 = $576 * $577;
       $579 = (($505) + -10)|0;
       $580 = (16832 + ($579<<2)|0);
       $581 = HEAP32[$580>>2]|0;
       $582 = (+($581|0));
       $583 = $578 * $582;
       $$0 = $583;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $584 = (($505|0) % 9)&-1;
    $585 = ($584|0)==(0);
    if ($585) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $505;$z$1$ph56$i = $k$3$i;
    } else {
     $586 = ($505|0)>(-1);
     $587 = (($584) + 9)|0;
     $588 = $586 ? $584 : $587;
     $589 = (8 - ($588))|0;
     $590 = (16832 + ($589<<2)|0);
     $591 = HEAP32[$590>>2]|0;
     $592 = ($k$3$i|0)==(0);
     if ($592) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $505;$z$0$i = 0;
     } else {
      $593 = (1000000000 / ($591|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $505;
      while(1) {
       $594 = (($x$i) + ($k$479$i<<2)|0);
       $595 = HEAP32[$594>>2]|0;
       $596 = (($595>>>0) % ($591>>>0))&-1;
       $597 = (($595>>>0) / ($591>>>0))&-1;
       $598 = (($597) + ($carry$080$i))|0;
       HEAP32[$594>>2] = $598;
       $599 = Math_imul($596, $593)|0;
       $600 = ($k$479$i|0)==($a$078$i|0);
       $601 = ($598|0)==(0);
       $or$cond18$i = $600 & $601;
       $602 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $603 = $602 & 127;
        $604 = (($rp$077$i) + -9)|0;
        $a$1$i = $603;$rp$1$i19 = $604;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $605 = ($602|0)==($k$3$i|0);
       if ($605) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $599;$k$479$i = $602;$rp$077$i = $rp$1$i19;
       }
      }
      $606 = ($599|0)==(0);
      if ($606) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $607 = (($k$3$i) + 1)|0;
       $608 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$608>>2] = $599;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $607;
      }
     }
     $609 = (9 - ($588))|0;
     $610 = (($609) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $610;$z$1$ph56$i = $z$0$i;
    }
    L289: while(1) {
     $611 = ($rp$2$ph55$i|0)<(18);
     $612 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($611) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $614 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $614;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $615 = (($x$i) + ($k$5$us$i<<2)|0);
        $616 = HEAP32[$615>>2]|0;
        $617 = (_bitshift64Shl(($616|0),0,29)|0);
        $618 = tempRet0;
        $619 = (_i64Add(($617|0),($618|0),($carry1$0$us$i|0),0)|0);
        $620 = tempRet0;
        $621 = ($620>>>0)>(0);
        $622 = ($619>>>0)>(1000000000);
        $623 = ($620|0)==(0);
        $624 = $623 & $622;
        $625 = $621 | $624;
        if ($625) {
         $626 = (___udivdi3(($619|0),($620|0),1000000000,0)|0);
         $627 = tempRet0;
         $628 = (___uremdi3(($619|0),($620|0),1000000000,0)|0);
         $629 = tempRet0;
         $$sink$off0$us$i = $628;$carry1$1$us$i = $626;
        } else {
         $$sink$off0$us$i = $619;$carry1$1$us$i = 0;
        }
        HEAP32[$615>>2] = $$sink$off0$us$i;
        $630 = (($z$2$us$i) + 127)|0;
        $631 = $630 & 127;
        $632 = ($k$5$us$i|0)!=($631|0);
        $633 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $632 | $633;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $634 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $634 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $635 = (($k$5$us$i) + -1)|0;
        if ($633) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $635;$z$2$us$i = $z$3$us$i;
        }
       }
       $636 = (($e2$0$us$i) + -29)|0;
       $637 = ($carry1$1$us$i|0)==(0);
       if ($637) {
        $e2$0$us$i = $636;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $636;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $613 = ($rp$2$ph55$i|0)==(18);
      if ($613) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $638 = HEAP32[$612>>2]|0;
       $639 = ($638>>>0)<(9007199);
       if (!($639)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L289;
       }
       $640 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $640;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $641 = (($x$i) + ($k$5$us67$i<<2)|0);
        $642 = HEAP32[$641>>2]|0;
        $643 = (_bitshift64Shl(($642|0),0,29)|0);
        $644 = tempRet0;
        $645 = (_i64Add(($643|0),($644|0),($carry1$0$us66$i|0),0)|0);
        $646 = tempRet0;
        $647 = ($646>>>0)>(0);
        $648 = ($645>>>0)>(1000000000);
        $649 = ($646|0)==(0);
        $650 = $649 & $648;
        $651 = $647 | $650;
        if ($651) {
         $652 = (___udivdi3(($645|0),($646|0),1000000000,0)|0);
         $653 = tempRet0;
         $654 = (___uremdi3(($645|0),($646|0),1000000000,0)|0);
         $655 = tempRet0;
         $$sink$off0$us70$i = $654;$carry1$1$us71$i = $652;
        } else {
         $$sink$off0$us70$i = $645;$carry1$1$us71$i = 0;
        }
        HEAP32[$641>>2] = $$sink$off0$us70$i;
        $656 = (($z$2$us64$i) + 127)|0;
        $657 = $656 & 127;
        $658 = ($k$5$us67$i|0)!=($657|0);
        $659 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $658 | $659;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $660 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $660 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $661 = (($k$5$us67$i) + -1)|0;
        if ($659) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $661;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $662 = (($e2$0$us61$i) + -29)|0;
       $663 = ($carry1$1$us71$i|0)==(0);
       if ($663) {
        $e2$0$us61$i = $662;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $662;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $664 = (($rp$2$ph55$i) + 9)|0;
     $665 = (($a$2$ph57$i) + 127)|0;
     $666 = $665 & 127;
     $667 = ($666|0)==($z$3$lcssa$lcssa$i|0);
     if ($667) {
      $668 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $669 = $668 & 127;
      $670 = (($x$i) + ($669<<2)|0);
      $671 = HEAP32[$670>>2]|0;
      $672 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $673 = $672 & 127;
      $674 = (($x$i) + ($673<<2)|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = $675 | $671;
      HEAP32[$674>>2] = $676;
      $z$4$i = $669;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $677 = (($x$i) + ($666<<2)|0);
     HEAP32[$677>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $666;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $664;$z$1$ph56$i = $z$4$i;
    }
    L320: while(1) {
     $714 = (($z$5$ph$i) + 1)|0;
     $712 = $714 & 127;
     $715 = (($z$5$ph$i) + 127)|0;
     $716 = $715 & 127;
     $717 = (($x$i) + ($716<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $690 = ($rp$3$i$ph|0)==(18);
      $718 = ($rp$3$i$ph|0)>(27);
      $$20$i = $718 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $680 = (($i$042$i) + ($a$3$i))|0;
        $681 = $680 & 127;
        $682 = ($681|0)==($z$5$ph$i|0);
        if ($682) {
         $i$1$i = 2;
         break;
        }
        $683 = (($x$i) + ($681<<2)|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (16824 + ($i$042$i<<2)|0);
        $686 = HEAP32[$685>>2]|0;
        $687 = ($684>>>0)<($686>>>0);
        if ($687) {
         $i$1$i = 2;
         break;
        }
        $688 = ($684>>>0)>($686>>>0);
        $679 = (($i$042$i) + 1)|0;
        if ($688) {
         $i$1$i = $i$042$i;
         break;
        }
        $678 = ($679|0)<(2);
        if ($678) {
         $i$042$i = $679;
        } else {
         $i$1$i = $679;
         break;
        }
       }
       $689 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $689 & $690;
       if ($or$cond8$i20) {
        break L320;
       }
       $693 = (($$20$i) + ($e2$1$i))|0;
       $694 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($694) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $693;
       } else {
        break;
       }
      }
      $695 = 1 << $$20$i;
      $696 = (($695) + -1)|0;
      $697 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $698 = (($x$i) + ($k$645$i<<2)|0);
       $699 = HEAP32[$698>>2]|0;
       $700 = $699 & $696;
       $701 = $699 >>> $$20$i;
       $702 = (($701) + ($carry3$047$i))|0;
       HEAP32[$698>>2] = $702;
       $703 = Math_imul($700, $697)|0;
       $704 = ($k$645$i|0)==($a$444$i|0);
       $705 = ($702|0)==(0);
       $or$cond21$i = $704 & $705;
       $706 = (($k$645$i) + 1)|0;
       $707 = $706 & 127;
       $708 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $708 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $707 : $a$444$i;
       $709 = ($707|0)==($z$5$ph$i|0);
       if ($709) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $703;$k$645$i = $707;$rp$443$i = $rp$5$i;
       }
      }
      $710 = ($703|0)==(0);
      if ($710) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $693;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $711 = ($712|0)==($a$5$i|0);
      if (!($711)) {
       break;
      }
      $719 = HEAP32[$717>>2]|0;
      $720 = $719 | 1;
      HEAP32[$717>>2] = $720;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $693;$rp$3$i$ph = $rp$5$i;
     }
     $713 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$713>>2] = $703;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $693;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $712;
    }
    $691 = $a$3$i & 127;
    $692 = ($691|0)==($z$5$ph$i|0);
    if ($692) {
     $721 = (($712) + -1)|0;
     $722 = (($x$i) + ($721<<2)|0);
     HEAP32[$722>>2] = 0;
     $z$7$i = $712;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $723 = (($x$i) + ($691<<2)|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = (+($724>>>0));
    $726 = (($a$3$i) + 1)|0;
    $727 = $726 & 127;
    $728 = ($727|0)==($z$7$i|0);
    if ($728) {
     $840 = (($z$7$i) + 1)|0;
     $841 = $840 & 127;
     $842 = (($841) + -1)|0;
     $843 = (($x$i) + ($842<<2)|0);
     HEAP32[$843>>2] = 0;
     $z$7$1$i = $841;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $844 = $725 * 1.0E+9;
    $845 = (($x$i) + ($727<<2)|0);
    $846 = HEAP32[$845>>2]|0;
    $847 = (+($846>>>0));
    $848 = $844 + $847;
    $787 = (+($sign$0|0));
    $750 = $787 * $848;
    $807 = (($e2$1$i) + 53)|0;
    $730 = (($807) - ($emin$0$ph))|0;
    $849 = ($730|0)<($bits$0$ph|0);
    if ($849) {
     $729 = ($730|0)<(0);
     if ($729) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 258;
     } else {
      $$012$i = $730;$denormal$0$i = 1;
      label = 257;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 257;
    }
    if ((label|0) == 257) {
     $731 = ($$012$i|0)<(53);
     if ($731) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 258;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $750;
     }
    }
    if ((label|0) == 258) {
     $732 = (105 - ($$01231$i))|0;
     $733 = ($732|0)>(1023);
     do {
      if ($733) {
       $734 = (($732) + -1023)|0;
       $735 = ($734|0)>(1023);
       if (!($735)) {
        $$0$i5 = $734;$y$0$i6 = 8.9884656743115795E+307;
        break;
       }
       $736 = (($732) + -2046)|0;
       $737 = ($736|0)>(1023);
       $$$i3 = $737 ? 1023 : $736;
       $$0$i5 = $$$i3;$y$0$i6 = inf;
      } else {
       $738 = ($732|0)<(-1022);
       if (!($738)) {
        $$0$i5 = $732;$y$0$i6 = 1.0;
        break;
       }
       $739 = (($732) + 1022)|0;
       $740 = ($739|0)<(-1022);
       if (!($740)) {
        $$0$i5 = $739;$y$0$i6 = 2.2250738585072014E-308;
        break;
       }
       $741 = (($732) + 2044)|0;
       $742 = ($741|0)<(-1022);
       $$1$i4 = $742 ? -1022 : $741;
       $$0$i5 = $$1$i4;$y$0$i6 = 0.0;
      }
     } while(0);
     $743 = (($$0$i5) + 1023)|0;
     $744 = (_bitshift64Shl(($743|0),0,52)|0);
     $745 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $744;HEAP32[tempDoublePtr+4>>2] = $745;$746 = +HEAPF64[tempDoublePtr>>3];
     $747 = $y$0$i6 * $746;
     HEAPF64[tempDoublePtr>>3] = $747;$748 = HEAP32[tempDoublePtr>>2]|0;
     $749 = HEAP32[tempDoublePtr+4>>2]|0;
     HEAPF64[tempDoublePtr>>3] = $750;$751 = HEAP32[tempDoublePtr>>2]|0;
     $752 = HEAP32[tempDoublePtr+4>>2]|0;
     $753 = $749 & 2147483647;
     $754 = $752 & -2147483648;
     $755 = $754 | $753;
     HEAP32[tempDoublePtr>>2] = $748;HEAP32[tempDoublePtr+4>>2] = $755;$756 = +HEAPF64[tempDoublePtr>>3];
     $757 = (53 - ($$01231$i))|0;
     $758 = ($757|0)>(1023);
     do {
      if ($758) {
       $759 = (($757) + -1023)|0;
       $760 = ($759|0)>(1023);
       if (!($760)) {
        $$0$i = $759;$y$0$i2 = 8.9884656743115795E+307;
        break;
       }
       $761 = (($757) + -2046)|0;
       $762 = ($761|0)>(1023);
       $$$i1 = $762 ? 1023 : $761;
       $$0$i = $$$i1;$y$0$i2 = inf;
      } else {
       $763 = ($757|0)<(-1022);
       if (!($763)) {
        $$0$i = $757;$y$0$i2 = 1.0;
        break;
       }
       $764 = (($757) + 1022)|0;
       $765 = ($764|0)<(-1022);
       if (!($765)) {
        $$0$i = $764;$y$0$i2 = 2.2250738585072014E-308;
        break;
       }
       $766 = (($757) + 2044)|0;
       $767 = ($766|0)<(-1022);
       $$1$i = $767 ? -1022 : $766;
       $$0$i = $$1$i;$y$0$i2 = 0.0;
      }
     } while(0);
     $768 = (($$0$i) + 1023)|0;
     $769 = (_bitshift64Shl(($768|0),0,52)|0);
     $770 = tempRet0;
     HEAP32[tempDoublePtr>>2] = $769;HEAP32[tempDoublePtr+4>>2] = $770;$771 = +HEAPF64[tempDoublePtr>>3];
     $772 = $y$0$i2 * $771;
     $773 = (+_fmodl($750,$772));
     $774 = $750 - $773;
     $775 = $756 + $774;
     $$01232$i = $$01231$i;$bias$0$i25 = $756;$denormal$029$i = $denormal$030$i;$frac$0$i = $773;$y$1$i24 = $775;
    }
    $776 = (($a$3$i) + 2)|0;
    $777 = $776 & 127;
    $778 = ($777|0)==($z$7$1$i|0);
    do {
     if ($778) {
      $frac$2$i = $frac$0$i;
     } else {
      $779 = (($x$i) + ($777<<2)|0);
      $780 = HEAP32[$779>>2]|0;
      $781 = ($780>>>0)<(500000000);
      do {
       if ($781) {
        $782 = ($780|0)==(0);
        if ($782) {
         $783 = (($a$3$i) + 3)|0;
         $784 = $783 & 127;
         $785 = ($784|0)==($z$7$1$i|0);
         if ($785) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $786 = $787 * 0.25;
        $788 = $786 + $frac$0$i;
        $frac$1$i = $788;
       } else {
        $789 = ($780>>>0)>(500000000);
        if ($789) {
         $790 = $787 * 0.75;
         $791 = $790 + $frac$0$i;
         $frac$1$i = $791;
         break;
        }
        $792 = (($a$3$i) + 3)|0;
        $793 = $792 & 127;
        $794 = ($793|0)==($z$7$1$i|0);
        if ($794) {
         $795 = $787 * 0.5;
         $796 = $795 + $frac$0$i;
         $frac$1$i = $796;
         break;
        } else {
         $797 = $787 * 0.75;
         $798 = $797 + $frac$0$i;
         $frac$1$i = $798;
         break;
        }
       }
      } while(0);
      $799 = (53 - ($$01232$i))|0;
      $800 = ($799|0)>(1);
      if (!($800)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $801 = (+_fmodl($frac$1$i,1.0));
      $802 = $801 != 0.0;
      if ($802) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $803 = $frac$1$i + 1.0;
      $frac$2$i = $803;
     }
    } while(0);
    $804 = $y$1$i24 + $frac$2$i;
    $805 = $804 - $bias$0$i25;
    $806 = $807 & 2147483647;
    $808 = (-2 - ($sum$i))|0;
    $809 = ($806|0)>($808|0);
    do {
     if ($809) {
      $810 = (+Math_abs((+$805)));
      $811 = !($810 >= 9007199254740992.0);
      if ($811) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $805;
      } else {
       $812 = ($denormal$029$i|0)!=(0);
       $813 = ($$01232$i|0)==($730|0);
       $or$cond22$i = $812 & $813;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $814 = $805 * 0.5;
       $815 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $815;$y$2$i26 = $814;
      }
      $816 = (($e2$2$i) + 50)|0;
      $817 = ($816|0)>($394|0);
      if (!($817)) {
       $818 = ($denormal$2$i|0)!=(0);
       $819 = $frac$2$i != 0.0;
       $or$cond10$i = $818 & $819;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $820 = (___errno_location()|0);
      HEAP32[$820>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $805;
     }
    } while(0);
    $821 = ($e2$3$i|0)>(1023);
    do {
     if ($821) {
      $822 = $y$3$i * 8.9884656743115795E+307;
      $823 = (($e2$3$i) + -1023)|0;
      $824 = ($823|0)>(1023);
      if (!($824)) {
       $$0$i$i = $823;$y$0$i$i = $822;
       break;
      }
      $825 = $822 * 8.9884656743115795E+307;
      $826 = (($e2$3$i) + -2046)|0;
      $827 = ($826|0)>(1023);
      $$$i$i = $827 ? 1023 : $826;
      $$0$i$i = $$$i$i;$y$0$i$i = $825;
     } else {
      $828 = ($e2$3$i|0)<(-1022);
      if (!($828)) {
       $$0$i$i = $e2$3$i;$y$0$i$i = $y$3$i;
       break;
      }
      $829 = $y$3$i * 2.2250738585072014E-308;
      $830 = (($e2$3$i) + 1022)|0;
      $831 = ($830|0)<(-1022);
      if (!($831)) {
       $$0$i$i = $830;$y$0$i$i = $829;
       break;
      }
      $832 = $829 * 2.2250738585072014E-308;
      $833 = (($e2$3$i) + 2044)|0;
      $834 = ($833|0)<(-1022);
      $$1$i$i = $834 ? -1022 : $833;
      $$0$i$i = $$1$i$i;$y$0$i$i = $832;
     }
    } while(0);
    $835 = (($$0$i$i) + 1023)|0;
    $836 = (_bitshift64Shl(($835|0),0,52)|0);
    $837 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $836;HEAP32[tempDoublePtr+4>>2] = $837;$838 = +HEAPF64[tempDoublePtr>>3];
    $839 = $y$0$i$i * $838;
    $$0 = $839;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $65 = HEAP32[$0>>2]|0;
    $66 = HEAP32[$1>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = (($65) + 1|0);
     HEAP32[$0>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $73 = $70;
    } else {
     $71 = (___shgetc($f)|0);
     $73 = $71;
    }
    $72 = ($73|0)==(40);
    if ($72) {
     $i$4 = 1;
    } else {
     $74 = HEAP32[$1>>2]|0;
     $75 = ($74|0)==(0|0);
     if ($75) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $76 = HEAP32[$0>>2]|0;
     $77 = (($76) + -1|0);
     HEAP32[$0>>2] = $77;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $78 = HEAP32[$0>>2]|0;
     $79 = HEAP32[$1>>2]|0;
     $80 = ($78>>>0)<($79>>>0);
     if ($80) {
      $81 = (($78) + 1|0);
      HEAP32[$0>>2] = $81;
      $82 = HEAP8[$78>>0]|0;
      $83 = $82&255;
      $86 = $83;
     } else {
      $84 = (___shgetc($f)|0);
      $86 = $84;
     }
     $85 = (($86) + -48)|0;
     $87 = ($85>>>0)<(10);
     $88 = (($86) + -65)|0;
     $89 = ($88>>>0)<(26);
     $or$cond = $87 | $89;
     if (!($or$cond)) {
      $90 = (($86) + -97)|0;
      $91 = ($90>>>0)<(26);
      $92 = ($86|0)==(95);
      $or$cond7 = $91 | $92;
      if (!($or$cond7)) {
       break;
      }
     }
     $112 = (($i$4) + 1)|0;
     $i$4 = $112;
    }
    $93 = ($86|0)==(41);
    if ($93) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $94 = HEAP32[$1>>2]|0;
    $95 = ($94|0)==(0|0);
    if (!($95)) {
     $96 = HEAP32[$0>>2]|0;
     $97 = (($96) + -1|0);
     HEAP32[$0>>2] = $97;
    }
    if (!($37)) {
     $99 = (___errno_location()|0);
     HEAP32[$99>>2] = 22;
     $100 = (($f) + 104|0);
     HEAP32[$100>>2] = 0;
     $101 = (($f) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = $102;
     $105 = $103;
     $106 = (($104) - ($105))|0;
     $107 = (($f) + 108|0);
     HEAP32[$107>>2] = $106;
     HEAP32[$1>>2] = $102;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $98 = ($i$4|0)==(0);
    $brmerge108 = $98 | $95;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$promoted23 = HEAP32[$0>>2]|0;
    $$in = $i$4;$110 = $$promoted23;
    while(1) {
     $108 = (($$in) + -1)|0;
     $109 = (($110) + -1|0);
     $111 = ($108|0)==(0);
     if ($111) {
      break;
     } else {
      $$in = $108;$110 = $109;
     }
    }
    HEAP32[$0>>2] = $109;
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else {
    $113 = HEAP32[$1>>2]|0;
    $114 = ($113|0)==(0|0);
    $$pre = HEAP32[$0>>2]|0;
    if ($114) {
     $122 = $$pre;
    } else {
     $115 = (($$pre) + -1|0);
     HEAP32[$0>>2] = $115;
     $122 = $115;
    }
    $116 = (___errno_location()|0);
    HEAP32[$116>>2] = 22;
    $117 = (($f) + 104|0);
    HEAP32[$117>>2] = 0;
    $118 = (($f) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $119;
    $121 = $122;
    $123 = (($120) - ($121))|0;
    $124 = (($f) + 108|0);
    HEAP32[$124>>2] = $123;
    HEAP32[$1>>2] = $119;
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $39 = HEAP32[$1>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = HEAP32[$0>>2]|0;
   $42 = (($41) + -1|0);
   HEAP32[$0>>2] = $42;
   $notlhs = ($pok|0)==(0);
   $notrhs = ($i$0$lcssa>>>0)<(4);
   $or$cond9$not = $notrhs | $notlhs;
   if (!($or$cond9$not)) {
    $44 = $42;$i$1 = $i$0$lcssa;
    while(1) {
     $43 = (($44) + -1|0);
     $45 = (($i$1) + -1)|0;
     $$old8 = ($45>>>0)>(3);
     if ($$old8) {
      $44 = $43;$i$1 = $45;
     } else {
      break;
     }
    }
    HEAP32[$0>>2] = $43;
   }
  }
 }
 $46 = (+($sign$0|0));
 $47 = $46 * inf;
 $48 = $47;
 $$0 = $48;
 STACKTOP = sp;return (+$$0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = 0, $$pre = 0, $$pre3 = 0, $$pre3$pre = 0, $$pre3$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$phi$trans$insert2$phi$trans$insert$phi$trans$insert = (($f) + 4|0);
   $$pre3$pre$pre = HEAP32[$$phi$trans$insert2$phi$trans$insert$phi$trans$insert>>2]|0;
   if ($10) {
    $$pre3$pre = $$pre3$pre$pre;
    label = 8;
   } else {
    $11 = $$pre;
    $12 = $$pre3$pre$pre;
    $13 = (($11) - ($12))|0;
    $14 = (($f) + 108|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($9) - ($15))|0;
    $17 = (($16) + -1)|0;
    $18 = ($13|0)>($17|0);
    if ($18) {
     $19 = (($$pre3$pre$pre) + ($17)|0);
     $20 = (($f) + 100|0);
     HEAP32[$20>>2] = $19;
     $$pre3 = $$pre3$pre$pre;
    } else {
     $$pre3$pre = $$pre3$pre$pre;
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $21 = (($f) + 100|0);
    HEAP32[$21>>2] = $$pre;
    $$pre3 = $$pre3$pre;
   }
   $22 = ($$pre|0)==(0|0);
   if (!($22)) {
    $23 = $$pre;
    $24 = $$pre3;
    $25 = (($f) + 108|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 1)|0;
    $28 = (($27) - ($24))|0;
    $29 = (($28) + ($26))|0;
    HEAP32[$25>>2] = $29;
   }
   $30 = (($$pre3) + -1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ($32|0)==($6|0);
   if ($33) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $34 = $6&255;
   HEAP8[$30>>0] = $34;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0$i = 0.0, $$lcssa10$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa$i = 0;
 var $ex$026$i = 0, $ex$1$i = 0, $ex$2$lcssa$i = 0, $ex$212$i = 0, $ex$3$lcssa$i = 0, $ex$33$i = 0, $ey$0$lcssa$i = 0, $ey$020$i = 0, $ey$1$ph$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond$i = $21 | $22;
  if (!($or$cond$i)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0$i = $x;
     STACKTOP = sp;return (+$$0$i);
    }
    $35 = $x * 0.0;
    $$0$i = $35;
    STACKTOP = sp;return (+$$0$i);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026$i = 0;
     while(1) {
      $44 = (($ex$026$i) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026$i = $44;
      } else {
       $ex$0$lcssa$i = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa$i = 0;
    }
    $54 = (1 - ($ex$0$lcssa$i))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1$i = $ex$0$lcssa$i;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1$i = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020$i = 0;
     while(1) {
      $67 = (($ey$020$i) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020$i = $67;
      } else {
       $ey$0$lcssa$i = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa$i = 0;
    }
    $77 = (1 - ($ey$0$lcssa$i))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph$i = $ey$0$lcssa$i;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph$i = $9;
   }
   $82 = ($ex$1$i|0)>($ey$1$ph$i|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212$i = $ex$1$i;
     while(1) {
      if ($152) {
       $94 = ($95|0)==($85|0);
       $96 = ($97|0)==($86|0);
       $98 = $94 & $96;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $95;$101 = $97;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212$i) + -1)|0;
      $105 = ($104|0)>($ey$1$ph$i|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212$i = $104;
      } else {
       $$lcssa10$i = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa$i = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0$i = $99;
     STACKTOP = sp;return (+$$0$i);
    } else {
     $$lcssa10$i = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa$i = $ex$1$i;
    }
   } while(0);
   if ($$lcssa10$i) {
    $113 = ($114|0)==($85|0);
    $115 = ($116|0)==($86|0);
    $117 = $113 & $115;
    if ($117) {
     $125 = $x * 0.0;
     $$0$i = $125;
     STACKTOP = sp;return (+$$0$i);
    } else {
     $119 = $156;$121 = $155;
    }
   } else {
    $119 = $116;$121 = $114;
   }
   $118 = ($119>>>0)<(1048576);
   $120 = ($121>>>0)<(0);
   $122 = ($119|0)==(1048576);
   $123 = $122 & $120;
   $124 = $118 | $123;
   if ($124) {
    $126 = $121;$127 = $119;$ex$33$i = $ex$2$lcssa$i;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$33$i) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$33$i = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa$i = $130;
      break;
     }
    }
   } else {
    $137 = $121;$138 = $119;$ex$3$lcssa$i = $ex$2$lcssa$i;
   }
   $136 = ($ex$3$lcssa$i|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa$i|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$150 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa$i))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$150 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
   $$0$i = $151;
   STACKTOP = sp;return (+$$0$i);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0$i = $24;
 STACKTOP = sp;return (+$$0$i);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _wcrtomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = (($f) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($f) + 44|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)>($12>>>0);
   if ($13) {
    $14 = (($f) + 36|0);
    $15 = HEAP32[$14>>2]|0;
    (FUNCTION_TABLE_iiii[$15 & 511]($f,0,0)|0);
   }
   $16 = (($f) + 16|0);
   HEAP32[$16>>2] = 0;
   $17 = (($f) + 28|0);
   HEAP32[$17>>2] = 0;
   HEAP32[$9>>2] = 0;
   $18 = HEAP32[$f>>2]|0;
   $19 = $18 & 20;
   $20 = ($19|0)==(0);
   if ($20) {
    $24 = HEAP32[$11>>2]|0;
    HEAP32[$0>>2] = $24;
    $25 = (($f) + 4|0);
    HEAP32[$25>>2] = $24;
    break;
   }
   $21 = $18 & 4;
   $22 = ($21|0)==(0);
   if ($22) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = $18 | 32;
   HEAP32[$f>>2] = $23;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $26 = (($f) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 511]($f,$c,1)|0);
 $29 = ($28|0)==(1);
 if (!($29)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$c>>0]|0;
 $31 = $30&255;
 $$0 = $31;
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$01 = 0, $$02 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (($f) + 74|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = (($5) + 255)|0;
   $7 = $6 | $5;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = HEAP32[$f>>2]|0;
   $10 = $9 & 8;
   $11 = ($10|0)==(0);
   if ($11) {
    $13 = (($f) + 8|0);
    HEAP32[$13>>2] = 0;
    $14 = (($f) + 4|0);
    HEAP32[$14>>2] = 0;
    $15 = (($f) + 44|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($f) + 28|0);
    HEAP32[$17>>2] = $16;
    $18 = (($f) + 20|0);
    HEAP32[$18>>2] = $16;
    $19 = (($f) + 48|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($16) + ($20)|0);
    HEAP32[$0>>2] = $21;
    $24 = $21;$26 = $16;
    break;
   }
   $12 = $9 | 32;
   HEAP32[$f>>2] = $12;
   STACKTOP = sp;return;
  } else {
   $$phi$trans$insert = (($f) + 20|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $24 = $1;$26 = $$pre;
  }
 } while(0);
 $22 = (($f) + 20|0);
 $23 = $24;
 $25 = $26;
 $27 = (($23) - ($25))|0;
 $28 = ($27>>>0)<($l>>>0);
 if ($28) {
  $29 = (($f) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  (FUNCTION_TABLE_iiii[$30 & 511]($f,$s,$l)|0);
  STACKTOP = sp;return;
 }
 $31 = (($f) + 75|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)>(-1);
 L13: do {
  if ($33) {
   $i$0 = $l;
   while(1) {
    $34 = ($i$0|0)==(0);
    if ($34) {
     $$01 = $l;$$02 = $s;$45 = $26;
     break L13;
    }
    $35 = (($i$0) + -1)|0;
    $36 = (($s) + ($35)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(10);
    if ($38) {
     break;
    } else {
     $i$0 = $35;
    }
   }
   $39 = (($f) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_iiii[$40 & 511]($f,$s,$i$0)|0);
   $42 = ($41>>>0)<($i$0>>>0);
   if ($42) {
    STACKTOP = sp;return;
   } else {
    $43 = (($s) + ($i$0)|0);
    $44 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$22>>2]|0;
    $$01 = $44;$$02 = $43;$45 = $$pre5;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$45 = $26;
  }
 } while(0);
 _memcpy(($45|0),($$02|0),($$01|0))|0;
 $46 = HEAP32[$22>>2]|0;
 $47 = (($46) + ($$01)|0);
 HEAP32[$22>>2] = $47;
 STACKTOP = sp;return;
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2$i = 0, $b = 0, $f = 0, $internal_buf$i = 0;
 var $nl_arg$i = 0, $nl_type$i = 0, $ret$1$i = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 232|0;
 $nl_type$i = sp + 192|0;
 $nl_arg$i = sp;
 $internal_buf$i = sp + 256|0;
 $b = sp + 248|0;
 $f = sp + 80|0;
 dest=$f+0|0; src=17432+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$02 = 1;$5 = $b;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$02 = $n;$5 = $s;
 }
 $4 = $5;
 $6 = (-2 - ($4))|0;
 $7 = ($$02>>>0)>($6>>>0);
 $$$02 = $7 ? $6 : $$02;
 $8 = (($f) + 48|0);
 HEAP32[$8>>2] = $$$02;
 $9 = (($f) + 20|0);
 HEAP32[$9>>2] = $5;
 $10 = (($f) + 44|0);
 HEAP32[$10>>2] = $5;
 $11 = (($5) + ($$$02)|0);
 $12 = (($f) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f) + 28|0);
 HEAP32[$13>>2] = $11;
 dest=$nl_type$i+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2$i>>2] = $vacopy_currentptr;
 $14 = (_printf_core(0,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $$0$i = -1;
 } else {
  $16 = ($$$02|0)==(0);
  if ($16) {
   HEAP32[$10>>2] = $internal_buf$i;
   HEAP32[$13>>2] = $internal_buf$i;
   HEAP32[$9>>2] = $internal_buf$i;
   HEAP32[$8>>2] = 80;
   $18 = (($internal_buf$i) + 80|0);
   HEAP32[$12>>2] = $18;
   $19 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $20 = ($5|0)==(0|0);
   if ($20) {
    $ret$1$i = $19;
   } else {
    $21 = (($f) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    (FUNCTION_TABLE_iiii[$22 & 511]($f,0,0)|0);
    $23 = HEAP32[$9>>2]|0;
    $24 = ($23|0)==(0|0);
    $$$i = $24 ? -1 : $19;
    HEAP32[$10>>2] = $5;
    HEAP32[$8>>2] = 0;
    HEAP32[$12>>2] = 0;
    HEAP32[$13>>2] = 0;
    HEAP32[$9>>2] = 0;
    $ret$1$i = $$$i;
   }
  } else {
   $17 = (_printf_core($f,$fmt,$ap2$i,$nl_arg$i,$nl_type$i)|0);
   $ret$1$i = $17;
  }
  $$0$i = $ret$1$i;
 }
 $25 = ($$$02|0)==(0);
 if ($25) {
  $$0 = $$0$i;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = HEAP32[$9>>2]|0;
 $27 = HEAP32[$12>>2]|0;
 $28 = ($26|0)==($27|0);
 $29 = $28 << 31 >> 31;
 $30 = (($26) + ($29)|0);
 HEAP8[$30>>0] = 0;
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, $f$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 $4 = (($f$i$i) + 104|0);
 HEAP32[$4>>2] = 0;
 $5 = $s;
 $6 = $5 ^ -1;
 $7 = (($f$i$i) + 108|0);
 HEAP32[$7>>2] = $6;
 $8 = (($f$i$i) + 100|0);
 HEAP32[$8>>2] = (-1);
 $9 = (+___floatscan($f$i$i,2,1));
 $10 = HEAP32[$7>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15) + ($10))|0;
 $17 = ($p|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return (+$9);
 }
 $18 = ($16|0)==(0);
 if ($18) {
  $20 = $s;
 } else {
  $19 = (($s) + ($16)|0);
  $20 = $19;
 }
 HEAP32[$p>>2] = $20;
 STACKTOP = sp;return (+$9);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
  $9 = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
  $9 = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = (($f$i) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = $9;
 $10 = $s;
 $11 = (($8) - ($10))|0;
 $12 = (($f$i) + 108|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f$i) + 100|0);
 HEAP32[$13>>2] = $9;
 $14 = (___intscan($f$i,$base,1,-1,-1)|0);
 $15 = tempRet0;
 $16 = ($p|0)==(0|0);
 if ($16) {
  tempRet0 = $15;
  STACKTOP = sp;return ($14|0);
 }
 $17 = (($f$i) + 8|0);
 $18 = HEAP32[$12>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$17>>2]|0;
 $21 = $19;
 $22 = $20;
 $23 = (($21) + ($18))|0;
 $24 = (($23) - ($22))|0;
 $25 = (($s) + ($24)|0);
 HEAP32[$p>>2] = $25;
 tempRet0 = $15;
 STACKTOP = sp;return ($14|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
  $9 = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
  $9 = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = (($f$i) + 104|0);
 HEAP32[$7>>2] = 0;
 $8 = $9;
 $10 = $s;
 $11 = (($8) - ($10))|0;
 $12 = (($f$i) + 108|0);
 HEAP32[$12>>2] = $11;
 $13 = (($f$i) + 100|0);
 HEAP32[$13>>2] = $9;
 $14 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $15 = tempRet0;
 $16 = ($p|0)==(0|0);
 if ($16) {
  tempRet0 = $15;
  STACKTOP = sp;return ($14|0);
 }
 $17 = (($f$i) + 8|0);
 $18 = HEAP32[$12>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$17>>2]|0;
 $21 = $19;
 $22 = $20;
 $23 = (($21) + ($18))|0;
 $24 = (($23) - ($22))|0;
 $25 = (($s) + ($24)|0);
 HEAP32[$p>>2] = $25;
 tempRet0 = $15;
 STACKTOP = sp;return ($14|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((16032 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((16032 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((16032 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((16032 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[16032>>2]|0;
     $32 = $31 & $30;
     HEAP32[16032>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((16032 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((16032 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((16032 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((16032 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((16032 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((16032 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((16032 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((16032 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((16032 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((16032 + 12|0))>>2] = $115;
   HEAP32[((16032 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((16032 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((16032 + 20|0))>>2] = 0;
   HEAP32[((16032 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((16032 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((16032 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((16032 + 8|0))>>2] = $123;
   HEAP32[((16032 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((16032 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[16032>>2]|0;
     $146 = $145 & $144;
     HEAP32[16032>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((16032 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((16032 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((16032 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((16032 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((16032 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((16032 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((16032 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((16032 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((16032 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[16032>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[16032>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((16032 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((16032 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((16032 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((16032 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((16032 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((16032 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((16032 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((16032 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $c$0 = 0, $c$1$be = 0, $c$116 = 0, $c$2$be = 0;
 var $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $9&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $94 = -2147483648;$95 = 0;
   tempRet0 = $94;
   STACKTOP = sp;return ($95|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $94 = -2147483648;$95 = 0;
  tempRet0 = $94;
  STACKTOP = sp;return ($95|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 if ($44) {
  $50 = $35;$51 = $47;$c$29 = $c$1$be;
  while(1) {
   $52 = (___muldi3(($50|0),($51|0),10,0)|0);
   $53 = tempRet0;
   $54 = ($c$29|0)<(0);
   $55 = $54 << 31 >> 31;
   $56 = (_i64Add(($c$29|0),($55|0),-48,-1)|0);
   $57 = tempRet0;
   $58 = (_i64Add(($56|0),($57|0),($52|0),($53|0))|0);
   $59 = tempRet0;
   $60 = HEAP32[$0>>2]|0;
   $61 = HEAP32[$2>>2]|0;
   $62 = ($60>>>0)<($61>>>0);
   if ($62) {
    $63 = (($60) + 1|0);
    HEAP32[$0>>2] = $63;
    $64 = HEAP8[$60>>0]|0;
    $65 = $64&255;
    $c$2$be = $65;
   } else {
    $66 = (___shgetc($f)|0);
    $c$2$be = $66;
   }
   $67 = (($c$2$be) + -48)|0;
   $68 = ($67>>>0)<(10);
   $69 = ($59|0)<(21474836);
   $70 = ($58>>>0)<(2061584302);
   $71 = ($59|0)==(21474836);
   $72 = $71 & $70;
   $73 = $69 | $72;
   $or$cond7 = $68 & $73;
   if ($or$cond7) {
    $50 = $58;$51 = $59;$c$29 = $c$2$be;
   } else {
    $88 = $58;$89 = $59;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $88 = $35;$89 = $47;$c$2$lcssa = $c$1$be;
 }
 $48 = (($c$2$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  while(1) {
   $74 = HEAP32[$0>>2]|0;
   $75 = HEAP32[$2>>2]|0;
   $76 = ($74>>>0)<($75>>>0);
   if ($76) {
    $77 = (($74) + 1|0);
    HEAP32[$0>>2] = $77;
    $78 = HEAP8[$74>>0]|0;
    $79 = $78&255;
    $c$3$be = $79;
   } else {
    $80 = (___shgetc($f)|0);
    $c$3$be = $80;
   }
   $81 = (($c$3$be) + -48)|0;
   $82 = ($81>>>0)<(10);
   if (!($82)) {
    break;
   }
  }
 }
 $83 = HEAP32[$2>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $85 = HEAP32[$0>>2]|0;
  $86 = (($85) + -1|0);
  HEAP32[$0>>2] = $86;
 }
 $87 = ($neg$0|0)!=(0);
 $90 = (_i64Subtract(0,0,($88|0),($89|0))|0);
 $91 = tempRet0;
 $92 = $87 ? $90 : $88;
 $93 = $87 ? $91 : $89;
 $94 = $93;$95 = $92;
 tempRet0 = $94;
 STACKTOP = sp;return ($95|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i3 = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0;
 var $$0$lcssa$i62 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0;
 var $$01$i67 = 0, $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$012$i1 = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0;
 var $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0, $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$15$i = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$22$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0;
 var $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$3$i6 = 0, $$314$i = 0, $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa$i = 0, $$lcssa292$i = 0;
 var $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre18 = 0, $$pre19 = 0, $$pre260 = 0, $$pre261 = 0;
 var $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1053$phi = 0, $1054 = 0, $1054$phi = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0.0;
 var $59 = 0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0.0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0;
 var $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0;
 var $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0;
 var $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0;
 var $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0;
 var $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0, $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0;
 var $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0;
 var $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0;
 var $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i2 = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0, $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0;
 var $or$cond$i98$i = 0, $or$cond11$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0, $p$5 = 0, $pad$i = 0, $phitmp = 0;
 var $phitmp20 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$lcssa$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$013$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$13$i = 0, $s$2$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0;
 var $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0, $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$0$lcssa$i = 0, $w$06$i = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0;
 var $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1053 = 0;$1054 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 363;
   break;
  } else {
   $1055 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1055<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   } else if ((($1055<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1055 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   ___fwritex($fmt83,$34,$f);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1054$phi = $1054;$1053$phi = $1053;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1054 = $1054$phi;$1053 = $1053$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 382;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 382;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 382;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 382;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((16864 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 382;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 382;
     break L1;
    } else {
     $1056 = $1053;$1057 = $1054;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1056 = $144;$1057 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 382;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1053;$218 = $1054;
    } else {
     do {
      switch ($134|0) {
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1058 = 0;$1059 = $154;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1058 = $177;$1059 = $176;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1058 = $172;$1059 = $173;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1058 = $153;$1059 = $151;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1058 = 0;$1059 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1058 = $160;$1059 = $157;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1058 = $180;$1059 = $179;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1058 = 0;$1059 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1058 = $1054;$1059 = $150;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1058 = $165;$1059 = $166;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1058 = $1054;$1059 = $1053;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1058 = $1057;$1059 = $1056;
    label = 64;
   } else {
    $1053 = $1056;$1054 = $1057;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1059;$218 = $1058;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 17328;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 17328 : ((17328 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((17328 + 1|0));
     label = 86;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 17328 : ((17328 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$383 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $384 = ($218|0)<(0);
    if ($384) {
     $385 = -$383;
     $$010$i = $385;$pl$0$i = 1;$prefix$0$i = 17352;
    } else {
     $386 = $fl$1$ & 2048;
     $387 = ($386|0)==(0);
     if ($387) {
      $388 = $fl$1$ & 1;
      $389 = ($388|0)==(0);
      $$$i = $389 ? ((17352 + 1|0)) : ((17352 + 6|0));
      $$010$i = $383;$pl$0$i = $388;$prefix$0$i = $$$i;
     } else {
      $$010$i = $383;$pl$0$i = 1;$prefix$0$i = ((17352 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$390 = HEAP32[tempDoublePtr>>2]|0;
    $391 = HEAP32[tempDoublePtr+4>>2]|0;
    $392 = $391 & 2146435072;
    $393 = ($392>>>0)<(2146435072);
    $394 = (0)<(0);
    $395 = ($392|0)==(2146435072);
    $396 = $395 & $394;
    $397 = $393 | $396;
    if (!($397)) {
     $398 = $t$0 & 32;
     $399 = ($398|0)!=(0);
     $400 = $399 ? 17376 : 17384;
     $401 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($401) {
      $402 = $399 ? 17392 : 17400;
      $pl$1$i = 0;$s1$0$i = $402;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $400;
     }
     $403 = (($pl$1$i) + 3)|0;
     $404 = $fl$1$ & 8192;
     $405 = ($404|0)==(0);
     $406 = ($w$1|0)>($403|0);
     $or$cond$i40$i = $405 & $406;
     if ($or$cond$i40$i) {
      $407 = (($w$1) - ($403))|0;
      $408 = ($407>>>0)>(256);
      $409 = $408 ? 256 : $407;
      _memset(($pad$i|0),32,($409|0))|0;
      $410 = ($407>>>0)>(255);
      if ($410) {
       $$01$i42$i = $407;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $411 = (($$01$i42$i) + -256)|0;
        $412 = ($411>>>0)>(255);
        if ($412) {
         $$01$i42$i = $411;
        } else {
         break;
        }
       }
       $413 = $407 & 255;
       $$0$lcssa$i44$i = $413;
      } else {
       $$0$lcssa$i44$i = $407;
      }
      ___fwritex($pad$i,$$0$lcssa$i44$i,$f);
     }
     ___fwritex($prefix$0$i,$pl$1$i,$f);
     ___fwritex($s1$0$i,3,$f);
     $414 = $fl$1$ & 73728;
     $415 = ($414|0)==(8192);
     $or$cond$i47$i = $415 & $406;
     if ($or$cond$i47$i) {
      $416 = (($w$1) - ($403))|0;
      $417 = ($416>>>0)>(256);
      $418 = $417 ? 256 : $416;
      _memset(($pad$i|0),32,($418|0))|0;
      $419 = ($416>>>0)>(255);
      if ($419) {
       $$01$i49$i = $416;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $420 = (($$01$i49$i) + -256)|0;
        $421 = ($420>>>0)>(255);
        if ($421) {
         $$01$i49$i = $420;
        } else {
         break;
        }
       }
       $422 = $416 & 255;
       $$0$lcssa$i51$i = $422;
      } else {
       $$0$lcssa$i51$i = $416;
      }
      ___fwritex($pad$i,$$0$lcssa$i51$i,$f);
     }
     $w$$i = $406 ? $w$1 : $403;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $423 = (+_frexp($$010$i,$e2$i));
    $424 = $423 * 2.0;
    $425 = $424 != 0.0;
    if ($425) {
     $426 = HEAP32[$e2$i>>2]|0;
     $427 = (($426) + -1)|0;
     HEAP32[$e2$i>>2] = $427;
    }
    $428 = $t$0 | 32;
    $429 = ($428|0)==(97);
    if ($429) {
     $430 = $t$0 & 32;
     $431 = ($430|0)==(0);
     $432 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $431 ? $prefix$0$i : $432;
     $433 = $pl$0$i | 2;
     $434 = ($p$0>>>0)>(11);
     $435 = (12 - ($p$0))|0;
     $re$0$i = $434 ? 0 : $435;
     $436 = ($re$0$i|0)==(0);
     do {
      if ($436) {
       $$1$i = $424;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $437 = (($re$1163$i) + -1)|0;
        $438 = $round$0162$i * 16.0;
        $439 = ($437|0)==(0);
        if ($439) {
         break;
        } else {
         $re$1163$i = $437;$round$0162$i = $438;
        }
       }
       $440 = HEAP8[$prefix$0$$i>>0]|0;
       $441 = ($440<<24>>24)==(45);
       if ($441) {
        $442 = -$424;
        $443 = $442 - $438;
        $444 = $438 + $443;
        $445 = -$444;
        $$1$i = $445;
        break;
       } else {
        $446 = $424 + $438;
        $447 = $446 - $438;
        $$1$i = $447;
        break;
       }
      }
     } while(0);
     $448 = HEAP32[$e2$i>>2]|0;
     $449 = ($448|0)<(0);
     $450 = (0 - ($448))|0;
     $451 = $449 ? $450 : $448;
     $452 = ($451|0)<(0);
     if ($452) {
      $453 = ($451|0)<(0);
      $454 = $453 << 31 >> 31;
      $$05$i$i = $7;$455 = $451;$456 = $454;
      while(1) {
       $457 = (___uremdi3(($455|0),($456|0),10,0)|0);
       $458 = tempRet0;
       $459 = $457 | 48;
       $460 = $459&255;
       $461 = (($$05$i$i) + -1|0);
       HEAP8[$461>>0] = $460;
       $462 = (___udivdi3(($455|0),($456|0),10,0)|0);
       $463 = tempRet0;
       $464 = ($456>>>0)>(9);
       $465 = ($455>>>0)>(4294967295);
       $466 = ($456|0)==(9);
       $467 = $466 & $465;
       $468 = $464 | $467;
       if ($468) {
        $$05$i$i = $461;$455 = $462;$456 = $463;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $461;$$01$lcssa$off0$i$i = $462;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $451;
     }
     $469 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($469) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $470 = (($y$03$i$i>>>0) % 10)&-1;
       $471 = $470 | 48;
       $472 = $471&255;
       $473 = (($$12$i$i) + -1|0);
       HEAP8[$473>>0] = $472;
       $474 = (($y$03$i$i>>>0) / 10)&-1;
       $475 = ($y$03$i$i>>>0)<(10);
       if ($475) {
        $$1$lcssa$i$i = $473;
        break;
       } else {
        $$12$i$i = $473;$y$03$i$i = $474;
       }
      }
     }
     $476 = ($$1$lcssa$i$i|0)==($7|0);
     if ($476) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $477 = HEAP32[$e2$i>>2]|0;
     $478 = $477 >> 31;
     $479 = $478 & 2;
     $480 = (($479) + 43)|0;
     $481 = $480&255;
     $482 = (($estr$0$i) + -1|0);
     HEAP8[$482>>0] = $481;
     $483 = (($t$0) + 15)|0;
     $484 = $483&255;
     $485 = (($estr$0$i) + -2|0);
     HEAP8[$485>>0] = $484;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $486 = $fl$1$ & 8;
      $487 = ($486|0)==(0);
      if ($487) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$us$i)));
        $489 = (17408 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $430;
        $493 = $492&255;
        $494 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)!=(1);
        $notlhs$us$us$i = $497 == 0.0;
        $or$cond$i73 = $500 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $494;
        } else {
         $501 = (($s$0$us$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$us$i = $501;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$us$i = $497;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us$i)));
        $504 = (17408 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $430;
        $508 = $507&255;
        $509 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        if ($515) {
         $516 = (($s$0$us$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us$i = $516;
        } else {
         $s$1$us$i = $509;
        }
        $517 = $512 != 0.0;
        if ($517) {
         $$2$us$i = $512;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $518 = (~~(($$2$i)));
       $519 = (17408 + ($518)|0);
       $520 = HEAP8[$519>>0]|0;
       $521 = $520&255;
       $522 = $521 | $430;
       $523 = $522&255;
       $524 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $523;
       $525 = (+($518|0));
       $526 = $$2$i - $525;
       $527 = $526 * 16.0;
       $528 = $524;
       $529 = (($528) - ($0))|0;
       $530 = ($529|0)==(1);
       if ($530) {
        $531 = (($s$0$i) + 2|0);
        HEAP8[$524>>0] = 46;
        $s$1$i = $531;
       } else {
        $s$1$i = $524;
       }
       $532 = $527 != 0.0;
       if ($532) {
        $$2$i = $527;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $533 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $534 = (($11) + ($$pre306$i))|0;
     $535 = ($534|0)<($p$0|0);
     $or$cond271 = $533 & $535;
     $536 = $485;
     if ($or$cond271) {
      $537 = (($12) + ($p$0))|0;
      $538 = (($537) - ($536))|0;
      $l$0$i = $538;
     } else {
      $539 = (($10) - ($536))|0;
      $540 = (($539) + ($$pre306$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($433))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($w$1|0)>($541|0);
     $or$cond$i57$i = $543 & $544;
     if ($or$cond$i57$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i59$i = $545;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $549 = (($$01$i59$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i59$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i61$i = $551;
      } else {
       $$0$lcssa$i61$i = $545;
      }
      ___fwritex($pad$i,$$0$lcssa$i61$i,$f);
     }
     ___fwritex($prefix$0$$i,$433,$f);
     $552 = ($542|0)==(65536);
     $or$cond$i64$i = $552 & $544;
     if ($or$cond$i64$i) {
      $553 = (($w$1) - ($541))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i66$i = $553;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $557 = (($$01$i66$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i66$i = $557;
        } else {
         break;
        }
       }
       $559 = $553 & 255;
       $$0$lcssa$i68$i = $559;
      } else {
       $$0$lcssa$i68$i = $553;
      }
      ___fwritex($pad$i,$$0$lcssa$i68$i,$f);
     }
     $560 = (($$pre306$i) - ($0))|0;
     ___fwritex($buf$i,$560,$f);
     $561 = (($9) - ($536))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($560))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i72$i = $563;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $568 = (($$01$i72$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i72$i = $568;
        } else {
         break;
        }
       }
       $570 = $563 & 255;
       $$0$lcssa$i74$i = $570;
      } else {
       $$0$lcssa$i74$i = $563;
      }
      ___fwritex($pad$i,$$0$lcssa$i74$i,$f);
     }
     ___fwritex($485,$561,$f);
     $571 = ($542|0)==(8192);
     $or$cond$i77$i = $571 & $544;
     if ($or$cond$i77$i) {
      $572 = (($w$1) - ($541))|0;
      $573 = ($572>>>0)>(256);
      $574 = $573 ? 256 : $572;
      _memset(($pad$i|0),32,($574|0))|0;
      $575 = ($572>>>0)>(255);
      if ($575) {
       $$01$i79$i = $572;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $576 = (($$01$i79$i) + -256)|0;
        $577 = ($576>>>0)>(255);
        if ($577) {
         $$01$i79$i = $576;
        } else {
         break;
        }
       }
       $578 = $572 & 255;
       $$0$lcssa$i81$i = $578;
      } else {
       $$0$lcssa$i81$i = $572;
      }
      ___fwritex($pad$i,$$0$lcssa$i81$i,$f);
     }
     $w$22$i = $544 ? $w$1 : $541;
     $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $579 = ($p$0|0)<(0);
    $$p$i = $579 ? 6 : $p$0;
    if ($425) {
     $580 = $424 * 268435456.0;
     $581 = HEAP32[$e2$i>>2]|0;
     $582 = (($581) + -28)|0;
     HEAP32[$e2$i>>2] = $582;
     $$3$i = $580;$584 = $582;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $424;$584 = $$pre$i;
    }
    $583 = ($584|0)<(0);
    $$36$i = $583 ? $big$i : $13;
    $585 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $586 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $586;
     $587 = (($z$0$i) + 4|0);
     $588 = (+($586>>>0));
     $589 = $$4$i - $588;
     $590 = $589 * 1.0E+9;
     $591 = $590 != 0.0;
     if ($591) {
      $$4$i = $590;$z$0$i = $587;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $592 = ($$pr$i|0)>(0);
    if ($592) {
     $594 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $587;
     while(1) {
      $593 = ($594|0)>(29);
      $595 = $593 ? 29 : $594;
      $d$0249$i = (($z$1257$i) + -4|0);
      $596 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($596) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($595|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $606 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($606) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $d$0$i;
         }
        }
        $607 = ($604|0)==(0);
        if ($607) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $608 = (($a$1258$i) + -4|0);
        HEAP32[$608>>2] = $604;
        $a$2$ph$i = $608;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $609 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($609)) {
        break;
       }
       $610 = (($z$2$i) + -4|0);
       $611 = HEAP32[$610>>2]|0;
       $612 = ($611|0)==(0);
       if ($612) {
        $z$2$i = $610;
       } else {
        break;
       }
      }
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($595))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $594 = $614;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $614;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $587;
    }
    $616 = ($$pr151$i|0)<(0);
    L241: do {
     if ($616) {
      $617 = (($$p$i) + 25)|0;
      $618 = (($617|0) / 9)&-1;
      $619 = (($618) + 1)|0;
      $620 = ($428|0)==(102);
      if ($620) {
       $621 = (($$36$i) + ($619<<2)|0);
       $623 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$23$us$i = $624 ? 9 : $622;
        $625 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$23$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $642 = HEAP32[$d$1237$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$23$us$i;
           $646 = (($645) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $646;
           $633 = Math_imul($643, $647)|0;
           $648 = (($d$1237$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3243$us$i>>>0);
           if ($649) {
            $carry3$0238$us$i = $633;$d$1237$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3244$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3244$us$i;
          $632 = ($633|0)==(0);
          if ($632) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $634 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $633;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3244$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $627 ? $628 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($585))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L241;
        }
       }
      } else {
       $652 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$23$i = $653 ? 9 : $651;
       $654 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$23$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $661 = HEAP32[$d$1237$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$23$i;
          $664 = (($663) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1237$i) + 4|0);
          $667 = ($666>>>0)<($z$3243$i>>>0);
          if ($667) {
           $carry3$0238$i = $665;$d$1237$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3244$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3244$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3244$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $672 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $665;
         $$a$3310$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3244$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3244$i) + 4|0);
         $$a$3309$i = $656 ? $657 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3310$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3310$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($682) {
      $683 = $a$3$lcssa$i;
      $684 = (($585) - ($683))|0;
      $685 = $684 >> 2;
      $686 = ($685*9)|0;
      $687 = HEAP32[$a$3$lcssa$i>>2]|0;
      $688 = ($687>>>0)<(10);
      if ($688) {
       $e$1$i = $686;
       break;
      } else {
       $e$0233$i = $686;$i$0232$i = 10;
      }
      while(1) {
       $689 = ($i$0232$i*10)|0;
       $690 = (($e$0233$i) + 1)|0;
       $691 = ($687>>>0)<($689>>>0);
       if ($691) {
        $e$1$i = $690;
        break;
       } else {
        $e$0233$i = $690;$i$0232$i = $689;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $692 = ($428|0)!=(102);
    $693 = $692 ? $e$1$i : 0;
    $694 = (($$p$i) - ($693))|0;
    $695 = ($428|0)==(103);
    $696 = ($$p$i|0)!=(0);
    $$24$i = $695 & $696;
    $$neg156$i = $$24$i << 31 >> 31;
    $697 = (($694) + ($$neg156$i))|0;
    $698 = $z$3$lcssa$i;
    $699 = (($698) - ($585))|0;
    $700 = $699 >> 2;
    $701 = ($700*9)|0;
    $702 = (($701) + -9)|0;
    $703 = ($697|0)<($702|0);
    if ($703) {
     $704 = (($697) + 9216)|0;
     $705 = (($704|0) / 9)&-1;
     $$sum$i = (($705) + -1023)|0;
     $706 = (($$36$i) + ($$sum$i<<2)|0);
     $707 = (($704|0) % 9)&-1;
     $j$0224$i = (($707) + 1)|0;
     $708 = ($j$0224$i|0)<(9);
     if ($708) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $709 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $709;
        break;
       } else {
        $i$1225$i = $709;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $710 = HEAP32[$706>>2]|0;
     $711 = (($710>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $712 = ($711|0)==(0);
     if ($712) {
      $$sum18$i = (($705) + -1022)|0;
      $713 = (($$36$i) + ($$sum18$i<<2)|0);
      $714 = ($713|0)==($z$3$lcssa$i|0);
      if ($714) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $706;$e$3$i = $e$1$i;
      } else {
       label = 243;
      }
     } else {
      label = 243;
     }
     do {
      if ((label|0) == 243) {
       label = 0;
       $715 = (($710>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $716 = $715 & 1;
       $717 = ($716|0)==(0);
       $$25$i = $717 ? 9007199254740992.0 : 9007199254740994.0;
       $718 = (($i$1$lcssa$i|0) / 2)&-1;
       $719 = ($711>>>0)<($718>>>0);
       do {
        if ($719) {
         $small$0$i = 0.5;
        } else {
         $720 = ($711|0)==($718|0);
         if ($720) {
          $$sum19$i = (($705) + -1022)|0;
          $721 = (($$36$i) + ($$sum19$i<<2)|0);
          $722 = ($721|0)==($z$3$lcssa$i|0);
          if ($722) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $723 = ($pl$0$i|0)==(0);
       do {
        if ($723) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $724 = HEAP8[$prefix$0$i>>0]|0;
         $725 = ($724<<24>>24)==(45);
         if (!($725)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $726 = $$25$i * -1.0;
         $727 = $small$0$i * -1.0;
         $round6$1$i = $726;$small$1$i = $727;
        }
       } while(0);
       $728 = (($710) - ($711))|0;
       HEAP32[$706>>2] = $728;
       $729 = $round6$1$i + $small$1$i;
       $730 = $729 != $round6$1$i;
       if (!($730)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $706;$e$3$i = $e$1$i;
        break;
       }
       $731 = (($728) + ($i$1$lcssa$i))|0;
       HEAP32[$706>>2] = $731;
       $732 = ($731>>>0)>(999999999);
       if ($732) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $706;
        while(1) {
         $733 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $734 = ($733>>>0)<($a$5218$i>>>0);
         if ($734) {
          $735 = (($a$5218$i) + -4|0);
          HEAP32[$735>>2] = 0;
          $a$6$i = $735;
         } else {
          $a$6$i = $a$5218$i;
         }
         $736 = HEAP32[$733>>2]|0;
         $737 = (($736) + 1)|0;
         HEAP32[$733>>2] = $737;
         $738 = ($737>>>0)>(999999999);
         if ($738) {
          $a$5218$i = $a$6$i;$d$2217$i = $733;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $733;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $706;
       }
       $739 = $a$5$lcssa$i;
       $740 = (($585) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$a$5$lcssa$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2213$i = $742;$i$2212$i = 10;
       }
       while(1) {
        $745 = ($i$2212$i*10)|0;
        $746 = (($e$2213$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2213$i = $746;$i$2212$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $750 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $751 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($751)) {
      $$lcssa292$i = 0;
      break;
     }
     $752 = (($z$6$i) + -4|0);
     $753 = HEAP32[$752>>2]|0;
     $754 = ($753|0)==(0);
     if ($754) {
      $z$6$i = $752;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($695) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$ph$i|0);
      $758 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $757 & $758;
      if ($or$cond5$i) {
       $759 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $760 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $759;$$213$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$016$i = $761;$$213$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $765 = (($z$6$i) + -4|0);
        $766 = HEAP32[$765>>2]|0;
        $767 = ($766|0)==(0);
        if ($767) {
         $j$2$i = 9;
         break;
        }
        $768 = (($766>>>0) % 10)&-1;
        $769 = ($768|0)==(0);
        if ($769) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $770 = ($i$3204$i*10)|0;
         $771 = (($j$1205$i) + 1)|0;
         $772 = (($766>>>0) % ($770>>>0))&-1;
         $773 = ($772|0)==(0);
         if ($773) {
          $i$3204$i = $770;$j$1205$i = $771;
         } else {
          $j$2$i = $771;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $774 = $$016$i | 32;
      $775 = ($774|0)==(102);
      $776 = $z$6$i;
      $777 = (($776) - ($585))|0;
      $778 = $777 >> 2;
      $779 = ($778*9)|0;
      $780 = (($779) + -9)|0;
      if ($775) {
       $781 = (($780) - ($j$2$i))|0;
       $782 = ($781|0)<(0);
       $$26$i = $782 ? 0 : $781;
       $783 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $783 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $784 = (($780) + ($e$4$ph$i))|0;
       $785 = (($784) - ($j$2$i))|0;
       $786 = ($785|0)<(0);
       $$28$i = $786 ? 0 : $785;
       $787 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $787 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $788 = ($$314$i|0)!=(0);
    if ($788) {
     $792 = 1;
    } else {
     $789 = $fl$1$ & 8;
     $790 = ($789|0)!=(0);
     $792 = $790;
    }
    $791 = $792&1;
    $793 = $$117$i | 32;
    $794 = ($793|0)==(102);
    if ($794) {
     $795 = ($e$4$ph$i|0)>(0);
     $796 = $795 ? $e$4$ph$i : 0;
     $$pn$i = $796;$estr$2$i = 0;
    } else {
     $797 = ($e$4$ph$i|0)<(0);
     $798 = $797 ? $750 : $e$4$ph$i;
     $799 = ($798|0)<(0);
     if ($799) {
      $800 = ($798|0)<(0);
      $801 = $800 << 31 >> 31;
      $$05$i84$i = $7;$802 = $798;$803 = $801;
      while(1) {
       $804 = (___uremdi3(($802|0),($803|0),10,0)|0);
       $805 = tempRet0;
       $806 = $804 | 48;
       $807 = $806&255;
       $808 = (($$05$i84$i) + -1|0);
       HEAP8[$808>>0] = $807;
       $809 = (___udivdi3(($802|0),($803|0),10,0)|0);
       $810 = tempRet0;
       $811 = ($803>>>0)>(9);
       $812 = ($802>>>0)>(4294967295);
       $813 = ($803|0)==(9);
       $814 = $813 & $812;
       $815 = $811 | $814;
       if ($815) {
        $$05$i84$i = $808;$802 = $809;$803 = $810;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $808;$$01$lcssa$off0$i90$i = $809;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $798;
     }
     $816 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($816) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $817 = (($y$03$i91$i>>>0) % 10)&-1;
       $818 = $817 | 48;
       $819 = $818&255;
       $820 = (($$12$i92$i) + -1|0);
       HEAP8[$820>>0] = $819;
       $821 = (($y$03$i91$i>>>0) / 10)&-1;
       $822 = ($y$03$i91$i>>>0)<(10);
       if ($822) {
        $estr$1$ph$i = $820;
        break;
       } else {
        $$12$i92$i = $820;$y$03$i91$i = $821;
       }
      }
     }
     $823 = $estr$1$ph$i;
     $824 = (($9) - ($823))|0;
     $825 = ($824|0)<(2);
     if ($825) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $826 = (($estr$1195$i) + -1|0);
       HEAP8[$826>>0] = 48;
       $827 = $826;
       $828 = (($9) - ($827))|0;
       $829 = ($828|0)<(2);
       if ($829) {
        $estr$1195$i = $826;
       } else {
        $estr$1$lcssa$i = $826;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $830 = $e$4$ph$i >> 31;
     $831 = $830 & 2;
     $832 = (($831) + 43)|0;
     $833 = $832&255;
     $834 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$834>>0] = $833;
     $835 = $$117$i&255;
     $836 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$836>>0] = $835;
     $837 = $836;
     $838 = (($9) - ($837))|0;
     $$pn$i = $838;$estr$2$i = $836;
    }
    $839 = (($pl$0$i) + 1)|0;
    $840 = (($839) + ($$314$i))|0;
    $l$1$i = (($840) + ($791))|0;
    $841 = (($l$1$i) + ($$pn$i))|0;
    $842 = $fl$1$ & 73728;
    $843 = ($842|0)==(0);
    $844 = ($w$1|0)>($841|0);
    $or$cond$i98$i = $843 & $844;
    if ($or$cond$i98$i) {
     $845 = (($w$1) - ($841))|0;
     $846 = ($845>>>0)>(256);
     $847 = $846 ? 256 : $845;
     _memset(($pad$i|0),32,($847|0))|0;
     $848 = ($845>>>0)>(255);
     if ($848) {
      $$01$i100$i = $845;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $849 = (($$01$i100$i) + -256)|0;
       $850 = ($849>>>0)>(255);
       if ($850) {
        $$01$i100$i = $849;
       } else {
        break;
       }
      }
      $851 = $845 & 255;
      $$0$lcssa$i102$i = $851;
     } else {
      $$0$lcssa$i102$i = $845;
     }
     ___fwritex($pad$i,$$0$lcssa$i102$i,$f);
    }
    ___fwritex($prefix$0$i,$pl$0$i,$f);
    $852 = ($842|0)==(65536);
    $or$cond$i105$i = $852 & $844;
    if ($or$cond$i105$i) {
     $853 = (($w$1) - ($841))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i107$i = $853;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $857 = (($$01$i107$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i107$i = $857;
       } else {
        break;
       }
      }
      $859 = $853 & 255;
      $$0$lcssa$i109$i = $859;
     } else {
      $$0$lcssa$i109$i = $853;
     }
     ___fwritex($pad$i,$$0$lcssa$i109$i,$f);
    }
    do {
     if ($794) {
      $860 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $860 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $861 = HEAP32[$d$4180$i>>2]|0;
       $862 = ($861|0)==(0);
       if ($862) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $861;
        while(1) {
         $863 = (($y$03$i114$i>>>0) % 10)&-1;
         $864 = $863 | 48;
         $865 = $864&255;
         $866 = (($$12$i115$i) + -1|0);
         HEAP8[$866>>0] = $865;
         $867 = (($y$03$i114$i>>>0) / 10)&-1;
         $868 = ($y$03$i114$i>>>0)<(10);
         if ($868) {
          $$1$lcssa$i117$i = $866;
          break;
         } else {
          $$12$i115$i = $866;$y$03$i114$i = $867;
         }
        }
       }
       $869 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($869) {
         $873 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($873)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $870 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($870) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $871 = (($s7$0177$i) + -1|0);
          HEAP8[$871>>0] = 48;
          $872 = ($871>>>0)>($buf$i>>>0);
          if ($872) {
           $s7$0177$i = $871;
          } else {
           $s7$1$i = $871;
           break;
          }
         }
        }
       } while(0);
       $874 = $s7$1$i;
       $875 = (($15) - ($874))|0;
       ___fwritex($s7$1$i,$875,$f);
       $876 = (($d$4180$i) + 4|0);
       $877 = ($876>>>0)>($$36$i>>>0);
       if ($877) {
        break;
       } else {
        $d$4180$i = $876;
       }
      }
      $$not$i = $788 ^ 1;
      $878 = $fl$1$ & 8;
      $879 = ($878|0)==(0);
      $or$cond32$i = $879 & $$not$i;
      if (!($or$cond32$i)) {
       ___fwritex(17424,1,$f);
      }
      $880 = ($876>>>0)<($z$6$i>>>0);
      $881 = ($$314$i|0)>(0);
      $or$cond7169$i = $880 & $881;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $876;
       while(1) {
        $882 = HEAP32[$d$5170$i>>2]|0;
        $883 = ($882|0)==(0);
        if ($883) {
         $s8$0165$i = $14;
         label = 312;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $882;
         while(1) {
          $884 = (($y$03$i123$i>>>0) % 10)&-1;
          $885 = $884 | 48;
          $886 = $885&255;
          $887 = (($$12$i124$i) + -1|0);
          HEAP8[$887>>0] = $886;
          $888 = (($y$03$i123$i>>>0) / 10)&-1;
          $889 = ($y$03$i123$i>>>0)<(10);
          if ($889) {
           break;
          } else {
           $$12$i124$i = $887;$y$03$i123$i = $888;
          }
         }
         $890 = ($887>>>0)>($buf$i>>>0);
         if ($890) {
          $s8$0165$i = $887;
          label = 312;
         } else {
          $s8$0$lcssa$i = $887;
         }
        }
        if ((label|0) == 312) {
         while(1) {
          label = 0;
          $891 = (($s8$0165$i) + -1|0);
          HEAP8[$891>>0] = 48;
          $892 = ($891>>>0)>($buf$i>>>0);
          if ($892) {
           $s8$0165$i = $891;
           label = 312;
          } else {
           $s8$0$lcssa$i = $891;
           break;
          }
         }
        }
        $893 = ($$415171$i|0)>(9);
        $894 = $893 ? 9 : $$415171$i;
        ___fwritex($s8$0$lcssa$i,$894,$f);
        $895 = (($d$5170$i) + 4|0);
        $896 = (($$415171$i) + -9)|0;
        $897 = ($895>>>0)<($z$6$i>>>0);
        $898 = ($896|0)>(0);
        $or$cond7$i = $897 & $898;
        if ($or$cond7$i) {
         $$415171$i = $896;$d$5170$i = $895;
        } else {
         $$415$lcssa$i = $896;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $899 = ($$415$lcssa$i|0)>(0);
      if (!($899)) {
       break;
      }
      $900 = ($$415$lcssa$i>>>0)>(256);
      $901 = $900 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($901|0))|0;
      $902 = ($$415$lcssa$i>>>0)>(255);
      if ($902) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        ___fwritex($pad$i,256,$f);
        $903 = (($$01$i131$i) + -256)|0;
        $904 = ($903>>>0)>(255);
        if ($904) {
         $$01$i131$i = $903;
        } else {
         break;
        }
       }
       $905 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $905;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      ___fwritex($pad$i,$$0$lcssa$i133$i,$f);
     } else {
      $906 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $906;
      $907 = ($$314$i|0)>(-1);
      do {
       if ($907) {
        $908 = $fl$1$ & 8;
        $909 = ($908|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $910 = HEAP32[$d$6188$i>>2]|0;
         $911 = ($910|0)==(0);
         if ($911) {
          label = 324;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $910;
          while(1) {
           $912 = (($y$03$i138$i>>>0) % 10)&-1;
           $913 = $912 | 48;
           $914 = $913&255;
           $915 = (($$12$i139$i) + -1|0);
           HEAP8[$915>>0] = $914;
           $916 = (($y$03$i138$i>>>0) / 10)&-1;
           $917 = ($y$03$i138$i>>>0)<(10);
           if ($917) {
            break;
           } else {
            $$12$i139$i = $915;$y$03$i138$i = $916;
           }
          }
          $918 = ($915|0)==($14|0);
          if ($918) {
           label = 324;
          } else {
           $s9$0$i = $915;
          }
         }
         if ((label|0) == 324) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $919 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($919) {
           $923 = (($s9$0$i) + 1|0);
           ___fwritex($s9$0$i,1,$f);
           $924 = ($$5189$i|0)<(1);
           $or$cond34$i = $924 & $909;
           if ($or$cond34$i) {
            $s9$2$i = $923;
            break;
           }
           ___fwritex(17424,1,$f);
           $s9$2$i = $923;
          } else {
           $920 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($920) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $921 = (($s9$1184$i) + -1|0);
            HEAP8[$921>>0] = 48;
            $922 = ($921>>>0)>($buf$i>>>0);
            if ($922) {
             $s9$1184$i = $921;
            } else {
             $s9$2$i = $921;
             break;
            }
           }
          }
         } while(0);
         $925 = $s9$2$i;
         $926 = (($15) - ($925))|0;
         $927 = ($$5189$i|0)>($926|0);
         $$$5$i = $927 ? $926 : $$5189$i;
         ___fwritex($s9$2$i,$$$5$i,$f);
         $928 = (($$5189$i) - ($926))|0;
         $929 = (($d$6188$i) + 4|0);
         $930 = ($929>>>0)<($z$6$$i>>>0);
         $931 = ($928|0)>(-1);
         $or$cond9$i = $930 & $931;
         if ($or$cond9$i) {
          $$5189$i = $928;$d$6188$i = $929;
         } else {
          break;
         }
        }
        $932 = ($928|0)>(0);
        if (!($932)) {
         break;
        }
        $933 = ($928>>>0)>(256);
        $934 = $933 ? 256 : $928;
        _memset(($pad$i|0),48,($934|0))|0;
        $935 = ($928>>>0)>(255);
        if ($935) {
         $$01$i146$i = $928;
         while(1) {
          ___fwritex($pad$i,256,$f);
          $936 = (($$01$i146$i) + -256)|0;
          $937 = ($936>>>0)>(255);
          if ($937) {
           $$01$i146$i = $936;
          } else {
           break;
          }
         }
         $938 = $928 & 255;
         $$0$lcssa$i148$i = $938;
        } else {
         $$0$lcssa$i148$i = $928;
        }
        ___fwritex($pad$i,$$0$lcssa$i148$i,$f);
       }
      } while(0);
      $939 = $estr$2$i;
      $940 = (($9) - ($939))|0;
      ___fwritex($estr$2$i,$940,$f);
     }
    } while(0);
    $941 = ($842|0)==(8192);
    $or$cond$i$i = $941 & $844;
    if ($or$cond$i$i) {
     $942 = (($w$1) - ($841))|0;
     $943 = ($942>>>0)>(256);
     $944 = $943 ? 256 : $942;
     _memset(($pad$i|0),32,($944|0))|0;
     $945 = ($942>>>0)>(255);
     if ($945) {
      $$01$i$i = $942;
      while(1) {
       ___fwritex($pad$i,256,$f);
       $946 = (($$01$i$i) + -256)|0;
       $947 = ($946>>>0)>(255);
       if ($947) {
        $$01$i$i = $946;
       } else {
        break;
       }
      }
      $948 = $942 & 255;
      $$0$lcssa$i$i = $948;
     } else {
      $$0$lcssa$i$i = $942;
     }
     ___fwritex($pad$i,$$0$lcssa$i$i,$f);
    }
    $w$35$i = $844 ? $w$1 : $841;
    $1053 = $191;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1062 = $wc;$1063 = $6;$p$4266 = -1;
    label = 112;
    break;
   }
   case 83:  {
    $344 = $191;
    $345 = ($p$0|0)==(0);
    if ($345) {
     $1064 = $191;$1065 = $344;$i$0$lcssa267 = 0;
     label = 117;
    } else {
     $1062 = $344;$1063 = $191;$p$4266 = $p$0;
     label = 112;
    }
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1060 = $191;$1061 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 17328;$z$2 = $2;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 17344 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 17328;
    label = 86;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   default: {
    $1060 = $191;$1061 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17328;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17328;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (17408 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17328;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (17328 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = $a$1;
    $311 = $310 & 3;
    $312 = ($311|0)!=(0);
    $313 = ($p$0|0)!=(0);
    $or$cond11$i = $312 & $313;
    L450: do {
     if ($or$cond11$i) {
      $$012$i1 = $p$0;$s$013$i = $a$1;
      while(1) {
       $314 = HEAP8[$s$013$i>>0]|0;
       $315 = ($314<<24>>24)==(0);
       if ($315) {
        $$3$i6 = $$012$i1;$s$2$i = $s$013$i;
        break L450;
       }
       $316 = (($s$013$i) + 1|0);
       $317 = (($$012$i1) + -1)|0;
       $318 = $316;
       $319 = $318 & 3;
       $320 = ($319|0)!=(0);
       $321 = ($317|0)!=(0);
       $or$cond$i2 = $320 & $321;
       if ($or$cond$i2) {
        $$012$i1 = $317;$s$013$i = $316;
       } else {
        $$0$lcssa$i3 = $317;$$lcssa$i = $321;$s$0$lcssa$i = $316;
        label = 99;
        break;
       }
      }
     } else {
      $$0$lcssa$i3 = $p$0;$$lcssa$i = $313;$s$0$lcssa$i = $a$1;
      label = 99;
     }
    } while(0);
    L454: do {
     if ((label|0) == 99) {
      label = 0;
      if ($$lcssa$i) {
       $$pre19 = HEAP8[$s$0$lcssa$i>>0]|0;
       $phitmp = ($$pre19<<24>>24)==(0);
       if ($phitmp) {
        $$3$i6 = $$0$lcssa$i3;$s$2$i = $s$0$lcssa$i;
       } else {
        $322 = ($$0$lcssa$i3>>>0)>(3);
        L458: do {
         if ($322) {
          $$15$i = $$0$lcssa$i3;$w$06$i = $s$0$lcssa$i;
          while(1) {
           $323 = HEAP32[$w$06$i>>2]|0;
           $324 = (($323) + -16843009)|0;
           $325 = $323 & -2139062144;
           $326 = $325 ^ -2139062144;
           $327 = $326 & $324;
           $328 = ($327|0)==(0);
           if (!($328)) {
            $$1$lcssa$i = $$15$i;$w$0$lcssa$i = $w$06$i;
            break L458;
           }
           $329 = (($w$06$i) + 4|0);
           $330 = (($$15$i) + -4)|0;
           $331 = ($330>>>0)>(3);
           if ($331) {
            $$15$i = $330;$w$06$i = $329;
           } else {
            $$1$lcssa$i = $330;$w$0$lcssa$i = $329;
            break;
           }
          }
         } else {
          $$1$lcssa$i = $$0$lcssa$i3;$w$0$lcssa$i = $s$0$lcssa$i;
         }
        } while(0);
        $332 = ($$1$lcssa$i|0)==(0);
        if ($332) {
         $$3$i6 = 0;$s$2$i = $w$0$lcssa$i;
        } else {
         $$22$i = $$1$lcssa$i;$s$13$i = $w$0$lcssa$i;
         while(1) {
          $333 = HEAP8[$s$13$i>>0]|0;
          $334 = ($333<<24>>24)==(0);
          if ($334) {
           $$3$i6 = $$22$i;$s$2$i = $s$13$i;
           break L454;
          }
          $335 = (($s$13$i) + 1|0);
          $336 = (($$22$i) + -1)|0;
          $337 = ($336|0)==(0);
          if ($337) {
           $$3$i6 = 0;$s$2$i = $335;
           break;
          } else {
           $$22$i = $336;$s$13$i = $335;
          }
         }
        }
       }
      } else {
       $$3$i6 = 0;$s$2$i = $s$0$lcssa$i;
      }
     }
    } while(0);
    $338 = ($$3$i6|0)!=(0);
    $339 = $338 ? $s$2$i : 0;
    $340 = ($339|0)==(0|0);
    if ($340) {
     $341 = (($a$1) + ($p$0)|0);
     $1060 = $191;$1061 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17328;$z$2 = $341;
     break;
    } else {
     $342 = $339;
     $343 = (($342) - ($310))|0;
     $1060 = $191;$1061 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $343;$pl$2 = 0;$prefix$2 = 17328;$z$2 = $339;
     break;
    }
   }
   else if ((label|0) == 112) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1062;
    while(1) {
     $346 = HEAP32[$ws$0167>>2]|0;
     $347 = ($346|0)==(0);
     if ($347) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $348 = (_wcrtomb($mb,$346)|0);
     $349 = ($348|0)<(0);
     $350 = (($p$4266) - ($i$0166))|0;
     $351 = ($348>>>0)>($350>>>0);
     $or$cond17 = $349 | $351;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $348;
      break;
     }
     $352 = (($ws$0167) + 4|0);
     $353 = (($348) + ($i$0166))|0;
     $354 = ($p$4266>>>0)>($353>>>0);
     if ($354) {
      $i$0166 = $353;$l$1165 = $348;$ws$0167 = $352;
     } else {
      $i$0$lcssa = $353;$l$2 = $348;
      break;
     }
    }
    $355 = ($l$2|0)<(0);
    if ($355) {
     $$0 = -1;
     label = 382;
     break L1;
    } else {
     $1064 = $1063;$1065 = $1062;$i$0$lcssa267 = $i$0$lcssa;
     label = 117;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1060 = $293;$1061 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1060 = $293;$1061 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 117) {
   label = 0;
   $356 = $fl$1$ & 73728;
   $357 = ($356|0)==(0);
   $358 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $357 & $358;
   if ($or$cond$i58) {
    $359 = (($w$1) - ($i$0$lcssa267))|0;
    $360 = ($359>>>0)>(256);
    $361 = $360 ? 256 : $359;
    _memset(($pad$i|0),32,($361|0))|0;
    $362 = ($359>>>0)>(255);
    if ($362) {
     $$01$i60 = $359;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $363 = (($$01$i60) + -256)|0;
      $364 = ($363>>>0)>(255);
      if ($364) {
       $$01$i60 = $363;
      } else {
       break;
      }
     }
     $365 = $359 & 255;
     $$0$lcssa$i62 = $365;
    } else {
     $$0$lcssa$i62 = $359;
    }
    ___fwritex($pad$i,$$0$lcssa$i62,$f);
   }
   $366 = ($i$0$lcssa267|0)==(0);
   L494: do {
    if (!($366)) {
     $i$1174 = 0;$ws$1175 = $1065;
     while(1) {
      $367 = HEAP32[$ws$1175>>2]|0;
      $368 = ($367|0)==(0);
      if ($368) {
       break L494;
      }
      $369 = (_wcrtomb($mb,$367)|0);
      $370 = (($369) + ($i$1174))|0;
      $371 = ($370|0)>($i$0$lcssa267|0);
      if ($371) {
       break L494;
      }
      $372 = (($ws$1175) + 4|0);
      ___fwritex($mb,$369,$f);
      $373 = ($370>>>0)<($i$0$lcssa267>>>0);
      if ($373) {
       $i$1174 = $370;$ws$1175 = $372;
      } else {
       break;
      }
     }
    }
   } while(0);
   $374 = ($356|0)==(8192);
   $or$cond$i65 = $374 & $358;
   if ($or$cond$i65) {
    $375 = (($w$1) - ($i$0$lcssa267))|0;
    $376 = ($375>>>0)>(256);
    $377 = $376 ? 256 : $375;
    _memset(($pad$i|0),32,($377|0))|0;
    $378 = ($375>>>0)>(255);
    if ($378) {
     $$01$i67 = $375;
     while(1) {
      ___fwritex($pad$i,256,$f);
      $379 = (($$01$i67) + -256)|0;
      $380 = ($379>>>0)>(255);
      if ($380) {
       $$01$i67 = $379;
      } else {
       break;
      }
     }
     $381 = $375 & 255;
     $$0$lcssa$i69 = $381;
    } else {
     $$0$lcssa$i69 = $375;
    }
    ___fwritex($pad$i,$$0$lcssa$i69,$f);
   }
   $382 = $358 ? $w$1 : $i$0$lcssa267;
   $1053 = $1064;$1054 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $382;$l10n$0 = $l10n$3;
   continue;
  }
  $949 = $z$2;
  $950 = $a$2;
  $951 = (($949) - ($950))|0;
  $952 = ($p$5|0)<($951|0);
  $$p$5 = $952 ? $951 : $p$5;
  $953 = (($pl$2) + ($$p$5))|0;
  $954 = ($w$1|0)<($953|0);
  $w$2 = $954 ? $953 : $w$1;
  $955 = $fl$6 & 73728;
  $956 = ($955|0)==(0);
  $957 = ($w$2|0)>($953|0);
  $or$cond$i75 = $956 & $957;
  if ($or$cond$i75) {
   $958 = (($w$2) - ($953))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),32,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i77 = $958;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $962 = (($$01$i77) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i77 = $962;
     } else {
      break;
     }
    }
    $964 = $958 & 255;
    $$0$lcssa$i79 = $964;
   } else {
    $$0$lcssa$i79 = $958;
   }
   ___fwritex($pad$i,$$0$lcssa$i79,$f);
  }
  ___fwritex($prefix$2,$pl$2,$f);
  $965 = ($955|0)==(65536);
  $or$cond$i51 = $965 & $957;
  if ($or$cond$i51) {
   $966 = (($w$2) - ($953))|0;
   $967 = ($966>>>0)>(256);
   $968 = $967 ? 256 : $966;
   _memset(($pad$i|0),48,($968|0))|0;
   $969 = ($966>>>0)>(255);
   if ($969) {
    $$01$i53 = $966;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $970 = (($$01$i53) + -256)|0;
     $971 = ($970>>>0)>(255);
     if ($971) {
      $$01$i53 = $970;
     } else {
      break;
     }
    }
    $972 = $966 & 255;
    $$0$lcssa$i55 = $972;
   } else {
    $$0$lcssa$i55 = $966;
   }
   ___fwritex($pad$i,$$0$lcssa$i55,$f);
  }
  $973 = ($$p$5|0)>($951|0);
  if ($973) {
   $974 = (($$p$5) - ($951))|0;
   $975 = ($974>>>0)>(256);
   $976 = $975 ? 256 : $974;
   _memset(($pad$i|0),48,($976|0))|0;
   $977 = ($974>>>0)>(255);
   if ($977) {
    $$01$i38 = $974;
    while(1) {
     ___fwritex($pad$i,256,$f);
     $978 = (($$01$i38) + -256)|0;
     $979 = ($978>>>0)>(255);
     if ($979) {
      $$01$i38 = $978;
     } else {
      break;
     }
    }
    $980 = $974 & 255;
    $$0$lcssa$i40 = $980;
   } else {
    $$0$lcssa$i40 = $974;
   }
   ___fwritex($pad$i,$$0$lcssa$i40,$f);
  }
  ___fwritex($a$2,$951,$f);
  $981 = ($955|0)==(8192);
  $or$cond$i = $981 & $957;
  if (!($or$cond$i)) {
   $1053 = $1060;$1054 = $1061;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $982 = (($w$2) - ($953))|0;
  $983 = ($982>>>0)>(256);
  $984 = $983 ? 256 : $982;
  _memset(($pad$i|0),32,($984|0))|0;
  $985 = ($982>>>0)>(255);
  if ($985) {
   $$01$i = $982;
   while(1) {
    ___fwritex($pad$i,256,$f);
    $986 = (($$01$i) + -256)|0;
    $987 = ($986>>>0)>(255);
    if ($987) {
     $$01$i = $986;
    } else {
     break;
    }
   }
   $988 = $982 & 255;
   $$0$lcssa$i = $988;
  } else {
   $$0$lcssa$i = $982;
  }
  ___fwritex($pad$i,$$0$lcssa$i,$f);
  $1053 = $1060;$1054 = $1061;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 363) {
  $989 = ($f|0)==(0|0);
  if (!($989)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $990 = ($l10n$0|0)==(0);
  if ($990) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $991 = (($nl_type) + ($i$2100<<2)|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = ($992|0)==(0);
   if ($993) {
    $1066 = 1;$i$397 = $i$2100;
    break;
   }
   $994 = (($nl_arg) + ($i$2100<<3)|0);
   $995 = ($992>>>0)>(20);
   L551: do {
    if (!($995)) {
     do {
      switch ($992|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$994>>2] = $996;
       break L551;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $997 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $998 = ($997|0)<(0);
       $999 = $998 << 31 >> 31;
       $1000 = $994;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       $1002 = (($1000) + 4)|0;
       $1003 = $1002;
       HEAP32[$1003>>2] = $999;
       break L551;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1004 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1005 = $994;
       $1006 = $1005;
       HEAP32[$1006>>2] = $1004;
       $1007 = (($1005) + 4)|0;
       $1008 = $1007;
       HEAP32[$1008>>2] = 0;
       break L551;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1009 = $arglist_current44;
       $1010 = $1009;
       $1011 = HEAP32[$1010>>2]|0;
       $1012 = (($1009) + 4)|0;
       $1013 = $1012;
       $1014 = HEAP32[$1013>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1015 = $994;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1011;
       $1017 = (($1015) + 4)|0;
       $1018 = $1017;
       HEAP32[$1018>>2] = $1014;
       break L551;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1019 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1020 = $1019&65535;
       $1021 = $1020 << 16 >> 16;
       $1022 = ($1021|0)<(0);
       $1023 = $1022 << 31 >> 31;
       $1024 = $994;
       $1025 = $1024;
       HEAP32[$1025>>2] = $1021;
       $1026 = (($1024) + 4)|0;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1023;
       break L551;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1028 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1028 & 65535;
       $1029 = $994;
       $1030 = $1029;
       HEAP32[$1030>>2] = $$mask1$i;
       $1031 = (($1029) + 4)|0;
       $1032 = $1031;
       HEAP32[$1032>>2] = 0;
       break L551;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1033 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1034 = $1033&255;
       $1035 = $1034 << 24 >> 24;
       $1036 = ($1035|0)<(0);
       $1037 = $1036 << 31 >> 31;
       $1038 = $994;
       $1039 = $1038;
       HEAP32[$1039>>2] = $1035;
       $1040 = (($1038) + 4)|0;
       $1041 = $1040;
       HEAP32[$1041>>2] = $1037;
       break L551;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1042 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1042 & 255;
       $1043 = $994;
       $1044 = $1043;
       HEAP32[$1044>>2] = $$mask$i;
       $1045 = (($1043) + 4)|0;
       $1046 = $1045;
       HEAP32[$1046>>2] = 0;
       break L551;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1047 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$994>>3] = $1047;
       break L551;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1048 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$994>>3] = $1048;
       break L551;
       break;
      }
      default: {
       break L551;
      }
      }
     } while(0);
    }
   } while(0);
   $1049 = (($i$2100) + 1)|0;
   $1050 = ($1049|0)<(10);
   if ($1050) {
    $i$2100 = $1049;
   } else {
    $$0 = 1;
    label = 382;
    break;
   }
  }
  if ((label|0) == 382) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1052 = (($i$397) + 1)|0;
   if (!($1066)) {
    $$0 = -1;
    label = 382;
    break;
   }
   $1051 = ($1052|0)<(10);
   if (!($1051)) {
    $$0 = 1;
    label = 382;
    break;
   }
   $$phi$trans$insert = (($nl_type) + ($1052<<2)|0);
   $$pre18 = HEAP32[$$phi$trans$insert>>2]|0;
   $phitmp20 = ($$pre18|0)==(0);
   $1066 = $phitmp20;$i$397 = $1052;
  }
  if ((label|0) == 382) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 382) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&511](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&511](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&511]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&511]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _pthread_getspecific__wrapper(p0) { p0 = p0|0; return _pthread_getspecific(p0|0)|0; }
  function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(5);return 0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(7); }
  function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(8); }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14); }
  function b15(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
  function _pthread_once__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _pthread_once(p0|0,p1|0)|0; }
  function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0; }
  function b17(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0; }
  function b18() { ; nullFunc_i(18);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b19(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b21() { ; nullFunc_v(21); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(22);return 0; }
  function b23(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIcED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b2,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b2,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
  ,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b2,b2,b2,b2,b2,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b2,b2,b2,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev
  ,b2,b2,b2,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b2
  ,b2,b2,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b2,b2,b2,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev
  ,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b2,b2,b2,b2,b2,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b2,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b2
  ,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b2,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2,b2,b2,b2,b2,b2,b2
  ,__ZN10emscripten8internal14raw_destructorI7MyClassEEvPT_,b2,b2,__ZN7MyClass10incrementXEv,b2,__ZN7MyClass10incrementYEv,b2,b2,b2,b2,b2,b2,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_freelocale__wrapper,b2,__ZNSt3__112__do_nothingEPv,b2,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b2,b2,b2,b2,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxx_global_array_dtor112,b2,___cxx_global_array_dtor97,b2,___cxx_global_array_dtor73,___cxx_global_array_dtor48,___cxx_global_array_dtor45,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,_free,b2
  ,b2,b2,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv
  ,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,__ZNKSt3__18messagesIcE8do_closeEi,b3,b3,b3,b3,__ZNKSt3__18messagesIwE8do_closeEi,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b3,b3,b3,b3,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIM7MyClassFvvEvPS2_JEE6invokeERKS4_S5_,b3,b3,__ZN7MyClass4setXEi,b3,b3,b3,__ZN7MyClass21getStringFromInstanceERKS_,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base5clearEj,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b3,__ZNSt3__16locale5__impC2Ej,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj
  ,b3,_abort_message,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b4,b4,b4,b4,b4,__ZNKSt13runtime_error4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__119__iostream_category4nameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv
  ,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b4,b4,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv
  ,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b4,b4
  ,b4,b4,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b4,b4
  ,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4,b4,__ZNKSt11logic_error4whatEv
  ,b4,b4,b4,b4,b4,__ZNKSt8bad_cast4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeI7MyClassEEPKvPT_
  ,b4,b4,b4,b4,b4,b4,__ZNK7MyClass4getXEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,__Znwj,b4,b4,b4,b4,__ZNSt3__16locale2id5__getEv,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_uselocale__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,_pthread_getspecific__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_iiii = [b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b6,b6,b6,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b6,b6
  ,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b6,b6,b6,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b6,b6,b6,b6,b6,b6,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b6,b6
  ,b6,b6,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE
  ,b6,b6,b6,b6,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b6,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b6,b6,__ZNKSt3__15ctypeIcE9do_narrowEcc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE5do_isEtw,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b6,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b6,b6,__ZNKSt3__15ctypeIwE9do_narrowEwc,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,b6,b6,b6,b6,_sn_write,b6,b6,b6
  ,b6,__ZN10emscripten8internal7InvokerIP7MyClassJOiONSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE6invokeEPFS3_S4_SC_EiPNS0_11BindingTypeISB_EUt_E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__16locale5__imp9use_facetEl,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,_newlocale__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,_do_read,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b7,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7];
  var FUNCTION_TABLE_viiiiid = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11
  ,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,b11,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiid = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b12,b12,b12,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14];
  var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b15,__ZNSt3__111__stdoutbufIwE8overflowEj,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIwE9pbackfailEj,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b15,__ZNSt3__111__stdoutbufIcE8overflowEi,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIcE9pbackfailEi,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEc,b15,__ZNKSt3__15ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEw,b15,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,__ZN10emscripten8internal12operator_newI7MyClassJiNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_DpOT0_,b15,b15,b15,b15,b15,__ZN10emscripten8internal12GetterPolicyIM7MyClassKFivEE3getIS2_EEiRKS4_RKT_,b15,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRK7MyClassEE6invokeEPFS8_SB_EPS9_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,_pthread_once__wrapper,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b16,b16,b16,b16
  ,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b16,b16,b16
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16];
  var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_i = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,__ZNSt3__16__clocEv,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16locale7classicEv,b18,b18,b18,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18];
  var FUNCTION_TABLE_iiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji
  ,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,_catgets__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_viii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__114error_category23default_error_conditionEi,b20,b20,__ZNKSt3__119__iostream_category7messageEi,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,___cxa_throw__wrapper,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal12SetterPolicyIM7MyClassFviEE3setIS2_EEvRKS4_RT_i,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20
  ,b20,b20,b20,b20,b20,b20,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20];
  var FUNCTION_TABLE_v = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZL25default_terminate_handlerv,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_
  ,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22];
  var FUNCTION_TABLE_viiii = [b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b23,b23,b23
  ,b23,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,b23,b23,b23,b23,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23];

  return { _i64Subtract: _i64Subtract, _free: _free, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a14: __GLOBAL__I_a14, __GLOBAL__I_a81: __GLOBAL__I_a81, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real___GLOBAL__I_a14 = asm["__GLOBAL__I_a14"]; asm["__GLOBAL__I_a14"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a14.apply(null, arguments);
};

var real___GLOBAL__I_a81 = asm["__GLOBAL__I_a81"]; asm["__GLOBAL__I_a81"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a81.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a14 = Module["__GLOBAL__I_a14"] = asm["__GLOBAL__I_a14"];
var __GLOBAL__I_a81 = Module["__GLOBAL__I_a81"] = asm["__GLOBAL__I_a81"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



