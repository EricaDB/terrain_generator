// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Compiletime.isNumberType(field) || Compiletime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Compiletime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18584;







var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);



/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a64() } },{ func: function() { __GLOBAL__I_a158() } });





































































































































































































































































































































































































var ___dso_handle;
var ___dso_handle=___dso_handle=allocate(1, "i32*", ALLOC_STATIC);




































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,108,111,110,103,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,67,0,0,0,0,0,0,0,65,117,103,0,0,0,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,82,117,98,121,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,79,99,116,111,98,101,114,0,118,101,99,116,111,114,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,82,111,99,107,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,46,0,0,0,0,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,105,110,116,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,65,105,114,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,78,65,78,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,100,105,97,109,111,110,100,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,115,104,111,114,116,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,37,76,102,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,101,109,101,114,97,108,100,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,73,78,70,0,0,0,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,58,32,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,76,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,114,117,98,121,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,115,121,115,116,101,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,118,111,105,100,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,108,101,114,112,0,0,0,0,114,111,99,107,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,58,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,103,101,110,101,114,105,99,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,58,32,110,111,32,99,111,110,118,101,114,115,105,111,110,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,99,104,97,114,0,0,0,0,115,121,115,116,101,109,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,103,111,116,32,97,110,32,117,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,0,0,0,108,108,0,0,0,0,0,0,60,47,116,97,98,108,101,62,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,60,47,116,114,62,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,116,100,0,0,0,0,0,0,97,105,114,0,0,0,0,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,102,97,105,108,101,100,32,116,111,32,111,112,101,110,32,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,102,97,108,115,101,0,0,0,60,116,114,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,60,116,97,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,60,47,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,39,62,0,0,0,0,0,0,40,110,117,108,108,41,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,32,99,108,97,115,115,61,39,0,0,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,98,111,111,108,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,103,101,110,101,114,105,99,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,100,111,117,98,108,101,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,77,111,110,0,0,0,0,0,108,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,114,97,110,100,111,109,95,100,101,118,105,99,101,32,103,111,116,32,69,79,70,0,0,0,47,100,101,118,47,117,114,97,110,100,111,109,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,102,108,111,97,116,0,0,0,77,111,110,100,97,121,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,117,110,100,97,121,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,68,105,97,109,111,110,100,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,69,109,101,114,97,108,100,0,78,79,78,69,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,86,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,136,53,0,0,136,53,0,0,105,105,105,0,0,0,0,0,0,0,0,0,64,48,0,0,68,0,0,0,66,1,0,0,166,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,48,0,0,8,2,0,0,158,1,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,48,0,0,4,1,0,0,64,0,0,0,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,48,0,0,192,0,0,0,246,2,0,0,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,48,0,0,4,1,0,0,52,0,0,0,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,48,0,0,4,1,0,0,18,0,0,0,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,48,0,0,4,1,0,0,38,0,0,0,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,48,0,0,228,1,0,0,226,0,0,0,122,0,0,0,206,1,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,48,0,0,232,2,0,0,216,1,0,0,122,0,0,0,196,2,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,48,0,0,156,1,0,0,220,1,0,0,122,0,0,0,208,1,0,0,218,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,0,0,238,2,0,0,112,1,0,0,122,0,0,0,192,1,0,0,20,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,49,0,0,226,2,0,0,0,1,0,0,122,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,49,0,0,154,1,0,0,50,1,0,0,122,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,49,0,0,92,0,0,0,52,1,0,0,122,0,0,0,138,2,0,0,22,0,0,0,222,1,0,0,28,0,0,0,206,0,0,0,140,2,0,0,234,0,0,0,248,255,255,255,248,49,0,0,116,0,0,0,46,0,0,0,184,0,0,0,78,0,0,0,10,0,0,0,172,0,0,0,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,50,0,0,212,2,0,0,150,2,0,0,122,0,0,0,112,0,0,0,132,0,0,0,170,2,0,0,124,1,0,0,170,0,0,0,16,0,0,0,114,2,0,0,248,255,255,255,32,50,0,0,100,1,0,0,60,2,0,0,116,2,0,0,158,2,0,0,18,2,0,0,250,0,0,0,36,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,50,0,0,216,0,0,0,226,1,0,0,122,0,0,0,12,1,0,0,232,0,0,0,118,0,0,0,102,1,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,50,0,0,164,0,0,0,180,0,0,0,122,0,0,0,240,0,0,0,214,1,0,0,166,0,0,0,200,1,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,50,0,0,216,2,0,0,2,0,0,0,122,0,0,0,136,1,0,0,228,2,0,0,38,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,50,0,0,114,0,0,0,110,2,0,0,122,0,0,0,148,2,0,0,214,0,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,50,0,0,130,2,0,0,60,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,50,0,0,62,0,0,0,110,1,0,0,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,50,0,0,14,0,0,0,170,1,0,0,122,0,0,0,150,1,0,0,90,0,0,0,82,0,0,0,88,0,0,0,80,0,0,0,98,0,0,0,96,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,50,0,0,10,1,0,0,36,0,0,0,122,0,0,0,2,2,0,0,6,2,0,0,250,1,0,0,4,2,0,0,8,1,0,0,254,1,0,0,252,1,0,0,174,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,94,0,0,0,48,0,0,0,122,0,0,0,76,2,0,0,70,2,0,0,56,2,0,0,62,2,0,0,212,1,0,0,68,2,0,0,54,2,0,0,82,2,0,0,80,2,0,0,78,2,0,0,86,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,51,0,0,136,0,0,0,6,0,0,0,122,0,0,0,208,2,0,0,194,2,0,0,188,2,0,0,190,2,0,0,166,2,0,0,192,2,0,0,186,2,0,0,202,2,0,0,200,2,0,0,198,2,0,0,66,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,51,0,0,204,0,0,0,252,0,0,0,122,0,0,0,82,1,0,0,246,1,0,0,54,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,51,0,0,60,0,0,0,178,1,0,0,122,0,0,0,240,1,0,0,102,2,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,51,0,0,26,0,0,0,210,1,0,0,122,0,0,0,76,0,0,0,202,1,0,0,48,2,0,0,136,2,0,0,42,2,0,0,126,2,0,0,106,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,51,0,0,186,1,0,0,94,1,0,0,122,0,0,0,174,2,0,0,230,2,0,0,12,2,0,0,22,1,0,0,44,0,0,0,16,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,51,0,0,186,1,0,0,40,0,0,0,122,0,0,0,2,1,0,0,110,0,0,0,238,0,0,0,34,2,0,0,62,1,0,0,98,1,0,0,204,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,51,0,0,186,1,0,0,30,1,0,0,122,0,0,0,248,1,0,0,172,1,0,0,100,2,0,0,162,0,0,0,128,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,51,0,0,186,1,0,0,74,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,51,0,0,152,0,0,0,142,1,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,186,1,0,0,220,0,0,0,122,0,0,0,116,1,0,0,190,0,0,0,74,1,0,0,222,2,0,0,194,0,0,0,22,2,0,0,232,1,0,0,56,0,0,0,124,0,0,0,120,2,0,0,38,1,0,0,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,52,0,0,244,2,0,0,84,0,0,0,122,0,0,0,156,0,0,0,126,1,0,0,88,1,0,0,112,2,0,0,144,0,0,0,92,1,0,0,160,1,0,0,152,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,52,0,0,20,1,0,0,132,1,0,0,36,2,0,0,30,2,0,0,70,1,0,0,86,2,0,0,182,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,52,0,0,20,1,0,0,64,2,0,0,18,1,0,0,72,0,0,0,70,1,0,0,86,2,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,52,0,0,20,1,0,0,142,2,0,0,146,1,0,0,30,2,0,0,70,1,0,0,86,2,0,0,92,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,52,0,0,186,1,0,0,228,0,0,0,122,0,0,0,248,1,0,0,172,1,0,0,100,2,0,0,162,0,0,0,128,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,52,0,0,186,1,0,0,162,1,0,0,122,0,0,0,248,1,0,0,172,1,0,0,100,2,0,0,162,0,0,0,128,1,0,0,108,1,0,0,236,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,52,0,0,78,1,0,0,176,2,0,0,198,0,0,0,134,1,0,0,6,1,0,0,28,2,0,0,234,1,0,0,196,1,0,0,104,2,0,0,154,0,0,0,138,0,0,0,130,0,0,0,240,2,0,0,224,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,52,0,0,20,0,0,0,68,1,0,0,230,1,0,0,160,2,0,0,156,2,0,0,242,1,0,0,14,1,0,0,218,1,0,0,84,1,0,0,32,0,0,0,58,0,0,0,178,2,0,0,72,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,224,52,0,0,108,0,0,0,96,2,0,0,252,255,255,255,252,255,255,255,224,52,0,0,120,1,0,0,76,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,248,52,0,0,132,2,0,0,180,2,0,0,252,255,255,255,252,255,255,255,248,52,0,0,48,1,0,0,24,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,16,53,0,0,236,0,0,0,248,2,0,0,248,255,255,255,248,255,255,255,16,53,0,0,188,1,0,0,172,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,40,53,0,0,46,1,0,0,52,2,0,0,248,255,255,255,248,255,255,255,40,53,0,0,104,1,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,53,0,0,40,2,0,0,190,1,0,0,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,53,0,0,74,2,0,0,154,2,0,0,186,0,0,0,134,1,0,0,6,1,0,0,28,2,0,0,40,1,0,0,196,1,0,0,104,2,0,0,154,0,0,0,138,0,0,0,130,0,0,0,72,2,0,0,184,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,53,0,0,242,0,0,0,184,1,0,0,56,1,0,0,160,2,0,0,156,2,0,0,242,1,0,0,236,1,0,0,218,1,0,0,84,1,0,0,32,0,0,0,58,0,0,0,178,2,0,0,206,2,0,0,182,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,53,0,0,144,2,0,0,118,1,0,0,122,0,0,0,96,1,0,0,122,2,0,0,122,1,0,0,224,2,0,0,54,0,0,0,32,1,0,0,28,1,0,0,218,0,0,0,90,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,54,0,0,44,1,0,0,146,0,0,0,122,0,0,0,98,2,0,0,12,0,0,0,44,2,0,0,146,2,0,0,164,2,0,0,244,0,0,0,108,2,0,0,180,1,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,54,0,0,152,2,0,0,64,1,0,0,122,0,0,0,100,0,0,0,58,1,0,0,70,0,0,0,140,1,0,0,234,2,0,0,182,1,0,0,14,2,0,0,204,1,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,54,0,0,212,0,0,0,168,1,0,0,122,0,0,0,50,2,0,0,84,2,0,0,24,1,0,0,118,2,0,0,254,0,0,0,202,0,0,0,148,1,0,0,94,2,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,54,0,0,74,2,0,0,34,0,0,0,26,2,0,0,134,1,0,0,6,1,0,0,28,2,0,0,234,1,0,0,196,1,0,0,104,2,0,0,106,1,0,0,198,1,0,0,176,0,0,0,240,2,0,0,224,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,54,0,0,242,0,0,0,134,2,0,0,244,1,0,0,160,2,0,0,156,2,0,0,242,1,0,0,14,1,0,0,218,1,0,0,84,1,0,0,102,0,0,0,128,0,0,0,30,0,0,0,72,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,55,0,0,220,2,0,0,230,0,0,0,168,0,0,0,130,1,0,0,46,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,55,0,0,220,2,0,0,10,2,0,0,168,0,0,0,130,1,0,0,208,0,0,0,66,0,0,0,124,2,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,55,0,0,220,2,0,0,80,1,0,0,168,0,0,0,130,1,0,0,208,0,0,0,104,0,0,0,246,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,55,0,0,220,2,0,0,214,2,0,0,168,0,0,0,130,1,0,0,208,0,0,0,32,2,0,0,16,1,0,0,144,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,55,0,0,128,2,0,0,42,1,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,54,105,110,118,97,108,105,100,95,97,114,103,117,109,101,110,116,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,52,95,95,103,101,110,101,114,105,99,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,78,83,116,51,95,95,49,50,51,95,95,115,121,115,116,101,109,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,57,71,101,110,101,114,97,116,111,114,0,0,0,0,0,0,49,51,67,97,118,101,71,101,110,101,114,97,116,111,114,0,96,31,0,0,40,32,0,0,96,31,0,0,48,32,0,0,96,31,0,0,56,32,0,0,96,31,0,0,64,32,0,0,96,31,0,0,8,16,0,0,96,31,0,0,72,32,0,0,96,31,0,0,80,32,0,0,96,31,0,0,88,32,0,0,96,31,0,0,96,32,0,0,96,31,0,0,104,32,0,0,96,31,0,0,112,32,0,0,96,31,0,0,120,32,0,0,96,31,0,0,128,32,0,0,232,31,0,0,136,32,0,0,232,31,0,0,152,32,0,0,184,31,0,0,168,32,0,0,56,48,0,0,0,0,0,0,184,31,0,0,184,32,0,0,56,48,0,0,0,0,0,0,184,31,0,0,200,32,0,0,160,48,0,0,0,0,0,0,184,31,0,0,224,32,0,0,56,48,0,0,0,0,0,0,184,31,0,0,248,32,0,0,160,48,0,0,0,0,0,0,184,31,0,0,16,33,0,0,160,48,0,0,0,0,0,0,184,31,0,0,40,33,0,0,56,48,0,0,0,0,0,0,232,31,0,0,56,33,0,0,136,31,0,0,80,33,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,208,53,0,0,0,0,0,0,136,31,0,0,152,33,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,216,53,0,0,0,0,0,0,136,31,0,0,224,33,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,224,53,0,0,0,0,0,0,136,31,0,0,40,34,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,232,53,0,0,0,0,0,0,184,31,0,0,112,34,0,0,168,50,0,0,0,0,0,0,184,31,0,0,160,34,0,0,168,50,0,0,0,0,0,0,136,31,0,0,208,34,0,0,0,0,0,0,1,0,0,0,200,52,0,0,0,0,0,0,136,31,0,0,232,34,0,0,0,0,0,0,1,0,0,0,200,52,0,0,0,0,0,0,136,31,0,0,0,35,0,0,0,0,0,0,1,0,0,0,208,52,0,0,0,0,0,0,136,31,0,0,24,35,0,0,0,0,0,0,1,0,0,0,208,52,0,0,0,0,0,0,136,31,0,0,48,35,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,128,54,0,0,0,8,0,0,136,31,0,0,120,35,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,128,54,0,0,0,8,0,0,136,31,0,0,192,35,0,0,0,0,0,0,3,0,0,0,224,51,0,0,2,0,0,0,176,48,0,0,2,0,0,0,104,52,0,0,0,8,0,0,136,31,0,0,8,36,0,0,0,0,0,0,3,0,0,0,224,51,0,0,2,0,0,0,176,48,0,0,2,0,0,0,112,52,0,0,0,8,0,0,184,31,0,0,80,36,0,0,224,51,0,0,0,0,0,0,184,31,0,0,104,36,0,0,224,51,0,0,0,0,0,0,136,31,0,0,128,36,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,216,52,0,0,2,0,0,0,136,31,0,0,152,36,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,216,52,0,0,2,0,0,0,232,31,0,0,176,36,0,0,184,31,0,0,200,36,0,0,64,53,0,0,0,0,0,0,136,31,0,0,232,36,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,88,49,0,0,0,0,0,0,136,31,0,0,48,37,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,112,49,0,0,0,0,0,0,136,31,0,0,120,37,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,136,49,0,0,0,0,0,0,136,31,0,0,192,37,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,160,49,0,0,0,0,0,0,184,31,0,0,8,38,0,0,224,51,0,0,0,0,0,0,184,31,0,0,32,38,0,0,224,51,0,0,0,0,0,0,136,31,0,0,56,38,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,80,53,0,0,2,0,0,0,136,31,0,0,96,38,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,80,53,0,0,2,0,0,0,136,31,0,0,136,38,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,80,53,0,0,2,0,0,0,136,31,0,0,176,38,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,80,53,0,0,2,0,0,0,184,31,0,0,216,38,0,0,192,52,0,0,0,0,0,0,184,31,0,0,240,38,0,0,224,51,0,0,0,0,0,0,136,31,0,0,8,39,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,120,54,0,0,2,0,0,0,136,31,0,0,32,39,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,120,54,0,0,2,0,0,0,184,31,0,0,56,39,0,0,160,53,0,0,0,0,0,0,184,31,0,0,96,39,0,0,160,53,0,0,0,0,0,0,232,31,0,0,136,39,0,0,232,31,0,0,176,39,0,0,232,31,0,0,216,39,0,0,184,31,0,0,0,40,0,0,160,53,0,0,0,0,0,0,184,31,0,0,32,40,0,0,192,51,0,0,0,0,0,0,184,31,0,0,72,40,0,0,192,51,0,0,0,0,0,0,232,31,0,0,112,40,0,0,232,31,0,0,168,40,0,0,232,31,0,0,224,40,0,0,232,31,0,0,0,41,0,0,232,31,0,0,32,41,0,0,232,31,0,0,64,41,0,0,232,31,0,0,96,41,0,0,136,31,0,0,120,41,0,0,0,0,0,0,1,0,0,0,56,49,0,0,3,244,255,255,136,31,0,0,168,41,0,0,0,0,0,0,1,0,0,0,72,49,0,0,3,244,255,255,136,31,0,0,216,41,0,0,0,0,0,0,1,0,0,0,56,49,0,0,3,244,255,255,136,31,0,0,8,42,0,0,0,0,0,0,1,0,0,0,72,49,0,0,3,244,255,255,184,31,0,0,56,42,0,0,112,48,0,0,0,0,0,0,232,31,0,0,80,42,0,0,136,31,0,0,104,42,0,0,0,0,0,0,1,0,0,0,96,52,0,0,0,0,0,0,136,31,0,0,168,42,0,0,0,0,0,0,1,0,0,0,96,52,0,0,0,0,0,0,136,31,0,0,232,42,0,0,0,0,0,0,1,0,0,0,96,52,0,0,0,0,0,0,184,31,0,0,40,43,0,0,184,52,0,0,0,0,0,0,184,31,0,0,64,43,0,0,168,52,0,0,0,0,0,0,184,31,0,0,96,43,0,0,176,52,0,0,0,0,0,0,232,31,0,0,128,43,0,0,232,31,0,0,160,43,0,0,232,31,0,0,192,43,0,0,232,31,0,0,224,43,0,0,136,31,0,0,0,44,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,112,54,0,0,2,0,0,0,136,31,0,0,32,44,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,112,54,0,0,2,0,0,0,136,31,0,0,64,44,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,112,54,0,0,2,0,0,0,136,31,0,0,96,44,0,0,0,0,0,0,2,0,0,0,224,51,0,0,2,0,0,0,112,54,0,0,2,0,0,0,232,31,0,0,128,44,0,0,232,31,0,0,152,44,0,0,232,31,0,0,176,44,0,0,184,31,0,0,200,44,0,0,168,52,0,0,0,0,0,0,184,31,0,0,224,44,0,0,176,52,0,0,0,0,0,0,232,31,0,0,248,44,0,0,232,31,0,0,16,45,0,0,232,31,0,0,48,45,0,0,232,31,0,0,80,45,0,0,232,31,0,0,112,45,0,0,232,31,0,0,144,45,0,0,232,31,0,0,176,45,0,0,232,31,0,0,208,45,0,0,232,31,0,0,240,45,0,0,232,31,0,0,16,46,0,0,232,31,0,0,48,46,0,0,232,31,0,0,80,46,0,0,232,31,0,0,112,46,0,0,184,31,0,0,144,46,0,0,112,55,0,0,0,0,0,0,184,31,0,0,184,46,0,0,96,55,0,0,0,0,0,0,184,31,0,0,224,46,0,0,96,55,0,0,0,0,0,0,184,31,0,0,8,47,0,0,80,55,0,0,0,0,0,0,184,31,0,0,48,47,0,0,112,55,0,0,0,0,0,0,184,31,0,0,88,47,0,0,112,55,0,0,0,0,0,0,184,31,0,0,128,47,0,0,48,48,0,0,0,0,0,0,232,31,0,0,168,47,0,0,184,31,0,0,184,47,0,0,128,55,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
function runPostSets() {


}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return tempRet0 = 0,0;
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return tempRet0 = 0,thrown;
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return tempRet0 = typeArray[i],thrown;
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }

  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x+y > 4294967295,(x+y)>>>0;
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
  
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  
  
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  
  
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  
  var awaitingDependencies={};function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[((curr)>>0)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);function _llvm_ctlz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = HEAP8[(((ctlz_i8)+(x >>> 24))>>0)];
      if ((ret|0) < 8) return ret|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)];
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)];
      if ((ret|0) < 8) return (ret + 16)|0;
      return (HEAP8[(((ctlz_i8)+(x&0xff))>>0)] + 24)|0;
    }

  
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var HEAP, shift;
      if (charSize === 2) {
          HEAP = HEAPU16;
          shift = 1;
      } else if (charSize === 4) {
          HEAP = HEAPU32;
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_mutex_lock() {}

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }


  function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[((ptr)>>0)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i64=_memset;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }


  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  var _llvm_memset_p0i8_i32=_memset;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _abort() {
      Module['abort']();
    }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[((dest)>>0)]=HEAP8[((src)>>0)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }


  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  var _fabs=Math_abs;

  function _llvm_va_copy(ppdest, ppsrc) {
      // copy the list start
      HEAP8[((ppdest)>>0)]=HEAP8[((ppsrc)>>0)];HEAP8[(((ppdest)+(1))>>0)]=HEAP8[(((ppsrc)+(1))>>0)];HEAP8[(((ppdest)+(2))>>0)]=HEAP8[(((ppsrc)+(2))>>0)];HEAP8[(((ppdest)+(3))>>0)]=HEAP8[(((ppsrc)+(3))>>0)];
      
      // copy the list's current offset (will be advanced with each call to va_arg)
      HEAP8[(((ppdest+4))>>0)]=HEAP8[(((ppsrc+4))>>0)];HEAP8[((((ppdest+4))+(1))>>0)]=HEAP8[((((ppsrc+4))+(1))>>0)];HEAP8[((((ppdest+4))+(2))>>0)]=HEAP8[((((ppsrc+4))+(2))>>0)];HEAP8[((((ppdest+4))+(3))>>0)]=HEAP8[((((ppsrc+4))+(3))>>0)];
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }






  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
embind_init_charCodes()
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
init_emval();
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,___cxx_global_array_dtor73,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNSt12out_of_rangeD0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNSt16invalid_argumentD0Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNKSt3__123__system_error_category23default_error_conditionEi,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZL25default_terminate_handlerv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,___cxx_global_array_dtor48,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,___cxx_global_array_dtor45,0,__ZNKSt3__123__system_error_category7messageEi,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,___cxx_global_array_dtor112,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,_do_read,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__123__system_error_category4nameEv,0,__ZNSt3__114error_categoryD2Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZN13CaveGenerator8printMapEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__124__generic_error_categoryD0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__Z4lerpNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__124__generic_error_category4nameEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,_sn_write,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNSt3__123__system_error_categoryD0Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZN13CaveGenerator7makeMapEv,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,___cxx_global_array_dtor97,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__124__generic_error_category7messageEi,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0];

// EMSCRIPTEN_START_FUNCS

function __ZN13CaveGeneratorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=8216;
 var $2=(($this+4)|0);
 var $3=(($this+12)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $5=HEAP32[(($2)>>2)];
 var $6=($storemerge|0)<($5|0);
 var $7=HEAP32[(($3)>>2)];
 if($6){label=3;break;}else{label=13;break;}
 case 3: 
 var $9=(($7+($storemerge<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=12;break;}else{label=4;break;}
 case 4: 
 var $13=((($10)-(28)+24)|0);
 var $14=$13;
 var $15=$13;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=11;break;}else{label=5;break;}
 case 5: 
 var $18=(($10+((($16)*(28))&-1))|0);
 var $20=$18;label=6;break;
 case 6: 
 var $20;
 var $21=((($20)-(28))|0);
 var $22=((($20)-(28)+16)|0);
 var $23=$22;
 var $24=HEAP8[(($23)>>0)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=8;break;}else{label=7;break;}
 case 7: 
 var $28=((($20)-(28)+24)|0);
 var $29=HEAP32[(($28)>>2)];
 _free($29);
 label=8;break;
 case 8: 
 var $30=$21;
 var $31=HEAP8[(($30)>>0)];
 var $32=$31&1;
 var $33=(($32<<24)>>24)==0;
 if($33){label=10;break;}else{label=9;break;}
 case 9: 
 var $35=((($20)-(28)+8)|0);
 var $36=HEAP32[(($35)>>2)];
 _free($36);
 label=10;break;
 case 10: 
 var $37=($21|0)==($10|0);
 if($37){label=11;break;}else{var $20=$21;label=6;break;}
 case 11: 
 _free($14);
 label=12;break;
 case 12: 
 var $39=((($storemerge)+(1))|0);
 var $storemerge=$39;label=2;break;
 case 13: 
 var $41=($7|0)==0;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=$7;
 _free($43);
 label=15;break;
 case 15: 
 var $45=(($this+148)|0);
 var $46=$45;
 var $47=HEAP8[(($46)>>0)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=17;break;}else{label=16;break;}
 case 16: 
 var $51=(($this+156)|0);
 var $52=HEAP32[(($51)>>2)];
 _free($52);
 label=17;break;
 case 17: 
 var $53=(($this+132)|0);
 var $54=$53;
 var $55=HEAP8[(($54)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=19;break;}else{label=18;break;}
 case 18: 
 var $59=(($this+140)|0);
 var $60=HEAP32[(($59)>>2)];
 _free($60);
 label=19;break;
 case 19: 
 var $61=(($this+120)|0);
 var $62=$61;
 var $63=HEAP8[(($62)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=21;break;}else{label=20;break;}
 case 20: 
 var $67=(($this+128)|0);
 var $68=HEAP32[(($67)>>2)];
 _free($68);
 label=21;break;
 case 21: 
 var $69=(($this+104)|0);
 var $70=$69;
 var $71=HEAP8[(($70)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=23;break;}else{label=22;break;}
 case 22: 
 var $75=(($this+112)|0);
 var $76=HEAP32[(($75)>>2)];
 _free($76);
 label=23;break;
 case 23: 
 var $77=(($this+92)|0);
 var $78=$77;
 var $79=HEAP8[(($78)>>0)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=25;break;}else{label=24;break;}
 case 24: 
 var $83=(($this+100)|0);
 var $84=HEAP32[(($83)>>2)];
 _free($84);
 label=25;break;
 case 25: 
 var $85=(($this+76)|0);
 var $86=$85;
 var $87=HEAP8[(($86)>>0)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=27;break;}else{label=26;break;}
 case 26: 
 var $91=(($this+84)|0);
 var $92=HEAP32[(($91)>>2)];
 _free($92);
 label=27;break;
 case 27: 
 var $93=(($this+64)|0);
 var $94=$93;
 var $95=HEAP8[(($94)>>0)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){label=29;break;}else{label=28;break;}
 case 28: 
 var $99=(($this+72)|0);
 var $100=HEAP32[(($99)>>2)];
 _free($100);
 label=29;break;
 case 29: 
 var $101=(($this+48)|0);
 var $102=$101;
 var $103=HEAP8[(($102)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=31;break;}else{label=30;break;}
 case 30: 
 var $107=(($this+56)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=31;break;
 case 31: 
 var $109=(($this+36)|0);
 var $110=$109;
 var $111=HEAP8[(($110)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=33;break;}else{label=32;break;}
 case 32: 
 var $115=(($this+44)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=33;break;
 case 33: 
 var $117=(($this+20)|0);
 var $118=$117;
 var $119=HEAP8[(($118)>>0)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){label=35;break;}else{label=34;break;}
 case 34: 
 var $123=(($this+28)|0);
 var $124=HEAP32[(($123)>>2)];
 _free($124);
 label=35;break;
 case 35: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$row,$col,$cavern_len,$cavern_width,$dir,$mt,$max_rec){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+20080)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mt; $mt=STACKTOP;STACKTOP = (STACKTOP + 2500)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);(_memcpy($mt, tempParam, 2500)|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $len=sp;
 var $width=(sp)+(8);
 var $direction=(sp)+(16);
 var $new_cave_chance=(sp)+(24);
 var $angle=(sp)+(32);
 var $cave_width=(sp)+(40);
 var $1=(sp)+(48);
 var $2=(sp)+(2552);
 var $3=(sp)+(5056);
 var $4=(sp)+(7560);
 var $5=(sp)+(10064);
 var $6=(sp)+(12568);
 var $7=(sp)+(15072);
 var $8=(sp)+(17576);
 var $9=(($this+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(((($10|0))/(2))&-1);
 var $12=(($len)|0);
 HEAP32[(($12)>>2)]=1;
 var $13=(($len+4)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=(((($10|0))/(5))&-1);
 var $15=(($width)|0);
 HEAP32[(($15)>>2)]=1;
 var $16=(($width+4)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=(($direction)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=(($direction+4)|0);
 HEAP32[(($18)>>2)]=3;
 var $19=(($new_cave_chance)|0);
 HEAP32[(($19)>>2)]=1;
 var $20=(($new_cave_chance+4)|0);
 HEAP32[(($20)>>2)]=50;
 var $21=(($angle)|0);
 HEAP32[(($21)>>2)]=-1;
 var $22=(($angle+4)|0);
 HEAP32[(($22)>>2)]=1;
 var $23=(($cave_width)|0);
 HEAP32[(($23)>>2)]=1;
 var $24=(($cave_width+4)|0);
 HEAP32[(($24)>>2)]=$cavern_width;
 if(($dir|0)==2){ label=2;break;}else if(($dir|0)==0){ label=37;break;}else if(($dir|0)==1){ label=72;break;}else{label=107;break;}
 case 2: 
 var $26=((($row)-($cavern_len))|0);
 var $27=(($this+12)|0);
 var $28=(($this+20)|0);
 var $29=(($this+32)|0);
 var $30=(($this+36)|0);
 var $31=$1;
 var $32=$mt;
 var $33=$30;
 var $34=$30;
 var $35=(($34+1)|0);
 var $36=(($this+44)|0);
 var $37=(($this+40)|0);
 var $38=$28;
 var $39=$28;
 var $40=(($39+1)|0);
 var $41=(($this+28)|0);
 var $42=(($this+24)|0);
 var $43=$2;
 var $storemerge9=$row;var $_0=$max_rec;label=3;break;
 case 3: 
 var $_0;
 var $storemerge9;
 var $45=($storemerge9|0)>($26|0);
 if($45){label=4;break;}else{label=142;break;}
 case 4: 
 var $47=($storemerge9|0)>0;
 if($47){var $storemerge10=$col;var $_1=$_0;label=5;break;}else{var $_5=$_0;label=36;break;}
 case 5: 
 var $_1;
 var $storemerge10;
 var $49=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $50=((($49)+($col))|0);
 var $51=($storemerge10|0)<($50|0);
 if($51){label=6;break;}else{var $storemerge11=$col;var $_3=$_1;label=20;break;}
 case 6: 
 var $53=HEAP32[(($9)>>2)];
 var $54=((($53)-(1))|0);
 var $55=($storemerge10|0)<($54|0);
 var $56=($storemerge10|0)>0;
 var $or_cond=$55&$56;
 if($or_cond){label=7;break;}else{var $_2=$_1;var $j_0=$storemerge10;label=19;break;}
 case 7: 
 var $58=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $59=((($storemerge10)+($58))|0);
 var $60=HEAP32[(($27)>>2)];
 var $61=(($60+($storemerge9<<2))|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+((($59)*(28))&-1))|0);
 var $64=(($63)|0);
 var $65=($63|0)==($28|0);
 if($65){label=12;break;}else{label=8;break;}
 case 8: 
 var $67=HEAP8[(($38)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=10;break;}else{label=9;break;}
 case 9: 
 var $71=HEAP32[(($41)>>2)];
 var $72=HEAP32[(($42)>>2)];
 var $77=$72;var $76=$71;label=11;break;
 case 10: 
 var $74=($67&255);
 var $75=$74>>>1;
 var $77=$75;var $76=$40;label=11;break;
 case 11: 
 var $76;
 var $77;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($64,$76,$77);
 label=12;break;
 case 12: 
 var $78=HEAP32[(($29)>>2)];
 var $79=(($62+((($59)*(28))&-1)+12)|0);
 HEAP32[(($79)>>2)]=$78;
 var $80=(($62+((($59)*(28))&-1)+16)|0);
 var $81=($80|0)==($30|0);
 if($81){label=17;break;}else{label=13;break;}
 case 13: 
 var $83=HEAP8[(($33)>>0)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=15;break;}else{label=14;break;}
 case 14: 
 var $87=HEAP32[(($36)>>2)];
 var $88=HEAP32[(($37)>>2)];
 var $93=$88;var $92=$87;label=16;break;
 case 15: 
 var $90=($83&255);
 var $91=$90>>>1;
 var $93=$91;var $92=$35;label=16;break;
 case 16: 
 var $92;
 var $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($80,$92,$93);
 label=17;break;
 case 17: 
 var $94=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $95=($94|0)==1;
 var $96=($_1|0)>0;
 var $or_cond47=$95&$96;
 if($or_cond47){label=18;break;}else{var $_2=$_1;var $j_0=$59;label=19;break;}
 case 18: 
 var $98=((($_1)-(1))|0);
 var $99=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $100=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $101=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($31, $32, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$storemerge9,$59,$99,$100,$101,$1,$98);
 var $_2=$98;var $j_0=$59;label=19;break;
 case 19: 
 var $j_0;
 var $_2;
 var $103=((($j_0)+(1))|0);
 var $storemerge10=$103;var $_1=$_2;label=5;break;
 case 20: 
 var $_3;
 var $storemerge11;
 var $105=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $106=((($col)-($105))|0);
 var $107=($storemerge11|0)>($106|0);
 if($107){label=21;break;}else{var $_5=$_3;label=36;break;}
 case 21: 
 var $109=($storemerge11|0)>0;
 if($109){label=22;break;}else{var $_4=$_3;var $j1_0=$storemerge11;label=35;break;}
 case 22: 
 var $111=HEAP32[(($9)>>2)];
 var $112=((($111)-(1))|0);
 var $113=($storemerge11|0)<($112|0);
 if($113){label=23;break;}else{var $_4=$_3;var $j1_0=$storemerge11;label=35;break;}
 case 23: 
 var $115=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $116=((($storemerge11)+($115))|0);
 var $117=HEAP32[(($27)>>2)];
 var $118=(($117+($storemerge9<<2))|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+((($116)*(28))&-1))|0);
 var $121=(($120)|0);
 var $122=($120|0)==($28|0);
 if($122){label=28;break;}else{label=24;break;}
 case 24: 
 var $124=HEAP8[(($38)>>0)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=26;break;}else{label=25;break;}
 case 25: 
 var $128=HEAP32[(($41)>>2)];
 var $129=HEAP32[(($42)>>2)];
 var $134=$129;var $133=$128;label=27;break;
 case 26: 
 var $131=($124&255);
 var $132=$131>>>1;
 var $134=$132;var $133=$40;label=27;break;
 case 27: 
 var $133;
 var $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($121,$133,$134);
 label=28;break;
 case 28: 
 var $135=HEAP32[(($29)>>2)];
 var $136=(($119+((($116)*(28))&-1)+12)|0);
 HEAP32[(($136)>>2)]=$135;
 var $137=(($119+((($116)*(28))&-1)+16)|0);
 var $138=($137|0)==($30|0);
 if($138){label=33;break;}else{label=29;break;}
 case 29: 
 var $140=HEAP8[(($33)>>0)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=31;break;}else{label=30;break;}
 case 30: 
 var $144=HEAP32[(($36)>>2)];
 var $145=HEAP32[(($37)>>2)];
 var $150=$145;var $149=$144;label=32;break;
 case 31: 
 var $147=($140&255);
 var $148=$147>>>1;
 var $150=$148;var $149=$35;label=32;break;
 case 32: 
 var $149;
 var $150;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($137,$149,$150);
 label=33;break;
 case 33: 
 var $151=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $152=($151|0)==1;
 var $153=($_3|0)>0;
 var $or_cond48=$152&$153;
 if($or_cond48){label=34;break;}else{var $_4=$_3;var $j1_0=$116;label=35;break;}
 case 34: 
 var $155=((($_3)-(1))|0);
 var $156=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $157=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $158=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($43, $32, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$storemerge9,$116,$156,$157,$158,$2,$155);
 var $_4=$155;var $j1_0=$116;label=35;break;
 case 35: 
 var $j1_0;
 var $_4;
 var $160=((($j1_0)-(1))|0);
 var $storemerge11=$160;var $_3=$_4;label=20;break;
 case 36: 
 var $_5;
 var $161=((($storemerge9)-(1))|0);
 var $storemerge9=$161;var $_0=$_5;label=3;break;
 case 37: 
 var $163=((($row)+($cavern_len))|0);
 var $164=(($this+4)|0);
 var $165=(($this+12)|0);
 var $166=(($this+20)|0);
 var $167=(($this+32)|0);
 var $168=(($this+36)|0);
 var $169=$3;
 var $170=$mt;
 var $171=$168;
 var $172=$168;
 var $173=(($172+1)|0);
 var $174=(($this+44)|0);
 var $175=(($this+40)|0);
 var $176=$166;
 var $177=$166;
 var $178=(($177+1)|0);
 var $179=(($this+28)|0);
 var $180=(($this+24)|0);
 var $181=$4;
 var $storemerge6=$row;var $_6=$max_rec;label=38;break;
 case 38: 
 var $_6;
 var $storemerge6;
 var $183=($storemerge6|0)<($163|0);
 if($183){label=39;break;}else{label=142;break;}
 case 39: 
 var $185=HEAP32[(($164)>>2)];
 var $186=((($185)-(1))|0);
 var $187=($storemerge6|0)<($186|0);
 if($187){var $storemerge7=$col;var $_7=$_6;label=40;break;}else{var $_11=$_6;label=71;break;}
 case 40: 
 var $_7;
 var $storemerge7;
 var $189=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $190=((($189)+($col))|0);
 var $191=($storemerge7|0)<($190|0);
 if($191){label=41;break;}else{var $storemerge8=$col;var $_9=$_7;label=55;break;}
 case 41: 
 var $193=HEAP32[(($9)>>2)];
 var $194=((($193)-(1))|0);
 var $195=($storemerge7|0)<($194|0);
 var $196=($storemerge7|0)>0;
 var $or_cond49=$195&$196;
 if($or_cond49){label=42;break;}else{var $_8=$_7;var $j3_0=$storemerge7;label=54;break;}
 case 42: 
 var $198=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $199=((($storemerge7)+($198))|0);
 var $200=HEAP32[(($165)>>2)];
 var $201=(($200+($storemerge6<<2))|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+((($199)*(28))&-1))|0);
 var $204=(($203)|0);
 var $205=($203|0)==($166|0);
 if($205){label=47;break;}else{label=43;break;}
 case 43: 
 var $207=HEAP8[(($176)>>0)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=45;break;}else{label=44;break;}
 case 44: 
 var $211=HEAP32[(($179)>>2)];
 var $212=HEAP32[(($180)>>2)];
 var $217=$212;var $216=$211;label=46;break;
 case 45: 
 var $214=($207&255);
 var $215=$214>>>1;
 var $217=$215;var $216=$178;label=46;break;
 case 46: 
 var $216;
 var $217;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($204,$216,$217);
 label=47;break;
 case 47: 
 var $218=HEAP32[(($167)>>2)];
 var $219=(($202+((($199)*(28))&-1)+12)|0);
 HEAP32[(($219)>>2)]=$218;
 var $220=(($202+((($199)*(28))&-1)+16)|0);
 var $221=($220|0)==($168|0);
 if($221){label=52;break;}else{label=48;break;}
 case 48: 
 var $223=HEAP8[(($171)>>0)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=50;break;}else{label=49;break;}
 case 49: 
 var $227=HEAP32[(($174)>>2)];
 var $228=HEAP32[(($175)>>2)];
 var $233=$228;var $232=$227;label=51;break;
 case 50: 
 var $230=($223&255);
 var $231=$230>>>1;
 var $233=$231;var $232=$173;label=51;break;
 case 51: 
 var $232;
 var $233;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($220,$232,$233);
 label=52;break;
 case 52: 
 var $234=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $235=($234|0)==1;
 var $236=($_7|0)>0;
 var $or_cond50=$235&$236;
 if($or_cond50){label=53;break;}else{var $_8=$_7;var $j3_0=$199;label=54;break;}
 case 53: 
 var $238=((($_7)-(1))|0);
 var $239=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $240=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $241=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($169, $170, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$storemerge6,$199,$239,$240,$241,$3,$238);
 var $_8=$238;var $j3_0=$199;label=54;break;
 case 54: 
 var $j3_0;
 var $_8;
 var $243=((($j3_0)+(1))|0);
 var $storemerge7=$243;var $_7=$_8;label=40;break;
 case 55: 
 var $_9;
 var $storemerge8;
 var $245=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $246=((($col)-($245))|0);
 var $247=($storemerge8|0)>($246|0);
 if($247){label=56;break;}else{var $_11=$_9;label=71;break;}
 case 56: 
 var $249=($storemerge8|0)>0;
 if($249){label=57;break;}else{var $_10=$_9;var $j4_0=$storemerge8;label=70;break;}
 case 57: 
 var $251=HEAP32[(($9)>>2)];
 var $252=((($251)-(1))|0);
 var $253=($storemerge8|0)<($252|0);
 if($253){label=58;break;}else{var $_10=$_9;var $j4_0=$storemerge8;label=70;break;}
 case 58: 
 var $255=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $256=((($storemerge8)+($255))|0);
 var $257=HEAP32[(($165)>>2)];
 var $258=(($257+($storemerge6<<2))|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+((($256)*(28))&-1))|0);
 var $261=(($260)|0);
 var $262=($260|0)==($166|0);
 if($262){label=63;break;}else{label=59;break;}
 case 59: 
 var $264=HEAP8[(($176)>>0)];
 var $265=$264&1;
 var $266=(($265<<24)>>24)==0;
 if($266){label=61;break;}else{label=60;break;}
 case 60: 
 var $268=HEAP32[(($179)>>2)];
 var $269=HEAP32[(($180)>>2)];
 var $274=$269;var $273=$268;label=62;break;
 case 61: 
 var $271=($264&255);
 var $272=$271>>>1;
 var $274=$272;var $273=$178;label=62;break;
 case 62: 
 var $273;
 var $274;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($261,$273,$274);
 label=63;break;
 case 63: 
 var $275=HEAP32[(($167)>>2)];
 var $276=(($259+((($256)*(28))&-1)+12)|0);
 HEAP32[(($276)>>2)]=$275;
 var $277=(($259+((($256)*(28))&-1)+16)|0);
 var $278=($277|0)==($168|0);
 if($278){label=68;break;}else{label=64;break;}
 case 64: 
 var $280=HEAP8[(($171)>>0)];
 var $281=$280&1;
 var $282=(($281<<24)>>24)==0;
 if($282){label=66;break;}else{label=65;break;}
 case 65: 
 var $284=HEAP32[(($174)>>2)];
 var $285=HEAP32[(($175)>>2)];
 var $290=$285;var $289=$284;label=67;break;
 case 66: 
 var $287=($280&255);
 var $288=$287>>>1;
 var $290=$288;var $289=$173;label=67;break;
 case 67: 
 var $289;
 var $290;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($277,$289,$290);
 label=68;break;
 case 68: 
 var $291=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $292=($291|0)==1;
 var $293=($_9|0)>0;
 var $or_cond51=$292&$293;
 if($or_cond51){label=69;break;}else{var $_10=$_9;var $j4_0=$256;label=70;break;}
 case 69: 
 var $295=((($_9)-(1))|0);
 var $296=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $297=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $298=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($181, $170, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$storemerge6,$256,$296,$297,$298,$4,$295);
 var $_10=$295;var $j4_0=$256;label=70;break;
 case 70: 
 var $j4_0;
 var $_10;
 var $300=((($j4_0)-(1))|0);
 var $storemerge8=$300;var $_9=$_10;label=55;break;
 case 71: 
 var $_11;
 var $301=((($storemerge6)+(1))|0);
 var $storemerge6=$301;var $_6=$_11;label=38;break;
 case 72: 
 var $303=((($col)+($cavern_len))|0);
 var $304=(($this+4)|0);
 var $305=(($this+12)|0);
 var $306=(($this+20)|0);
 var $307=(($this+32)|0);
 var $308=(($this+36)|0);
 var $309=$5;
 var $310=$mt;
 var $311=$308;
 var $312=$308;
 var $313=(($312+1)|0);
 var $314=(($this+44)|0);
 var $315=(($this+40)|0);
 var $316=$306;
 var $317=$306;
 var $318=(($317+1)|0);
 var $319=(($this+28)|0);
 var $320=(($this+24)|0);
 var $321=$6;
 var $storemerge3=$col;var $_12=$max_rec;label=73;break;
 case 73: 
 var $_12;
 var $storemerge3;
 var $323=($storemerge3|0)<($303|0);
 if($323){label=74;break;}else{label=142;break;}
 case 74: 
 var $325=HEAP32[(($9)>>2)];
 var $326=((($325)-(1))|0);
 var $327=($storemerge3|0)<($326|0);
 if($327){var $storemerge4=$row;var $_13=$_12;label=75;break;}else{var $_17=$_12;label=106;break;}
 case 75: 
 var $_13;
 var $storemerge4;
 var $329=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $330=((($329)+($row))|0);
 var $331=($storemerge4|0)<($330|0);
 if($331){label=76;break;}else{var $storemerge5=$row;var $_15=$_13;label=90;break;}
 case 76: 
 var $333=HEAP32[(($304)>>2)];
 var $334=((($333)-(1))|0);
 var $335=($storemerge4|0)<($334|0);
 var $336=($storemerge4|0)>0;
 var $or_cond52=$335&$336;
 if($or_cond52){label=77;break;}else{var $_14=$_13;var $j6_0=$storemerge4;label=89;break;}
 case 77: 
 var $338=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $339=((($storemerge4)+($338))|0);
 var $340=HEAP32[(($305)>>2)];
 var $341=(($340+($339<<2))|0);
 var $342=HEAP32[(($341)>>2)];
 var $343=(($342+((($storemerge3)*(28))&-1))|0);
 var $344=(($343)|0);
 var $345=($343|0)==($306|0);
 if($345){label=82;break;}else{label=78;break;}
 case 78: 
 var $347=HEAP8[(($316)>>0)];
 var $348=$347&1;
 var $349=(($348<<24)>>24)==0;
 if($349){label=80;break;}else{label=79;break;}
 case 79: 
 var $351=HEAP32[(($319)>>2)];
 var $352=HEAP32[(($320)>>2)];
 var $357=$352;var $356=$351;label=81;break;
 case 80: 
 var $354=($347&255);
 var $355=$354>>>1;
 var $357=$355;var $356=$318;label=81;break;
 case 81: 
 var $356;
 var $357;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($344,$356,$357);
 label=82;break;
 case 82: 
 var $358=HEAP32[(($307)>>2)];
 var $359=(($342+((($storemerge3)*(28))&-1)+12)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=(($342+((($storemerge3)*(28))&-1)+16)|0);
 var $361=($360|0)==($308|0);
 if($361){label=87;break;}else{label=83;break;}
 case 83: 
 var $363=HEAP8[(($311)>>0)];
 var $364=$363&1;
 var $365=(($364<<24)>>24)==0;
 if($365){label=85;break;}else{label=84;break;}
 case 84: 
 var $367=HEAP32[(($314)>>2)];
 var $368=HEAP32[(($315)>>2)];
 var $373=$368;var $372=$367;label=86;break;
 case 85: 
 var $370=($363&255);
 var $371=$370>>>1;
 var $373=$371;var $372=$313;label=86;break;
 case 86: 
 var $372;
 var $373;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($360,$372,$373);
 label=87;break;
 case 87: 
 var $374=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $375=($374|0)==1;
 var $376=($_13|0)>0;
 var $or_cond53=$375&$376;
 if($or_cond53){label=88;break;}else{var $_14=$_13;var $j6_0=$339;label=89;break;}
 case 88: 
 var $378=((($_13)-(1))|0);
 var $379=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $380=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $381=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($309, $310, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$339,$storemerge3,$379,$380,$381,$5,$378);
 var $_14=$378;var $j6_0=$339;label=89;break;
 case 89: 
 var $j6_0;
 var $_14;
 var $383=((($j6_0)+(1))|0);
 var $storemerge4=$383;var $_13=$_14;label=75;break;
 case 90: 
 var $_15;
 var $storemerge5;
 var $385=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $386=((($row)-($385))|0);
 var $387=($storemerge5|0)>($386|0);
 if($387){label=91;break;}else{var $_17=$_15;label=106;break;}
 case 91: 
 var $389=($storemerge5|0)>0;
 if($389){label=92;break;}else{var $_16=$_15;var $j7_0=$storemerge5;label=105;break;}
 case 92: 
 var $391=HEAP32[(($304)>>2)];
 var $392=((($391)-(1))|0);
 var $393=($storemerge5|0)<($392|0);
 if($393){label=93;break;}else{var $_16=$_15;var $j7_0=$storemerge5;label=105;break;}
 case 93: 
 var $395=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $396=((($storemerge5)+($395))|0);
 var $397=HEAP32[(($305)>>2)];
 var $398=(($397+($396<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=(($399+((($storemerge3)*(28))&-1))|0);
 var $401=(($400)|0);
 var $402=($400|0)==($306|0);
 if($402){label=98;break;}else{label=94;break;}
 case 94: 
 var $404=HEAP8[(($316)>>0)];
 var $405=$404&1;
 var $406=(($405<<24)>>24)==0;
 if($406){label=96;break;}else{label=95;break;}
 case 95: 
 var $408=HEAP32[(($319)>>2)];
 var $409=HEAP32[(($320)>>2)];
 var $414=$409;var $413=$408;label=97;break;
 case 96: 
 var $411=($404&255);
 var $412=$411>>>1;
 var $414=$412;var $413=$318;label=97;break;
 case 97: 
 var $413;
 var $414;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($401,$413,$414);
 label=98;break;
 case 98: 
 var $415=HEAP32[(($307)>>2)];
 var $416=(($399+((($storemerge3)*(28))&-1)+12)|0);
 HEAP32[(($416)>>2)]=$415;
 var $417=(($399+((($storemerge3)*(28))&-1)+16)|0);
 var $418=($417|0)==($308|0);
 if($418){label=103;break;}else{label=99;break;}
 case 99: 
 var $420=HEAP8[(($311)>>0)];
 var $421=$420&1;
 var $422=(($421<<24)>>24)==0;
 if($422){label=101;break;}else{label=100;break;}
 case 100: 
 var $424=HEAP32[(($314)>>2)];
 var $425=HEAP32[(($315)>>2)];
 var $430=$425;var $429=$424;label=102;break;
 case 101: 
 var $427=($420&255);
 var $428=$427>>>1;
 var $430=$428;var $429=$313;label=102;break;
 case 102: 
 var $429;
 var $430;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($417,$429,$430);
 label=103;break;
 case 103: 
 var $431=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $432=($431|0)==1;
 var $433=($_15|0)>0;
 var $or_cond54=$432&$433;
 if($or_cond54){label=104;break;}else{var $_16=$_15;var $j7_0=$396;label=105;break;}
 case 104: 
 var $435=((($_15)-(1))|0);
 var $436=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $437=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $438=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($321, $310, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$396,$storemerge3,$436,$437,$438,$6,$435);
 var $_16=$435;var $j7_0=$396;label=105;break;
 case 105: 
 var $j7_0;
 var $_16;
 var $440=((($j7_0)-(1))|0);
 var $storemerge5=$440;var $_15=$_16;label=90;break;
 case 106: 
 var $_17;
 var $441=((($storemerge3)+(1))|0);
 var $storemerge3=$441;var $_12=$_17;label=73;break;
 case 107: 
 var $443=((($col)-($cavern_len))|0);
 var $444=(($this+4)|0);
 var $445=(($this+12)|0);
 var $446=(($this+20)|0);
 var $447=(($this+32)|0);
 var $448=(($this+36)|0);
 var $449=$7;
 var $450=$mt;
 var $451=$448;
 var $452=$448;
 var $453=(($452+1)|0);
 var $454=(($this+44)|0);
 var $455=(($this+40)|0);
 var $456=$446;
 var $457=$446;
 var $458=(($457+1)|0);
 var $459=(($this+28)|0);
 var $460=(($this+24)|0);
 var $461=$8;
 var $storemerge=$col;var $_18=$max_rec;label=108;break;
 case 108: 
 var $_18;
 var $storemerge;
 var $463=($storemerge|0)>($443|0);
 if($463){label=109;break;}else{label=142;break;}
 case 109: 
 var $465=($storemerge|0)>0;
 if($465){var $storemerge1=$row;var $_19=$_18;label=110;break;}else{var $_23=$_18;label=141;break;}
 case 110: 
 var $_19;
 var $storemerge1;
 var $467=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $468=((($467)+($row))|0);
 var $469=($storemerge1|0)<($468|0);
 if($469){label=111;break;}else{var $storemerge2=$row;var $_21=$_19;label=125;break;}
 case 111: 
 var $471=HEAP32[(($444)>>2)];
 var $472=((($471)-(1))|0);
 var $473=($storemerge1|0)<($472|0);
 var $474=($storemerge1|0)>0;
 var $or_cond55=$473&$474;
 if($or_cond55){label=112;break;}else{var $j9_0=$storemerge1;var $_20=$_19;label=124;break;}
 case 112: 
 var $476=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $477=((($storemerge1)+($476))|0);
 var $478=HEAP32[(($445)>>2)];
 var $479=(($478+($477<<2))|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=(($480+((($storemerge)*(28))&-1))|0);
 var $482=(($481)|0);
 var $483=($481|0)==($446|0);
 if($483){label=117;break;}else{label=113;break;}
 case 113: 
 var $485=HEAP8[(($456)>>0)];
 var $486=$485&1;
 var $487=(($486<<24)>>24)==0;
 if($487){label=115;break;}else{label=114;break;}
 case 114: 
 var $489=HEAP32[(($459)>>2)];
 var $490=HEAP32[(($460)>>2)];
 var $495=$490;var $494=$489;label=116;break;
 case 115: 
 var $492=($485&255);
 var $493=$492>>>1;
 var $495=$493;var $494=$458;label=116;break;
 case 116: 
 var $494;
 var $495;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($482,$494,$495);
 label=117;break;
 case 117: 
 var $496=HEAP32[(($447)>>2)];
 var $497=(($480+((($storemerge)*(28))&-1)+12)|0);
 HEAP32[(($497)>>2)]=$496;
 var $498=(($480+((($storemerge)*(28))&-1)+16)|0);
 var $499=($498|0)==($448|0);
 if($499){label=122;break;}else{label=118;break;}
 case 118: 
 var $501=HEAP8[(($451)>>0)];
 var $502=$501&1;
 var $503=(($502<<24)>>24)==0;
 if($503){label=120;break;}else{label=119;break;}
 case 119: 
 var $505=HEAP32[(($454)>>2)];
 var $506=HEAP32[(($455)>>2)];
 var $511=$506;var $510=$505;label=121;break;
 case 120: 
 var $508=($501&255);
 var $509=$508>>>1;
 var $511=$509;var $510=$453;label=121;break;
 case 121: 
 var $510;
 var $511;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($498,$510,$511);
 label=122;break;
 case 122: 
 var $512=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $513=($512|0)==1;
 var $514=($_19|0)>0;
 var $or_cond56=$513&$514;
 if($or_cond56){label=123;break;}else{var $j9_0=$477;var $_20=$_19;label=124;break;}
 case 123: 
 var $516=((($_19)-(1))|0);
 var $517=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $518=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $519=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($449, $450, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$477,$storemerge,$517,$518,$519,$7,$516);
 var $j9_0=$477;var $_20=$516;label=124;break;
 case 124: 
 var $_20;
 var $j9_0;
 var $521=((($j9_0)+(1))|0);
 var $storemerge1=$521;var $_19=$_20;label=110;break;
 case 125: 
 var $_21;
 var $storemerge2;
 var $523=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($cave_width,$mt);
 var $524=((($row)-($523))|0);
 var $525=($storemerge2|0)>($524|0);
 if($525){label=126;break;}else{var $_23=$_21;label=141;break;}
 case 126: 
 var $527=($storemerge2|0)>0;
 if($527){label=127;break;}else{var $j10_0=$storemerge2;var $_22=$_21;label=140;break;}
 case 127: 
 var $529=HEAP32[(($444)>>2)];
 var $530=((($529)-(1))|0);
 var $531=($storemerge2|0)<($530|0);
 if($531){label=128;break;}else{var $j10_0=$storemerge2;var $_22=$_21;label=140;break;}
 case 128: 
 var $533=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($angle,$mt);
 var $534=((($storemerge2)+($533))|0);
 var $535=HEAP32[(($445)>>2)];
 var $536=(($535+($534<<2))|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=(($537+((($storemerge)*(28))&-1))|0);
 var $539=(($538)|0);
 var $540=($538|0)==($446|0);
 if($540){label=133;break;}else{label=129;break;}
 case 129: 
 var $542=HEAP8[(($456)>>0)];
 var $543=$542&1;
 var $544=(($543<<24)>>24)==0;
 if($544){label=131;break;}else{label=130;break;}
 case 130: 
 var $546=HEAP32[(($459)>>2)];
 var $547=HEAP32[(($460)>>2)];
 var $552=$547;var $551=$546;label=132;break;
 case 131: 
 var $549=($542&255);
 var $550=$549>>>1;
 var $552=$550;var $551=$458;label=132;break;
 case 132: 
 var $551;
 var $552;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($539,$551,$552);
 label=133;break;
 case 133: 
 var $553=HEAP32[(($447)>>2)];
 var $554=(($537+((($storemerge)*(28))&-1)+12)|0);
 HEAP32[(($554)>>2)]=$553;
 var $555=(($537+((($storemerge)*(28))&-1)+16)|0);
 var $556=($555|0)==($448|0);
 if($556){label=138;break;}else{label=134;break;}
 case 134: 
 var $558=HEAP8[(($451)>>0)];
 var $559=$558&1;
 var $560=(($559<<24)>>24)==0;
 if($560){label=136;break;}else{label=135;break;}
 case 135: 
 var $562=HEAP32[(($454)>>2)];
 var $563=HEAP32[(($455)>>2)];
 var $568=$563;var $567=$562;label=137;break;
 case 136: 
 var $565=($558&255);
 var $566=$565>>>1;
 var $568=$566;var $567=$453;label=137;break;
 case 137: 
 var $567;
 var $568;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($555,$567,$568);
 label=138;break;
 case 138: 
 var $569=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($new_cave_chance,$mt);
 var $570=($569|0)==1;
 var $571=($_21|0)>0;
 var $or_cond57=$570&$571;
 if($or_cond57){label=139;break;}else{var $j10_0=$534;var $_22=$_21;label=140;break;}
 case 139: 
 var $573=((($_21)-(1))|0);
 var $574=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $575=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $576=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 assert(2500 % 1 === 0);(_memcpy($461, $450, 2500)|0);
 __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$534,$storemerge,$574,$575,$576,$8,$573);
 var $j10_0=$534;var $_22=$573;label=140;break;
 case 140: 
 var $_22;
 var $j10_0;
 var $578=((($j10_0)-(1))|0);
 var $storemerge2=$578;var $_21=$_22;label=125;break;
 case 141: 
 var $_23;
 var $579=((($storemerge)-(1))|0);
 var $storemerge=$579;var $_18=$_23;label=108;break;
 case 142: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($this,$__g){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($2)-($4))|0);
 var $6=((($5)+(1))|0);
 var $7=($2|0)==($4|0);
 if($7){var $_0=$2;label=9;break;}else{label=2;break;}
 case 2: 
 var $9=($6|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=(($__g+2496)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=((($11)+(1))|0);
 var $13=(((($12>>>0))%(624))&-1);
 var $14=(($__g+($11<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&-2147483648;
 var $17=(($__g+($13<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&2147483646;
 var $20=$16|$19;
 var $21=((($11)+(397))|0);
 var $22=(((($21>>>0))%(624))&-1);
 var $23=(($__g+($22<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$20>>>1;
 var $26=$24^$25;
 var $27=$18&1;
 var $28=(((-$27))|0);
 var $29=$28&-1727483681;
 var $30=$26^$29;
 HEAP32[(($14)>>2)]=$30;
 var $31=HEAP32[(($10)>>2)];
 var $32=(($__g+($31<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33>>>11;
 var $35=$33^$34;
 HEAP32[(($10)>>2)]=$13;
 var $36=$35<<7;
 var $37=$36&-1658038656;
 var $38=$35^$37;
 var $39=$38<<15;
 var $40=$39&-272236544;
 var $41=$38^$40;
 var $42=$41>>>18;
 var $43=$41^$42;
 var $_0=$43;label=9;break;
 case 4: 
 var $45=_llvm_ctlz_i32($6,1);
 var $46=(((32)-($45))|0);
 var $47=((($46)-(1))|0);
 var $48=(((33)-($46))|0);
 var $49=-1>>>($48>>>0);
 var $50=$6&$49;
 var $51=($50|0)==0;
 var $_=($51?$47:$46);
 var $52=$_>>>5;
 var $53=$_&31;
 var $54=($53|0)!=0;
 var $55=($54&1);
 var $56=((($52)+($55))|0);
 var $57=(((($_>>>0))/(($56>>>0)))&-1);
 var $58=($57|0)==0;
 if($58){var $62=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $60=(((32)-($57))|0);
 var $61=-1>>>($60>>>0);
 var $62=$61;label=6;break;
 case 6: 
 var $62;
 var $63=(($__g+2496)|0);
 var $_pre=HEAP32[(($63)>>2)];
 var $65=$_pre;label=7;break;
 case 7: 
 var $65;
 var $66=((($65)+(1))|0);
 var $67=(((($66>>>0))%(624))&-1);
 var $68=(($__g+($65<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&-2147483648;
 var $71=(($__g+($67<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72&2147483646;
 var $74=$70|$73;
 var $75=((($65)+(397))|0);
 var $76=(((($75>>>0))%(624))&-1);
 var $77=(($__g+($76<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=$74>>>1;
 var $80=$78^$79;
 var $81=$72&1;
 var $82=(((-$81))|0);
 var $83=$82&-1727483681;
 var $84=$80^$83;
 HEAP32[(($68)>>2)]=$84;
 var $85=HEAP32[(($63)>>2)];
 var $86=(($__g+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$87>>>11;
 var $89=$87^$88;
 HEAP32[(($63)>>2)]=$67;
 var $90=$89<<7;
 var $91=$90&-1658038656;
 var $92=$89^$91;
 var $93=$92<<15;
 var $94=$93&-272236544;
 var $95=$92^$94;
 var $96=$95>>>18;
 var $97=$95^$96;
 var $98=$97&$62;
 var $99=($98>>>0)<($6>>>0);
 if($99){label=8;break;}else{var $65=$67;label=7;break;}
 case 8: 
 var $101=(($this)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=((($98)+($102))|0);
 var $_0=$103;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN13CaveGenerator7makeMapEv($this){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+10136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $r_i=sp;
 var $0=(sp)+(8);
 var $1=(sp)+(24);
 var $mt=(sp)+(40);
 var $start_col=(sp)+(2544);
 var $start_row=(sp)+(2552);
 var $len=(sp)+(2560);
 var $width=(sp)+(2568);
 var $direction=(sp)+(2576);
 var $2=(sp)+(2584);
 var $3=(sp)+(5088);
 var $4=(sp)+(7592);
 var $ruby_chance=(sp)+(10096);
 var $emerald_chance=(sp)+(10104);
 var $diamond_chance=(sp)+(10112);
 var $5=(sp)+(10120);
 var $6=_malloc(16);
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $17=$6;label=5;break;}
 case 2: 
 var $8=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=$8;
 FUNCTION_TABLE[$11]();
 var $12=_malloc(16);
 var $13=($12|0)==0;
 if($13){label=2;break;}else{var $17=$12;label=5;break;}
 case 4: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5208;
 ___cxa_throw($15,12352,(68));
 throw "Reached an unreachable!";
 case 5: 
 var $17;
 var $18=(($1+8)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($1)|0);
 HEAP32[(($19)>>2)]=17;
 var $20=(($1+4)|0);
 HEAP32[(($20)>>2)]=12;
 assert(12 % 1 === 0);(_memcpy($17, 4144, 12)|0);
 var $21=(($17+12)|0);
 HEAP8[(($21)>>0)]=0;
 var $22=$0;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $23=$1;
 var $24=(function() { try { __THREW__ = 0; return _open($17,0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=6;break; } else { label=82;break; }
 case 6: 
 var $25=($24|0)<0;
 if($25){label=7;break;}else{label=34;break;}
 case 7: 
 var $26=___errno_location();
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0;
 var $28=_malloc(48);
 var $29=($28|0)==0;
 if($29){label=8;break;}else{var $_lcssa_i43=$28;label=13;break;}
 case 8: 
 var $30=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=11;break;}else{label=9;break;}
 case 9: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $34=_malloc(48);
 var $35=($34|0)==0;
 if($35){label=8;break;}else{var $_lcssa_i43=$34;label=13;break;}
 case 11: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=18;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i43;
 var $40=(($0+8)|0);
 HEAP32[(($40)>>2)]=$_lcssa_i43;
 var $41=(($0)|0);
 HEAP32[(($41)>>2)]=49;
 var $42=(($0+4)|0);
 HEAP32[(($42)>>2)]=29;
 assert(29 % 1 === 0);(_memcpy($_lcssa_i43, 3624, 29)|0);
 var $43=(($_lcssa_i43+29)|0);
 HEAP8[(($43)>>0)]=0;
 var $44=HEAP8[(($23)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=15;break;}else{label=14;break;}
 case 14: 
 var $48=HEAP32[(($18)>>2)];
 var $52=$48;label=16;break;
 case 15: 
 var $50=$1;
 var $51=(($50+1)|0);
 var $52=$51;label=16;break;
 case 16: 
 var $52;
 var $53=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$52,12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=18;break; }
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $55=HEAP8[(($22)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=83;break;}else{label=20;break;}
 case 20: 
 var $59=(($0+8)|0);
 var $60=HEAP32[(($59)>>2)];
 _free($60);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=83;break;
 case 21: 
 var $61=HEAP8[(($22)>>0)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=23;break;}else{label=22;break;}
 case 22: 
 var $65=(($0+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $70=$66;label=24;break;
 case 23: 
 var $68=$0;
 var $69=(($68+1)|0);
 var $70=$69;label=24;break;
 case 24: 
 var $70;
 var $71=___cxa_allocate_exception(16);
 var $72=$71;
 var $73=HEAP8[((18472)>>0)];
 var $74=(($73<<24)>>24)==0;
 if($74){label=25;break;}else{label=27;break;}
 case 25: 
 var $76=___cxa_guard_acquire(18472);
 var $77=($76|0)==0;
 if($77){label=27;break;}else{label=26;break;}
 case 26: 
 HEAP32[((16344)>>2)]=6912;

 label=27;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($72,$27,16344,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=30;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($71,13632,(552)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $81$0 = ___cxa_find_matching_catch(); var $81$1 = tempRet0;
 ___cxa_free_exception($71);
 var $eh_lpad_body9$1=$81$1;var $eh_lpad_body9$0=$81$0;label=32;break;
 case 31: 
 var $83$0 = ___cxa_find_matching_catch(); var $83$1 = tempRet0;
 var $eh_lpad_body9$1=$83$1;var $eh_lpad_body9$0=$83$0;label=32;break;
 case 32: 
 var $eh_lpad_body9$0;
 var $eh_lpad_body9$1;
 var $84=HEAP8[(($22)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $eh_lpad_body$1=$eh_lpad_body9$1;var $eh_lpad_body$0=$eh_lpad_body9$0;label=83;break;}else{label=33;break;}
 case 33: 
 var $88=(($0+8)|0);
 var $89=HEAP32[(($88)>>2)];
 _free($89);
 var $eh_lpad_body$1=$eh_lpad_body9$1;var $eh_lpad_body$0=$eh_lpad_body9$0;label=83;break;
 case 34: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 _free($17);
 var $90=$r_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $p_0_ph3_i=$90;var $n_0_ph4_i=4;label=35;break;
 case 35: 
 var $n_0_ph4_i;
 var $p_0_ph3_i;
 label=36;break;
 case 36: 
 var $91=(function() { try { __THREW__ = 0; return _read($24,$p_0_ph3_i,$n_0_ph4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=87;break; }
 case 37: 
 if(($91|0)==0){ label=38;break;}else if(($91|0)==-1){ label=40;break;}else{label=43;break;}
 case 38: 
 (function() { try { __THREW__ = 0; return __ZNSt3__120__throw_system_errorEiPKc(61,4120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=88;break; }
 case 39: 
 throw "Reached an unreachable!";
 case 40: 
 var $94=___errno_location();
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==4;
 if($96){label=36;break;}else{label=41;break;}
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__120__throw_system_errorEiPKc($95,3288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=88;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $98=((($n_0_ph4_i)-($91))|0);
 var $99=(($p_0_ph3_i+$91)|0);
 var $100=($n_0_ph4_i|0)==($91|0);
 if($100){label=44;break;}else{var $p_0_ph3_i=$99;var $n_0_ph4_i=$98;label=35;break;}
 case 44: 
 var $102=HEAP32[(($r_i)>>2)];
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $103=(($mt)|0);
 HEAP32[(($103)>>2)]=$102;
 var $storemerge_i=1;var $105=$102;label=45;break;
 case 45: 
 var $105;
 var $storemerge_i;
 var $106=($storemerge_i>>>0)<624;
 if($106){label=46;break;}else{label=47;break;}
 case 46: 
 var $108=$105>>>30;
 var $109=$105^$108;
 var $110=(Math_imul($109,1812433253)|0);
 var $111=((($110)+($storemerge_i))|0);
 var $112=(($mt+($storemerge_i<<2))|0);
 HEAP32[(($112)>>2)]=$111;
 var $113=((($storemerge_i)+(1))|0);
 var $storemerge_i=$113;var $105=$111;label=45;break;
 case 47: 
 var $115=(($mt+2496)|0);
 HEAP32[(($115)>>2)]=0;
 var $116=(($this+8)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=((($117)-(2))|0);
 var $119=(($start_col)|0);
 HEAP32[(($119)>>2)]=1;
 var $120=(($start_col+4)|0);
 HEAP32[(($120)>>2)]=$118;
 var $121=(($this+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=((($122)-(2))|0);
 var $124=(($start_row)|0);
 HEAP32[(($124)>>2)]=1;
 var $125=(($start_row+4)|0);
 HEAP32[(($125)>>2)]=$123;
 var $126=(((($117|0))/(2))&-1);
 var $127=(($len)|0);
 HEAP32[(($127)>>2)]=1;
 var $128=(($len+4)|0);
 HEAP32[(($128)>>2)]=$126;
 var $129=(((($117|0))/(5))&-1);
 var $130=(($width)|0);
 HEAP32[(($130)>>2)]=1;
 var $131=(($width+4)|0);
 HEAP32[(($131)>>2)]=$129;
 var $132=(($direction)|0);
 HEAP32[(($132)>>2)]=0;
 var $133=(($direction+4)|0);
 HEAP32[(($133)>>2)]=3;
 var $134=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_row,$mt);
 var $135=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_col,$mt);
 var $136=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $137=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $138=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 var $139=$2;
 var $140=$mt;
 assert(2500 % 1 === 0);(_memcpy($139, $140, 2500)|0);
 (function() { try { __THREW__ = 0; return __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$134,$135,$136,$137,$138,$2,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=88;break; }
 case 48: 
 var $142=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_row,$mt);
 var $143=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_col,$mt);
 var $144=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $145=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $146=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 var $147=$3;
 assert(2500 % 1 === 0);(_memcpy($147, $140, 2500)|0);
 (function() { try { __THREW__ = 0; return __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$142,$143,$144,$145,$146,$3,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=88;break; }
 case 49: 
 var $149=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_row,$mt);
 var $150=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($start_col,$mt);
 var $151=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($len,$mt);
 var $152=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($width,$mt);
 var $153=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($direction,$mt);
 var $154=$4;
 assert(2500 % 1 === 0);(_memcpy($154, $140, 2500)|0);
 (function() { try { __THREW__ = 0; return __ZN13CaveGenerator12recursiveGenEiiiiNS_9DirectionENSt3__123mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEi($this,$149,$150,$151,$152,$153,$4,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=88;break; }
 case 50: 
 var $156=(($ruby_chance)|0);
 HEAP32[(($156)>>2)]=0;
 var $157=(($ruby_chance+4)|0);
 HEAP32[(($157)>>2)]=49;
 var $158=(($emerald_chance)|0);
 HEAP32[(($158)>>2)]=0;
 var $159=(($emerald_chance+4)|0);
 HEAP32[(($159)>>2)]=74;
 var $160=(($diamond_chance)|0);
 HEAP32[(($160)>>2)]=0;
 var $161=(($diamond_chance+4)|0);
 HEAP32[(($161)>>2)]=99;
 var $162=(($this+12)|0);
 var $163=$5;
 var $164=(($this+132)|0);
 var $165=(($this+144)|0);
 var $166=(($this+148)|0);
 var $167=$166;
 var $168=$166;
 var $169=(($168+1)|0);
 var $170=(($this+156)|0);
 var $171=(($this+152)|0);
 var $172=$164;
 var $173=$164;
 var $174=(($173+1)|0);
 var $175=(($this+140)|0);
 var $176=(($this+136)|0);
 var $177=(($this+104)|0);
 var $178=(($this+116)|0);
 var $179=(($this+120)|0);
 var $180=$179;
 var $181=$179;
 var $182=(($181+1)|0);
 var $183=(($this+128)|0);
 var $184=(($this+124)|0);
 var $185=$177;
 var $186=$177;
 var $187=(($186+1)|0);
 var $188=(($this+112)|0);
 var $189=(($this+108)|0);
 var $190=(($this+76)|0);
 var $191=(($this+88)|0);
 var $192=(($this+92)|0);
 var $193=$192;
 var $194=$192;
 var $195=(($194+1)|0);
 var $196=(($this+100)|0);
 var $197=(($this+96)|0);
 var $198=$190;
 var $199=$190;
 var $200=(($199+1)|0);
 var $201=(($this+84)|0);
 var $202=(($this+80)|0);
 var $203=(($5+8)|0);
 var $204=$5;
 var $205=(($204+1)|0);
 var $206=(($5)|0);
 var $207=(($5+4)|0);
 var $storemerge=0;label=51;break;
 case 51: 
 var $storemerge;
 var $209=HEAP32[(($121)>>2)];
 var $210=((($209)-(1))|0);
 var $211=($storemerge|0)<($210|0);
 if($211){var $storemerge1=0;label=52;break;}else{label=115;break;}
 case 52: 
 var $storemerge1;
 var $212=HEAP32[(($116)>>2)];
 var $213=((($212)-(1))|0);
 var $214=($storemerge1|0)<($213|0);
 if($214){label=53;break;}else{label=114;break;}
 case 53: 
 var $216=HEAP32[(($162)>>2)];
 var $217=(($216+($storemerge<<2))|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+((($storemerge1)*(28))&-1))|0);
 var $220=$219;
 var $221=HEAP8[(($220)>>0)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=54;break;}else{label=55;break;}
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($163)>>2)]=HEAP32[(($220)>>2)];HEAP32[((($163)+(4))>>2)]=HEAP32[((($220)+(4))>>2)];HEAP32[((($163)+(8))>>2)]=HEAP32[((($220)+(8))>>2)];
 label=68;break;
 case 55: 
 var $226=(($218+((($storemerge1)*(28))&-1)+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($218+((($storemerge1)*(28))&-1)+4)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229>>>0)>4294967279;
 if($230){label=56;break;}else{label=58;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=88;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $233=($229>>>0)<11;
 if($233){label=59;break;}else{label=60;break;}
 case 59: 
 var $235=$229<<1;
 var $236=(($235)&255);
 HEAP8[(($163)>>0)]=$236;
 var $__p_0_i_i=$205;label=67;break;
 case 60: 
 var $237=((($229)+(16))|0);
 var $238=$237&-16;
 var $239=($238|0)==0;
 var $_size_i31=($239?1:$238);
 var $240=_malloc($_size_i31);
 var $241=($240|0)==0;
 if($241){label=61;break;}else{var $_lcssa_i33=$240;label=66;break;}
 case 61: 
 var $242=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $243=($242|0)==0;
 if($243){label=64;break;}else{label=62;break;}
 case 62: 
 var $245=$242;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$245]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=85;break; }
 case 63: 
 var $246=_malloc($_size_i31);
 var $247=($246|0)==0;
 if($247){label=61;break;}else{var $_lcssa_i33=$246;label=66;break;}
 case 64: 
 var $249=___cxa_allocate_exception(4);
 var $250=$249;
 HEAP32[(($250)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($249,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=88;break; }
 case 65: 
 throw "Reached an unreachable!";
 case 66: 
 var $_lcssa_i33;
 HEAP32[(($203)>>2)]=$_lcssa_i33;
 var $251=$238|1;
 HEAP32[(($206)>>2)]=$251;
 HEAP32[(($207)>>2)]=$229;
 var $__p_0_i_i=$_lcssa_i33;label=67;break;
 case 67: 
 var $__p_0_i_i;
 assert($229 % 1 === 0);(_memcpy($__p_0_i_i, $227, $229)|0);
 var $252=(($__p_0_i_i+$229)|0);
 HEAP8[(($252)>>0)]=0;
 label=68;break;
 case 68: 
 var $253=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($5,2600);
 var $254=($253|0)==0;
 var $255=HEAP8[(($163)>>0)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=70;break;}else{label=69;break;}
 case 69: 
 var $259=HEAP32[(($203)>>2)];
 _free($259);
 label=70;break;
 case 70: 
 if($254){label=71;break;}else{label=113;break;}
 case 71: 
 var $261=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($diamond_chance,$mt);
 var $262=($261|0)==0;
 if($262){label=72;break;}else{label=91;break;}
 case 72: 
 var $264=HEAP32[(($162)>>2)];
 var $265=(($264+($storemerge<<2))|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+((($storemerge1)*(28))&-1))|0);
 var $268=(($267)|0);
 var $269=($267|0)==($164|0);
 if($269){label=77;break;}else{label=73;break;}
 case 73: 
 var $271=HEAP8[(($172)>>0)];
 var $272=$271&1;
 var $273=(($272<<24)>>24)==0;
 if($273){label=75;break;}else{label=74;break;}
 case 74: 
 var $275=HEAP32[(($175)>>2)];
 var $276=HEAP32[(($176)>>2)];
 var $281=$276;var $280=$275;label=76;break;
 case 75: 
 var $278=($271&255);
 var $279=$278>>>1;
 var $281=$279;var $280=$174;label=76;break;
 case 76: 
 var $280;
 var $281;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($268,$280,$281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=86;break; }
 case 77: 
 var $282=HEAP32[(($165)>>2)];
 var $283=(($266+((($storemerge1)*(28))&-1)+12)|0);
 HEAP32[(($283)>>2)]=$282;
 var $284=(($266+((($storemerge1)*(28))&-1)+16)|0);
 var $285=($284|0)==($166|0);
 if($285){label=113;break;}else{label=78;break;}
 case 78: 
 var $287=HEAP8[(($167)>>0)];
 var $288=$287&1;
 var $289=(($288<<24)>>24)==0;
 if($289){label=80;break;}else{label=79;break;}
 case 79: 
 var $291=HEAP32[(($170)>>2)];
 var $292=HEAP32[(($171)>>2)];
 var $297=$292;var $296=$291;label=81;break;
 case 80: 
 var $294=($287&255);
 var $295=$294>>>1;
 var $297=$295;var $296=$169;label=81;break;
 case 81: 
 var $296;
 var $297;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($284,$296,$297) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=86;break; }
 case 82: 
 var $299$0 = ___cxa_find_matching_catch(); var $299$1 = tempRet0;
 var $eh_lpad_body$1=$299$1;var $eh_lpad_body$0=$299$0;label=83;break;
 case 83: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $300=$eh_lpad_body$0;
 var $301=$eh_lpad_body$1;
 var $302=HEAP8[(($23)>>0)];
 var $303=$302&1;
 var $304=(($303<<24)>>24)==0;
 if($304){var $_0=$300;var $_047=$301;label=118;break;}else{label=84;break;}
 case 84: 
 var $306=HEAP32[(($18)>>2)];
 _free($306);
 var $_0=$300;var $_047=$301;label=118;break;
 case 85: 
 var $lpad_loopexit50$0 = ___cxa_find_matching_catch(); var $lpad_loopexit50$1 = tempRet0;
 var $lpad_phi52$1=$lpad_loopexit50$1;var $lpad_phi52$0=$lpad_loopexit50$0;label=89;break;
 case 86: 
 var $lpad_loopexit53$0 = ___cxa_find_matching_catch(); var $lpad_loopexit53$1 = tempRet0;
 var $lpad_phi52$1=$lpad_loopexit53$1;var $lpad_phi52$0=$lpad_loopexit53$0;label=89;break;
 case 87: 
 var $lpad_loopexit56$0 = ___cxa_find_matching_catch(); var $lpad_loopexit56$1 = tempRet0;
 var $lpad_phi52$1=$lpad_loopexit56$1;var $lpad_phi52$0=$lpad_loopexit56$0;label=89;break;
 case 88: 
 var $lpad_nonloopexit57$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit57$1 = tempRet0;
 var $lpad_phi52$1=$lpad_nonloopexit57$1;var $lpad_phi52$0=$lpad_nonloopexit57$0;label=89;break;
 case 89: 
 var $lpad_phi52$0;
 var $lpad_phi52$1;
 var $307=$lpad_phi52$0;
 var $308=$lpad_phi52$1;
 var $309=(function() { try { __THREW__ = 0; return _close($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$307;var $_047=$308;label=118;break; } else { label=90;break; }
 case 90: 
 var $311$0 = ___cxa_find_matching_catch(0); var $311$1 = tempRet0;
 var $312=$311$0;
 ___clang_call_terminate($312);
 throw "Reached an unreachable!";
 case 91: 
 var $314=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($emerald_chance,$mt);
 var $315=($314|0)==0;
 if($315){label=92;break;}else{label=102;break;}
 case 92: 
 var $317=HEAP32[(($162)>>2)];
 var $318=(($317+($storemerge<<2))|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($319+((($storemerge1)*(28))&-1))|0);
 var $321=(($320)|0);
 var $322=($320|0)==($177|0);
 if($322){label=97;break;}else{label=93;break;}
 case 93: 
 var $324=HEAP8[(($185)>>0)];
 var $325=$324&1;
 var $326=(($325<<24)>>24)==0;
 if($326){label=95;break;}else{label=94;break;}
 case 94: 
 var $328=HEAP32[(($188)>>2)];
 var $329=HEAP32[(($189)>>2)];
 var $334=$329;var $333=$328;label=96;break;
 case 95: 
 var $331=($324&255);
 var $332=$331>>>1;
 var $334=$332;var $333=$187;label=96;break;
 case 96: 
 var $333;
 var $334;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($321,$333,$334) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=86;break; }
 case 97: 
 var $335=HEAP32[(($178)>>2)];
 var $336=(($319+((($storemerge1)*(28))&-1)+12)|0);
 HEAP32[(($336)>>2)]=$335;
 var $337=(($319+((($storemerge1)*(28))&-1)+16)|0);
 var $338=($337|0)==($179|0);
 if($338){label=113;break;}else{label=98;break;}
 case 98: 
 var $340=HEAP8[(($180)>>0)];
 var $341=$340&1;
 var $342=(($341<<24)>>24)==0;
 if($342){label=100;break;}else{label=99;break;}
 case 99: 
 var $344=HEAP32[(($183)>>2)];
 var $345=HEAP32[(($184)>>2)];
 var $350=$345;var $349=$344;label=101;break;
 case 100: 
 var $347=($340&255);
 var $348=$347>>>1;
 var $350=$348;var $349=$182;label=101;break;
 case 101: 
 var $349;
 var $350;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($337,$349,$350) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=86;break; }
 case 102: 
 var $352=__ZNSt3__124uniform_int_distributionIiEclINS_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEEEEiRT_($ruby_chance,$mt);
 var $353=($352|0)==0;
 if($353){label=103;break;}else{label=113;break;}
 case 103: 
 var $355=HEAP32[(($162)>>2)];
 var $356=(($355+($storemerge<<2))|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=(($357+((($storemerge1)*(28))&-1))|0);
 var $359=(($358)|0);
 var $360=($358|0)==($190|0);
 if($360){label=108;break;}else{label=104;break;}
 case 104: 
 var $362=HEAP8[(($198)>>0)];
 var $363=$362&1;
 var $364=(($363<<24)>>24)==0;
 if($364){label=106;break;}else{label=105;break;}
 case 105: 
 var $366=HEAP32[(($201)>>2)];
 var $367=HEAP32[(($202)>>2)];
 var $372=$367;var $371=$366;label=107;break;
 case 106: 
 var $369=($362&255);
 var $370=$369>>>1;
 var $372=$370;var $371=$200;label=107;break;
 case 107: 
 var $371;
 var $372;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($359,$371,$372) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=86;break; }
 case 108: 
 var $373=HEAP32[(($191)>>2)];
 var $374=(($357+((($storemerge1)*(28))&-1)+12)|0);
 HEAP32[(($374)>>2)]=$373;
 var $375=(($357+((($storemerge1)*(28))&-1)+16)|0);
 var $376=($375|0)==($192|0);
 if($376){label=113;break;}else{label=109;break;}
 case 109: 
 var $378=HEAP8[(($193)>>0)];
 var $379=$378&1;
 var $380=(($379<<24)>>24)==0;
 if($380){label=111;break;}else{label=110;break;}
 case 110: 
 var $382=HEAP32[(($196)>>2)];
 var $383=HEAP32[(($197)>>2)];
 var $388=$383;var $387=$382;label=112;break;
 case 111: 
 var $385=($378&255);
 var $386=$385>>>1;
 var $388=$386;var $387=$195;label=112;break;
 case 112: 
 var $387;
 var $388;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($375,$387,$388) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=86;break; }
 case 113: 
 var $390=((($storemerge1)+(1))|0);
 var $storemerge1=$390;label=52;break;
 case 114: 
 var $392=((($storemerge)+(1))|0);
 var $storemerge=$392;label=51;break;
 case 115: 
 var $394=(function() { try { __THREW__ = 0; return _close($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=116;break; }
 case 116: 
 var $396$0 = ___cxa_find_matching_catch(0); var $396$1 = tempRet0;
 var $397=$396$0;
 ___clang_call_terminate($397);
 throw "Reached an unreachable!";
 case 117: 
 STACKTOP=sp;return;
 case 118: 
 var $_047;
 var $_0;
 var $398$0=$_0;
 var $398$1=0;
 var $399$0=$398$0;
 var $399$1=$_047;
 ___resumeException($399$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN13CaveGenerator8printMapEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i5=sp;
 var $1=(sp)+(8);
 var $__s_i_i=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(40);
 var $4=(($this+4)|0);
 var $5=(($this+8)|0);
 var $6=(($this+12)|0);
 var $7=$3;
 var $8=$3;
 var $9=(($8+1)|0);
 var $10=$2;
 var $11=$2;
 var $12=(($11+1)|0);
 var $13=(($__s_i_i5)|0);
 var $14=$1;
 var $15=(($__s_i_i5+4)|0);
 var $16=(($1)|0);
 var $17=(($3+8)|0);
 var $18=(($2+8)|0);
 var $19=(($2+4)|0);
 var $20=(($2)|0);
 var $21=(($3+4)|0);
 var $22=(($3)|0);
 var $23=(($__s_i_i)|0);
 var $24=(($__s_i_i+4)|0);
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $26=HEAP32[(($4)>>2)];
 var $27=($storemerge|0)<($26|0);
 if($27){var $storemerge1=0;label=3;break;}else{label=109;break;}
 case 3: 
 var $storemerge1;
 var $28=HEAP32[(($5)>>2)];
 var $29=($storemerge1|0)<($28|0);
 var $30=HEAP32[((17976)>>2)];
 var $31=((($30)-(12))|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 if($29){label=4;break;}else{label=75;break;}
 case 4: 
 var $_sum=((($33)+(12))|0);
 var $35=((17976+$_sum)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=4;
 var $37=HEAP32[((17976)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $_sum22=((($40)+(4))|0);
 var $41=((17976+$_sum22)|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=$43&-177;
 var $45=$44|32;
 HEAP32[(($42)>>2)]=$45;
 var $46=HEAP32[(($6)>>2)];
 var $47=(($46+($storemerge<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+((($storemerge1)*(28))&-1))|0);
 var $50=$49;
 var $51=HEAP8[(($50)>>0)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=5;break;}else{label=6;break;}
 case 5: 
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
 label=16;break;
 case 6: 
 var $56=(($48+((($storemerge1)*(28))&-1)+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($48+((($storemerge1)*(28))&-1)+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59>>>0)>4294967279;
 if($60){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 8: 
 var $63=($59>>>0)<11;
 if($63){label=9;break;}else{label=10;break;}
 case 9: 
 var $65=$59<<1;
 var $66=(($65)&255);
 HEAP8[(($7)>>0)]=$66;
 var $__p_0_i_i=$9;label=15;break;
 case 10: 
 var $67=((($59)+(16))|0);
 var $68=$67&-16;
 var $69=($68|0)==0;
 var $_size_i15=($69?1:$68);
 var $70=_malloc($_size_i15);
 var $71=($70|0)==0;
 if($71){label=11;break;}else{var $_lcssa_i17=$70;label=14;break;}
 case 11: 
 var $72=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $73=($72|0)==0;
 if($73){label=13;break;}else{label=12;break;}
 case 12: 
 var $75=$72;
 FUNCTION_TABLE[$75]();
 var $76=_malloc($_size_i15);
 var $77=($76|0)==0;
 if($77){label=11;break;}else{var $_lcssa_i17=$76;label=14;break;}
 case 13: 
 var $79=___cxa_allocate_exception(4);
 var $80=$79;
 HEAP32[(($80)>>2)]=5208;
 ___cxa_throw($79,12352,(68));
 throw "Reached an unreachable!";
 case 14: 
 var $_lcssa_i17;
 HEAP32[(($17)>>2)]=$_lcssa_i17;
 var $81=$68|1;
 HEAP32[(($22)>>2)]=$81;
 HEAP32[(($21)>>2)]=$59;
 var $__p_0_i_i=$_lcssa_i17;label=15;break;
 case 15: 
 var $__p_0_i_i;
 assert($59 % 1 === 0);(_memcpy($__p_0_i_i, $57, $59)|0);
 var $82=(($__p_0_i_i+$59)|0);
 HEAP8[(($82)>>0)]=0;
 label=16;break;
 case 16: 
 var $83=HEAP8[(($7)>>0)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=18;break;}else{label=17;break;}
 case 17: 
 var $87=HEAP32[(($21)>>2)];
 var $88=HEAP32[(($17)>>2)];
 var $93=$88;var $92=$87;label=19;break;
 case 18: 
 var $90=($83&255);
 var $91=$90>>>1;
 var $93=$9;var $92=$91;label=19;break;
 case 19: 
 var $92;
 var $93;
 var $94=($92>>>0)<4;
 var $95=($94?$92:4);
 var $96=($95>>>0)>4294967279;
 if($96){label=20;break;}else{label=22;break;}
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=68;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $99=($95>>>0)<11;
 if($99){label=23;break;}else{label=24;break;}
 case 23: 
 var $101=$95<<1;
 var $102=(($101)&255);
 HEAP8[(($10)>>0)]=$102;
 var $__p_0_i=$12;label=31;break;
 case 24: 
 var $103=((($95)+(16))|0);
 var $104=$103&-16;
 var $105=($104|0)==0;
 var $_size_i=($105?1:$104);
 var $106=_malloc($_size_i);
 var $107=($106|0)==0;
 if($107){label=25;break;}else{var $_lcssa_i=$106;label=30;break;}
 case 25: 
 var $108=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $109=($108|0)==0;
 if($109){label=28;break;}else{label=26;break;}
 case 26: 
 var $111=$108;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=67;break; }
 case 27: 
 var $112=_malloc($_size_i);
 var $113=($112|0)==0;
 if($113){label=25;break;}else{var $_lcssa_i=$112;label=30;break;}
 case 28: 
 var $115=___cxa_allocate_exception(4);
 var $116=$115;
 HEAP32[(($116)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($115,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=68;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $_lcssa_i;
 HEAP32[(($18)>>2)]=$_lcssa_i;
 var $117=$104|1;
 HEAP32[(($20)>>2)]=$117;
 HEAP32[(($19)>>2)]=$95;
 var $__p_0_i=$_lcssa_i;label=31;break;
 case 31: 
 var $__p_0_i;
 assert($95 % 1 === 0);(_memcpy($__p_0_i, $93, $95)|0);
 var $119=(($__p_0_i+$95)|0);
 HEAP8[(($119)>>0)]=0;
 var $120=HEAP8[(($10)>>0)];
 var $121=$120&1;
 var $122=(($121<<24)>>24)==0;
 if($122){label=33;break;}else{label=32;break;}
 case 32: 
 var $124=HEAP32[(($18)>>2)];
 var $125=HEAP32[(($19)>>2)];
 var $130=$125;var $129=$124;label=34;break;
 case 33: 
 var $127=($120&255);
 var $128=$127>>>1;
 var $130=$128;var $129=$12;label=34;break;
 case 34: 
 var $129;
 var $130;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[(($13)>>0)]=0;
 HEAP32[(($15)>>2)]=17976;
 var $131=HEAP32[((17976)>>2)];
 var $132=((($131)-(12))|0);
 var $133=$132;
 var $134=HEAP32[(($133)>>2)];
 var $_sum_i_i_i6=((($134)+(16))|0);
 var $135=((17976+$_sum_i_i_i6)|0);
 var $136=$135;
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)==0;
 if($138){label=35;break;}else{label=59;break;}
 case 35: 
 var $_sum1_i_i_i=((($134)+(72))|0);
 var $140=((17976+$_sum1_i_i_i)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=37;break;}else{label=36;break;}
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=52;break; }
 case 37: 
 HEAP8[(($13)>>0)]=1;
 var $146=HEAP32[((17976)>>2)];
 var $147=((($146)-(12))|0);
 var $148=$147;
 var $149=HEAP32[(($148)>>2)];
 var $_sum_i_i7=((($149)+(24))|0);
 var $150=((17976+$_sum_i_i7)|0);
 var $151=$150;
 var $152=HEAP32[(($151)>>2)];
 var $153=$152;
 var $_sum1_i_i8=((($149)+(4))|0);
 var $154=((17976+$_sum1_i_i8)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=$156&176;
 var $158=($157|0)==32;
 var $159=(($129+$130)|0);
 var $_=($158?$159:$129);
 var $160=((17976+$149)|0);
 var $161=$160;
 var $_sum2_i_i=((($149)+(76))|0);
 var $162=((17976+$_sum2_i_i)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==-1;
 var $extract_t39=(($164)&255);
 if($165){label=38;break;}else{var $_off0=$extract_t39;label=49;break;}
 case 38: 
 var $_sum26=((($149)+(28))|0);
 var $167=((17976+$_sum26)|0);
 var $168=$167;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+4)|0);
 var $171=(tempValue=HEAP32[(($170)>>2)],HEAP32[(($170)>>2)]=tempValue+1,tempValue);
 var $172=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=44;break; }
 case 39: 
 var $173=(($169+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($169+8)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=$174;
 var $178=$176;
 var $179=((($177)-($178))|0);
 var $180=$179>>2;
 var $181=($180>>>0)>($172>>>0);
 if($181){label=40;break;}else{label=41;break;}
 case 40: 
 var $182=(($176+($172<<2))|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=41;break;}else{label=43;break;}
 case 41: 
 var $185=___cxa_allocate_exception(4);
 var $186=$185;
 HEAP32[(($186)>>2)]=5240;
 (function() { try { __THREW__ = 0; return ___cxa_throw($185,12368,(520)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=44;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $187=$183;
 var $188=$183;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+28)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($187,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=44;break; }
 case 44: 
 var $194$0 = ___cxa_find_matching_catch(0); var $194$1 = tempRet0;
 var $195=(tempValue=HEAP32[(($170)>>2)],HEAP32[(($170)>>2)]=tempValue+-1,tempValue);
 var $196=($195|0)==0;
 if($196){label=45;break;}else{var $eh_lpad_body_i_i$1=$194$1;var $eh_lpad_body_i_i$0=$194$0;label=54;break;}
 case 45: 
 var $198=(($169)|0);
 var $199=$169;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+8)|0);
 var $202=HEAP32[(($201)>>2)];
 FUNCTION_TABLE[$202]($198);
 var $eh_lpad_body_i_i$1=$194$1;var $eh_lpad_body_i_i$0=$194$0;label=54;break;
 case 46: 
 var $203=(tempValue=HEAP32[(($170)>>2)],HEAP32[(($170)>>2)]=tempValue+-1,tempValue);
 var $204=($203|0)==0;
 if($204){label=47;break;}else{label=48;break;}
 case 47: 
 var $206=(($169)|0);
 var $207=$169;
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+8)|0);
 var $210=HEAP32[(($209)>>2)];
 FUNCTION_TABLE[$210]($206);
 label=48;break;
 case 48: 
 var $211=(($192<<24)>>24);
 HEAP32[(($163)>>2)]=$211;
 var $_off0=$192;label=49;break;
 case 49: 
 var $_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$153,$129,$_,$159,$161,$_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=53;break; }
 case 50: 
 var $213=HEAP32[(($16)>>2)];
 var $214=($213|0)==0;
 if($214){label=51;break;}else{label=59;break;}
 case 51: 
 var $216=HEAP32[((17976)>>2)];
 var $217=((($216)-(12))|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $220=((17976+$219)|0);
 var $221=$220;
 var $_sum4_i_i=((($219)+(16))|0);
 var $222=((17976+$_sum4_i_i)|0);
 var $223=$222;
 var $224=HEAP32[(($223)>>2)];
 var $225=$224|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($221,$225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=53;break; }
 case 52: 
 var $227$0 = ___cxa_find_matching_catch(0); var $227$1 = tempRet0;
 var $228=$227$0;
 var $_031=$228;label=55;break;
 case 53: 
 var $230$0 = ___cxa_find_matching_catch(0); var $230$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$230$1;var $eh_lpad_body_i_i$0=$230$0;label=54;break;
 case 54: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $231=$eh_lpad_body_i_i$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i5);
 var $_031=$231;label=55;break;
 case 55: 
 var $_031;
 var $233=___cxa_begin_catch($_031);
 var $234=HEAP32[((17976)>>2)];
 var $235=((($234)-(12))|0);
 var $236=$235;
 var $237=HEAP32[(($236)>>2)];
 var $_sum24=((($237)+(16))|0);
 var $238=((17976+$_sum24)|0);
 var $239=$238;
 var $240=HEAP32[(($239)>>2)];
 var $241=$240|1;
 HEAP32[(($239)>>2)]=$241;
 var $_sum25=((($237)+(20))|0);
 var $242=((17976+$_sum25)|0);
 var $243=$242;
 var $244=HEAP32[(($243)>>2)];
 var $245=$244&1;
 var $246=($245|0)==0;
 if($246){label=58;break;}else{label=56;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=60;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=70;break; }
 case 59: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i5);
 label=62;break;
 case 60: 
 var $249$0 = ___cxa_find_matching_catch(); var $249$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body$1=$249$1;var $eh_lpad_body$0=$249$0;label=71;break; } else { label=61;break; }
 case 61: 
 var $251$0 = ___cxa_find_matching_catch(0); var $251$1 = tempRet0;
 var $252=$251$0;
 ___clang_call_terminate($252);
 throw "Reached an unreachable!";
 case 62: 
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $254=HEAP8[(($10)>>0)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 if($256){label=64;break;}else{label=63;break;}
 case 63: 
 var $258=HEAP32[(($18)>>2)];
 _free($258);
 label=64;break;
 case 64: 
 var $259=HEAP8[(($7)>>0)];
 var $260=$259&1;
 var $261=(($260<<24)>>24)==0;
 if($261){label=66;break;}else{label=65;break;}
 case 65: 
 var $263=HEAP32[(($17)>>2)];
 _free($263);
 label=66;break;
 case 66: 
 var $264=((($storemerge1)+(1))|0);
 var $storemerge1=$264;label=3;break;
 case 67: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=69;break;
 case 68: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=69;break;
 case 69: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $266=$lpad_phi$0;
 var $267=$lpad_phi$1;
 var $_0=$267;var $_030=$266;label=73;break;
 case 70: 
 var $269$0 = ___cxa_find_matching_catch(); var $269$1 = tempRet0;
 var $eh_lpad_body$1=$269$1;var $eh_lpad_body$0=$269$0;label=71;break;
 case 71: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $270=$eh_lpad_body$0;
 var $271=$eh_lpad_body$1;
 var $272=HEAP8[(($10)>>0)];
 var $273=$272&1;
 var $274=(($273<<24)>>24)==0;
 if($274){var $_0=$271;var $_030=$270;label=73;break;}else{label=72;break;}
 case 72: 
 var $276=HEAP32[(($18)>>2)];
 _free($276);
 var $_0=$271;var $_030=$270;label=73;break;
 case 73: 
 var $_030;
 var $_0;
 var $277=HEAP8[(($7)>>0)];
 var $278=$277&1;
 var $279=(($278<<24)>>24)==0;
 if($279){label=110;break;}else{label=74;break;}
 case 74: 
 var $281=HEAP32[(($17)>>2)];
 _free($281);
 label=110;break;
 case 75: 
 var $_sum19=((($33)+(28))|0);
 var $283=((17976+$_sum19)|0);
 var $284=$283;
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285+4)|0);
 var $287=(tempValue=HEAP32[(($286)>>2)],HEAP32[(($286)>>2)]=tempValue+1,tempValue);
 var $288=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=81;break; }
 case 76: 
 var $289=(($285+12)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=(($285+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=$290;
 var $294=$292;
 var $295=((($293)-($294))|0);
 var $296=$295>>2;
 var $297=($296>>>0)>($288>>>0);
 if($297){label=77;break;}else{label=78;break;}
 case 77: 
 var $298=(($292+($288<<2))|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=($299|0)==0;
 if($300){label=78;break;}else{label=80;break;}
 case 78: 
 var $301=___cxa_allocate_exception(4);
 var $302=$301;
 HEAP32[(($302)>>2)]=5240;
 (function() { try { __THREW__ = 0; return ___cxa_throw($301,12368,(520)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=82;break; }
 case 79: 
 throw "Reached an unreachable!";
 case 80: 
 var $303=$299;
 var $304=$299;
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305+28)|0);
 var $307=HEAP32[(($306)>>2)];
 var $308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$307]($303,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=81;break; }
 case 81: 
 var $lpad_loopexit34$0 = ___cxa_find_matching_catch(); var $lpad_loopexit34$1 = tempRet0;
 var $lpad_phi36$1=$lpad_loopexit34$1;var $lpad_phi36$0=$lpad_loopexit34$0;label=83;break;
 case 82: 
 var $lpad_nonloopexit35$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit35$1 = tempRet0;
 var $lpad_phi36$1=$lpad_nonloopexit35$1;var $lpad_phi36$0=$lpad_nonloopexit35$0;label=83;break;
 case 83: 
 var $lpad_phi36$0;
 var $lpad_phi36$1;
 var $310=(tempValue=HEAP32[(($286)>>2)],HEAP32[(($286)>>2)]=tempValue+-1,tempValue);
 var $311=($310|0)==0;
 if($311){label=84;break;}else{label=85;break;}
 case 84: 
 var $313=(($285)|0);
 var $314=$285;
 var $315=HEAP32[(($314)>>2)];
 var $316=(($315+8)|0);
 var $317=HEAP32[(($316)>>2)];
 FUNCTION_TABLE[$317]($313);
 label=85;break;
 case 85: 
 ___resumeException($lpad_phi36$0)
 case 86: 
 var $318=(tempValue=HEAP32[(($286)>>2)],HEAP32[(($286)>>2)]=tempValue+-1,tempValue);
 var $319=($318|0)==0;
 if($319){label=87;break;}else{label=88;break;}
 case 87: 
 var $321=(($285)|0);
 var $322=$285;
 var $323=HEAP32[(($322)>>2)];
 var $324=(($323+8)|0);
 var $325=HEAP32[(($324)>>2)];
 FUNCTION_TABLE[$325]($321);
 label=88;break;
 case 88: 
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;

 HEAP8[(($23)>>0)]=0;
 HEAP32[(($24)>>2)]=17976;
 var $326=HEAP32[((17976)>>2)];
 var $327=((($326)-(12))|0);
 var $328=$327;
 var $329=HEAP32[(($328)>>2)];
 var $_sum_i4_i=((($329)+(16))|0);
 var $330=((17976+$_sum_i4_i)|0);
 var $331=$330;
 var $332=HEAP32[(($331)>>2)];
 var $333=($332|0)==0;
 if($333){label=89;break;}else{label=104;break;}
 case 89: 
 var $_sum1_i_i=((($329)+(72))|0);
 var $335=((17976+$_sum1_i_i)|0);
 var $336=$335;
 var $337=HEAP32[(($336)>>2)];
 var $338=($337|0)==0;
 if($338){label=91;break;}else{label=90;break;}
 case 90: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($337) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=98;break; }
 case 91: 
 HEAP8[(($23)>>0)]=1;
 var $341=HEAP32[((17976)>>2)];
 var $342=((($341)-(12))|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $_sum_i_i_i=((($344)+(24))|0);
 var $345=((17976+$_sum_i_i_i)|0);
 var $346=$345;
 var $347=HEAP32[(($346)>>2)];
 var $348=$347;
 var $349=($347|0)==0;
 if($349){var $366=$344;label=97;break;}else{label=92;break;}
 case 92: 
 var $351=(($347+24)|0);
 var $352=$351;
 var $353=HEAP32[(($352)>>2)];
 var $354=(($347+28)|0);
 var $355=$354;
 var $356=HEAP32[(($355)>>2)];
 var $357=($353|0)==($356|0);
 if($357){label=94;break;}else{label=93;break;}
 case 93: 
 var $358=(($353+1)|0);
 HEAP32[(($352)>>2)]=$358;
 HEAP8[(($353)>>0)]=$308;
 label=104;break;
 case 94: 
 var $359=$347;
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+52)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=($308&255);
 var $364=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$362]($348,$363) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=99;break; }
 case 95: 
 var $365=($364|0)==-1;
 if($365){label=96;break;}else{label=104;break;}
 case 96: 
 var $_pre_i_i=HEAP32[((17976)>>2)];
 var $_phi_trans_insert=((($_pre_i_i)-(12))|0);
 var $_phi_trans_insert37=$_phi_trans_insert;
 var $_pre=HEAP32[(($_phi_trans_insert37)>>2)];
 var $366=$_pre;label=97;break;
 case 97: 
 var $366;
 var $367=((17976+$366)|0);
 var $368=$367;
 var $_sum_i_i=((($366)+(16))|0);
 var $369=((17976+$_sum_i_i)|0);
 var $370=$369;
 var $371=HEAP32[(($370)>>2)];
 var $372=$371|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($368,$372) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=99;break; }
 case 98: 
 var $374$0 = ___cxa_find_matching_catch(0); var $374$1 = tempRet0;
 var $375=$374$0;
 var $_0_i_i=$375;label=100;break;
 case 99: 
 var $377$0 = ___cxa_find_matching_catch(0); var $377$1 = tempRet0;
 var $378=$377$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i);
 var $_0_i_i=$378;label=100;break;
 case 100: 
 var $_0_i_i;
 var $380=___cxa_begin_catch($_0_i_i);
 var $381=HEAP32[((17976)>>2)];
 var $382=((($381)-(12))|0);
 var $383=$382;
 var $384=HEAP32[(($383)>>2)];
 var $_sum20=((($384)+(16))|0);
 var $385=((17976+$_sum20)|0);
 var $386=$385;
 var $387=HEAP32[(($386)>>2)];
 var $388=$387|1;
 HEAP32[(($386)>>2)]=$388;
 var $_sum21=((($384)+(20))|0);
 var $389=((17976+$_sum21)|0);
 var $390=$389;
 var $391=HEAP32[(($390)>>2)];
 var $392=$391&1;
 var $393=($392|0)==0;
 if($393){label=103;break;}else{label=101;break;}
 case 101: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=105;break; }
 case 102: 
 throw "Reached an unreachable!";
 case 103: 
 ___cxa_end_catch();
 label=108;break;
 case 104: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i);
 label=108;break;
 case 105: 
 var $396$0 = ___cxa_find_matching_catch(); var $396$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=107;break; }
 case 106: 
 ___resumeException($396$0)
 case 107: 
 var $399$0 = ___cxa_find_matching_catch(0); var $399$1 = tempRet0;
 var $400=$399$0;
 ___clang_call_terminate($400);
 throw "Reached an unreachable!";
 case 108: 
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(17976);
 var $402=((($storemerge)+(1))|0);
 var $storemerge=$402;label=2;break;
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $404$0=$_030;
 var $404$1=0;
 var $405$0=$404$0;
 var $405$1=$_0;
 ___resumeException($405$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($agg_result,$tag,$content){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $classMap=(sp)+(40);
 var $5=(sp)+(56);
 var $6=(sp)+(72);
 var $7=(sp)+(88);
 var $8=(sp)+(104);
 var $9=(sp)+(120);
 var $10=(sp)+(136);
 var $11=(sp)+(152);
 var $12=(sp)+(168);
 var $13=(sp)+(184);
 var $14=(sp)+(200);
 var $15=(sp)+(216);
 var $16=(($classMap+4)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=(($classMap+8)|0);
 HEAP32[(($17)>>2)]=0;
 var $18=(($classMap+4)|0);
 var $19=$18;
 var $20=(($classMap)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=(($5)|0);
 HEAP8[(($21)>>0)]=64;
 var $22=_strlen(2600);
 var $23=(($5+4)|0);
 var $24=($22>>>0)>4294967279;
 if($24){label=2;break;}else{label=4;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=153;break; }
 case 3: 
 throw "Reached an unreachable!";
 case 4: 
 var $27=($22>>>0)<11;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 
 var $29=$22<<1;
 var $30=(($29)&255);
 var $31=$23;
 HEAP8[(($31)>>0)]=$30;
 var $32=$23;
 var $33=(($32+1)|0);
 var $__p_0_i=$33;label=13;break;
 case 6: 
 var $34=((($22)+(16))|0);
 var $35=$34&-16;
 var $36=($35|0)==0;
 var $_size_i=($36?1:$35);
 var $37=_malloc($_size_i);
 var $38=($37|0)==0;
 if($38){label=7;break;}else{var $_lcssa_i=$37;label=12;break;}
 case 7: 
 var $39=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $40=($39|0)==0;
 if($40){label=10;break;}else{label=8;break;}
 case 8: 
 var $42=$39;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=152;break; }
 case 9: 
 var $43=_malloc($_size_i);
 var $44=($43|0)==0;
 if($44){label=7;break;}else{var $_lcssa_i=$43;label=12;break;}
 case 10: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=153;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $_lcssa_i;
 var $48=(($5+12)|0);
 HEAP32[(($48)>>2)]=$_lcssa_i;
 var $49=$35|1;
 var $50=(($23)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=(($5+8)|0);
 HEAP32[(($51)>>2)]=$22;
 var $__p_0_i=$_lcssa_i;label=13;break;
 case 13: 
 var $__p_0_i;
 assert($22 % 1 === 0);(_memcpy($__p_0_i, 2600, $22)|0);
 var $53=(($__p_0_i+$22)|0);
 HEAP8[(($53)>>0)]=0;
 var $54=(($classMap)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($4,$54,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=156;break; }
 case 14: 
 var $55=$23;
 var $56=HEAP8[(($55)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=(($5+12)|0);
 var $61=HEAP32[(($60)>>2)];
 _free($61);
 label=16;break;
 case 16: 
 var $62=(($6)|0);
 HEAP8[(($62)>>0)]=32;
 var $63=_strlen(3616);
 var $64=(($6+4)|0);
 var $65=($63>>>0)>4294967279;
 if($65){label=17;break;}else{label=19;break;}
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=153;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $68=($63>>>0)<11;
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=$63<<1;
 var $71=(($70)&255);
 var $72=$64;
 HEAP8[(($72)>>0)]=$71;
 var $73=$64;
 var $74=(($73+1)|0);
 var $__p_0_i15=$74;label=28;break;
 case 21: 
 var $75=((($63)+(16))|0);
 var $76=$75&-16;
 var $77=($76|0)==0;
 var $_size_i20=($77?1:$76);
 var $78=_malloc($_size_i20);
 var $79=($78|0)==0;
 if($79){label=22;break;}else{var $_lcssa_i22=$78;label=27;break;}
 case 22: 
 var $80=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $81=($80|0)==0;
 if($81){label=25;break;}else{label=23;break;}
 case 23: 
 var $83=$80;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=151;break; }
 case 24: 
 var $84=_malloc($_size_i20);
 var $85=($84|0)==0;
 if($85){label=22;break;}else{var $_lcssa_i22=$84;label=27;break;}
 case 25: 
 var $87=___cxa_allocate_exception(4);
 var $88=$87;
 HEAP32[(($88)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($87,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=153;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 var $_lcssa_i22;
 var $89=(($6+12)|0);
 HEAP32[(($89)>>2)]=$_lcssa_i22;
 var $90=$76|1;
 var $91=(($64)|0);
 HEAP32[(($91)>>2)]=$90;
 var $92=(($6+8)|0);
 HEAP32[(($92)>>2)]=$63;
 var $__p_0_i15=$_lcssa_i22;label=28;break;
 case 28: 
 var $__p_0_i15;
 assert($63 % 1 === 0);(_memcpy($__p_0_i15, 3616, $63)|0);
 var $94=(($__p_0_i15+$63)|0);
 HEAP8[(($94)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($3,$54,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=158;break; }
 case 29: 
 var $95=$64;
 var $96=HEAP8[(($95)>>0)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=31;break;}else{label=30;break;}
 case 30: 
 var $100=(($6+12)|0);
 var $101=HEAP32[(($100)>>2)];
 _free($101);
 label=31;break;
 case 31: 
 var $102=(($7)|0);
 HEAP8[(($102)>>0)]=114;
 var $103=_strlen(2184);
 var $104=(($7+4)|0);
 var $105=($103>>>0)>4294967279;
 if($105){label=32;break;}else{label=34;break;}
 case 32: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=153;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $108=($103>>>0)<11;
 if($108){label=35;break;}else{label=36;break;}
 case 35: 
 var $110=$103<<1;
 var $111=(($110)&255);
 var $112=$104;
 HEAP8[(($112)>>0)]=$111;
 var $113=$104;
 var $114=(($113+1)|0);
 var $__p_0_i30=$114;label=43;break;
 case 36: 
 var $115=((($103)+(16))|0);
 var $116=$115&-16;
 var $117=($116|0)==0;
 var $_size_i34=($117?1:$116);
 var $118=_malloc($_size_i34);
 var $119=($118|0)==0;
 if($119){label=37;break;}else{var $_lcssa_i36=$118;label=42;break;}
 case 37: 
 var $120=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $121=($120|0)==0;
 if($121){label=40;break;}else{label=38;break;}
 case 38: 
 var $123=$120;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=150;break; }
 case 39: 
 var $124=_malloc($_size_i34);
 var $125=($124|0)==0;
 if($125){label=37;break;}else{var $_lcssa_i36=$124;label=42;break;}
 case 40: 
 var $127=___cxa_allocate_exception(4);
 var $128=$127;
 HEAP32[(($128)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($127,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=153;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $_lcssa_i36;
 var $129=(($7+12)|0);
 HEAP32[(($129)>>2)]=$_lcssa_i36;
 var $130=$116|1;
 var $131=(($104)|0);
 HEAP32[(($131)>>2)]=$130;
 var $132=(($7+8)|0);
 HEAP32[(($132)>>2)]=$103;
 var $__p_0_i30=$_lcssa_i36;label=43;break;
 case 43: 
 var $__p_0_i30;
 assert($103 % 1 === 0);(_memcpy($__p_0_i30, 2184, $103)|0);
 var $134=(($__p_0_i30+$103)|0);
 HEAP8[(($134)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($2,$54,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=160;break; }
 case 44: 
 var $135=$104;
 var $136=HEAP8[(($135)>>0)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=46;break;}else{label=45;break;}
 case 45: 
 var $140=(($7+12)|0);
 var $141=HEAP32[(($140)>>2)];
 _free($141);
 label=46;break;
 case 46: 
 var $142=(($8)|0);
 HEAP8[(($142)>>0)]=101;
 var $143=_strlen(1928);
 var $144=(($8+4)|0);
 var $145=($143>>>0)>4294967279;
 if($145){label=47;break;}else{label=49;break;}
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=153;break; }
 case 48: 
 throw "Reached an unreachable!";
 case 49: 
 var $148=($143>>>0)<11;
 if($148){label=50;break;}else{label=51;break;}
 case 50: 
 var $150=$143<<1;
 var $151=(($150)&255);
 var $152=$144;
 HEAP8[(($152)>>0)]=$151;
 var $153=$144;
 var $154=(($153+1)|0);
 var $__p_0_i46=$154;label=58;break;
 case 51: 
 var $155=((($143)+(16))|0);
 var $156=$155&-16;
 var $157=($156|0)==0;
 var $_size_i51=($157?1:$156);
 var $158=_malloc($_size_i51);
 var $159=($158|0)==0;
 if($159){label=52;break;}else{var $_lcssa_i53=$158;label=57;break;}
 case 52: 
 var $160=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $161=($160|0)==0;
 if($161){label=55;break;}else{label=53;break;}
 case 53: 
 var $163=$160;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=149;break; }
 case 54: 
 var $164=_malloc($_size_i51);
 var $165=($164|0)==0;
 if($165){label=52;break;}else{var $_lcssa_i53=$164;label=57;break;}
 case 55: 
 var $167=___cxa_allocate_exception(4);
 var $168=$167;
 HEAP32[(($168)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($167,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=153;break; }
 case 56: 
 throw "Reached an unreachable!";
 case 57: 
 var $_lcssa_i53;
 var $169=(($8+12)|0);
 HEAP32[(($169)>>2)]=$_lcssa_i53;
 var $170=$156|1;
 var $171=(($144)|0);
 HEAP32[(($171)>>2)]=$170;
 var $172=(($8+8)|0);
 HEAP32[(($172)>>2)]=$143;
 var $__p_0_i46=$_lcssa_i53;label=58;break;
 case 58: 
 var $__p_0_i46;
 assert($143 % 1 === 0);(_memcpy($__p_0_i46, 1928, $143)|0);
 var $174=(($__p_0_i46+$143)|0);
 HEAP8[(($174)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($1,$54,$8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=162;break; }
 case 59: 
 var $175=$144;
 var $176=HEAP8[(($175)>>0)];
 var $177=$176&1;
 var $178=(($177<<24)>>24)==0;
 if($178){label=61;break;}else{label=60;break;}
 case 60: 
 var $180=(($8+12)|0);
 var $181=HEAP32[(($180)>>2)];
 _free($181);
 label=61;break;
 case 61: 
 var $182=(($9)|0);
 HEAP8[(($182)>>0)]=100;
 var $183=_strlen(1600);
 var $184=(($9+4)|0);
 var $185=($183>>>0)>4294967279;
 if($185){label=62;break;}else{label=64;break;}
 case 62: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=153;break; }
 case 63: 
 throw "Reached an unreachable!";
 case 64: 
 var $188=($183>>>0)<11;
 if($188){label=65;break;}else{label=66;break;}
 case 65: 
 var $190=$183<<1;
 var $191=(($190)&255);
 var $192=$184;
 HEAP8[(($192)>>0)]=$191;
 var $193=$184;
 var $194=(($193+1)|0);
 var $__p_0_i61=$194;label=73;break;
 case 66: 
 var $195=((($183)+(16))|0);
 var $196=$195&-16;
 var $197=($196|0)==0;
 var $_size_i65=($197?1:$196);
 var $198=_malloc($_size_i65);
 var $199=($198|0)==0;
 if($199){label=67;break;}else{var $_lcssa_i67=$198;label=72;break;}
 case 67: 
 var $200=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $201=($200|0)==0;
 if($201){label=70;break;}else{label=68;break;}
 case 68: 
 var $203=$200;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=148;break; }
 case 69: 
 var $204=_malloc($_size_i65);
 var $205=($204|0)==0;
 if($205){label=67;break;}else{var $_lcssa_i67=$204;label=72;break;}
 case 70: 
 var $207=___cxa_allocate_exception(4);
 var $208=$207;
 HEAP32[(($208)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($207,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=153;break; }
 case 71: 
 throw "Reached an unreachable!";
 case 72: 
 var $_lcssa_i67;
 var $209=(($9+12)|0);
 HEAP32[(($209)>>2)]=$_lcssa_i67;
 var $210=$196|1;
 var $211=(($184)|0);
 HEAP32[(($211)>>2)]=$210;
 var $212=(($9+8)|0);
 HEAP32[(($212)>>2)]=$183;
 var $__p_0_i61=$_lcssa_i67;label=73;break;
 case 73: 
 var $__p_0_i61;
 assert($183 % 1 === 0);(_memcpy($__p_0_i61, 1600, $183)|0);
 var $214=(($__p_0_i61+$183)|0);
 HEAP8[(($214)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($0,$54,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=164;break; }
 case 74: 
 var $215=$184;
 var $216=HEAP8[(($215)>>0)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=76;break;}else{label=75;break;}
 case 75: 
 var $220=(($9+12)|0);
 var $221=HEAP32[(($220)>>2)];
 _free($221);
 label=76;break;
 case 76: 
 var $this2_i_i_i_i=$15;
 HEAP32[(($this2_i_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i_i)+(8))>>2)]=0;
 var $222=$tag;
 var $223=HEAP8[(($222)>>0)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=78;break;}else{label=77;break;}
 case 77: 
 var $227=(($tag+4)|0);
 var $228=HEAP32[(($227)>>2)];
 var $232=$228;label=79;break;
 case 78: 
 var $230=($223&255);
 var $231=$230>>>1;
 var $232=$231;label=79;break;
 case 79: 
 var $232;
 var $233=((($232)+(1))|0);
 var $234=($233>>>0)>4294967279;
 if($234){label=80;break;}else{label=82;break;}
 case 80: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=96;break; }
 case 81: 
 throw "Reached an unreachable!";
 case 82: 
 var $237=($233>>>0)<11;
 if($237){label=83;break;}else{label=84;break;}
 case 83: 
 HEAP8[(($this2_i_i_i_i)>>0)]=2;
 var $239=$15;
 var $240=(($239+1)|0);
 var $__p_0_i108=$240;label=91;break;
 case 84: 
 var $241=((($232)+(17))|0);
 var $242=$241&-16;
 var $243=($242|0)==0;
 var $_size_i111=($243?1:$242);
 var $244=_malloc($_size_i111);
 var $245=($244|0)==0;
 if($245){label=85;break;}else{var $_lcssa_i113=$244;label=90;break;}
 case 85: 
 var $246=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $247=($246|0)==0;
 if($247){label=88;break;}else{label=86;break;}
 case 86: 
 var $249=$246;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$249]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=95;break; }
 case 87: 
 var $250=_malloc($_size_i111);
 var $251=($250|0)==0;
 if($251){label=85;break;}else{var $_lcssa_i113=$250;label=90;break;}
 case 88: 
 var $253=___cxa_allocate_exception(4);
 var $254=$253;
 HEAP32[(($254)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($253,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=96;break; }
 case 89: 
 throw "Reached an unreachable!";
 case 90: 
 var $_lcssa_i113;
 var $255=(($15+8)|0);
 HEAP32[(($255)>>2)]=$_lcssa_i113;
 var $256=$242|1;
 var $257=(($15)|0);
 HEAP32[(($257)>>2)]=$256;
 var $258=(($15+4)|0);
 HEAP32[(($258)>>2)]=1;
 var $__p_0_i108=$_lcssa_i113;label=91;break;
 case 91: 
 var $__p_0_i108;
 HEAP8[(($__p_0_i108)>>0)]=60;
 var $260=(($__p_0_i108+1)|0);
 HEAP8[(($260)>>0)]=0;
 var $261=HEAP8[(($222)>>0)];
 var $262=$261&1;
 var $263=(($262<<24)>>24)==0;
 if($263){label=93;break;}else{label=92;break;}
 case 92: 
 var $265=(($tag+8)|0);
 var $266=HEAP32[(($265)>>2)];
 var $270=$266;label=94;break;
 case 93: 
 var $268=$tag;
 var $269=(($268+1)|0);
 var $270=$269;label=94;break;
 case 94: 
 var $270;
 var $271=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($15,$270,$232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=96;break; }
 case 95: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=97;break;
 case 96: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=97;break;
 case 97: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $273=HEAP8[(($this2_i_i_i_i)>>0)];
 var $274=$273&1;
 var $275=(($274<<24)>>24)==0;
 if($275){var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;var $_pre_pre_phi=$54;label=155;break;}else{label=98;break;}
 case 98: 
 var $277=(($15+8)|0);
 var $278=HEAP32[(($277)>>2)];
 _free($278);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;var $_pre_pre_phi=$54;label=155;break;
 case 99: 
 var $279=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($15,3936,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { label=166;break; }
 case 100: 
 var $280=$14;
 var $281=$279;
 assert(12 % 1 === 0);HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];HEAP32[((($280)+(4))>>2)]=HEAP32[((($281)+(4))>>2)];HEAP32[((($280)+(8))>>2)]=HEAP32[((($281)+(8))>>2)];
 var $282=$279;
 var $storemerge=0;label=101;break;
 case 101: 
 var $storemerge;
 var $284=($storemerge>>>0)<3;
 if($284){label=102;break;}else{label=103;break;}
 case 102: 
 var $286=(($282+($storemerge<<2))|0);
 HEAP32[(($286)>>2)]=0;
 var $287=((($storemerge)+(1))|0);
 var $storemerge=$287;label=101;break;
 case 103: 
 var $288=HEAP32[(($16)>>2)];
 var $_09=$19;var $storemerge_in_i_i_sink=$288;label=104;break;
 case 104: 
 var $storemerge_in_i_i_sink;
 var $_09;
 var $storemerge_i_i=$storemerge_in_i_i_sink;
 var $290=($storemerge_i_i|0)==0;
 if($290){label=106;break;}else{label=105;break;}
 case 105: 
 var $292=(($storemerge_i_i+16)|0);
 var $293=HEAP8[(($292)>>0)];
 var $294=(($293<<24)>>24)<(($content<<24)>>24);
 var $295=(($storemerge_i_i+4)|0);
 var $296=(($storemerge_i_i)|0);
 var $_110=($294?$_09:$storemerge_i_i);
 var $storemerge_in_in_i_i=($294?$295:$296);
 var $storemerge_in_i_i=HEAP32[(($storemerge_in_in_i_i)>>2)];
 var $_09=$_110;var $storemerge_in_i_i_sink=$storemerge_in_i_i;label=104;break;
 case 106: 
 var $297=($_09|0)==($19|0);
 if($297){label=108;break;}else{label=107;break;}
 case 107: 
 var $299=(($_09+16)|0);
 var $300=HEAP8[(($299)>>0)];
 var $301=(($300<<24)>>24)>(($content<<24)>>24);
 if($301){label=108;break;}else{var $_sroa_01_0=$_09;label=109;break;}
 case 108: 
 var $_sroa_01_0=$19;label=109;break;
 case 109: 
 var $_sroa_01_0;
 var $304=(($_sroa_01_0+16)|0);
 var $305=(($304+4)|0);
 var $306=HEAP8[(($305)>>0)];
 var $307=$306&1;
 var $308=(($307<<24)>>24)==0;
 if($308){label=111;break;}else{label=110;break;}
 case 110: 
 var $310=(($304+12)|0);
 var $311=$310;
 var $312=HEAP32[(($311)>>2)];
 var $313=(($304+8)|0);
 var $314=$313;
 var $315=HEAP32[(($314)>>2)];
 var $321=$315;var $320=$312;label=112;break;
 case 111: 
 var $317=(($304+5)|0);
 var $318=($306&255);
 var $319=$318>>>1;
 var $321=$319;var $320=$317;label=112;break;
 case 112: 
 var $320;
 var $321;
 var $322=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($14,$320,$321) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=167;break; }
 case 113: 
 var $323=$13;
 var $324=$322;
 assert(12 % 1 === 0);HEAP32[(($323)>>2)]=HEAP32[(($324)>>2)];HEAP32[((($323)+(4))>>2)]=HEAP32[((($324)+(4))>>2)];HEAP32[((($323)+(8))>>2)]=HEAP32[((($324)+(8))>>2)];
 var $325=$322;
 var $storemerge1=0;label=114;break;
 case 114: 
 var $storemerge1;
 var $327=($storemerge1>>>0)<3;
 if($327){label=115;break;}else{label=116;break;}
 case 115: 
 var $329=(($325+($storemerge1<<2))|0);
 HEAP32[(($329)>>2)]=0;
 var $330=((($storemerge1)+(1))|0);
 var $storemerge1=$330;label=114;break;
 case 116: 
 var $331=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($13,3880,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=168;break; }
 case 117: 
 var $332=$12;
 var $333=$331;
 assert(12 % 1 === 0);HEAP32[(($332)>>2)]=HEAP32[(($333)>>2)];HEAP32[((($332)+(4))>>2)]=HEAP32[((($333)+(4))>>2)];HEAP32[((($332)+(8))>>2)]=HEAP32[((($333)+(8))>>2)];
 var $334=$331;
 var $storemerge2=0;label=118;break;
 case 118: 
 var $storemerge2;
 var $336=($storemerge2>>>0)<3;
 if($336){label=119;break;}else{label=120;break;}
 case 119: 
 var $338=(($334+($storemerge2<<2))|0);
 HEAP32[(($338)>>2)]=0;
 var $339=((($storemerge2)+(1))|0);
 var $storemerge2=$339;label=118;break;
 case 120: 
 var $340=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($12,3856,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=121;break; } else { label=169;break; }
 case 121: 
 var $341=$11;
 var $342=$340;
 assert(12 % 1 === 0);HEAP32[(($341)>>2)]=HEAP32[(($342)>>2)];HEAP32[((($341)+(4))>>2)]=HEAP32[((($342)+(4))>>2)];HEAP32[((($341)+(8))>>2)]=HEAP32[((($342)+(8))>>2)];
 var $343=$340;
 var $storemerge3=0;label=122;break;
 case 122: 
 var $storemerge3;
 var $345=($storemerge3>>>0)<3;
 if($345){label=123;break;}else{label=124;break;}
 case 123: 
 var $347=(($343+($storemerge3<<2))|0);
 HEAP32[(($347)>>2)]=0;
 var $348=((($storemerge3)+(1))|0);
 var $storemerge3=$348;label=122;break;
 case 124: 
 var $349=HEAP8[(($222)>>0)];
 var $350=$349&1;
 var $351=(($350<<24)>>24)==0;
 if($351){label=126;break;}else{label=125;break;}
 case 125: 
 var $353=(($tag+8)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(($tag+4)|0);
 var $356=HEAP32[(($355)>>2)];
 var $363=$356;var $362=$354;label=127;break;
 case 126: 
 var $358=$tag;
 var $359=(($358+1)|0);
 var $360=($349&255);
 var $361=$360>>>1;
 var $363=$361;var $362=$359;label=127;break;
 case 127: 
 var $362;
 var $363;
 var $364=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($11,$362,$363) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=170;break; }
 case 128: 
 var $365=$10;
 var $366=$364;
 assert(12 % 1 === 0);HEAP32[(($365)>>2)]=HEAP32[(($366)>>2)];HEAP32[((($365)+(4))>>2)]=HEAP32[((($366)+(4))>>2)];HEAP32[((($365)+(8))>>2)]=HEAP32[((($366)+(8))>>2)];
 var $367=$364;
 var $storemerge4=0;label=129;break;
 case 129: 
 var $storemerge4;
 var $369=($storemerge4>>>0)<3;
 if($369){label=130;break;}else{label=131;break;}
 case 130: 
 var $371=(($367+($storemerge4<<2))|0);
 HEAP32[(($371)>>2)]=0;
 var $372=((($storemerge4)+(1))|0);
 var $storemerge4=$372;label=129;break;
 case 131: 
 var $373=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($10,3832,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=171;break; }
 case 132: 
 var $374=$agg_result;
 var $375=$373;
 assert(12 % 1 === 0);HEAP32[(($374)>>2)]=HEAP32[(($375)>>2)];HEAP32[((($374)+(4))>>2)]=HEAP32[((($375)+(4))>>2)];HEAP32[((($374)+(8))>>2)]=HEAP32[((($375)+(8))>>2)];
 var $376=$373;
 var $storemerge5=0;label=133;break;
 case 133: 
 var $storemerge5;
 var $378=($storemerge5>>>0)<3;
 if($378){label=134;break;}else{label=135;break;}
 case 134: 
 var $380=(($376+($storemerge5<<2))|0);
 HEAP32[(($380)>>2)]=0;
 var $381=((($storemerge5)+(1))|0);
 var $storemerge5=$381;label=133;break;
 case 135: 
 var $382=HEAP8[(($365)>>0)];
 var $383=$382&1;
 var $384=(($383<<24)>>24)==0;
 if($384){label=137;break;}else{label=136;break;}
 case 136: 
 var $386=(($10+8)|0);
 var $387=HEAP32[(($386)>>2)];
 _free($387);
 label=137;break;
 case 137: 
 var $388=HEAP8[(($341)>>0)];
 var $389=$388&1;
 var $390=(($389<<24)>>24)==0;
 if($390){label=139;break;}else{label=138;break;}
 case 138: 
 var $392=(($11+8)|0);
 var $393=HEAP32[(($392)>>2)];
 _free($393);
 label=139;break;
 case 139: 
 var $394=HEAP8[(($332)>>0)];
 var $395=$394&1;
 var $396=(($395<<24)>>24)==0;
 if($396){label=141;break;}else{label=140;break;}
 case 140: 
 var $398=(($12+8)|0);
 var $399=HEAP32[(($398)>>2)];
 _free($399);
 label=141;break;
 case 141: 
 var $400=HEAP8[(($323)>>0)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 if($402){label=143;break;}else{label=142;break;}
 case 142: 
 var $404=(($13+8)|0);
 var $405=HEAP32[(($404)>>2)];
 _free($405);
 label=143;break;
 case 143: 
 var $406=HEAP8[(($280)>>0)];
 var $407=$406&1;
 var $408=(($407<<24)>>24)==0;
 if($408){label=145;break;}else{label=144;break;}
 case 144: 
 var $410=(($14+8)|0);
 var $411=HEAP32[(($410)>>2)];
 _free($411);
 label=145;break;
 case 145: 
 var $412=HEAP8[(($this2_i_i_i_i)>>0)];
 var $413=$412&1;
 var $414=(($413<<24)>>24)==0;
 if($414){label=147;break;}else{label=146;break;}
 case 146: 
 var $416=(($15+8)|0);
 var $417=HEAP32[(($416)>>2)];
 _free($417);
 label=147;break;
 case 147: 
 var $418=HEAP32[(($16)>>2)];
 var $419=$418;
 __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($54,$419);
 STACKTOP=sp;return;
 case 148: 
 var $lpad_loopexit13$0 = ___cxa_find_matching_catch(); var $lpad_loopexit13$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit13$1;var $eh_lpad_body$0=$lpad_loopexit13$0;var $_pre_pre_phi=$54;label=155;break;
 case 149: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(); var $lpad_loopexit16$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit16$1;var $eh_lpad_body$0=$lpad_loopexit16$0;var $_pre_pre_phi=$54;label=155;break;
 case 150: 
 var $lpad_loopexit19$0 = ___cxa_find_matching_catch(); var $lpad_loopexit19$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit19$1;var $eh_lpad_body$0=$lpad_loopexit19$0;var $_pre_pre_phi=$54;label=155;break;
 case 151: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(); var $lpad_loopexit22$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit22$1;var $eh_lpad_body$0=$lpad_loopexit22$0;var $_pre_pre_phi=$54;label=155;break;
 case 152: 
 var $lpad_loopexit25$0 = ___cxa_find_matching_catch(); var $lpad_loopexit25$1 = tempRet0;
 var $lpad_phi27$1=$lpad_loopexit25$1;var $lpad_phi27$0=$lpad_loopexit25$0;label=154;break;
 case 153: 
 var $lpad_nonloopexit26$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit26$1 = tempRet0;
 var $lpad_phi27$1=$lpad_nonloopexit26$1;var $lpad_phi27$0=$lpad_nonloopexit26$0;label=154;break;
 case 154: 
 var $lpad_phi27$0;
 var $lpad_phi27$1;
 var $_pre_pre_pre_pre_pre_pre=(($classMap)|0);
 var $eh_lpad_body$1=$lpad_phi27$1;var $eh_lpad_body$0=$lpad_phi27$0;var $_pre_pre_phi=$_pre_pre_pre_pre_pre_pre;label=155;break;
 case 155: 
 var $_pre_pre_phi;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $420=$eh_lpad_body$0;
 var $421=$eh_lpad_body$1;
 var $_5=$421;var $_58=$420;var $_pre_phi=$_pre_pre_phi;label=183;break;
 case 156: 
 var $423$0 = ___cxa_find_matching_catch(); var $423$1 = tempRet0;
 var $424=$423$0;
 var $425=$423$1;
 var $426=$23;
 var $427=HEAP8[(($426)>>0)];
 var $428=$427&1;
 var $429=(($428<<24)>>24)==0;
 if($429){var $_5=$425;var $_58=$424;var $_pre_phi=$54;label=183;break;}else{label=157;break;}
 case 157: 
 var $431=(($5+12)|0);
 var $432=HEAP32[(($431)>>2)];
 _free($432);
 var $_5=$425;var $_58=$424;var $_pre_phi=$54;label=183;break;
 case 158: 
 var $434$0 = ___cxa_find_matching_catch(); var $434$1 = tempRet0;
 var $435=$434$0;
 var $436=$434$1;
 var $437=$64;
 var $438=HEAP8[(($437)>>0)];
 var $439=$438&1;
 var $440=(($439<<24)>>24)==0;
 if($440){var $_5=$436;var $_58=$435;var $_pre_phi=$54;label=183;break;}else{label=159;break;}
 case 159: 
 var $442=(($6+12)|0);
 var $443=HEAP32[(($442)>>2)];
 _free($443);
 var $_5=$436;var $_58=$435;var $_pre_phi=$54;label=183;break;
 case 160: 
 var $445$0 = ___cxa_find_matching_catch(); var $445$1 = tempRet0;
 var $446=$445$0;
 var $447=$445$1;
 var $448=$104;
 var $449=HEAP8[(($448)>>0)];
 var $450=$449&1;
 var $451=(($450<<24)>>24)==0;
 if($451){var $_5=$447;var $_58=$446;var $_pre_phi=$54;label=183;break;}else{label=161;break;}
 case 161: 
 var $453=(($7+12)|0);
 var $454=HEAP32[(($453)>>2)];
 _free($454);
 var $_5=$447;var $_58=$446;var $_pre_phi=$54;label=183;break;
 case 162: 
 var $456$0 = ___cxa_find_matching_catch(); var $456$1 = tempRet0;
 var $457=$456$0;
 var $458=$456$1;
 var $459=$144;
 var $460=HEAP8[(($459)>>0)];
 var $461=$460&1;
 var $462=(($461<<24)>>24)==0;
 if($462){var $_5=$458;var $_58=$457;var $_pre_phi=$54;label=183;break;}else{label=163;break;}
 case 163: 
 var $464=(($8+12)|0);
 var $465=HEAP32[(($464)>>2)];
 _free($465);
 var $_5=$458;var $_58=$457;var $_pre_phi=$54;label=183;break;
 case 164: 
 var $467$0 = ___cxa_find_matching_catch(); var $467$1 = tempRet0;
 var $468=$467$0;
 var $469=$467$1;
 var $470=$184;
 var $471=HEAP8[(($470)>>0)];
 var $472=$471&1;
 var $473=(($472<<24)>>24)==0;
 if($473){var $_5=$469;var $_58=$468;var $_pre_phi=$54;label=183;break;}else{label=165;break;}
 case 165: 
 var $475=(($9+12)|0);
 var $476=HEAP32[(($475)>>2)];
 _free($476);
 var $_5=$469;var $_58=$468;var $_pre_phi=$54;label=183;break;
 case 166: 
 var $478$0 = ___cxa_find_matching_catch(); var $478$1 = tempRet0;
 var $479=$478$0;
 var $480=$478$1;
 var $_4=$480;var $_47=$479;label=181;break;
 case 167: 
 var $482$0 = ___cxa_find_matching_catch(); var $482$1 = tempRet0;
 var $483=$482$0;
 var $484=$482$1;
 var $_3=$484;var $_36=$483;label=179;break;
 case 168: 
 var $486$0 = ___cxa_find_matching_catch(); var $486$1 = tempRet0;
 var $487=$486$0;
 var $488=$486$1;
 var $_2=$488;var $_25=$487;label=177;break;
 case 169: 
 var $490$0 = ___cxa_find_matching_catch(); var $490$1 = tempRet0;
 var $491=$490$0;
 var $492=$490$1;
 var $_1=$492;var $_14=$491;label=175;break;
 case 170: 
 var $494$0 = ___cxa_find_matching_catch(); var $494$1 = tempRet0;
 var $495=$494$0;
 var $496=$494$1;
 var $_02=$496;var $_03=$495;label=173;break;
 case 171: 
 var $498$0 = ___cxa_find_matching_catch(); var $498$1 = tempRet0;
 var $499=$498$0;
 var $500=$498$1;
 var $501=HEAP8[(($365)>>0)];
 var $502=$501&1;
 var $503=(($502<<24)>>24)==0;
 if($503){var $_02=$500;var $_03=$499;label=173;break;}else{label=172;break;}
 case 172: 
 var $505=(($10+8)|0);
 var $506=HEAP32[(($505)>>2)];
 _free($506);
 var $_02=$500;var $_03=$499;label=173;break;
 case 173: 
 var $_03;
 var $_02;
 var $507=HEAP8[(($341)>>0)];
 var $508=$507&1;
 var $509=(($508<<24)>>24)==0;
 if($509){var $_1=$_02;var $_14=$_03;label=175;break;}else{label=174;break;}
 case 174: 
 var $511=(($11+8)|0);
 var $512=HEAP32[(($511)>>2)];
 _free($512);
 var $_1=$_02;var $_14=$_03;label=175;break;
 case 175: 
 var $_14;
 var $_1;
 var $513=HEAP8[(($332)>>0)];
 var $514=$513&1;
 var $515=(($514<<24)>>24)==0;
 if($515){var $_2=$_1;var $_25=$_14;label=177;break;}else{label=176;break;}
 case 176: 
 var $517=(($12+8)|0);
 var $518=HEAP32[(($517)>>2)];
 _free($518);
 var $_2=$_1;var $_25=$_14;label=177;break;
 case 177: 
 var $_25;
 var $_2;
 var $519=HEAP8[(($323)>>0)];
 var $520=$519&1;
 var $521=(($520<<24)>>24)==0;
 if($521){var $_3=$_2;var $_36=$_25;label=179;break;}else{label=178;break;}
 case 178: 
 var $523=(($13+8)|0);
 var $524=HEAP32[(($523)>>2)];
 _free($524);
 var $_3=$_2;var $_36=$_25;label=179;break;
 case 179: 
 var $_36;
 var $_3;
 var $525=HEAP8[(($280)>>0)];
 var $526=$525&1;
 var $527=(($526<<24)>>24)==0;
 if($527){var $_4=$_3;var $_47=$_36;label=181;break;}else{label=180;break;}
 case 180: 
 var $529=(($14+8)|0);
 var $530=HEAP32[(($529)>>2)];
 _free($530);
 var $_4=$_3;var $_47=$_36;label=181;break;
 case 181: 
 var $_47;
 var $_4;
 var $531=HEAP8[(($this2_i_i_i_i)>>0)];
 var $532=$531&1;
 var $533=(($532<<24)>>24)==0;
 if($533){var $_5=$_4;var $_58=$_47;var $_pre_phi=$54;label=183;break;}else{label=182;break;}
 case 182: 
 var $535=(($15+8)|0);
 var $536=HEAP32[(($535)>>2)];
 _free($536);
 var $_5=$_4;var $_58=$_47;var $_pre_phi=$54;label=183;break;
 case 183: 
 var $_pre_phi;
 var $_58;
 var $_5;
 var $538=HEAP32[(($16)>>2)];
 var $539=$538;
 __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($_pre_phi,$539);
 var $540$0=$_58;
 var $540$1=0;
 var $541$0=$540$0;
 var $541$1=$_5;
 ___resumeException($541$0)
  default: assert(0, "bad label: " + label);
 }

}


function __Z4lerpNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$size){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+736)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=(sp)+(112);
 var $2=(sp)+(128);
 var $3=(sp)+(144);
 var $4=(sp)+(160);
 var $5=(sp)+(176);
 var $6=(sp)+(192);
 var $7=(sp)+(208);
 var $8=(sp)+(224);
 var $9=(sp)+(240);
 var $10=(sp)+(256);
 var $11=(sp)+(272);
 var $12=(sp)+(288);
 var $13=(sp)+(304);
 var $14=(sp)+(320);
 var $row_i=(sp)+(336);
 var $15=(sp)+(352);
 var $16=(sp)+(368);
 var $17=(sp)+(384);
 var $18=(sp)+(400);
 var $19=(sp)+(416);
 var $20=(sp)+(432);
 var $21=(sp)+(448);
 var $22=(sp)+(464);
 var $23=(sp)+(480);
 var $24=(sp)+(496);
 var $25=(sp)+(512);
 var $26=(sp)+(528);
 var $27=(sp)+(544);
 var $cg=(sp)+(560);
 var $28=(sp)+(720);
 var $29=$27;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 HEAP8[(($29)>>0)]=8;
 var $30=$27;
 var $31=(($30+1)|0);
 var $32=$31;
 tempBigInt=1768911987;HEAP8[(($32)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($32)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($32)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($32)+(3))>>0)]=tempBigInt&0xff;
 var $33=(($30+5)|0);
 HEAP8[(($33)>>0)]=0;
 var $34=$size;
 var $35=HEAP8[(($34)>>0)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=3;break;}else{label=2;break;}
 case 2: 
 var $39=(($size+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $44=$40;label=4;break;
 case 3: 
 var $42=$size;
 var $43=(($42+1)|0);
 var $44=$43;label=4;break;
 case 4: 
 var $44;
 var $45=___errno_location();
 var $46=HEAP32[(($45)>>2)];
 HEAP32[(($45)>>2)]=0;
 var $47=$f_i_i;
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 var $48=(($f_i_i)|0);
 HEAP32[(($48)>>2)]=0;
 var $49=(($f_i_i+4)|0);
 HEAP32[(($49)>>2)]=$44;
 var $50=(($f_i_i+44)|0);
 HEAP32[(($50)>>2)]=$44;
 var $51=($44|0)<0;
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 var $53=(($f_i_i+8)|0);
 HEAP32[(($53)>>2)]=-1;
 var $57=-1;label=7;break;
 case 6: 
 var $55=(($44+2147483647)|0);
 var $56=(($f_i_i+8)|0);
 HEAP32[(($56)>>2)]=$55;
 var $57=$55;label=7;break;
 case 7: 
 var $57;
 var $58=(($f_i_i+76)|0);
 HEAP32[(($58)>>2)]=-1;
 var $59=(($f_i_i+104)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=(($f_i_i+8)|0);
 var $61=$57;
 var $62=$44;
 var $63=((($61)-($62))|0);
 var $64=(($f_i_i+108)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=(($f_i_i+100)|0);
 HEAP32[(($65)>>2)]=$57;
 var $$etemp$2$0=-2147483648;
 var $$etemp$2$1=0;
 var $66$0=___intscan($f_i_i,10,1,$$etemp$2$0,$$etemp$2$1);
 var $66$1=tempRet0;
 var $67=HEAP32[(($64)>>2)];
 var $68=HEAP32[(($49)>>2)];
 var $69=HEAP32[(($60)>>2)];
 var $$etemp$3$0=112;
 var $$etemp$3$1=0;

 var $70$0=$66$0;
 var $70=$70$0;
 var $71=HEAP32[(($45)>>2)];
 HEAP32[(($45)>>2)]=$46;
 var $72=($71|0)==34;
 if($72){label=8;break;}else{label=36;break;}
 case 8: 
 var $73=$26;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 HEAP32[(($73)>>2)]=0; HEAP32[((($73)+(4))>>2)]=0; HEAP32[((($73)+(8))>>2)]=0;
 var $74=_malloc(32);
 var $75=($74|0)==0;
 if($75){label=9;break;}else{var $_lcssa_i87=$74;label=14;break;}
 case 9: 
 var $76=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $77=($76|0)==0;
 if($77){label=12;break;}else{label=10;break;}
 case 10: 
 var $79=$76;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$79]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $80=_malloc(32);
 var $81=($80|0)==0;
 if($81){label=9;break;}else{var $_lcssa_i87=$80;label=14;break;}
 case 12: 
 var $83=___cxa_allocate_exception(4);
 var $84=$83;
 HEAP32[(($84)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($83,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=16;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $_lcssa_i87;
 var $86=(($26+8)|0);
 HEAP32[(($86)>>2)]=$_lcssa_i87;
 var $87=(($26)|0);
 HEAP32[(($87)>>2)]=33;
 var $88=(($26+4)|0);
 HEAP32[(($88)>>2)]=4;
 var $89=$31;
 var $90=$_lcssa_i87;
 var $91=((((HEAPU8[(($89)>>0)])|(HEAPU8[((($89)+(1))>>0)]<<8)|(HEAPU8[((($89)+(2))>>0)]<<16)|(HEAPU8[((($89)+(3))>>0)]<<24))|0));
 tempBigInt=$91;HEAP8[(($90)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($90)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($90)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($90)+(3))>>0)]=tempBigInt&0xff;
 var $92=(($_lcssa_i87+4)|0);
 HEAP8[(($92)>>0)]=0;
 var $93=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($26,2752,14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=16;break; }
 case 15: 
 var $lpad_loopexit136$0 = ___cxa_find_matching_catch(); var $lpad_loopexit136$1 = tempRet0;
 var $lpad_phi138$1=$lpad_loopexit136$1;var $lpad_phi138$0=$lpad_loopexit136$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit137$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit137$1 = tempRet0;
 var $lpad_phi138$1=$lpad_nonloopexit137$1;var $lpad_phi138$0=$lpad_nonloopexit137$0;label=17;break;
 case 17: 
 var $lpad_phi138$0;
 var $lpad_phi138$1;
 var $95=HEAP8[(($73)>>0)];
 var $96=$95&1;
 var $97=(($96<<24)>>24)==0;
 if($97){var $eh_lpad_body_i$1=$lpad_phi138$1;var $eh_lpad_body_i$0=$lpad_phi138$0;label=65;break;}else{label=18;break;}
 case 18: 
 var $99=(($26+8)|0);
 var $100=HEAP32[(($99)>>2)];
 _free($100);
 var $eh_lpad_body_i$1=$lpad_phi138$1;var $eh_lpad_body_i$0=$lpad_phi138$0;label=65;break;
 case 19: 
 var $101=___cxa_allocate_exception(8);
 var $102=$101;
 HEAP32[(($102)>>2)]=5400;
 var $103=(($101+4)|0);
 var $104=HEAP8[(($73)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=21;break;}else{label=20;break;}
 case 20: 
 var $108=(($26+8)|0);
 var $109=HEAP32[(($108)>>2)];
 var $113=$109;label=22;break;
 case 21: 
 var $111=$26;
 var $112=(($111+1)|0);
 var $113=$112;label=22;break;
 case 22: 
 var $113;
 var $114=_strlen($113);
 var $115=((($114)+(13))|0);
 var $116=($115|0)==0;
 var $_size_i91=($116?1:$115);
 var $117=_malloc($_size_i91);
 var $118=($117|0)==0;
 if($118){label=23;break;}else{var $_lcssa_i93=$117;label=28;break;}
 case 23: 
 var $119=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $120=($119|0)==0;
 if($120){label=26;break;}else{label=24;break;}
 case 24: 
 var $122=$119;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$122]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=30;break; }
 case 25: 
 var $123=_malloc($_size_i91);
 var $124=($123|0)==0;
 if($124){label=23;break;}else{var $_lcssa_i93=$123;label=28;break;}
 case 26: 
 var $126=___cxa_allocate_exception(4);
 var $127=$126;
 HEAP32[(($127)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($126,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 var $_lcssa_i93;
 var $128=$_lcssa_i93;
 HEAP32[(($128)>>2)]=$114;
 var $129=(($_lcssa_i93+4)|0);
 var $130=$129;
 HEAP32[(($130)>>2)]=$114;
 var $131=(($_lcssa_i93+8)|0);
 var $132=$131;
 HEAP32[(($132)>>2)]=0;
 var $133=(($_lcssa_i93+12)|0);
 var $134=((($114)+(1))|0);
 assert($134 % 1 === 0);(_memcpy($133, $113, $134)|0);
 var $135=$103;
 HEAP32[(($135)>>2)]=$133;
 HEAP32[(($102)>>2)]=5336;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,12416,(260)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=33;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($101);
 var $eh_lpad_body_i_i_i$1=$lpad_phi$1;var $eh_lpad_body_i_i_i$0=$lpad_phi$0;label=34;break;
 case 33: 
 var $137$0 = ___cxa_find_matching_catch(); var $137$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$137$1;var $eh_lpad_body_i_i_i$0=$137$0;label=34;break;
 case 34: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $138=HEAP8[(($73)>>0)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){var $eh_lpad_body_i$1=$eh_lpad_body_i_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body_i_i_i$0;label=65;break;}else{label=35;break;}
 case 35: 
 var $142=(($26+8)|0);
 var $143=HEAP32[(($142)>>2)];
 _free($143);
 var $eh_lpad_body_i$1=$eh_lpad_body_i_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body_i_i_i$0;label=65;break;
 case 36: 
 var $145=$68;
 var $146=((($145)+($67))|0);
 var $147=$69;
 var $148=($146|0)==($147|0);
 if($148){label=37;break;}else{label=68;break;}
 case 37: 
 var $149=$25;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 HEAP32[(($149)>>2)]=0; HEAP32[((($149)+(4))>>2)]=0; HEAP32[((($149)+(8))>>2)]=0;
 var $150=_malloc(32);
 var $151=($150|0)==0;
 if($151){label=38;break;}else{var $_lcssa_i104=$150;label=43;break;}
 case 38: 
 var $152=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $153=($152|0)==0;
 if($153){label=41;break;}else{label=39;break;}
 case 39: 
 var $155=$152;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=44;break; }
 case 40: 
 var $156=_malloc(32);
 var $157=($156|0)==0;
 if($157){label=38;break;}else{var $_lcssa_i104=$156;label=43;break;}
 case 41: 
 var $159=___cxa_allocate_exception(4);
 var $160=$159;
 HEAP32[(($160)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($159,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=45;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $_lcssa_i104;
 var $162=(($25+8)|0);
 HEAP32[(($162)>>2)]=$_lcssa_i104;
 var $163=(($25)|0);
 HEAP32[(($163)>>2)]=33;
 var $164=(($25+4)|0);
 HEAP32[(($164)>>2)]=4;
 var $165=$31;
 var $166=$_lcssa_i104;
 var $167=((((HEAPU8[(($165)>>0)])|(HEAPU8[((($165)+(1))>>0)]<<8)|(HEAPU8[((($165)+(2))>>0)]<<16)|(HEAPU8[((($165)+(3))>>0)]<<24))|0));
 tempBigInt=$167;HEAP8[(($166)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))>>0)]=tempBigInt&0xff;
 var $168=(($_lcssa_i104+4)|0);
 HEAP8[(($168)>>0)]=0;
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($25,2904,15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=45;break; }
 case 44: 
 var $lpad_loopexit145$0 = ___cxa_find_matching_catch(); var $lpad_loopexit145$1 = tempRet0;
 var $lpad_phi147$1=$lpad_loopexit145$1;var $lpad_phi147$0=$lpad_loopexit145$0;label=46;break;
 case 45: 
 var $lpad_nonloopexit146$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit146$1 = tempRet0;
 var $lpad_phi147$1=$lpad_nonloopexit146$1;var $lpad_phi147$0=$lpad_nonloopexit146$0;label=46;break;
 case 46: 
 var $lpad_phi147$0;
 var $lpad_phi147$1;
 var $171=HEAP8[(($149)>>0)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){var $eh_lpad_body_i$1=$lpad_phi147$1;var $eh_lpad_body_i$0=$lpad_phi147$0;label=65;break;}else{label=47;break;}
 case 47: 
 var $175=(($25+8)|0);
 var $176=HEAP32[(($175)>>2)];
 _free($176);
 var $eh_lpad_body_i$1=$lpad_phi147$1;var $eh_lpad_body_i$0=$lpad_phi147$0;label=65;break;
 case 48: 
 var $177=___cxa_allocate_exception(8);
 var $178=$177;
 HEAP32[(($178)>>2)]=5400;
 var $179=(($177+4)|0);
 var $180=HEAP8[(($149)>>0)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 if($182){label=50;break;}else{label=49;break;}
 case 49: 
 var $184=(($25+8)|0);
 var $185=HEAP32[(($184)>>2)];
 var $189=$185;label=51;break;
 case 50: 
 var $187=$25;
 var $188=(($187+1)|0);
 var $189=$188;label=51;break;
 case 51: 
 var $189;
 var $190=_strlen($189);
 var $191=((($190)+(13))|0);
 var $192=($191|0)==0;
 var $_size_i=($192?1:$191);
 var $193=_malloc($_size_i);
 var $194=($193|0)==0;
 if($194){label=52;break;}else{var $_lcssa_i=$193;label=57;break;}
 case 52: 
 var $195=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $196=($195|0)==0;
 if($196){label=55;break;}else{label=53;break;}
 case 53: 
 var $198=$195;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=59;break; }
 case 54: 
 var $199=_malloc($_size_i);
 var $200=($199|0)==0;
 if($200){label=52;break;}else{var $_lcssa_i=$199;label=57;break;}
 case 55: 
 var $202=___cxa_allocate_exception(4);
 var $203=$202;
 HEAP32[(($203)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($202,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=60;break; }
 case 56: 
 throw "Reached an unreachable!";
 case 57: 
 var $_lcssa_i;
 var $204=$_lcssa_i;
 HEAP32[(($204)>>2)]=$190;
 var $205=(($_lcssa_i+4)|0);
 var $206=$205;
 HEAP32[(($206)>>2)]=$190;
 var $207=(($_lcssa_i+8)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=0;
 var $209=(($_lcssa_i+12)|0);
 var $210=((($190)+(1))|0);
 assert($210 % 1 === 0);(_memcpy($209, $189, $210)|0);
 var $211=$179;
 HEAP32[(($211)>>2)]=$209;
 HEAP32[(($178)>>2)]=5272;
 (function() { try { __THREW__ = 0; return ___cxa_throw($177,12384,(260)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=62;break; }
 case 58: 
 throw "Reached an unreachable!";
 case 59: 
 var $lpad_loopexit139$0 = ___cxa_find_matching_catch(); var $lpad_loopexit139$1 = tempRet0;
 var $lpad_phi141$1=$lpad_loopexit139$1;var $lpad_phi141$0=$lpad_loopexit139$0;label=61;break;
 case 60: 
 var $lpad_nonloopexit140$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit140$1 = tempRet0;
 var $lpad_phi141$1=$lpad_nonloopexit140$1;var $lpad_phi141$0=$lpad_nonloopexit140$0;label=61;break;
 case 61: 
 var $lpad_phi141$0;
 var $lpad_phi141$1;
 ___cxa_free_exception($177);
 var $eh_lpad_body_i2_i_i$1=$lpad_phi141$1;var $eh_lpad_body_i2_i_i$0=$lpad_phi141$0;label=63;break;
 case 62: 
 var $213$0 = ___cxa_find_matching_catch(); var $213$1 = tempRet0;
 var $eh_lpad_body_i2_i_i$1=$213$1;var $eh_lpad_body_i2_i_i$0=$213$0;label=63;break;
 case 63: 
 var $eh_lpad_body_i2_i_i$0;
 var $eh_lpad_body_i2_i_i$1;
 var $214=HEAP8[(($149)>>0)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){var $eh_lpad_body_i$1=$eh_lpad_body_i2_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body_i2_i_i$0;label=65;break;}else{label=64;break;}
 case 64: 
 var $218=(($25+8)|0);
 var $219=HEAP32[(($218)>>2)];
 _free($219);
 var $eh_lpad_body_i$1=$eh_lpad_body_i2_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body_i2_i_i$0;label=65;break;
 case 65: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $220=HEAP8[(($29)>>0)];
 var $221=$220&1;
 var $222=(($221<<24)>>24)==0;
 if($222){label=67;break;}else{label=66;break;}
 case 66: 
 var $224=(($27+8)|0);
 var $225=HEAP32[(($224)>>2)];
 _free($225);
 label=67;break;
 case 67: 
 ___resumeException($eh_lpad_body_i$0)
 case 68: 
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $226=$15;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $227=$16;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $228=$17;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $229=$18;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $230=$19;
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $231=$20;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $232=$21;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $233=$22;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $234=$23;
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $235=$24;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $236=(($cg)|0);
 HEAP32[(($236)>>2)]=8216;
 var $237=(($cg+16)|0);
 HEAP32[(($237)>>2)]=0;
 var $238=(($cg+20)|0);
 var $239=_strlen(4656);
 var $240=($239>>>0)>4294967279;
 if($240){label=69;break;}else{label=71;break;}
 case 69: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=449;break; }
 case 70: 
 throw "Reached an unreachable!";
 case 71: 
 var $243=($239>>>0)<11;
 if($243){label=72;break;}else{label=73;break;}
 case 72: 
 var $245=$239<<1;
 var $246=(($245)&255);
 var $247=$238;
 HEAP8[(($247)>>0)]=$246;
 var $248=$238;
 var $249=(($248+1)|0);
 var $__p_0_i240_i=$249;label=80;break;
 case 73: 
 var $250=((($239)+(16))|0);
 var $251=$250&-16;
 var $252=($251|0)==0;
 var $_size_i244_i=($252?1:$251);
 var $253=_malloc($_size_i244_i);
 var $254=($253|0)==0;
 if($254){label=74;break;}else{var $_lcssa_i246_i=$253;label=79;break;}
 case 74: 
 var $255=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $256=($255|0)==0;
 if($256){label=77;break;}else{label=75;break;}
 case 75: 
 var $258=$255;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$258]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=448;break; }
 case 76: 
 var $259=_malloc($_size_i244_i);
 var $260=($259|0)==0;
 if($260){label=74;break;}else{var $_lcssa_i246_i=$259;label=79;break;}
 case 77: 
 var $262=___cxa_allocate_exception(4);
 var $263=$262;
 HEAP32[(($263)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($262,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=449;break; }
 case 78: 
 throw "Reached an unreachable!";
 case 79: 
 var $_lcssa_i246_i;
 var $264=(($cg+28)|0);
 HEAP32[(($264)>>2)]=$_lcssa_i246_i;
 var $265=$251|1;
 var $266=(($238)|0);
 HEAP32[(($266)>>2)]=$265;
 var $267=(($cg+24)|0);
 HEAP32[(($267)>>2)]=$239;
 var $__p_0_i240_i=$_lcssa_i246_i;label=80;break;
 case 80: 
 var $__p_0_i240_i;
 assert($239 % 1 === 0);(_memcpy($__p_0_i240_i, 4656, $239)|0);
 var $268=(($__p_0_i240_i+$239)|0);
 HEAP8[(($268)>>0)]=0;
 var $269=(($cg+32)|0);
 HEAP32[(($269)>>2)]=0;
 var $270=_strlen(14320);
 var $271=(($cg+36)|0);
 var $272=($270>>>0)>4294967279;
 if($272){label=81;break;}else{label=83;break;}
 case 81: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=94;break; }
 case 82: 
 throw "Reached an unreachable!";
 case 83: 
 var $275=($270>>>0)<11;
 if($275){label=84;break;}else{label=85;break;}
 case 84: 
 var $277=$270<<1;
 var $278=(($277)&255);
 var $279=$271;
 HEAP8[(($279)>>0)]=$278;
 var $280=$271;
 var $281=(($280+1)|0);
 var $__p_0_i251_i=$281;label=92;break;
 case 85: 
 var $282=((($270)+(16))|0);
 var $283=$282&-16;
 var $284=($283|0)==0;
 var $_size_i255_i=($284?1:$283);
 var $285=_malloc($_size_i255_i);
 var $286=($285|0)==0;
 if($286){label=86;break;}else{var $_lcssa_i257_i=$285;label=91;break;}
 case 86: 
 var $287=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $288=($287|0)==0;
 if($288){label=89;break;}else{label=87;break;}
 case 87: 
 var $290=$287;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$290]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=93;break; }
 case 88: 
 var $291=_malloc($_size_i255_i);
 var $292=($291|0)==0;
 if($292){label=86;break;}else{var $_lcssa_i257_i=$291;label=91;break;}
 case 89: 
 var $294=___cxa_allocate_exception(4);
 var $295=$294;
 HEAP32[(($295)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($294,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=94;break; }
 case 90: 
 throw "Reached an unreachable!";
 case 91: 
 var $_lcssa_i257_i;
 var $296=(($cg+44)|0);
 HEAP32[(($296)>>2)]=$_lcssa_i257_i;
 var $297=$283|1;
 var $298=(($271)|0);
 HEAP32[(($298)>>2)]=$297;
 var $299=(($cg+40)|0);
 HEAP32[(($299)>>2)]=$270;
 var $__p_0_i251_i=$_lcssa_i257_i;label=92;break;
 case 92: 
 var $__p_0_i251_i;
 assert($270 % 1 === 0);(_memcpy($__p_0_i251_i, 14320, $270)|0);
 var $300=(($__p_0_i251_i+$270)|0);
 HEAP8[(($300)>>0)]=0;
 var $301=(($cg+48)|0);
 var $302=_strlen(4656);
 var $303=($302>>>0)>4294967279;
 if($303){label=97;break;}else{label=99;break;}
 case 93: 
 var $lpad_loopexit336$0 = ___cxa_find_matching_catch(); var $lpad_loopexit336$1 = tempRet0;
 var $lpad_phi338$1=$lpad_loopexit336$1;var $lpad_phi338$0=$lpad_loopexit336$0;label=95;break;
 case 94: 
 var $lpad_nonloopexit337$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit337$1 = tempRet0;
 var $lpad_phi338$1=$lpad_nonloopexit337$1;var $lpad_phi338$0=$lpad_nonloopexit337$0;label=95;break;
 case 95: 
 var $lpad_phi338$0;
 var $lpad_phi338$1;
 var $305=$238;
 var $306=HEAP8[(($305)>>0)];
 var $307=$306&1;
 var $308=(($307<<24)>>24)==0;
 if($308){var $eh_lpad_body_i4$1=$lpad_phi338$1;var $eh_lpad_body_i4$0=$lpad_phi338$0;label=450;break;}else{label=96;break;}
 case 96: 
 var $310=(($cg+28)|0);
 var $311=HEAP32[(($310)>>2)];
 _free($311);
 var $eh_lpad_body_i4$1=$lpad_phi338$1;var $eh_lpad_body_i4$0=$lpad_phi338$0;label=450;break;
 case 97: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=452;break; }
 case 98: 
 throw "Reached an unreachable!";
 case 99: 
 var $314=($302>>>0)<11;
 if($314){label=100;break;}else{label=101;break;}
 case 100: 
 var $316=$302<<1;
 var $317=(($316)&255);
 var $318=$301;
 HEAP8[(($318)>>0)]=$317;
 var $319=$301;
 var $320=(($319+1)|0);
 var $__p_0_i262_i=$320;label=108;break;
 case 101: 
 var $321=((($302)+(16))|0);
 var $322=$321&-16;
 var $323=($322|0)==0;
 var $_size_i266_i=($323?1:$322);
 var $324=_malloc($_size_i266_i);
 var $325=($324|0)==0;
 if($325){label=102;break;}else{var $_lcssa_i268_i=$324;label=107;break;}
 case 102: 
 var $326=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $327=($326|0)==0;
 if($327){label=105;break;}else{label=103;break;}
 case 103: 
 var $329=$326;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$329]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=451;break; }
 case 104: 
 var $330=_malloc($_size_i266_i);
 var $331=($330|0)==0;
 if($331){label=102;break;}else{var $_lcssa_i268_i=$330;label=107;break;}
 case 105: 
 var $333=___cxa_allocate_exception(4);
 var $334=$333;
 HEAP32[(($334)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($333,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=452;break; }
 case 106: 
 throw "Reached an unreachable!";
 case 107: 
 var $_lcssa_i268_i;
 var $335=(($cg+56)|0);
 HEAP32[(($335)>>2)]=$_lcssa_i268_i;
 var $336=$322|1;
 var $337=(($301)|0);
 HEAP32[(($337)>>2)]=$336;
 var $338=(($cg+52)|0);
 HEAP32[(($338)>>2)]=$302;
 var $__p_0_i262_i=$_lcssa_i268_i;label=108;break;
 case 108: 
 var $__p_0_i262_i;
 assert($302 % 1 === 0);(_memcpy($__p_0_i262_i, 4656, $302)|0);
 var $339=(($__p_0_i262_i+$302)|0);
 HEAP8[(($339)>>0)]=0;
 var $340=(($cg+60)|0);
 HEAP32[(($340)>>2)]=0;
 var $341=_strlen(14320);
 var $342=(($cg+64)|0);
 var $343=($341>>>0)>4294967279;
 if($343){label=109;break;}else{label=111;break;}
 case 109: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=122;break; }
 case 110: 
 throw "Reached an unreachable!";
 case 111: 
 var $346=($341>>>0)<11;
 if($346){label=112;break;}else{label=113;break;}
 case 112: 
 var $348=$341<<1;
 var $349=(($348)&255);
 var $350=$342;
 HEAP8[(($350)>>0)]=$349;
 var $351=$342;
 var $352=(($351+1)|0);
 var $__p_0_i273_i=$352;label=120;break;
 case 113: 
 var $353=((($341)+(16))|0);
 var $354=$353&-16;
 var $355=($354|0)==0;
 var $_size_i277_i=($355?1:$354);
 var $356=_malloc($_size_i277_i);
 var $357=($356|0)==0;
 if($357){label=114;break;}else{var $_lcssa_i279_i=$356;label=119;break;}
 case 114: 
 var $358=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $359=($358|0)==0;
 if($359){label=117;break;}else{label=115;break;}
 case 115: 
 var $361=$358;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$361]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=121;break; }
 case 116: 
 var $362=_malloc($_size_i277_i);
 var $363=($362|0)==0;
 if($363){label=114;break;}else{var $_lcssa_i279_i=$362;label=119;break;}
 case 117: 
 var $365=___cxa_allocate_exception(4);
 var $366=$365;
 HEAP32[(($366)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($365,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=118;break; } else { label=122;break; }
 case 118: 
 throw "Reached an unreachable!";
 case 119: 
 var $_lcssa_i279_i;
 var $367=(($cg+72)|0);
 HEAP32[(($367)>>2)]=$_lcssa_i279_i;
 var $368=$354|1;
 var $369=(($342)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=(($cg+68)|0);
 HEAP32[(($370)>>2)]=$341;
 var $__p_0_i273_i=$_lcssa_i279_i;label=120;break;
 case 120: 
 var $__p_0_i273_i;
 assert($341 % 1 === 0);(_memcpy($__p_0_i273_i, 14320, $341)|0);
 var $371=(($__p_0_i273_i+$341)|0);
 HEAP8[(($371)>>0)]=0;
 var $372=(($cg+76)|0);
 var $373=_strlen(4656);
 var $374=($373>>>0)>4294967279;
 if($374){label=125;break;}else{label=127;break;}
 case 121: 
 var $lpad_loopexit326$0 = ___cxa_find_matching_catch(); var $lpad_loopexit326$1 = tempRet0;
 var $lpad_phi328$1=$lpad_loopexit326$1;var $lpad_phi328$0=$lpad_loopexit326$0;label=123;break;
 case 122: 
 var $lpad_nonloopexit327$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit327$1 = tempRet0;
 var $lpad_phi328$1=$lpad_nonloopexit327$1;var $lpad_phi328$0=$lpad_nonloopexit327$0;label=123;break;
 case 123: 
 var $lpad_phi328$0;
 var $lpad_phi328$1;
 var $376=$301;
 var $377=HEAP8[(($376)>>0)];
 var $378=$377&1;
 var $379=(($378<<24)>>24)==0;
 if($379){var $eh_lpad_body9_i$1=$lpad_phi328$1;var $eh_lpad_body9_i$0=$lpad_phi328$0;label=453;break;}else{label=124;break;}
 case 124: 
 var $381=(($cg+56)|0);
 var $382=HEAP32[(($381)>>2)];
 _free($382);
 var $eh_lpad_body9_i$1=$lpad_phi328$1;var $eh_lpad_body9_i$0=$lpad_phi328$0;label=453;break;
 case 125: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=455;break; }
 case 126: 
 throw "Reached an unreachable!";
 case 127: 
 var $385=($373>>>0)<11;
 if($385){label=128;break;}else{label=129;break;}
 case 128: 
 var $387=$373<<1;
 var $388=(($387)&255);
 var $389=$372;
 HEAP8[(($389)>>0)]=$388;
 var $390=$372;
 var $391=(($390+1)|0);
 var $__p_0_i284_i=$391;label=136;break;
 case 129: 
 var $392=((($373)+(16))|0);
 var $393=$392&-16;
 var $394=($393|0)==0;
 var $_size_i288_i=($394?1:$393);
 var $395=_malloc($_size_i288_i);
 var $396=($395|0)==0;
 if($396){label=130;break;}else{var $_lcssa_i290_i=$395;label=135;break;}
 case 130: 
 var $397=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $398=($397|0)==0;
 if($398){label=133;break;}else{label=131;break;}
 case 131: 
 var $400=$397;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$400]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=454;break; }
 case 132: 
 var $401=_malloc($_size_i288_i);
 var $402=($401|0)==0;
 if($402){label=130;break;}else{var $_lcssa_i290_i=$401;label=135;break;}
 case 133: 
 var $404=___cxa_allocate_exception(4);
 var $405=$404;
 HEAP32[(($405)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($404,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=134;break; } else { label=455;break; }
 case 134: 
 throw "Reached an unreachable!";
 case 135: 
 var $_lcssa_i290_i;
 var $406=(($cg+84)|0);
 HEAP32[(($406)>>2)]=$_lcssa_i290_i;
 var $407=$393|1;
 var $408=(($372)|0);
 HEAP32[(($408)>>2)]=$407;
 var $409=(($cg+80)|0);
 HEAP32[(($409)>>2)]=$373;
 var $__p_0_i284_i=$_lcssa_i290_i;label=136;break;
 case 136: 
 var $__p_0_i284_i;
 assert($373 % 1 === 0);(_memcpy($__p_0_i284_i, 4656, $373)|0);
 var $410=(($__p_0_i284_i+$373)|0);
 HEAP8[(($410)>>0)]=0;
 var $411=(($cg+88)|0);
 HEAP32[(($411)>>2)]=0;
 var $412=_strlen(14320);
 var $413=(($cg+92)|0);
 var $414=($412>>>0)>4294967279;
 if($414){label=137;break;}else{label=139;break;}
 case 137: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=138;break; } else { label=150;break; }
 case 138: 
 throw "Reached an unreachable!";
 case 139: 
 var $417=($412>>>0)<11;
 if($417){label=140;break;}else{label=141;break;}
 case 140: 
 var $419=$412<<1;
 var $420=(($419)&255);
 var $421=$413;
 HEAP8[(($421)>>0)]=$420;
 var $422=$413;
 var $423=(($422+1)|0);
 var $__p_0_i295_i=$423;label=148;break;
 case 141: 
 var $424=((($412)+(16))|0);
 var $425=$424&-16;
 var $426=($425|0)==0;
 var $_size_i299_i=($426?1:$425);
 var $427=_malloc($_size_i299_i);
 var $428=($427|0)==0;
 if($428){label=142;break;}else{var $_lcssa_i301_i=$427;label=147;break;}
 case 142: 
 var $429=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $430=($429|0)==0;
 if($430){label=145;break;}else{label=143;break;}
 case 143: 
 var $432=$429;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$432]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=144;break; } else { label=149;break; }
 case 144: 
 var $433=_malloc($_size_i299_i);
 var $434=($433|0)==0;
 if($434){label=142;break;}else{var $_lcssa_i301_i=$433;label=147;break;}
 case 145: 
 var $436=___cxa_allocate_exception(4);
 var $437=$436;
 HEAP32[(($437)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($436,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=146;break; } else { label=150;break; }
 case 146: 
 throw "Reached an unreachable!";
 case 147: 
 var $_lcssa_i301_i;
 var $438=(($cg+100)|0);
 HEAP32[(($438)>>2)]=$_lcssa_i301_i;
 var $439=$425|1;
 var $440=(($413)|0);
 HEAP32[(($440)>>2)]=$439;
 var $441=(($cg+96)|0);
 HEAP32[(($441)>>2)]=$412;
 var $__p_0_i295_i=$_lcssa_i301_i;label=148;break;
 case 148: 
 var $__p_0_i295_i;
 assert($412 % 1 === 0);(_memcpy($__p_0_i295_i, 14320, $412)|0);
 var $442=(($__p_0_i295_i+$412)|0);
 HEAP8[(($442)>>0)]=0;
 var $443=(($cg+104)|0);
 var $444=_strlen(4656);
 var $445=($444>>>0)>4294967279;
 if($445){label=153;break;}else{label=155;break;}
 case 149: 
 var $lpad_loopexit316$0 = ___cxa_find_matching_catch(); var $lpad_loopexit316$1 = tempRet0;
 var $lpad_phi318$1=$lpad_loopexit316$1;var $lpad_phi318$0=$lpad_loopexit316$0;label=151;break;
 case 150: 
 var $lpad_nonloopexit317$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit317$1 = tempRet0;
 var $lpad_phi318$1=$lpad_nonloopexit317$1;var $lpad_phi318$0=$lpad_nonloopexit317$0;label=151;break;
 case 151: 
 var $lpad_phi318$0;
 var $lpad_phi318$1;
 var $447=$372;
 var $448=HEAP8[(($447)>>0)];
 var $449=$448&1;
 var $450=(($449<<24)>>24)==0;
 if($450){var $eh_lpad_body17_i$1=$lpad_phi318$1;var $eh_lpad_body17_i$0=$lpad_phi318$0;label=456;break;}else{label=152;break;}
 case 152: 
 var $452=(($cg+84)|0);
 var $453=HEAP32[(($452)>>2)];
 _free($453);
 var $eh_lpad_body17_i$1=$lpad_phi318$1;var $eh_lpad_body17_i$0=$lpad_phi318$0;label=456;break;
 case 153: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=154;break; } else { label=458;break; }
 case 154: 
 throw "Reached an unreachable!";
 case 155: 
 var $456=($444>>>0)<11;
 if($456){label=156;break;}else{label=157;break;}
 case 156: 
 var $458=$444<<1;
 var $459=(($458)&255);
 var $460=$443;
 HEAP8[(($460)>>0)]=$459;
 var $461=$443;
 var $462=(($461+1)|0);
 var $__p_0_i306_i=$462;label=164;break;
 case 157: 
 var $463=((($444)+(16))|0);
 var $464=$463&-16;
 var $465=($464|0)==0;
 var $_size_i310_i=($465?1:$464);
 var $466=_malloc($_size_i310_i);
 var $467=($466|0)==0;
 if($467){label=158;break;}else{var $_lcssa_i312_i=$466;label=163;break;}
 case 158: 
 var $468=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $469=($468|0)==0;
 if($469){label=161;break;}else{label=159;break;}
 case 159: 
 var $471=$468;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$471]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=160;break; } else { label=457;break; }
 case 160: 
 var $472=_malloc($_size_i310_i);
 var $473=($472|0)==0;
 if($473){label=158;break;}else{var $_lcssa_i312_i=$472;label=163;break;}
 case 161: 
 var $475=___cxa_allocate_exception(4);
 var $476=$475;
 HEAP32[(($476)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($475,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=162;break; } else { label=458;break; }
 case 162: 
 throw "Reached an unreachable!";
 case 163: 
 var $_lcssa_i312_i;
 var $477=(($cg+112)|0);
 HEAP32[(($477)>>2)]=$_lcssa_i312_i;
 var $478=$464|1;
 var $479=(($443)|0);
 HEAP32[(($479)>>2)]=$478;
 var $480=(($cg+108)|0);
 HEAP32[(($480)>>2)]=$444;
 var $__p_0_i306_i=$_lcssa_i312_i;label=164;break;
 case 164: 
 var $__p_0_i306_i;
 assert($444 % 1 === 0);(_memcpy($__p_0_i306_i, 4656, $444)|0);
 var $481=(($__p_0_i306_i+$444)|0);
 HEAP8[(($481)>>0)]=0;
 var $482=(($cg+116)|0);
 HEAP32[(($482)>>2)]=0;
 var $483=_strlen(14320);
 var $484=(($cg+120)|0);
 var $485=($483>>>0)>4294967279;
 if($485){label=165;break;}else{label=167;break;}
 case 165: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=166;break; } else { label=178;break; }
 case 166: 
 throw "Reached an unreachable!";
 case 167: 
 var $488=($483>>>0)<11;
 if($488){label=168;break;}else{label=169;break;}
 case 168: 
 var $490=$483<<1;
 var $491=(($490)&255);
 var $492=$484;
 HEAP8[(($492)>>0)]=$491;
 var $493=$484;
 var $494=(($493+1)|0);
 var $__p_0_i317_i=$494;label=176;break;
 case 169: 
 var $495=((($483)+(16))|0);
 var $496=$495&-16;
 var $497=($496|0)==0;
 var $_size_i321_i=($497?1:$496);
 var $498=_malloc($_size_i321_i);
 var $499=($498|0)==0;
 if($499){label=170;break;}else{var $_lcssa_i323_i=$498;label=175;break;}
 case 170: 
 var $500=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $501=($500|0)==0;
 if($501){label=173;break;}else{label=171;break;}
 case 171: 
 var $503=$500;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$503]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=172;break; } else { label=177;break; }
 case 172: 
 var $504=_malloc($_size_i321_i);
 var $505=($504|0)==0;
 if($505){label=170;break;}else{var $_lcssa_i323_i=$504;label=175;break;}
 case 173: 
 var $507=___cxa_allocate_exception(4);
 var $508=$507;
 HEAP32[(($508)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($507,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { label=178;break; }
 case 174: 
 throw "Reached an unreachable!";
 case 175: 
 var $_lcssa_i323_i;
 var $509=(($cg+128)|0);
 HEAP32[(($509)>>2)]=$_lcssa_i323_i;
 var $510=$496|1;
 var $511=(($484)|0);
 HEAP32[(($511)>>2)]=$510;
 var $512=(($cg+124)|0);
 HEAP32[(($512)>>2)]=$483;
 var $__p_0_i317_i=$_lcssa_i323_i;label=176;break;
 case 176: 
 var $__p_0_i317_i;
 assert($483 % 1 === 0);(_memcpy($__p_0_i317_i, 14320, $483)|0);
 var $513=(($__p_0_i317_i+$483)|0);
 HEAP8[(($513)>>0)]=0;
 var $514=(($cg+132)|0);
 var $515=_strlen(4656);
 var $516=($515>>>0)>4294967279;
 if($516){label=181;break;}else{label=183;break;}
 case 177: 
 var $lpad_loopexit306$0 = ___cxa_find_matching_catch(); var $lpad_loopexit306$1 = tempRet0;
 var $lpad_phi308$1=$lpad_loopexit306$1;var $lpad_phi308$0=$lpad_loopexit306$0;label=179;break;
 case 178: 
 var $lpad_nonloopexit307$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit307$1 = tempRet0;
 var $lpad_phi308$1=$lpad_nonloopexit307$1;var $lpad_phi308$0=$lpad_nonloopexit307$0;label=179;break;
 case 179: 
 var $lpad_phi308$0;
 var $lpad_phi308$1;
 var $518=$443;
 var $519=HEAP8[(($518)>>0)];
 var $520=$519&1;
 var $521=(($520<<24)>>24)==0;
 if($521){var $eh_lpad_body24_i$1=$lpad_phi308$1;var $eh_lpad_body24_i$0=$lpad_phi308$0;label=459;break;}else{label=180;break;}
 case 180: 
 var $523=(($cg+112)|0);
 var $524=HEAP32[(($523)>>2)];
 _free($524);
 var $eh_lpad_body24_i$1=$lpad_phi308$1;var $eh_lpad_body24_i$0=$lpad_phi308$0;label=459;break;
 case 181: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { label=461;break; }
 case 182: 
 throw "Reached an unreachable!";
 case 183: 
 var $527=($515>>>0)<11;
 if($527){label=184;break;}else{label=185;break;}
 case 184: 
 var $529=$515<<1;
 var $530=(($529)&255);
 var $531=$514;
 HEAP8[(($531)>>0)]=$530;
 var $532=$514;
 var $533=(($532+1)|0);
 var $__p_0_i328_i=$533;label=192;break;
 case 185: 
 var $534=((($515)+(16))|0);
 var $535=$534&-16;
 var $536=($535|0)==0;
 var $_size_i332_i=($536?1:$535);
 var $537=_malloc($_size_i332_i);
 var $538=($537|0)==0;
 if($538){label=186;break;}else{var $_lcssa_i334_i=$537;label=191;break;}
 case 186: 
 var $539=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $540=($539|0)==0;
 if($540){label=189;break;}else{label=187;break;}
 case 187: 
 var $542=$539;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$542]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { label=460;break; }
 case 188: 
 var $543=_malloc($_size_i332_i);
 var $544=($543|0)==0;
 if($544){label=186;break;}else{var $_lcssa_i334_i=$543;label=191;break;}
 case 189: 
 var $546=___cxa_allocate_exception(4);
 var $547=$546;
 HEAP32[(($547)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($546,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=190;break; } else { label=461;break; }
 case 190: 
 throw "Reached an unreachable!";
 case 191: 
 var $_lcssa_i334_i;
 var $548=(($cg+140)|0);
 HEAP32[(($548)>>2)]=$_lcssa_i334_i;
 var $549=$535|1;
 var $550=(($514)|0);
 HEAP32[(($550)>>2)]=$549;
 var $551=(($cg+136)|0);
 HEAP32[(($551)>>2)]=$515;
 var $__p_0_i328_i=$_lcssa_i334_i;label=192;break;
 case 192: 
 var $__p_0_i328_i;
 assert($515 % 1 === 0);(_memcpy($__p_0_i328_i, 4656, $515)|0);
 var $552=(($__p_0_i328_i+$515)|0);
 HEAP8[(($552)>>0)]=0;
 var $553=(($cg+144)|0);
 HEAP32[(($553)>>2)]=0;
 var $554=_strlen(14320);
 var $555=(($cg+148)|0);
 var $556=($554>>>0)>4294967279;
 if($556){label=193;break;}else{label=195;break;}
 case 193: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=206;break; }
 case 194: 
 throw "Reached an unreachable!";
 case 195: 
 var $559=($554>>>0)<11;
 if($559){label=196;break;}else{label=197;break;}
 case 196: 
 var $561=$554<<1;
 var $562=(($561)&255);
 var $563=$555;
 HEAP8[(($563)>>0)]=$562;
 var $564=$555;
 var $565=(($564+1)|0);
 var $__p_0_i339_i=$565;label=204;break;
 case 197: 
 var $566=((($554)+(16))|0);
 var $567=$566&-16;
 var $568=($567|0)==0;
 var $_size_i343_i=($568?1:$567);
 var $569=_malloc($_size_i343_i);
 var $570=($569|0)==0;
 if($570){label=198;break;}else{var $_lcssa_i345_i=$569;label=203;break;}
 case 198: 
 var $571=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $572=($571|0)==0;
 if($572){label=201;break;}else{label=199;break;}
 case 199: 
 var $574=$571;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$574]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=205;break; }
 case 200: 
 var $575=_malloc($_size_i343_i);
 var $576=($575|0)==0;
 if($576){label=198;break;}else{var $_lcssa_i345_i=$575;label=203;break;}
 case 201: 
 var $578=___cxa_allocate_exception(4);
 var $579=$578;
 HEAP32[(($579)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($578,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { label=206;break; }
 case 202: 
 throw "Reached an unreachable!";
 case 203: 
 var $_lcssa_i345_i;
 var $580=(($cg+156)|0);
 HEAP32[(($580)>>2)]=$_lcssa_i345_i;
 var $581=$567|1;
 var $582=(($555)|0);
 HEAP32[(($582)>>2)]=$581;
 var $583=(($cg+152)|0);
 HEAP32[(($583)>>2)]=$554;
 var $__p_0_i339_i=$_lcssa_i345_i;label=204;break;
 case 204: 
 var $__p_0_i339_i;
 assert($554 % 1 === 0);(_memcpy($__p_0_i339_i, 14320, $554)|0);
 var $584=(($__p_0_i339_i+$554)|0);
 HEAP8[(($584)>>0)]=0;
 var $585=_strlen(3616);
 var $586=($585>>>0)>4294967279;
 if($586){label=209;break;}else{label=211;break;}
 case 205: 
 var $lpad_loopexit296$0 = ___cxa_find_matching_catch(); var $lpad_loopexit296$1 = tempRet0;
 var $lpad_phi298$1=$lpad_loopexit296$1;var $lpad_phi298$0=$lpad_loopexit296$0;label=207;break;
 case 206: 
 var $lpad_nonloopexit297$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit297$1 = tempRet0;
 var $lpad_phi298$1=$lpad_nonloopexit297$1;var $lpad_phi298$0=$lpad_nonloopexit297$0;label=207;break;
 case 207: 
 var $lpad_phi298$0;
 var $lpad_phi298$1;
 var $588=$514;
 var $589=HEAP8[(($588)>>0)];
 var $590=$589&1;
 var $591=(($590<<24)>>24)==0;
 if($591){var $eh_lpad_body32_i$1=$lpad_phi298$1;var $eh_lpad_body32_i$0=$lpad_phi298$0;label=462;break;}else{label=208;break;}
 case 208: 
 var $593=(($cg+140)|0);
 var $594=HEAP32[(($593)>>2)];
 _free($594);
 var $eh_lpad_body32_i$1=$lpad_phi298$1;var $eh_lpad_body32_i$0=$lpad_phi298$0;label=462;break;
 case 209: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { label=476;break; }
 case 210: 
 throw "Reached an unreachable!";
 case 211: 
 var $597=($585>>>0)<11;
 if($597){label=212;break;}else{label=213;break;}
 case 212: 
 var $599=$585<<1;
 var $600=(($599)&255);
 HEAP8[(($226)>>0)]=$600;
 var $601=$15;
 var $602=(($601+1)|0);
 var $__p_0_i_i=$602;label=220;break;
 case 213: 
 var $603=((($585)+(16))|0);
 var $604=$603&-16;
 var $605=($604|0)==0;
 var $_size_i_i=($605?1:$604);
 var $606=_malloc($_size_i_i);
 var $607=($606|0)==0;
 if($607){label=214;break;}else{var $_lcssa_i_i=$606;label=219;break;}
 case 214: 
 var $608=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $609=($608|0)==0;
 if($609){label=217;break;}else{label=215;break;}
 case 215: 
 var $611=$608;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$611]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { label=475;break; }
 case 216: 
 var $612=_malloc($_size_i_i);
 var $613=($612|0)==0;
 if($613){label=214;break;}else{var $_lcssa_i_i=$612;label=219;break;}
 case 217: 
 var $615=___cxa_allocate_exception(4);
 var $616=$615;
 HEAP32[(($616)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($615,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { label=476;break; }
 case 218: 
 throw "Reached an unreachable!";
 case 219: 
 var $_lcssa_i_i;
 var $617=(($15+8)|0);
 HEAP32[(($617)>>2)]=$_lcssa_i_i;
 var $618=$604|1;
 var $619=(($15)|0);
 HEAP32[(($619)>>2)]=$618;
 var $620=(($15+4)|0);
 HEAP32[(($620)>>2)]=$585;
 var $__p_0_i_i=$_lcssa_i_i;label=220;break;
 case 220: 
 var $__p_0_i_i;
 assert($585 % 1 === 0);(_memcpy($__p_0_i_i, 3616, $585)|0);
 var $621=(($__p_0_i_i+$585)|0);
 HEAP8[(($621)>>0)]=0;
 var $622=(($cg+20)|0);
 var $623=HEAP8[(($226)>>0)];
 var $624=$623&1;
 var $625=(($624<<24)>>24)==0;
 if($625){label=222;break;}else{label=221;break;}
 case 221: 
 var $627=(($15+8)|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=(($15+4)|0);
 var $630=HEAP32[(($629)>>2)];
 var $637=$630;var $636=$628;label=223;break;
 case 222: 
 var $632=$15;
 var $633=(($632+1)|0);
 var $634=($623&255);
 var $635=$634>>>1;
 var $637=$635;var $636=$633;label=223;break;
 case 223: 
 var $636;
 var $637;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($622,$636,$637) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { label=478;break; }
 case 224: 
 if($625){label=226;break;}else{label=225;break;}
 case 225: 
 var $639=(($15+8)|0);
 var $640=HEAP32[(($639)>>2)];
 _free($640);
 label=226;break;
 case 226: 
 var $641=_strlen(2600);
 var $642=($641>>>0)>4294967279;
 if($642){label=227;break;}else{label=229;break;}
 case 227: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { label=476;break; }
 case 228: 
 throw "Reached an unreachable!";
 case 229: 
 var $645=($641>>>0)<11;
 if($645){label=230;break;}else{label=231;break;}
 case 230: 
 var $647=$641<<1;
 var $648=(($647)&255);
 HEAP8[(($227)>>0)]=$648;
 var $649=$16;
 var $650=(($649+1)|0);
 var $__p_0_i45_i=$650;label=238;break;
 case 231: 
 var $651=((($641)+(16))|0);
 var $652=$651&-16;
 var $653=($652|0)==0;
 var $_size_i49_i=($653?1:$652);
 var $654=_malloc($_size_i49_i);
 var $655=($654|0)==0;
 if($655){label=232;break;}else{var $_lcssa_i51_i=$654;label=237;break;}
 case 232: 
 var $656=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $657=($656|0)==0;
 if($657){label=235;break;}else{label=233;break;}
 case 233: 
 var $659=$656;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$659]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=474;break; }
 case 234: 
 var $660=_malloc($_size_i49_i);
 var $661=($660|0)==0;
 if($661){label=232;break;}else{var $_lcssa_i51_i=$660;label=237;break;}
 case 235: 
 var $663=___cxa_allocate_exception(4);
 var $664=$663;
 HEAP32[(($664)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($663,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=236;break; } else { label=476;break; }
 case 236: 
 throw "Reached an unreachable!";
 case 237: 
 var $_lcssa_i51_i;
 var $665=(($16+8)|0);
 HEAP32[(($665)>>2)]=$_lcssa_i51_i;
 var $666=$652|1;
 var $667=(($16)|0);
 HEAP32[(($667)>>2)]=$666;
 var $668=(($16+4)|0);
 HEAP32[(($668)>>2)]=$641;
 var $__p_0_i45_i=$_lcssa_i51_i;label=238;break;
 case 238: 
 var $__p_0_i45_i;
 assert($641 % 1 === 0);(_memcpy($__p_0_i45_i, 2600, $641)|0);
 var $669=(($__p_0_i45_i+$641)|0);
 HEAP8[(($669)>>0)]=0;
 var $670=(($cg+48)|0);
 var $671=HEAP8[(($227)>>0)];
 var $672=$671&1;
 var $673=(($672<<24)>>24)==0;
 if($673){label=240;break;}else{label=239;break;}
 case 239: 
 var $675=(($16+8)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=(($16+4)|0);
 var $678=HEAP32[(($677)>>2)];
 var $685=$678;var $684=$676;label=241;break;
 case 240: 
 var $680=$16;
 var $681=(($680+1)|0);
 var $682=($671&255);
 var $683=$682>>>1;
 var $685=$683;var $684=$681;label=241;break;
 case 241: 
 var $684;
 var $685;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($670,$684,$685) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=480;break; }
 case 242: 
 if($673){label=244;break;}else{label=243;break;}
 case 243: 
 var $687=(($16+8)|0);
 var $688=HEAP32[(($687)>>2)];
 _free($688);
 label=244;break;
 case 244: 
 var $689=_strlen(2184);
 var $690=($689>>>0)>4294967279;
 if($690){label=245;break;}else{label=247;break;}
 case 245: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=476;break; }
 case 246: 
 throw "Reached an unreachable!";
 case 247: 
 var $693=($689>>>0)<11;
 if($693){label=248;break;}else{label=249;break;}
 case 248: 
 var $695=$689<<1;
 var $696=(($695)&255);
 HEAP8[(($228)>>0)]=$696;
 var $697=$17;
 var $698=(($697+1)|0);
 var $__p_0_i62_i=$698;label=256;break;
 case 249: 
 var $699=((($689)+(16))|0);
 var $700=$699&-16;
 var $701=($700|0)==0;
 var $_size_i66_i=($701?1:$700);
 var $702=_malloc($_size_i66_i);
 var $703=($702|0)==0;
 if($703){label=250;break;}else{var $_lcssa_i68_i=$702;label=255;break;}
 case 250: 
 var $704=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $705=($704|0)==0;
 if($705){label=253;break;}else{label=251;break;}
 case 251: 
 var $707=$704;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$707]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=473;break; }
 case 252: 
 var $708=_malloc($_size_i66_i);
 var $709=($708|0)==0;
 if($709){label=250;break;}else{var $_lcssa_i68_i=$708;label=255;break;}
 case 253: 
 var $711=___cxa_allocate_exception(4);
 var $712=$711;
 HEAP32[(($712)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($711,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=254;break; } else { label=476;break; }
 case 254: 
 throw "Reached an unreachable!";
 case 255: 
 var $_lcssa_i68_i;
 var $713=(($17+8)|0);
 HEAP32[(($713)>>2)]=$_lcssa_i68_i;
 var $714=$700|1;
 var $715=(($17)|0);
 HEAP32[(($715)>>2)]=$714;
 var $716=(($17+4)|0);
 HEAP32[(($716)>>2)]=$689;
 var $__p_0_i62_i=$_lcssa_i68_i;label=256;break;
 case 256: 
 var $__p_0_i62_i;
 assert($689 % 1 === 0);(_memcpy($__p_0_i62_i, 2184, $689)|0);
 var $717=(($__p_0_i62_i+$689)|0);
 HEAP8[(($717)>>0)]=0;
 var $718=(($cg+76)|0);
 var $719=HEAP8[(($228)>>0)];
 var $720=$719&1;
 var $721=(($720<<24)>>24)==0;
 if($721){label=258;break;}else{label=257;break;}
 case 257: 
 var $723=(($17+8)|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=(($17+4)|0);
 var $726=HEAP32[(($725)>>2)];
 var $733=$726;var $732=$724;label=259;break;
 case 258: 
 var $728=$17;
 var $729=(($728+1)|0);
 var $730=($719&255);
 var $731=$730>>>1;
 var $733=$731;var $732=$729;label=259;break;
 case 259: 
 var $732;
 var $733;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($718,$732,$733) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=482;break; }
 case 260: 
 if($721){label=262;break;}else{label=261;break;}
 case 261: 
 var $735=(($17+8)|0);
 var $736=HEAP32[(($735)>>2)];
 _free($736);
 label=262;break;
 case 262: 
 var $737=_strlen(1928);
 var $738=($737>>>0)>4294967279;
 if($738){label=263;break;}else{label=265;break;}
 case 263: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=264;break; } else { label=476;break; }
 case 264: 
 throw "Reached an unreachable!";
 case 265: 
 var $741=($737>>>0)<11;
 if($741){label=266;break;}else{label=267;break;}
 case 266: 
 var $743=$737<<1;
 var $744=(($743)&255);
 HEAP8[(($229)>>0)]=$744;
 var $745=$18;
 var $746=(($745+1)|0);
 var $__p_0_i79_i=$746;label=274;break;
 case 267: 
 var $747=((($737)+(16))|0);
 var $748=$747&-16;
 var $749=($748|0)==0;
 var $_size_i83_i=($749?1:$748);
 var $750=_malloc($_size_i83_i);
 var $751=($750|0)==0;
 if($751){label=268;break;}else{var $_lcssa_i85_i=$750;label=273;break;}
 case 268: 
 var $752=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $753=($752|0)==0;
 if($753){label=271;break;}else{label=269;break;}
 case 269: 
 var $755=$752;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$755]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=472;break; }
 case 270: 
 var $756=_malloc($_size_i83_i);
 var $757=($756|0)==0;
 if($757){label=268;break;}else{var $_lcssa_i85_i=$756;label=273;break;}
 case 271: 
 var $759=___cxa_allocate_exception(4);
 var $760=$759;
 HEAP32[(($760)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($759,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=476;break; }
 case 272: 
 throw "Reached an unreachable!";
 case 273: 
 var $_lcssa_i85_i;
 var $761=(($18+8)|0);
 HEAP32[(($761)>>2)]=$_lcssa_i85_i;
 var $762=$748|1;
 var $763=(($18)|0);
 HEAP32[(($763)>>2)]=$762;
 var $764=(($18+4)|0);
 HEAP32[(($764)>>2)]=$737;
 var $__p_0_i79_i=$_lcssa_i85_i;label=274;break;
 case 274: 
 var $__p_0_i79_i;
 assert($737 % 1 === 0);(_memcpy($__p_0_i79_i, 1928, $737)|0);
 var $765=(($__p_0_i79_i+$737)|0);
 HEAP8[(($765)>>0)]=0;
 var $766=(($cg+104)|0);
 var $767=HEAP8[(($229)>>0)];
 var $768=$767&1;
 var $769=(($768<<24)>>24)==0;
 if($769){label=276;break;}else{label=275;break;}
 case 275: 
 var $771=(($18+8)|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=(($18+4)|0);
 var $774=HEAP32[(($773)>>2)];
 var $781=$774;var $780=$772;label=277;break;
 case 276: 
 var $776=$18;
 var $777=(($776+1)|0);
 var $778=($767&255);
 var $779=$778>>>1;
 var $781=$779;var $780=$777;label=277;break;
 case 277: 
 var $780;
 var $781;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($766,$780,$781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=484;break; }
 case 278: 
 if($769){label=280;break;}else{label=279;break;}
 case 279: 
 var $783=(($18+8)|0);
 var $784=HEAP32[(($783)>>2)];
 _free($784);
 label=280;break;
 case 280: 
 var $785=_strlen(1600);
 var $786=($785>>>0)>4294967279;
 if($786){label=281;break;}else{label=283;break;}
 case 281: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=282;break; } else { label=476;break; }
 case 282: 
 throw "Reached an unreachable!";
 case 283: 
 var $789=($785>>>0)<11;
 if($789){label=284;break;}else{label=285;break;}
 case 284: 
 var $791=$785<<1;
 var $792=(($791)&255);
 HEAP8[(($230)>>0)]=$792;
 var $793=$19;
 var $794=(($793+1)|0);
 var $__p_0_i96_i=$794;label=292;break;
 case 285: 
 var $795=((($785)+(16))|0);
 var $796=$795&-16;
 var $797=($796|0)==0;
 var $_size_i100_i=($797?1:$796);
 var $798=_malloc($_size_i100_i);
 var $799=($798|0)==0;
 if($799){label=286;break;}else{var $_lcssa_i102_i=$798;label=291;break;}
 case 286: 
 var $800=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $801=($800|0)==0;
 if($801){label=289;break;}else{label=287;break;}
 case 287: 
 var $803=$800;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$803]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=288;break; } else { label=471;break; }
 case 288: 
 var $804=_malloc($_size_i100_i);
 var $805=($804|0)==0;
 if($805){label=286;break;}else{var $_lcssa_i102_i=$804;label=291;break;}
 case 289: 
 var $807=___cxa_allocate_exception(4);
 var $808=$807;
 HEAP32[(($808)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($807,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=476;break; }
 case 290: 
 throw "Reached an unreachable!";
 case 291: 
 var $_lcssa_i102_i;
 var $809=(($19+8)|0);
 HEAP32[(($809)>>2)]=$_lcssa_i102_i;
 var $810=$796|1;
 var $811=(($19)|0);
 HEAP32[(($811)>>2)]=$810;
 var $812=(($19+4)|0);
 HEAP32[(($812)>>2)]=$785;
 var $__p_0_i96_i=$_lcssa_i102_i;label=292;break;
 case 292: 
 var $__p_0_i96_i;
 assert($785 % 1 === 0);(_memcpy($__p_0_i96_i, 1600, $785)|0);
 var $813=(($__p_0_i96_i+$785)|0);
 HEAP8[(($813)>>0)]=0;
 var $814=(($cg+132)|0);
 var $815=HEAP8[(($230)>>0)];
 var $816=$815&1;
 var $817=(($816<<24)>>24)==0;
 if($817){label=294;break;}else{label=293;break;}
 case 293: 
 var $819=(($19+8)|0);
 var $820=HEAP32[(($819)>>2)];
 var $821=(($19+4)|0);
 var $822=HEAP32[(($821)>>2)];
 var $829=$822;var $828=$820;label=295;break;
 case 294: 
 var $824=$19;
 var $825=(($824+1)|0);
 var $826=($815&255);
 var $827=$826>>>1;
 var $829=$827;var $828=$825;label=295;break;
 case 295: 
 var $828;
 var $829;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($814,$828,$829) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=486;break; }
 case 296: 
 if($817){label=298;break;}else{label=297;break;}
 case 297: 
 var $831=(($19+8)|0);
 var $832=HEAP32[(($831)>>2)];
 _free($832);
 label=298;break;
 case 298: 
 var $833=_strlen(1368);
 var $834=($833>>>0)>4294967279;
 if($834){label=299;break;}else{label=301;break;}
 case 299: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=476;break; }
 case 300: 
 throw "Reached an unreachable!";
 case 301: 
 var $837=($833>>>0)<11;
 if($837){label=302;break;}else{label=303;break;}
 case 302: 
 var $839=$833<<1;
 var $840=(($839)&255);
 HEAP8[(($231)>>0)]=$840;
 var $841=$20;
 var $842=(($841+1)|0);
 var $__p_0_i113_i=$842;label=310;break;
 case 303: 
 var $843=((($833)+(16))|0);
 var $844=$843&-16;
 var $845=($844|0)==0;
 var $_size_i117_i=($845?1:$844);
 var $846=_malloc($_size_i117_i);
 var $847=($846|0)==0;
 if($847){label=304;break;}else{var $_lcssa_i119_i=$846;label=309;break;}
 case 304: 
 var $848=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $849=($848|0)==0;
 if($849){label=307;break;}else{label=305;break;}
 case 305: 
 var $851=$848;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$851]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=470;break; }
 case 306: 
 var $852=_malloc($_size_i117_i);
 var $853=($852|0)==0;
 if($853){label=304;break;}else{var $_lcssa_i119_i=$852;label=309;break;}
 case 307: 
 var $855=___cxa_allocate_exception(4);
 var $856=$855;
 HEAP32[(($856)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($855,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=308;break; } else { label=476;break; }
 case 308: 
 throw "Reached an unreachable!";
 case 309: 
 var $_lcssa_i119_i;
 var $857=(($20+8)|0);
 HEAP32[(($857)>>2)]=$_lcssa_i119_i;
 var $858=$844|1;
 var $859=(($20)|0);
 HEAP32[(($859)>>2)]=$858;
 var $860=(($20+4)|0);
 HEAP32[(($860)>>2)]=$833;
 var $__p_0_i113_i=$_lcssa_i119_i;label=310;break;
 case 310: 
 var $__p_0_i113_i;
 assert($833 % 1 === 0);(_memcpy($__p_0_i113_i, 1368, $833)|0);
 var $861=(($__p_0_i113_i+$833)|0);
 HEAP8[(($861)>>0)]=0;
 var $862=HEAP8[(($231)>>0)];
 var $863=$862&1;
 var $864=(($863<<24)>>24)==0;
 if($864){label=312;break;}else{label=311;break;}
 case 311: 
 var $866=(($20+8)|0);
 var $867=HEAP32[(($866)>>2)];
 var $868=(($20+4)|0);
 var $869=HEAP32[(($868)>>2)];
 var $876=$869;var $875=$867;label=313;break;
 case 312: 
 var $871=$20;
 var $872=(($871+1)|0);
 var $873=($862&255);
 var $874=$873>>>1;
 var $876=$874;var $875=$872;label=313;break;
 case 313: 
 var $875;
 var $876;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($271,$875,$876) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=314;break; } else { label=488;break; }
 case 314: 
 if($864){label=316;break;}else{label=315;break;}
 case 315: 
 var $878=(($20+8)|0);
 var $879=HEAP32[(($878)>>2)];
 _free($879);
 label=316;break;
 case 316: 
 var $880=_strlen(1216);
 var $881=($880>>>0)>4294967279;
 if($881){label=317;break;}else{label=319;break;}
 case 317: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=476;break; }
 case 318: 
 throw "Reached an unreachable!";
 case 319: 
 var $884=($880>>>0)<11;
 if($884){label=320;break;}else{label=321;break;}
 case 320: 
 var $886=$880<<1;
 var $887=(($886)&255);
 HEAP8[(($232)>>0)]=$887;
 var $888=$21;
 var $889=(($888+1)|0);
 var $__p_0_i129_i=$889;label=328;break;
 case 321: 
 var $890=((($880)+(16))|0);
 var $891=$890&-16;
 var $892=($891|0)==0;
 var $_size_i133_i=($892?1:$891);
 var $893=_malloc($_size_i133_i);
 var $894=($893|0)==0;
 if($894){label=322;break;}else{var $_lcssa_i135_i=$893;label=327;break;}
 case 322: 
 var $895=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $896=($895|0)==0;
 if($896){label=325;break;}else{label=323;break;}
 case 323: 
 var $898=$895;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$898]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=324;break; } else { label=469;break; }
 case 324: 
 var $899=_malloc($_size_i133_i);
 var $900=($899|0)==0;
 if($900){label=322;break;}else{var $_lcssa_i135_i=$899;label=327;break;}
 case 325: 
 var $902=___cxa_allocate_exception(4);
 var $903=$902;
 HEAP32[(($903)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($902,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=326;break; } else { label=476;break; }
 case 326: 
 throw "Reached an unreachable!";
 case 327: 
 var $_lcssa_i135_i;
 var $904=(($21+8)|0);
 HEAP32[(($904)>>2)]=$_lcssa_i135_i;
 var $905=$891|1;
 var $906=(($21)|0);
 HEAP32[(($906)>>2)]=$905;
 var $907=(($21+4)|0);
 HEAP32[(($907)>>2)]=$880;
 var $__p_0_i129_i=$_lcssa_i135_i;label=328;break;
 case 328: 
 var $__p_0_i129_i;
 assert($880 % 1 === 0);(_memcpy($__p_0_i129_i, 1216, $880)|0);
 var $908=(($__p_0_i129_i+$880)|0);
 HEAP8[(($908)>>0)]=0;
 var $909=HEAP8[(($232)>>0)];
 var $910=$909&1;
 var $911=(($910<<24)>>24)==0;
 if($911){label=330;break;}else{label=329;break;}
 case 329: 
 var $913=(($21+8)|0);
 var $914=HEAP32[(($913)>>2)];
 var $915=(($21+4)|0);
 var $916=HEAP32[(($915)>>2)];
 var $923=$916;var $922=$914;label=331;break;
 case 330: 
 var $918=$21;
 var $919=(($918+1)|0);
 var $920=($909&255);
 var $921=$920>>>1;
 var $923=$921;var $922=$919;label=331;break;
 case 331: 
 var $922;
 var $923;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($342,$922,$923) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=332;break; } else { label=490;break; }
 case 332: 
 if($911){label=334;break;}else{label=333;break;}
 case 333: 
 var $925=(($21+8)|0);
 var $926=HEAP32[(($925)>>2)];
 _free($926);
 label=334;break;
 case 334: 
 var $927=_strlen(1080);
 var $928=($927>>>0)>4294967279;
 if($928){label=335;break;}else{label=337;break;}
 case 335: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=336;break; } else { label=476;break; }
 case 336: 
 throw "Reached an unreachable!";
 case 337: 
 var $931=($927>>>0)<11;
 if($931){label=338;break;}else{label=339;break;}
 case 338: 
 var $933=$927<<1;
 var $934=(($933)&255);
 HEAP8[(($233)>>0)]=$934;
 var $935=$22;
 var $936=(($935+1)|0);
 var $__p_0_i146_i=$936;label=346;break;
 case 339: 
 var $937=((($927)+(16))|0);
 var $938=$937&-16;
 var $939=($938|0)==0;
 var $_size_i150_i=($939?1:$938);
 var $940=_malloc($_size_i150_i);
 var $941=($940|0)==0;
 if($941){label=340;break;}else{var $_lcssa_i152_i=$940;label=345;break;}
 case 340: 
 var $942=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $943=($942|0)==0;
 if($943){label=343;break;}else{label=341;break;}
 case 341: 
 var $945=$942;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$945]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=342;break; } else { label=468;break; }
 case 342: 
 var $946=_malloc($_size_i150_i);
 var $947=($946|0)==0;
 if($947){label=340;break;}else{var $_lcssa_i152_i=$946;label=345;break;}
 case 343: 
 var $949=___cxa_allocate_exception(4);
 var $950=$949;
 HEAP32[(($950)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($949,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=344;break; } else { label=476;break; }
 case 344: 
 throw "Reached an unreachable!";
 case 345: 
 var $_lcssa_i152_i;
 var $951=(($22+8)|0);
 HEAP32[(($951)>>2)]=$_lcssa_i152_i;
 var $952=$938|1;
 var $953=(($22)|0);
 HEAP32[(($953)>>2)]=$952;
 var $954=(($22+4)|0);
 HEAP32[(($954)>>2)]=$927;
 var $__p_0_i146_i=$_lcssa_i152_i;label=346;break;
 case 346: 
 var $__p_0_i146_i;
 assert($927 % 1 === 0);(_memcpy($__p_0_i146_i, 1080, $927)|0);
 var $955=(($__p_0_i146_i+$927)|0);
 HEAP8[(($955)>>0)]=0;
 var $956=HEAP8[(($233)>>0)];
 var $957=$956&1;
 var $958=(($957<<24)>>24)==0;
 if($958){label=348;break;}else{label=347;break;}
 case 347: 
 var $960=(($22+8)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=(($22+4)|0);
 var $963=HEAP32[(($962)>>2)];
 var $970=$963;var $969=$961;label=349;break;
 case 348: 
 var $965=$22;
 var $966=(($965+1)|0);
 var $967=($956&255);
 var $968=$967>>>1;
 var $970=$968;var $969=$966;label=349;break;
 case 349: 
 var $969;
 var $970;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($413,$969,$970) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=492;break; }
 case 350: 
 if($958){label=352;break;}else{label=351;break;}
 case 351: 
 var $972=(($22+8)|0);
 var $973=HEAP32[(($972)>>2)];
 _free($973);
 label=352;break;
 case 352: 
 var $974=_strlen(4648);
 var $975=($974>>>0)>4294967279;
 if($975){label=353;break;}else{label=355;break;}
 case 353: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=354;break; } else { label=476;break; }
 case 354: 
 throw "Reached an unreachable!";
 case 355: 
 var $978=($974>>>0)<11;
 if($978){label=356;break;}else{label=357;break;}
 case 356: 
 var $980=$974<<1;
 var $981=(($980)&255);
 HEAP8[(($234)>>0)]=$981;
 var $982=$23;
 var $983=(($982+1)|0);
 var $__p_0_i163_i=$983;label=364;break;
 case 357: 
 var $984=((($974)+(16))|0);
 var $985=$984&-16;
 var $986=($985|0)==0;
 var $_size_i167_i=($986?1:$985);
 var $987=_malloc($_size_i167_i);
 var $988=($987|0)==0;
 if($988){label=358;break;}else{var $_lcssa_i169_i=$987;label=363;break;}
 case 358: 
 var $989=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $990=($989|0)==0;
 if($990){label=361;break;}else{label=359;break;}
 case 359: 
 var $992=$989;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$992]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=360;break; } else { label=467;break; }
 case 360: 
 var $993=_malloc($_size_i167_i);
 var $994=($993|0)==0;
 if($994){label=358;break;}else{var $_lcssa_i169_i=$993;label=363;break;}
 case 361: 
 var $996=___cxa_allocate_exception(4);
 var $997=$996;
 HEAP32[(($997)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($996,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=362;break; } else { label=476;break; }
 case 362: 
 throw "Reached an unreachable!";
 case 363: 
 var $_lcssa_i169_i;
 var $998=(($23+8)|0);
 HEAP32[(($998)>>2)]=$_lcssa_i169_i;
 var $999=$985|1;
 var $1000=(($23)|0);
 HEAP32[(($1000)>>2)]=$999;
 var $1001=(($23+4)|0);
 HEAP32[(($1001)>>2)]=$974;
 var $__p_0_i163_i=$_lcssa_i169_i;label=364;break;
 case 364: 
 var $__p_0_i163_i;
 assert($974 % 1 === 0);(_memcpy($__p_0_i163_i, 4648, $974)|0);
 var $1002=(($__p_0_i163_i+$974)|0);
 HEAP8[(($1002)>>0)]=0;
 var $1003=HEAP8[(($234)>>0)];
 var $1004=$1003&1;
 var $1005=(($1004<<24)>>24)==0;
 if($1005){label=366;break;}else{label=365;break;}
 case 365: 
 var $1007=(($23+8)|0);
 var $1008=HEAP32[(($1007)>>2)];
 var $1009=(($23+4)|0);
 var $1010=HEAP32[(($1009)>>2)];
 var $1017=$1010;var $1016=$1008;label=367;break;
 case 366: 
 var $1012=$23;
 var $1013=(($1012+1)|0);
 var $1014=($1003&255);
 var $1015=$1014>>>1;
 var $1017=$1015;var $1016=$1013;label=367;break;
 case 367: 
 var $1016;
 var $1017;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($484,$1016,$1017) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=368;break; } else { label=494;break; }
 case 368: 
 if($1005){label=370;break;}else{label=369;break;}
 case 369: 
 var $1019=(($23+8)|0);
 var $1020=HEAP32[(($1019)>>2)];
 _free($1020);
 label=370;break;
 case 370: 
 var $1021=_strlen(4360);
 var $1022=($1021>>>0)>4294967279;
 if($1022){label=371;break;}else{label=373;break;}
 case 371: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=372;break; } else { label=476;break; }
 case 372: 
 throw "Reached an unreachable!";
 case 373: 
 var $1025=($1021>>>0)<11;
 if($1025){label=374;break;}else{label=375;break;}
 case 374: 
 var $1027=$1021<<1;
 var $1028=(($1027)&255);
 HEAP8[(($235)>>0)]=$1028;
 var $1029=$24;
 var $1030=(($1029+1)|0);
 var $__p_0_i180_i=$1030;label=382;break;
 case 375: 
 var $1031=((($1021)+(16))|0);
 var $1032=$1031&-16;
 var $1033=($1032|0)==0;
 var $_size_i184_i=($1033?1:$1032);
 var $1034=_malloc($_size_i184_i);
 var $1035=($1034|0)==0;
 if($1035){label=376;break;}else{var $_lcssa_i186_i=$1034;label=381;break;}
 case 376: 
 var $1036=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1037=($1036|0)==0;
 if($1037){label=379;break;}else{label=377;break;}
 case 377: 
 var $1039=$1036;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1039]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=378;break; } else { label=466;break; }
 case 378: 
 var $1040=_malloc($_size_i184_i);
 var $1041=($1040|0)==0;
 if($1041){label=376;break;}else{var $_lcssa_i186_i=$1040;label=381;break;}
 case 379: 
 var $1043=___cxa_allocate_exception(4);
 var $1044=$1043;
 HEAP32[(($1044)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1043,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=380;break; } else { label=476;break; }
 case 380: 
 throw "Reached an unreachable!";
 case 381: 
 var $_lcssa_i186_i;
 var $1045=(($24+8)|0);
 HEAP32[(($1045)>>2)]=$_lcssa_i186_i;
 var $1046=$1032|1;
 var $1047=(($24)|0);
 HEAP32[(($1047)>>2)]=$1046;
 var $1048=(($24+4)|0);
 HEAP32[(($1048)>>2)]=$1021;
 var $__p_0_i180_i=$_lcssa_i186_i;label=382;break;
 case 382: 
 var $__p_0_i180_i;
 assert($1021 % 1 === 0);(_memcpy($__p_0_i180_i, 4360, $1021)|0);
 var $1049=(($__p_0_i180_i+$1021)|0);
 HEAP8[(($1049)>>0)]=0;
 var $1050=HEAP8[(($235)>>0)];
 var $1051=$1050&1;
 var $1052=(($1051<<24)>>24)==0;
 if($1052){label=384;break;}else{label=383;break;}
 case 383: 
 var $1054=(($24+8)|0);
 var $1055=HEAP32[(($1054)>>2)];
 var $1056=(($24+4)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1064=$1057;var $1063=$1055;label=385;break;
 case 384: 
 var $1059=$24;
 var $1060=(($1059+1)|0);
 var $1061=($1050&255);
 var $1062=$1061>>>1;
 var $1064=$1062;var $1063=$1060;label=385;break;
 case 385: 
 var $1063;
 var $1064;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($555,$1063,$1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=386;break; } else { label=496;break; }
 case 386: 
 if($1052){label=388;break;}else{label=387;break;}
 case 387: 
 var $1066=(($24+8)|0);
 var $1067=HEAP32[(($1066)>>2)];
 _free($1067);
 label=388;break;
 case 388: 
 var $1068=(($cg+4)|0);
 HEAP32[(($1068)>>2)]=$70;
 var $1069=(($cg+8)|0);
 HEAP32[(($1069)>>2)]=$70;
 var $1070$0=_llvm_umul_with_overflow_i32($70,4);
 var $1070$1=tempRet0;
 var $1071=$1070$1;
 var $1072=$1070$0;
 var $1073=($1071?-1:$1072);
 var $1074=($1073|0)==0;
 var $_size_i195_i=($1074?1:$1073);
 var $1075=_malloc($_size_i195_i);
 var $1076=($1075|0)==0;
 if($1076){label=389;break;}else{var $_lcssa_i197_i=$1075;label=394;break;}
 case 389: 
 var $1077=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1078=($1077|0)==0;
 if($1078){label=392;break;}else{label=390;break;}
 case 390: 
 var $1080=$1077;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1080]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=391;break; } else { label=465;break; }
 case 391: 
 var $1081=_malloc($_size_i195_i);
 var $1082=($1081|0)==0;
 if($1082){label=389;break;}else{var $_lcssa_i197_i=$1081;label=394;break;}
 case 392: 
 var $1084=___cxa_allocate_exception(4);
 var $1085=$1084;
 HEAP32[(($1085)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1084,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=393;break; } else { label=476;break; }
 case 393: 
 throw "Reached an unreachable!";
 case 394: 
 var $_lcssa_i197_i;
 var $1086=$_lcssa_i197_i;
 var $1087=(($cg+12)|0);
 HEAP32[(($1087)>>2)]=$1086;
 var $1088$0=_llvm_umul_with_overflow_i32($70,28);
 var $1088$1=tempRet0;
 var $1089=$1088$1;
 var $1090=$1088$0;
 var $1091$0=_llvm_uadd_with_overflow_i32($1090,4);
 var $1091$1=tempRet0;
 var $1092=$1091$1;
 var $1093=$1089|$1092;
 var $1094=$1091$0;
 var $1095=($1093?-1:$1094);
 var $1096=($1095|0)==0;
 var $_size_i203_i=($1096?1:$1095);
 var $1097=($70|0)==0;
 var $_idx_i=((($70)*(28))&-1);
 var $1098=(((($_idx_i|0))/(28))&-1);
 var $1099=(($cg+60)|0);
 var $1100=(($cg+64)|0);
 var $1101=$1100;
 var $1102=$1100;
 var $1103=(($1102+1)|0);
 var $1104=(($cg+72)|0);
 var $1105=(($cg+68)|0);
 var $1106=$301;
 var $1107=$301;
 var $1108=(($1107+1)|0);
 var $1109=(($cg+56)|0);
 var $1110=(($cg+52)|0);
 var $storemerge_i=0;label=395;break;
 case 395: 
 var $storemerge_i;
 var $1112=($storemerge_i|0)<($70|0);
 if($1112){label=396;break;}else{label=507;break;}
 case 396: 
 var $1114=_malloc($_size_i203_i);
 var $1115=($1114|0)==0;
 if($1115){label=397;break;}else{var $_lcssa_i205_i=$1114;label=402;break;}
 case 397: 
 var $1116=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1117=($1116|0)==0;
 if($1117){label=400;break;}else{label=398;break;}
 case 398: 
 var $1119=$1116;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1119]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=399;break; } else { label=463;break; }
 case 399: 
 var $1120=_malloc($_size_i203_i);
 var $1121=($1120|0)==0;
 if($1121){label=397;break;}else{var $_lcssa_i205_i=$1120;label=402;break;}
 case 400: 
 var $1123=___cxa_allocate_exception(4);
 var $1124=$1123;
 HEAP32[(($1124)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1123,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=401;break; } else { label=476;break; }
 case 401: 
 throw "Reached an unreachable!";
 case 402: 
 var $_lcssa_i205_i;
 var $1125=$_lcssa_i205_i;
 HEAP32[(($1125)>>2)]=$70;
 var $1126=(($_lcssa_i205_i+4)|0);
 var $1127=$1126;
 if($1097){label=433;break;}else{label=403;break;}
 case 403: 
 var $1129=(($1127+((($70)*(28))&-1))|0);
 var $1130=$1127;label=404;break;
 case 404: 
 var $1130;
 var $1131=_strlen(4656);
 var $1132=($1131>>>0)>4294967279;
 if($1132){label=405;break;}else{label=407;break;}
 case 405: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=406;break; } else { label=499;break; }
 case 406: 
 throw "Reached an unreachable!";
 case 407: 
 var $1135=($1131>>>0)<11;
 if($1135){label=408;break;}else{label=409;break;}
 case 408: 
 var $1137=$1131<<1;
 var $1138=(($1137)&255);
 var $1139=$1130;
 HEAP8[(($1139)>>0)]=$1138;
 var $1140=$1130;
 var $1141=(($1140+1)|0);
 var $__p_0_i350_i=$1141;label=416;break;
 case 409: 
 var $1142=((($1131)+(16))|0);
 var $1143=$1142&-16;
 var $1144=($1143|0)==0;
 var $_size_i354_i=($1144?1:$1143);
 var $1145=_malloc($_size_i354_i);
 var $1146=($1145|0)==0;
 if($1146){label=410;break;}else{var $_lcssa_i356_i=$1145;label=415;break;}
 case 410: 
 var $1147=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1148=($1147|0)==0;
 if($1148){label=413;break;}else{label=411;break;}
 case 411: 
 var $1150=$1147;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1150]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=412;break; } else { label=498;break; }
 case 412: 
 var $1151=_malloc($_size_i354_i);
 var $1152=($1151|0)==0;
 if($1152){label=410;break;}else{var $_lcssa_i356_i=$1151;label=415;break;}
 case 413: 
 var $1154=___cxa_allocate_exception(4);
 var $1155=$1154;
 HEAP32[(($1155)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1154,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=414;break; } else { label=499;break; }
 case 414: 
 throw "Reached an unreachable!";
 case 415: 
 var $_lcssa_i356_i;
 var $1156=(($1130+8)|0);
 HEAP32[(($1156)>>2)]=$_lcssa_i356_i;
 var $1157=$1143|1;
 var $1158=(($1130)|0);
 HEAP32[(($1158)>>2)]=$1157;
 var $1159=(($1130+4)|0);
 HEAP32[(($1159)>>2)]=$1131;
 var $__p_0_i350_i=$_lcssa_i356_i;label=416;break;
 case 416: 
 var $__p_0_i350_i;
 assert($1131 % 1 === 0);(_memcpy($__p_0_i350_i, 4656, $1131)|0);
 var $1160=(($__p_0_i350_i+$1131)|0);
 HEAP8[(($1160)>>0)]=0;
 var $1161=(($1130+12)|0);
 HEAP32[(($1161)>>2)]=0;
 var $1162=_strlen(14320);
 var $1163=(($1130+16)|0);
 var $1164=($1162>>>0)>4294967279;
 if($1164){label=417;break;}else{label=419;break;}
 case 417: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=418;break; } else { label=430;break; }
 case 418: 
 throw "Reached an unreachable!";
 case 419: 
 var $1167=($1162>>>0)<11;
 if($1167){label=420;break;}else{label=421;break;}
 case 420: 
 var $1169=$1162<<1;
 var $1170=(($1169)&255);
 var $1171=$1163;
 HEAP8[(($1171)>>0)]=$1170;
 var $1172=$1163;
 var $1173=(($1172+1)|0);
 var $__p_0_i361_i=$1173;label=428;break;
 case 421: 
 var $1174=((($1162)+(16))|0);
 var $1175=$1174&-16;
 var $1176=($1175|0)==0;
 var $_size_i365_i=($1176?1:$1175);
 var $1177=_malloc($_size_i365_i);
 var $1178=($1177|0)==0;
 if($1178){label=422;break;}else{var $_lcssa_i367_i=$1177;label=427;break;}
 case 422: 
 var $1179=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1180=($1179|0)==0;
 if($1180){label=425;break;}else{label=423;break;}
 case 423: 
 var $1182=$1179;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1182]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=424;break; } else { label=429;break; }
 case 424: 
 var $1183=_malloc($_size_i365_i);
 var $1184=($1183|0)==0;
 if($1184){label=422;break;}else{var $_lcssa_i367_i=$1183;label=427;break;}
 case 425: 
 var $1186=___cxa_allocate_exception(4);
 var $1187=$1186;
 HEAP32[(($1187)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1186,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=426;break; } else { label=430;break; }
 case 426: 
 throw "Reached an unreachable!";
 case 427: 
 var $_lcssa_i367_i;
 var $1188=(($1130+24)|0);
 HEAP32[(($1188)>>2)]=$_lcssa_i367_i;
 var $1189=$1175|1;
 var $1190=(($1163)|0);
 HEAP32[(($1190)>>2)]=$1189;
 var $1191=(($1130+20)|0);
 HEAP32[(($1191)>>2)]=$1162;
 var $__p_0_i361_i=$_lcssa_i367_i;label=428;break;
 case 428: 
 var $__p_0_i361_i;
 assert($1162 % 1 === 0);(_memcpy($__p_0_i361_i, 14320, $1162)|0);
 var $1192=(($__p_0_i361_i+$1162)|0);
 HEAP8[(($1192)>>0)]=0;
 var $1193=(($1130+28)|0);
 var $1194=($1193|0)==($1129|0);
 if($1194){label=433;break;}else{var $1130=$1193;label=404;break;}
 case 429: 
 var $lpad_loopexit248$0 = ___cxa_find_matching_catch(); var $lpad_loopexit248$1 = tempRet0;
 var $lpad_phi250$1=$lpad_loopexit248$1;var $lpad_phi250$0=$lpad_loopexit248$0;label=431;break;
 case 430: 
 var $lpad_nonloopexit255$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit255$1 = tempRet0;
 var $lpad_phi250$1=$lpad_nonloopexit255$1;var $lpad_phi250$0=$lpad_nonloopexit255$0;label=431;break;
 case 431: 
 var $lpad_phi250$0;
 var $lpad_phi250$1;
 var $1195=$1130;
 var $1196=HEAP8[(($1195)>>0)];
 var $1197=$1196&1;
 var $1198=(($1197<<24)>>24)==0;
 if($1198){var $eh_lpad_body213_i$1=$lpad_phi250$1;var $eh_lpad_body213_i$0=$lpad_phi250$0;label=500;break;}else{label=432;break;}
 case 432: 
 var $1200=(($1130+8)|0);
 var $1201=HEAP32[(($1200)>>2)];
 _free($1201);
 var $eh_lpad_body213_i$1=$lpad_phi250$1;var $eh_lpad_body213_i$0=$lpad_phi250$0;label=500;break;
 case 433: 
 var $1202=HEAP32[(($1087)>>2)];
 var $1203=(($1202+($storemerge_i<<2))|0);
 HEAP32[(($1203)>>2)]=$1127;
 var $1204=HEAP32[(($1087)>>2)];
 var $1205=(($1204+($storemerge_i<<2))|0);
 var $1206=HEAP32[(($1205)>>2)];
 var $_0133=$1206;var $_0134=$1098;label=434;break;
 case 434: 
 var $_0134;
 var $_0133;
 var $1208=($_0134|0)>0;
 if($1208){label=435;break;}else{label=447;break;}
 case 435: 
 var $1210=(($_0133)|0);
 var $1211=($_0133|0)==($301|0);
 if($1211){label=436;break;}else{label=437;break;}
 case 436: 
 var $1212=HEAP32[(($1099)>>2)];
 var $1213=(($_0133+12)|0);
 HEAP32[(($1213)>>2)]=$1212;
 label=446;break;
 case 437: 
 var $1215=HEAP8[(($1106)>>0)];
 var $1216=$1215&1;
 var $1217=(($1216<<24)>>24)==0;
 if($1217){label=439;break;}else{label=438;break;}
 case 438: 
 var $1219=HEAP32[(($1109)>>2)];
 var $1220=HEAP32[(($1110)>>2)];
 var $1225=$1220;var $1224=$1219;label=440;break;
 case 439: 
 var $1222=($1215&255);
 var $1223=$1222>>>1;
 var $1225=$1223;var $1224=$1108;label=440;break;
 case 440: 
 var $1224;
 var $1225;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1210,$1224,$1225) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=441;break; } else { label=464;break; }
 case 441: 
 var $1226=HEAP32[(($1099)>>2)];
 var $1227=(($_0133+12)|0);
 HEAP32[(($1227)>>2)]=$1226;
 var $1228=(($_0133+16)|0);
 if($1211){label=446;break;}else{label=442;break;}
 case 442: 
 var $1230=HEAP8[(($1101)>>0)];
 var $1231=$1230&1;
 var $1232=(($1231<<24)>>24)==0;
 if($1232){label=444;break;}else{label=443;break;}
 case 443: 
 var $1234=HEAP32[(($1104)>>2)];
 var $1235=HEAP32[(($1105)>>2)];
 var $1240=$1235;var $1239=$1234;label=445;break;
 case 444: 
 var $1237=($1230&255);
 var $1238=$1237>>>1;
 var $1240=$1238;var $1239=$1103;label=445;break;
 case 445: 
 var $1239;
 var $1240;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($1228,$1239,$1240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=446;break; } else { label=464;break; }
 case 446: 
 var $1241=(($_0133+28)|0);
 var $1242=((($_0134)-(1))|0);
 var $_0133=$1241;var $_0134=$1242;label=434;break;
 case 447: 
 var $1243=((($storemerge_i)+(1))|0);
 var $storemerge_i=$1243;label=395;break;
 case 448: 
 var $lpad_loopexit341$0 = ___cxa_find_matching_catch(); var $lpad_loopexit341$1 = tempRet0;
 var $eh_lpad_body_i4$1=$lpad_loopexit341$1;var $eh_lpad_body_i4$0=$lpad_loopexit341$0;label=450;break;
 case 449: 
 var $lpad_nonloopexit342$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit342$1 = tempRet0;
 var $eh_lpad_body_i4$1=$lpad_nonloopexit342$1;var $eh_lpad_body_i4$0=$lpad_nonloopexit342$0;label=450;break;
 case 450: 
 var $eh_lpad_body_i4$0;
 var $eh_lpad_body_i4$1;
 var $1244=$eh_lpad_body_i4$0;
 var $1245=$eh_lpad_body_i4$1;
 var $_1=$1245;var $_1110=$1244;label=1003;break;
 case 451: 
 var $lpad_loopexit331$0 = ___cxa_find_matching_catch(); var $lpad_loopexit331$1 = tempRet0;
 var $eh_lpad_body9_i$1=$lpad_loopexit331$1;var $eh_lpad_body9_i$0=$lpad_loopexit331$0;label=453;break;
 case 452: 
 var $lpad_nonloopexit332$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit332$1 = tempRet0;
 var $eh_lpad_body9_i$1=$lpad_nonloopexit332$1;var $eh_lpad_body9_i$0=$lpad_nonloopexit332$0;label=453;break;
 case 453: 
 var $eh_lpad_body9_i$0;
 var $eh_lpad_body9_i$1;
 var $1246=$eh_lpad_body9_i$0;
 var $1247=$eh_lpad_body9_i$1;
 var $_4124=$1247;var $_4130=$1246;label=524;break;
 case 454: 
 var $lpad_loopexit321$0 = ___cxa_find_matching_catch(); var $lpad_loopexit321$1 = tempRet0;
 var $eh_lpad_body17_i$1=$lpad_loopexit321$1;var $eh_lpad_body17_i$0=$lpad_loopexit321$0;label=456;break;
 case 455: 
 var $lpad_nonloopexit322$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit322$1 = tempRet0;
 var $eh_lpad_body17_i$1=$lpad_nonloopexit322$1;var $eh_lpad_body17_i$0=$lpad_nonloopexit322$0;label=456;break;
 case 456: 
 var $eh_lpad_body17_i$0;
 var $eh_lpad_body17_i$1;
 var $1248=$eh_lpad_body17_i$0;
 var $1249=$eh_lpad_body17_i$1;
 var $_3123=$1249;var $_3129=$1248;label=520;break;
 case 457: 
 var $lpad_loopexit311$0 = ___cxa_find_matching_catch(); var $lpad_loopexit311$1 = tempRet0;
 var $eh_lpad_body24_i$1=$lpad_loopexit311$1;var $eh_lpad_body24_i$0=$lpad_loopexit311$0;label=459;break;
 case 458: 
 var $lpad_nonloopexit312$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit312$1 = tempRet0;
 var $eh_lpad_body24_i$1=$lpad_nonloopexit312$1;var $eh_lpad_body24_i$0=$lpad_nonloopexit312$0;label=459;break;
 case 459: 
 var $eh_lpad_body24_i$0;
 var $eh_lpad_body24_i$1;
 var $1250=$eh_lpad_body24_i$0;
 var $1251=$eh_lpad_body24_i$1;
 var $_2122=$1251;var $_2128=$1250;label=516;break;
 case 460: 
 var $lpad_loopexit301$0 = ___cxa_find_matching_catch(); var $lpad_loopexit301$1 = tempRet0;
 var $eh_lpad_body32_i$1=$lpad_loopexit301$1;var $eh_lpad_body32_i$0=$lpad_loopexit301$0;label=462;break;
 case 461: 
 var $lpad_nonloopexit302$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit302$1 = tempRet0;
 var $eh_lpad_body32_i$1=$lpad_nonloopexit302$1;var $eh_lpad_body32_i$0=$lpad_nonloopexit302$0;label=462;break;
 case 462: 
 var $eh_lpad_body32_i$0;
 var $eh_lpad_body32_i$1;
 var $1252=$eh_lpad_body32_i$0;
 var $1253=$eh_lpad_body32_i$1;
 var $_1121=$1253;var $_1127=$1252;label=512;break;
 case 463: 
 var $lpad_loopexit238$0 = ___cxa_find_matching_catch(); var $lpad_loopexit238$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit238$1;var $lpad_phi240$0=$lpad_loopexit238$0;label=477;break;
 case 464: 
 var $lpad_loopexit258$0 = ___cxa_find_matching_catch(); var $lpad_loopexit258$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit258$1;var $lpad_phi240$0=$lpad_loopexit258$0;label=477;break;
 case 465: 
 var $lpad_loopexit261$0 = ___cxa_find_matching_catch(); var $lpad_loopexit261$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit261$1;var $lpad_phi240$0=$lpad_loopexit261$0;label=477;break;
 case 466: 
 var $lpad_loopexit264$0 = ___cxa_find_matching_catch(); var $lpad_loopexit264$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit264$1;var $lpad_phi240$0=$lpad_loopexit264$0;label=477;break;
 case 467: 
 var $lpad_loopexit267$0 = ___cxa_find_matching_catch(); var $lpad_loopexit267$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit267$1;var $lpad_phi240$0=$lpad_loopexit267$0;label=477;break;
 case 468: 
 var $lpad_loopexit270$0 = ___cxa_find_matching_catch(); var $lpad_loopexit270$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit270$1;var $lpad_phi240$0=$lpad_loopexit270$0;label=477;break;
 case 469: 
 var $lpad_loopexit273$0 = ___cxa_find_matching_catch(); var $lpad_loopexit273$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit273$1;var $lpad_phi240$0=$lpad_loopexit273$0;label=477;break;
 case 470: 
 var $lpad_loopexit276$0 = ___cxa_find_matching_catch(); var $lpad_loopexit276$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit276$1;var $lpad_phi240$0=$lpad_loopexit276$0;label=477;break;
 case 471: 
 var $lpad_loopexit279$0 = ___cxa_find_matching_catch(); var $lpad_loopexit279$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit279$1;var $lpad_phi240$0=$lpad_loopexit279$0;label=477;break;
 case 472: 
 var $lpad_loopexit282$0 = ___cxa_find_matching_catch(); var $lpad_loopexit282$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit282$1;var $lpad_phi240$0=$lpad_loopexit282$0;label=477;break;
 case 473: 
 var $lpad_loopexit285$0 = ___cxa_find_matching_catch(); var $lpad_loopexit285$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit285$1;var $lpad_phi240$0=$lpad_loopexit285$0;label=477;break;
 case 474: 
 var $lpad_loopexit288$0 = ___cxa_find_matching_catch(); var $lpad_loopexit288$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit288$1;var $lpad_phi240$0=$lpad_loopexit288$0;label=477;break;
 case 475: 
 var $lpad_loopexit291$0 = ___cxa_find_matching_catch(); var $lpad_loopexit291$1 = tempRet0;
 var $lpad_phi240$1=$lpad_loopexit291$1;var $lpad_phi240$0=$lpad_loopexit291$0;label=477;break;
 case 476: 
 var $lpad_nonloopexit292$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit292$1 = tempRet0;
 var $lpad_phi240$1=$lpad_nonloopexit292$1;var $lpad_phi240$0=$lpad_nonloopexit292$0;label=477;break;
 case 477: 
 var $lpad_phi240$0;
 var $lpad_phi240$1;
 var $1254=$lpad_phi240$0;
 var $1255=$lpad_phi240$1;
 var $_0120=$1255;var $_0126=$1254;label=508;break;
 case 478: 
 var $1257$0 = ___cxa_find_matching_catch(); var $1257$1 = tempRet0;
 var $1258=$1257$0;
 var $1259=$1257$1;
 if($625){var $_0120=$1259;var $_0126=$1258;label=508;break;}else{label=479;break;}
 case 479: 
 var $1261=(($15+8)|0);
 var $1262=HEAP32[(($1261)>>2)];
 _free($1262);
 var $_0120=$1259;var $_0126=$1258;label=508;break;
 case 480: 
 var $1264$0 = ___cxa_find_matching_catch(); var $1264$1 = tempRet0;
 var $1265=$1264$0;
 var $1266=$1264$1;
 if($673){var $_0120=$1266;var $_0126=$1265;label=508;break;}else{label=481;break;}
 case 481: 
 var $1268=(($16+8)|0);
 var $1269=HEAP32[(($1268)>>2)];
 _free($1269);
 var $_0120=$1266;var $_0126=$1265;label=508;break;
 case 482: 
 var $1271$0 = ___cxa_find_matching_catch(); var $1271$1 = tempRet0;
 var $1272=$1271$0;
 var $1273=$1271$1;
 if($721){var $_0120=$1273;var $_0126=$1272;label=508;break;}else{label=483;break;}
 case 483: 
 var $1275=(($17+8)|0);
 var $1276=HEAP32[(($1275)>>2)];
 _free($1276);
 var $_0120=$1273;var $_0126=$1272;label=508;break;
 case 484: 
 var $1278$0 = ___cxa_find_matching_catch(); var $1278$1 = tempRet0;
 var $1279=$1278$0;
 var $1280=$1278$1;
 if($769){var $_0120=$1280;var $_0126=$1279;label=508;break;}else{label=485;break;}
 case 485: 
 var $1282=(($18+8)|0);
 var $1283=HEAP32[(($1282)>>2)];
 _free($1283);
 var $_0120=$1280;var $_0126=$1279;label=508;break;
 case 486: 
 var $1285$0 = ___cxa_find_matching_catch(); var $1285$1 = tempRet0;
 var $1286=$1285$0;
 var $1287=$1285$1;
 if($817){var $_0120=$1287;var $_0126=$1286;label=508;break;}else{label=487;break;}
 case 487: 
 var $1289=(($19+8)|0);
 var $1290=HEAP32[(($1289)>>2)];
 _free($1290);
 var $_0120=$1287;var $_0126=$1286;label=508;break;
 case 488: 
 var $1292$0 = ___cxa_find_matching_catch(); var $1292$1 = tempRet0;
 var $1293=$1292$0;
 var $1294=$1292$1;
 if($864){var $_0120=$1294;var $_0126=$1293;label=508;break;}else{label=489;break;}
 case 489: 
 var $1296=(($20+8)|0);
 var $1297=HEAP32[(($1296)>>2)];
 _free($1297);
 var $_0120=$1294;var $_0126=$1293;label=508;break;
 case 490: 
 var $1299$0 = ___cxa_find_matching_catch(); var $1299$1 = tempRet0;
 var $1300=$1299$0;
 var $1301=$1299$1;
 if($911){var $_0120=$1301;var $_0126=$1300;label=508;break;}else{label=491;break;}
 case 491: 
 var $1303=(($21+8)|0);
 var $1304=HEAP32[(($1303)>>2)];
 _free($1304);
 var $_0120=$1301;var $_0126=$1300;label=508;break;
 case 492: 
 var $1306$0 = ___cxa_find_matching_catch(); var $1306$1 = tempRet0;
 var $1307=$1306$0;
 var $1308=$1306$1;
 if($958){var $_0120=$1308;var $_0126=$1307;label=508;break;}else{label=493;break;}
 case 493: 
 var $1310=(($22+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 _free($1311);
 var $_0120=$1308;var $_0126=$1307;label=508;break;
 case 494: 
 var $1313$0 = ___cxa_find_matching_catch(); var $1313$1 = tempRet0;
 var $1314=$1313$0;
 var $1315=$1313$1;
 if($1005){var $_0120=$1315;var $_0126=$1314;label=508;break;}else{label=495;break;}
 case 495: 
 var $1317=(($23+8)|0);
 var $1318=HEAP32[(($1317)>>2)];
 _free($1318);
 var $_0120=$1315;var $_0126=$1314;label=508;break;
 case 496: 
 var $1320$0 = ___cxa_find_matching_catch(); var $1320$1 = tempRet0;
 var $1321=$1320$0;
 var $1322=$1320$1;
 if($1052){var $_0120=$1322;var $_0126=$1321;label=508;break;}else{label=497;break;}
 case 497: 
 var $1324=(($24+8)|0);
 var $1325=HEAP32[(($1324)>>2)];
 _free($1325);
 var $_0120=$1322;var $_0126=$1321;label=508;break;
 case 498: 
 var $lpad_loopexit243$0 = ___cxa_find_matching_catch(); var $lpad_loopexit243$1 = tempRet0;
 var $eh_lpad_body213_i$1=$lpad_loopexit243$1;var $eh_lpad_body213_i$0=$lpad_loopexit243$0;label=500;break;
 case 499: 
 var $lpad_nonloopexit252$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit252$1 = tempRet0;
 var $eh_lpad_body213_i$1=$lpad_nonloopexit252$1;var $eh_lpad_body213_i$0=$lpad_nonloopexit252$0;label=500;break;
 case 500: 
 var $eh_lpad_body213_i$0;
 var $eh_lpad_body213_i$1;
 var $1326=$eh_lpad_body213_i$0;
 var $1327=$eh_lpad_body213_i$1;
 var $1328=($1127|0)==($1130|0);
 if($1328){label=506;break;}else{var $1329=$1130;label=501;break;}
 case 501: 
 var $1329;
 var $1330=((($1329)-(28))|0);
 var $1331=((($1329)-(28)+16)|0);
 var $1332=$1331;
 var $1333=HEAP8[(($1332)>>0)];
 var $1334=$1333&1;
 var $1335=(($1334<<24)>>24)==0;
 if($1335){label=503;break;}else{label=502;break;}
 case 502: 
 var $1337=((($1329)-(28)+24)|0);
 var $1338=HEAP32[(($1337)>>2)];
 _free($1338);
 label=503;break;
 case 503: 
 var $1339=$1330;
 var $1340=HEAP8[(($1339)>>0)];
 var $1341=$1340&1;
 var $1342=(($1341<<24)>>24)==0;
 if($1342){label=505;break;}else{label=504;break;}
 case 504: 
 var $1344=((($1329)-(28)+8)|0);
 var $1345=HEAP32[(($1344)>>2)];
 _free($1345);
 label=505;break;
 case 505: 
 var $1346=($1330|0)==($1127|0);
 if($1346){label=506;break;}else{var $1329=$1330;label=501;break;}
 case 506: 
 _free($_lcssa_i205_i);
 var $_0120=$1327;var $_0126=$1326;label=508;break;
 case 507: 
 var $1348=$cg;
 var $1349=HEAP32[(($1348)>>2)];
 var $1350=HEAP32[(($1349)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1350]($cg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=528;break; } else { label=476;break; }
 case 508: 
 var $_0126;
 var $_0120;
 var $1351=$555;
 var $1352=HEAP8[(($1351)>>0)];
 var $1353=$1352&1;
 var $1354=(($1353<<24)>>24)==0;
 if($1354){label=510;break;}else{label=509;break;}
 case 509: 
 var $1356=(($cg+156)|0);
 var $1357=HEAP32[(($1356)>>2)];
 _free($1357);
 label=510;break;
 case 510: 
 var $1358=$514;
 var $1359=HEAP8[(($1358)>>0)];
 var $1360=$1359&1;
 var $1361=(($1360<<24)>>24)==0;
 if($1361){var $_1121=$_0120;var $_1127=$_0126;label=512;break;}else{label=511;break;}
 case 511: 
 var $1363=(($cg+140)|0);
 var $1364=HEAP32[(($1363)>>2)];
 _free($1364);
 var $_1121=$_0120;var $_1127=$_0126;label=512;break;
 case 512: 
 var $_1127;
 var $_1121;
 var $1365=$484;
 var $1366=HEAP8[(($1365)>>0)];
 var $1367=$1366&1;
 var $1368=(($1367<<24)>>24)==0;
 if($1368){label=514;break;}else{label=513;break;}
 case 513: 
 var $1370=(($cg+128)|0);
 var $1371=HEAP32[(($1370)>>2)];
 _free($1371);
 label=514;break;
 case 514: 
 var $1372=$443;
 var $1373=HEAP8[(($1372)>>0)];
 var $1374=$1373&1;
 var $1375=(($1374<<24)>>24)==0;
 if($1375){var $_2122=$_1121;var $_2128=$_1127;label=516;break;}else{label=515;break;}
 case 515: 
 var $1377=(($cg+112)|0);
 var $1378=HEAP32[(($1377)>>2)];
 _free($1378);
 var $_2122=$_1121;var $_2128=$_1127;label=516;break;
 case 516: 
 var $_2128;
 var $_2122;
 var $1379=$413;
 var $1380=HEAP8[(($1379)>>0)];
 var $1381=$1380&1;
 var $1382=(($1381<<24)>>24)==0;
 if($1382){label=518;break;}else{label=517;break;}
 case 517: 
 var $1384=(($cg+100)|0);
 var $1385=HEAP32[(($1384)>>2)];
 _free($1385);
 label=518;break;
 case 518: 
 var $1386=$372;
 var $1387=HEAP8[(($1386)>>0)];
 var $1388=$1387&1;
 var $1389=(($1388<<24)>>24)==0;
 if($1389){var $_3123=$_2122;var $_3129=$_2128;label=520;break;}else{label=519;break;}
 case 519: 
 var $1391=(($cg+84)|0);
 var $1392=HEAP32[(($1391)>>2)];
 _free($1392);
 var $_3123=$_2122;var $_3129=$_2128;label=520;break;
 case 520: 
 var $_3129;
 var $_3123;
 var $1393=$342;
 var $1394=HEAP8[(($1393)>>0)];
 var $1395=$1394&1;
 var $1396=(($1395<<24)>>24)==0;
 if($1396){label=522;break;}else{label=521;break;}
 case 521: 
 var $1398=(($cg+72)|0);
 var $1399=HEAP32[(($1398)>>2)];
 _free($1399);
 label=522;break;
 case 522: 
 var $1400=$301;
 var $1401=HEAP8[(($1400)>>0)];
 var $1402=$1401&1;
 var $1403=(($1402<<24)>>24)==0;
 if($1403){var $_4124=$_3123;var $_4130=$_3129;label=524;break;}else{label=523;break;}
 case 523: 
 var $1405=(($cg+56)|0);
 var $1406=HEAP32[(($1405)>>2)];
 _free($1406);
 var $_4124=$_3123;var $_4130=$_3129;label=524;break;
 case 524: 
 var $_4130;
 var $_4124;
 var $1407=$271;
 var $1408=HEAP8[(($1407)>>0)];
 var $1409=$1408&1;
 var $1410=(($1409<<24)>>24)==0;
 if($1410){label=526;break;}else{label=525;break;}
 case 525: 
 var $1412=(($cg+44)|0);
 var $1413=HEAP32[(($1412)>>2)];
 _free($1413);
 label=526;break;
 case 526: 
 var $1414=$238;
 var $1415=HEAP8[(($1414)>>0)];
 var $1416=$1415&1;
 var $1417=(($1416<<24)>>24)==0;
 if($1417){var $_1=$_4124;var $_1110=$_4130;label=1003;break;}else{label=527;break;}
 case 527: 
 var $1419=(($cg+28)|0);
 var $1420=HEAP32[(($1419)>>2)];
 _free($1420);
 var $_1=$_4124;var $_1110=$_4130;label=1003;break;
 case 528: 
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $1422=HEAP32[(($1087)>>2)];
 var $1423=$row_i;
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $1424=(($28)|0);
 HEAP32[(($1424)>>2)]=0;
 var $1425=(($28+4)|0);
 HEAP32[(($1425)>>2)]=0;
 var $1426=(($28+8)|0);
 HEAP32[(($1426)>>2)]=0;
 var $1427=(($row_i)|0);
 var $1428=(($row_i+4)|0);
 var $1429=(($row_i+8)|0);
 var $storemerge_i9=0;label=529;break;
 case 529: 
 var $storemerge_i9;
 var $1431=($storemerge_i9|0)<($70|0);
 if($1431){label=530;break;}else{label=760;break;}
 case 530: 
 HEAP32[(($1427)>>2)]=0;
 HEAP32[(($1428)>>2)]=0;
 HEAP32[(($1429)>>2)]=0;
 var $1433=HEAP32[(($1425)>>2)];
 var $1434=HEAP32[(($1426)>>2)];
 var $1435=($1433|0)==($1434|0);
 if($1435){label=534;break;}else{label=531;break;}
 case 531: 
 var $1437=($1433|0)==0;
 if($1437){label=533;break;}else{label=532;break;}
 case 532: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI4TileNS_9allocatorIS1_EEEC2ERKS4_($1433,$row_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=533;break; } else { label=741;break; }
 case 533: 
 var $1439=(($1433+12)|0);
 HEAP32[(($1425)>>2)]=$1439;
 label=584;break;
 case 534: 
 var $1441=HEAP32[(($1424)>>2)];
 var $1442=$1433;
 var $1443=$1441;
 var $1444=((($1442)-($1443))|0);
 var $1445=(((($1444|0))/(12))&-1);
 var $1446=((($1445)+(1))|0);
 var $1447=($1446>>>0)>357913941;
 if($1447){label=535;break;}else{label=546;break;}
 case 535: 
 var $1448=___cxa_allocate_exception(8);
 var $1449=$1448;
 HEAP32[(($1449)>>2)]=5400;
 var $1450=(($1448+4)|0);
 var $1451=_strlen(1176);
 var $1452=((($1451)+(13))|0);
 var $1453=($1452|0)==0;
 var $_size_i_i_i=($1453?1:$1452);
 var $1454=_malloc($_size_i_i_i);
 var $1455=($1454|0)==0;
 if($1455){label=536;break;}else{var $_lcssa_i_i_i=$1454;label=541;break;}
 case 536: 
 var $1456=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1457=($1456|0)==0;
 if($1457){label=539;break;}else{label=537;break;}
 case 537: 
 var $1459=$1456;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1459]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=538;break; } else { label=543;break; }
 case 538: 
 var $1460=_malloc($_size_i_i_i);
 var $1461=($1460|0)==0;
 if($1461){label=536;break;}else{var $_lcssa_i_i_i=$1460;label=541;break;}
 case 539: 
 var $1463=___cxa_allocate_exception(4);
 var $1464=$1463;
 HEAP32[(($1464)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1463,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=540;break; } else { label=544;break; }
 case 540: 
 throw "Reached an unreachable!";
 case 541: 
 var $_lcssa_i_i_i;
 var $1465=$_lcssa_i_i_i;
 HEAP32[(($1465)>>2)]=$1451;
 var $1466=(($_lcssa_i_i_i+4)|0);
 var $1467=$1466;
 HEAP32[(($1467)>>2)]=$1451;
 var $1468=(($_lcssa_i_i_i+8)|0);
 var $1469=$1468;
 HEAP32[(($1469)>>2)]=0;
 var $1470=(($_lcssa_i_i_i+12)|0);
 var $1471=((($1451)+(1))|0);
 assert($1471 % 1 === 0);(_memcpy($1470, 1176, $1471)|0);
 var $1472=$1450;
 HEAP32[(($1472)>>2)]=$1470;
 HEAP32[(($1449)>>2)]=5368;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1448,12432,(260)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=542;break; } else { label=742;break; }
 case 542: 
 throw "Reached an unreachable!";
 case 543: 
 var $lpad_loopexit151$0 = ___cxa_find_matching_catch(); var $lpad_loopexit151$1 = tempRet0;
 var $lpad_phi153$1=$lpad_loopexit151$1;var $lpad_phi153$0=$lpad_loopexit151$0;label=545;break;
 case 544: 
 var $lpad_nonloopexit152$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit152$1 = tempRet0;
 var $lpad_phi153$1=$lpad_nonloopexit152$1;var $lpad_phi153$0=$lpad_nonloopexit152$0;label=545;break;
 case 545: 
 var $lpad_phi153$0;
 var $lpad_phi153$1;
 ___cxa_free_exception($1448);
 var $eh_lpad_body_i25$1=$lpad_phi153$1;var $eh_lpad_body_i25$0=$lpad_phi153$0;label=743;break;
 case 546: 
 var $1475=($1445>>>0)<178956970;
 if($1475){label=547;break;}else{var $1479=357913941;label=548;break;}
 case 547: 
 var $1476=$1445<<1;
 var $1477=($1476>>>0)<($1446>>>0);
 var $_=($1477?$1446:$1476);
 var $1478=($_|0)==0;
 if($1478){var $1495=0;var $1494=$_;label=555;break;}else{var $1479=$_;label=548;break;}
 case 548: 
 var $1479;
 var $1480=((($1479)*(12))&-1);
 var $1481=($1480|0)==0;
 var $_size_i_i_i_i=($1481?1:$1480);
 var $1482=_malloc($_size_i_i_i_i);
 var $1483=($1482|0)==0;
 if($1483){label=549;break;}else{var $_lcssa_i_i_i_i=$1482;label=554;break;}
 case 549: 
 var $1484=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1485=($1484|0)==0;
 if($1485){label=552;break;}else{label=550;break;}
 case 550: 
 var $1487=$1484;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1487]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=551;break; } else { label=738;break; }
 case 551: 
 var $1488=_malloc($_size_i_i_i_i);
 var $1489=($1488|0)==0;
 if($1489){label=549;break;}else{var $_lcssa_i_i_i_i=$1488;label=554;break;}
 case 552: 
 var $1491=___cxa_allocate_exception(4);
 var $1492=$1491;
 HEAP32[(($1492)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1491,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=553;break; } else { label=742;break; }
 case 553: 
 throw "Reached an unreachable!";
 case 554: 
 var $_lcssa_i_i_i_i;
 var $1493=$_lcssa_i_i_i_i;
 var $1495=$1493;var $1494=$1479;label=555;break;
 case 555: 
 var $1494;
 var $1495;
 var $1496=(($1495+((($1445)*(12))&-1))|0);
 var $1497=(($1495+((($1494)*(12))&-1))|0);
 var $1498=($1496|0)==0;
 if($1498){label=557;break;}else{label=556;break;}
 case 556: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorI4TileNS_9allocatorIS1_EEEC2ERKS4_($1496,$row_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=557;break; } else { label=572;break; }
 case 557: 
 var $_sum346=((($1445)+(1))|0);
 var $1500=(($1495+((($_sum346)*(12))&-1))|0);
 var $1501=HEAP32[(($1424)>>2)];
 var $1502=HEAP32[(($1425)>>2)];
 var $_0132=$1502;var $__v_i_i_sroa_9_0=$1496;label=558;break;
 case 558: 
 var $__v_i_i_sroa_9_0;
 var $_0132;
 var $1504=($_0132|0)==($1501|0);
 if($1504){label=560;break;}else{label=559;break;}
 case 559: 
 var $1506=((($_0132)-(12))|0);
 var $1507=((($__v_i_i_sroa_9_0)-(12))|0);
 var $1508=(($1507)|0);
 HEAP32[(($1508)>>2)]=0;
 var $1509=((($__v_i_i_sroa_9_0)-(12)+4)|0);
 HEAP32[(($1509)>>2)]=0;
 var $1510=((($__v_i_i_sroa_9_0)-(12)+8)|0);
 HEAP32[(($1510)>>2)]=0;
 var $1511=(($1506)|0);
 var $1512=HEAP32[(($1511)>>2)];
 HEAP32[(($1508)>>2)]=$1512;
 var $1513=((($_0132)-(12)+4)|0);
 var $1514=HEAP32[(($1513)>>2)];
 HEAP32[(($1509)>>2)]=$1514;
 var $1515=((($_0132)-(12)+8)|0);
 var $1516=HEAP32[(($1515)>>2)];
 HEAP32[(($1510)>>2)]=$1516;
 HEAP32[(($1515)>>2)]=0;
 HEAP32[(($1513)>>2)]=0;
 HEAP32[(($1511)>>2)]=0;
 var $_0132=$1506;var $__v_i_i_sroa_9_0=$1507;label=558;break;
 case 560: 
 var $1517=HEAP32[(($1424)>>2)];
 HEAP32[(($1424)>>2)]=$__v_i_i_sroa_9_0;
 var $1518=HEAP32[(($1425)>>2)];
 HEAP32[(($1425)>>2)]=$1500;
 HEAP32[(($1426)>>2)]=$1497;
 var $__v_i_i_sroa_18_0=$1518;label=561;break;
 case 561: 
 var $__v_i_i_sroa_18_0;
 var $1519=($1517|0)==($__v_i_i_sroa_18_0|0);
 if($1519){label=570;break;}else{label=562;break;}
 case 562: 
 var $1521=((($__v_i_i_sroa_18_0)-(12))|0);
 var $1522=(($1521)|0);
 var $1523=HEAP32[(($1522)>>2)];
 var $1524=($1523|0)==0;
 if($1524){var $__v_i_i_sroa_18_0=$1521;label=561;break;}else{label=563;break;}
 case 563: 
 var $1526=((($__v_i_i_sroa_18_0)-(12)+4)|0);
 label=564;break;
 case 564: 
 var $1527=HEAP32[(($1526)>>2)];
 var $1528=($1523|0)==($1527|0);
 if($1528){label=569;break;}else{label=565;break;}
 case 565: 
 var $1530=((($1527)-(28))|0);
 HEAP32[(($1526)>>2)]=$1530;
 var $1531=((($1527)-(28)+16)|0);
 var $1532=$1531;
 var $1533=HEAP8[(($1532)>>0)];
 var $1534=$1533&1;
 var $1535=(($1534<<24)>>24)==0;
 if($1535){label=567;break;}else{label=566;break;}
 case 566: 
 var $1537=((($1527)-(28)+24)|0);
 var $1538=HEAP32[(($1537)>>2)];
 _free($1538);
 label=567;break;
 case 567: 
 var $1539=$1530;
 var $1540=HEAP8[(($1539)>>0)];
 var $1541=$1540&1;
 var $1542=(($1541<<24)>>24)==0;
 if($1542){label=564;break;}else{label=568;break;}
 case 568: 
 var $1544=((($1527)-(28)+8)|0);
 var $1545=HEAP32[(($1544)>>2)];
 _free($1545);
 label=564;break;
 case 569: 
 var $1546=HEAP32[(($1522)>>2)];
 var $1547=$1546;
 _free($1547);
 var $__v_i_i_sroa_18_0=$1521;label=561;break;
 case 570: 
 var $1548=($1517|0)==0;
 if($1548){label=584;break;}else{label=571;break;}
 case 571: 
 var $1550=$1517;
 _free($1550);
 label=584;break;
 case 572: 
 var $1552$0 = ___cxa_find_matching_catch(); var $1552$1 = tempRet0;
 var $__v_i_i_sroa_18_1=$1496;label=573;break;
 case 573: 
 var $__v_i_i_sroa_18_1;
 var $1553=($1496|0)==($__v_i_i_sroa_18_1|0);
 if($1553){label=582;break;}else{label=574;break;}
 case 574: 
 var $1555=((($__v_i_i_sroa_18_1)-(12))|0);
 var $1556=(($1555)|0);
 var $1557=HEAP32[(($1556)>>2)];
 var $1558=($1557|0)==0;
 if($1558){var $__v_i_i_sroa_18_1=$1555;label=573;break;}else{label=575;break;}
 case 575: 
 var $1560=((($__v_i_i_sroa_18_1)-(12)+4)|0);
 label=576;break;
 case 576: 
 var $1561=HEAP32[(($1560)>>2)];
 var $1562=($1557|0)==($1561|0);
 if($1562){label=581;break;}else{label=577;break;}
 case 577: 
 var $1564=((($1561)-(28))|0);
 HEAP32[(($1560)>>2)]=$1564;
 var $1565=((($1561)-(28)+16)|0);
 var $1566=$1565;
 var $1567=HEAP8[(($1566)>>0)];
 var $1568=$1567&1;
 var $1569=(($1568<<24)>>24)==0;
 if($1569){label=579;break;}else{label=578;break;}
 case 578: 
 var $1571=((($1561)-(28)+24)|0);
 var $1572=HEAP32[(($1571)>>2)];
 _free($1572);
 label=579;break;
 case 579: 
 var $1573=$1564;
 var $1574=HEAP8[(($1573)>>0)];
 var $1575=$1574&1;
 var $1576=(($1575<<24)>>24)==0;
 if($1576){label=576;break;}else{label=580;break;}
 case 580: 
 var $1578=((($1561)-(28)+8)|0);
 var $1579=HEAP32[(($1578)>>2)];
 _free($1579);
 label=576;break;
 case 581: 
 var $1580=HEAP32[(($1556)>>2)];
 var $1581=$1580;
 _free($1581);
 var $__v_i_i_sroa_18_1=$1555;label=573;break;
 case 582: 
 var $1582=($1495|0)==0;
 if($1582){var $eh_lpad_body_i25$1=$1552$1;var $eh_lpad_body_i25$0=$1552$0;label=743;break;}else{label=583;break;}
 case 583: 
 var $1584=$1495;
 _free($1584);
 var $eh_lpad_body_i25$1=$1552$1;var $eh_lpad_body_i25$0=$1552$0;label=743;break;
 case 584: 
 var $1585=(($1422+($storemerge_i9<<2))|0);
 var $storemerge1_i=0;label=585;break;
 case 585: 
 var $storemerge1_i;
 var $1586=($storemerge1_i|0)<($70|0);
 if($1586){label=586;break;}else{label=751;break;}
 case 586: 
 var $1588=HEAP32[(($1424)>>2)];
 var $1589=HEAP32[(($1585)>>2)];
 var $1590=(($1589+((($storemerge1_i)*(28))&-1))|0);
 var $1591=(($1588+((($storemerge_i9)*(12))&-1)+4)|0);
 var $1592=HEAP32[(($1591)>>2)];
 var $1593=(($1588+((($storemerge_i9)*(12))&-1)+8)|0);
 var $1594=HEAP32[(($1593)>>2)];
 var $1595=($1592|0)==($1594|0);
 if($1595){label=624;break;}else{label=587;break;}
 case 587: 
 var $1597=($1592|0)==0;
 if($1597){var $1693=0;label=623;break;}else{label=588;break;}
 case 588: 
 var $1599=$1590;
 var $1600=HEAP8[(($1599)>>0)];
 var $1601=$1600&1;
 var $1602=(($1601<<24)>>24)==0;
 if($1602){label=589;break;}else{label=590;break;}
 case 589: 
 var $1604=$1592;
 assert(12 % 1 === 0);HEAP32[(($1604)>>2)]=HEAP32[(($1599)>>2)];HEAP32[((($1604)+(4))>>2)]=HEAP32[((($1599)+(4))>>2)];HEAP32[((($1604)+(8))>>2)]=HEAP32[((($1599)+(8))>>2)];
 label=603;break;
 case 590: 
 var $1606=(($1589+((($storemerge1_i)*(28))&-1)+8)|0);
 var $1607=HEAP32[(($1606)>>2)];
 var $1608=(($1589+((($storemerge1_i)*(28))&-1)+4)|0);
 var $1609=HEAP32[(($1608)>>2)];
 var $1610=($1609>>>0)>4294967279;
 if($1610){label=591;break;}else{label=593;break;}
 case 591: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=592;break; } else { label=742;break; }
 case 592: 
 throw "Reached an unreachable!";
 case 593: 
 var $1613=($1609>>>0)<11;
 if($1613){label=594;break;}else{label=595;break;}
 case 594: 
 var $1615=$1609<<1;
 var $1616=(($1615)&255);
 var $1617=$1592;
 HEAP8[(($1617)>>0)]=$1616;
 var $1618=$1592;
 var $1619=(($1618+1)|0);
 var $__p_0_i49_i=$1619;label=602;break;
 case 595: 
 var $1620=((($1609)+(16))|0);
 var $1621=$1620&-16;
 var $1622=($1621|0)==0;
 var $_size_i53_i=($1622?1:$1621);
 var $1623=_malloc($_size_i53_i);
 var $1624=($1623|0)==0;
 if($1624){label=596;break;}else{var $_lcssa_i55_i=$1623;label=601;break;}
 case 596: 
 var $1625=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1626=($1625|0)==0;
 if($1626){label=599;break;}else{label=597;break;}
 case 597: 
 var $1628=$1625;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1628]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=598;break; } else { label=739;break; }
 case 598: 
 var $1629=_malloc($_size_i53_i);
 var $1630=($1629|0)==0;
 if($1630){label=596;break;}else{var $_lcssa_i55_i=$1629;label=601;break;}
 case 599: 
 var $1632=___cxa_allocate_exception(4);
 var $1633=$1632;
 HEAP32[(($1633)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1632,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=600;break; } else { label=742;break; }
 case 600: 
 throw "Reached an unreachable!";
 case 601: 
 var $_lcssa_i55_i;
 var $1634=(($1592+8)|0);
 HEAP32[(($1634)>>2)]=$_lcssa_i55_i;
 var $1635=$1621|1;
 var $1636=(($1592)|0);
 HEAP32[(($1636)>>2)]=$1635;
 var $1637=(($1592+4)|0);
 HEAP32[(($1637)>>2)]=$1609;
 var $__p_0_i49_i=$_lcssa_i55_i;label=602;break;
 case 602: 
 var $__p_0_i49_i;
 assert($1609 % 1 === 0);(_memcpy($__p_0_i49_i, $1607, $1609)|0);
 var $1638=(($__p_0_i49_i+$1609)|0);
 HEAP8[(($1638)>>0)]=0;
 label=603;break;
 case 603: 
 var $1639=(($1592+12)|0);
 var $1640=(($1589+((($storemerge1_i)*(28))&-1)+12)|0);
 var $1641=HEAP32[(($1640)>>2)];
 HEAP32[(($1639)>>2)]=$1641;
 var $1642=(($1592+16)|0);
 var $1643=(($1589+((($storemerge1_i)*(28))&-1)+16)|0);
 var $1644=$1643;
 var $1645=HEAP8[(($1644)>>0)];
 var $1646=$1645&1;
 var $1647=(($1646<<24)>>24)==0;
 if($1647){label=604;break;}else{label=605;break;}
 case 604: 
 var $1649=$1642;
 assert(12 % 1 === 0);HEAP32[(($1649)>>2)]=HEAP32[(($1644)>>2)];HEAP32[((($1649)+(4))>>2)]=HEAP32[((($1644)+(4))>>2)];HEAP32[((($1649)+(8))>>2)]=HEAP32[((($1644)+(8))>>2)];
 label=622;break;
 case 605: 
 var $1651=(($1589+((($storemerge1_i)*(28))&-1)+24)|0);
 var $1652=HEAP32[(($1651)>>2)];
 var $1653=(($1589+((($storemerge1_i)*(28))&-1)+20)|0);
 var $1654=HEAP32[(($1653)>>2)];
 var $1655=($1654>>>0)>4294967279;
 if($1655){label=606;break;}else{label=608;break;}
 case 606: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=607;break; } else { label=619;break; }
 case 607: 
 throw "Reached an unreachable!";
 case 608: 
 var $1658=($1654>>>0)<11;
 if($1658){label=609;break;}else{label=610;break;}
 case 609: 
 var $1660=$1654<<1;
 var $1661=(($1660)&255);
 var $1662=$1642;
 HEAP8[(($1662)>>0)]=$1661;
 var $1663=$1642;
 var $1664=(($1663+1)|0);
 var $__p_0_i_i20=$1664;label=617;break;
 case 610: 
 var $1665=((($1654)+(16))|0);
 var $1666=$1665&-16;
 var $1667=($1666|0)==0;
 var $_size_i_i14=($1667?1:$1666);
 var $1668=_malloc($_size_i_i14);
 var $1669=($1668|0)==0;
 if($1669){label=611;break;}else{var $_lcssa_i_i17=$1668;label=616;break;}
 case 611: 
 var $1670=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1671=($1670|0)==0;
 if($1671){label=614;break;}else{label=612;break;}
 case 612: 
 var $1673=$1670;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1673]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=613;break; } else { label=618;break; }
 case 613: 
 var $1674=_malloc($_size_i_i14);
 var $1675=($1674|0)==0;
 if($1675){label=611;break;}else{var $_lcssa_i_i17=$1674;label=616;break;}
 case 614: 
 var $1677=___cxa_allocate_exception(4);
 var $1678=$1677;
 HEAP32[(($1678)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1677,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=615;break; } else { label=619;break; }
 case 615: 
 throw "Reached an unreachable!";
 case 616: 
 var $_lcssa_i_i17;
 var $1679=(($1592+24)|0);
 HEAP32[(($1679)>>2)]=$_lcssa_i_i17;
 var $1680=$1666|1;
 var $1681=(($1642)|0);
 HEAP32[(($1681)>>2)]=$1680;
 var $1682=(($1592+20)|0);
 HEAP32[(($1682)>>2)]=$1654;
 var $__p_0_i_i20=$_lcssa_i_i17;label=617;break;
 case 617: 
 var $__p_0_i_i20;
 assert($1654 % 1 === 0);(_memcpy($__p_0_i_i20, $1652, $1654)|0);
 var $1683=(($__p_0_i_i20+$1654)|0);
 HEAP8[(($1683)>>0)]=0;
 label=622;break;
 case 618: 
 var $lpad_loopexit209$0 = ___cxa_find_matching_catch(); var $lpad_loopexit209$1 = tempRet0;
 var $lpad_phi211$1=$lpad_loopexit209$1;var $lpad_phi211$0=$lpad_loopexit209$0;label=620;break;
 case 619: 
 var $lpad_nonloopexit210$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit210$1 = tempRet0;
 var $lpad_phi211$1=$lpad_nonloopexit210$1;var $lpad_phi211$0=$lpad_nonloopexit210$0;label=620;break;
 case 620: 
 var $lpad_phi211$0;
 var $lpad_phi211$1;
 var $1685=$1592;
 var $1686=HEAP8[(($1685)>>0)];
 var $1687=$1686&1;
 var $1688=(($1687<<24)>>24)==0;
 if($1688){var $eh_lpad_body_i25$1=$lpad_phi211$1;var $eh_lpad_body_i25$0=$lpad_phi211$0;label=743;break;}else{label=621;break;}
 case 621: 
 var $1690=(($1592+8)|0);
 var $1691=HEAP32[(($1690)>>2)];
 _free($1691);
 var $eh_lpad_body_i25$1=$lpad_phi211$1;var $eh_lpad_body_i25$0=$lpad_phi211$0;label=743;break;
 case 622: 
 var $1692=HEAP32[(($1640)>>2)];
 HEAP32[(($1639)>>2)]=$1692;
 var $_pre344=HEAP32[(($1591)>>2)];
 var $1693=$_pre344;label=623;break;
 case 623: 
 var $1693;
 var $1694=(($1693+28)|0);
 HEAP32[(($1591)>>2)]=$1694;
 label=737;break;
 case 624: 
 var $1696=(($1588+((($storemerge_i9)*(12))&-1))|0);
 var $1697=HEAP32[(($1696)>>2)];
 var $1698=$1592;
 var $1699=$1697;
 var $1700=((($1698)-($1699))|0);
 var $1701=(((($1700|0))/(28))&-1);
 var $1702=((($1701)+(1))|0);
 var $1703=($1702>>>0)>153391689;
 if($1703){label=625;break;}else{label=636;break;}
 case 625: 
 var $1704=___cxa_allocate_exception(8);
 var $1705=$1704;
 HEAP32[(($1705)>>2)]=5400;
 var $1706=(($1704+4)|0);
 var $1707=_strlen(1176);
 var $1708=((($1707)+(13))|0);
 var $1709=($1708|0)==0;
 var $_size_i_i23_i=($1709?1:$1708);
 var $1710=_malloc($_size_i_i23_i);
 var $1711=($1710|0)==0;
 if($1711){label=626;break;}else{var $_lcssa_i_i26_i=$1710;label=631;break;}
 case 626: 
 var $1712=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1713=($1712|0)==0;
 if($1713){label=629;break;}else{label=627;break;}
 case 627: 
 var $1715=$1712;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1715]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=628;break; } else { label=633;break; }
 case 628: 
 var $1716=_malloc($_size_i_i23_i);
 var $1717=($1716|0)==0;
 if($1717){label=626;break;}else{var $_lcssa_i_i26_i=$1716;label=631;break;}
 case 629: 
 var $1719=___cxa_allocate_exception(4);
 var $1720=$1719;
 HEAP32[(($1720)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1719,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=630;break; } else { label=634;break; }
 case 630: 
 throw "Reached an unreachable!";
 case 631: 
 var $_lcssa_i_i26_i;
 var $1721=$_lcssa_i_i26_i;
 HEAP32[(($1721)>>2)]=$1707;
 var $1722=(($_lcssa_i_i26_i+4)|0);
 var $1723=$1722;
 HEAP32[(($1723)>>2)]=$1707;
 var $1724=(($_lcssa_i_i26_i+8)|0);
 var $1725=$1724;
 HEAP32[(($1725)>>2)]=0;
 var $1726=(($_lcssa_i_i26_i+12)|0);
 var $1727=((($1707)+(1))|0);
 assert($1727 % 1 === 0);(_memcpy($1726, 1176, $1727)|0);
 var $1728=$1706;
 HEAP32[(($1728)>>2)]=$1726;
 HEAP32[(($1705)>>2)]=5368;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1704,12432,(260)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=632;break; } else { label=742;break; }
 case 632: 
 throw "Reached an unreachable!";
 case 633: 
 var $lpad_loopexit156$0 = ___cxa_find_matching_catch(); var $lpad_loopexit156$1 = tempRet0;
 var $lpad_phi158$1=$lpad_loopexit156$1;var $lpad_phi158$0=$lpad_loopexit156$0;label=635;break;
 case 634: 
 var $lpad_nonloopexit157$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit157$1 = tempRet0;
 var $lpad_phi158$1=$lpad_nonloopexit157$1;var $lpad_phi158$0=$lpad_nonloopexit157$0;label=635;break;
 case 635: 
 var $lpad_phi158$0;
 var $lpad_phi158$1;
 ___cxa_free_exception($1704);
 var $eh_lpad_body_i25$1=$lpad_phi158$1;var $eh_lpad_body_i25$0=$lpad_phi158$0;label=743;break;
 case 636: 
 var $1731=($1701>>>0)<76695844;
 if($1731){label=637;break;}else{var $1735=153391689;label=638;break;}
 case 637: 
 var $1732=$1701<<1;
 var $1733=($1732>>>0)<($1702>>>0);
 var $_347=($1733?$1702:$1732);
 var $1734=($_347|0)==0;
 if($1734){var $1751=0;var $1750=$_347;label=645;break;}else{var $1735=$_347;label=638;break;}
 case 638: 
 var $1735;
 var $1736=((($1735)*(28))&-1);
 var $1737=($1736|0)==0;
 var $_size_i_i_i30_i=($1737?1:$1736);
 var $1738=_malloc($_size_i_i_i30_i);
 var $1739=($1738|0)==0;
 if($1739){label=639;break;}else{var $_lcssa_i_i_i32_i=$1738;label=644;break;}
 case 639: 
 var $1740=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1741=($1740|0)==0;
 if($1741){label=642;break;}else{label=640;break;}
 case 640: 
 var $1743=$1740;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1743]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=641;break; } else { label=740;break; }
 case 641: 
 var $1744=_malloc($_size_i_i_i30_i);
 var $1745=($1744|0)==0;
 if($1745){label=639;break;}else{var $_lcssa_i_i_i32_i=$1744;label=644;break;}
 case 642: 
 var $1747=___cxa_allocate_exception(4);
 var $1748=$1747;
 HEAP32[(($1748)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1747,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=643;break; } else { label=742;break; }
 case 643: 
 throw "Reached an unreachable!";
 case 644: 
 var $_lcssa_i_i_i32_i;
 var $1749=$_lcssa_i_i_i32_i;
 var $1751=$1749;var $1750=$1735;label=645;break;
 case 645: 
 var $1750;
 var $1751;
 var $1752=(($1751+((($1701)*(28))&-1))|0);
 var $1753=(($1751+((($1750)*(28))&-1))|0);
 var $1754=($1752|0)==0;
 if($1754){label=681;break;}else{label=646;break;}
 case 646: 
 var $1756=$1590;
 var $1757=HEAP8[(($1756)>>0)];
 var $1758=$1757&1;
 var $1759=(($1758<<24)>>24)==0;
 if($1759){label=647;break;}else{label=648;break;}
 case 647: 
 var $1761=$1752;
 assert(12 % 1 === 0);HEAP32[(($1761)>>2)]=HEAP32[(($1756)>>2)];HEAP32[((($1761)+(4))>>2)]=HEAP32[((($1756)+(4))>>2)];HEAP32[((($1761)+(8))>>2)]=HEAP32[((($1756)+(8))>>2)];
 label=661;break;
 case 648: 
 var $1763=(($1589+((($storemerge1_i)*(28))&-1)+8)|0);
 var $1764=HEAP32[(($1763)>>2)];
 var $1765=(($1589+((($storemerge1_i)*(28))&-1)+4)|0);
 var $1766=HEAP32[(($1765)>>2)];
 var $1767=($1766>>>0)>4294967279;
 if($1767){label=649;break;}else{label=651;break;}
 case 649: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=650;break; } else { var $__v_i22_i_sroa_9_1_ph_ph=$1752;var $__v_i22_i_sroa_18_1_ph_ph=$1752;label=728;break; }
 case 650: 
 throw "Reached an unreachable!";
 case 651: 
 var $1770=($1766>>>0)<11;
 if($1770){label=652;break;}else{label=653;break;}
 case 652: 
 var $1772=$1766<<1;
 var $1773=(($1772)&255);
 var $1774=$1752;
 HEAP8[(($1774)>>0)]=$1773;
 var $1775=$1752;
 var $1776=(($1775+1)|0);
 var $__p_0_i_i_i=$1776;label=660;break;
 case 653: 
 var $1777=((($1766)+(16))|0);
 var $1778=$1777&-16;
 var $1779=($1778|0)==0;
 var $_size_i22_i_i=($1779?1:$1778);
 var $1780=_malloc($_size_i22_i_i);
 var $1781=($1780|0)==0;
 if($1781){label=654;break;}else{var $_lcssa_i24_i_i=$1780;label=659;break;}
 case 654: 
 var $1782=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1783=($1782|0)==0;
 if($1783){label=657;break;}else{label=655;break;}
 case 655: 
 var $1785=$1782;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1785]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=656;break; } else { label=726;break; }
 case 656: 
 var $1786=_malloc($_size_i22_i_i);
 var $1787=($1786|0)==0;
 if($1787){label=654;break;}else{var $_lcssa_i24_i_i=$1786;label=659;break;}
 case 657: 
 var $1789=___cxa_allocate_exception(4);
 var $1790=$1789;
 HEAP32[(($1790)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1789,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=658;break; } else { var $__v_i22_i_sroa_9_1_ph_ph=$1752;var $__v_i22_i_sroa_18_1_ph_ph=$1752;label=728;break; }
 case 658: 
 throw "Reached an unreachable!";
 case 659: 
 var $_lcssa_i24_i_i;
 var $1791=(($1751+((($1701)*(28))&-1)+8)|0);
 HEAP32[(($1791)>>2)]=$_lcssa_i24_i_i;
 var $1792=$1778|1;
 var $1793=(($1752)|0);
 HEAP32[(($1793)>>2)]=$1792;
 var $1794=(($1751+((($1701)*(28))&-1)+4)|0);
 HEAP32[(($1794)>>2)]=$1766;
 var $__p_0_i_i_i=$_lcssa_i24_i_i;label=660;break;
 case 660: 
 var $__p_0_i_i_i;
 assert($1766 % 1 === 0);(_memcpy($__p_0_i_i_i, $1764, $1766)|0);
 var $1795=(($__p_0_i_i_i+$1766)|0);
 HEAP8[(($1795)>>0)]=0;
 label=661;break;
 case 661: 
 var $1796=(($1751+((($1701)*(28))&-1)+12)|0);
 var $1797=(($1589+((($storemerge1_i)*(28))&-1)+12)|0);
 var $1798=HEAP32[(($1797)>>2)];
 HEAP32[(($1796)>>2)]=$1798;
 var $1799=(($1751+((($1701)*(28))&-1)+16)|0);
 var $1800=(($1589+((($storemerge1_i)*(28))&-1)+16)|0);
 var $1801=$1800;
 var $1802=HEAP8[(($1801)>>0)];
 var $1803=$1802&1;
 var $1804=(($1803<<24)>>24)==0;
 if($1804){label=662;break;}else{label=663;break;}
 case 662: 
 var $1806=$1799;
 assert(12 % 1 === 0);HEAP32[(($1806)>>2)]=HEAP32[(($1801)>>2)];HEAP32[((($1806)+(4))>>2)]=HEAP32[((($1801)+(4))>>2)];HEAP32[((($1806)+(8))>>2)]=HEAP32[((($1801)+(8))>>2)];
 label=680;break;
 case 663: 
 var $1808=(($1589+((($storemerge1_i)*(28))&-1)+24)|0);
 var $1809=HEAP32[(($1808)>>2)];
 var $1810=(($1589+((($storemerge1_i)*(28))&-1)+20)|0);
 var $1811=HEAP32[(($1810)>>2)];
 var $1812=($1811>>>0)>4294967279;
 if($1812){label=664;break;}else{label=666;break;}
 case 664: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=665;break; } else { label=677;break; }
 case 665: 
 throw "Reached an unreachable!";
 case 666: 
 var $1815=($1811>>>0)<11;
 if($1815){label=667;break;}else{label=668;break;}
 case 667: 
 var $1817=$1811<<1;
 var $1818=(($1817)&255);
 var $1819=$1799;
 HEAP8[(($1819)>>0)]=$1818;
 var $1820=$1799;
 var $1821=(($1820+1)|0);
 var $__p_0_i29_i_i=$1821;label=675;break;
 case 668: 
 var $1822=((($1811)+(16))|0);
 var $1823=$1822&-16;
 var $1824=($1823|0)==0;
 var $_size_i33_i_i=($1824?1:$1823);
 var $1825=_malloc($_size_i33_i_i);
 var $1826=($1825|0)==0;
 if($1826){label=669;break;}else{var $_lcssa_i35_i_i=$1825;label=674;break;}
 case 669: 
 var $1827=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1828=($1827|0)==0;
 if($1828){label=672;break;}else{label=670;break;}
 case 670: 
 var $1830=$1827;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1830]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=671;break; } else { label=676;break; }
 case 671: 
 var $1831=_malloc($_size_i33_i_i);
 var $1832=($1831|0)==0;
 if($1832){label=669;break;}else{var $_lcssa_i35_i_i=$1831;label=674;break;}
 case 672: 
 var $1834=___cxa_allocate_exception(4);
 var $1835=$1834;
 HEAP32[(($1835)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1834,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=673;break; } else { label=677;break; }
 case 673: 
 throw "Reached an unreachable!";
 case 674: 
 var $_lcssa_i35_i_i;
 var $1836=(($1751+((($1701)*(28))&-1)+24)|0);
 HEAP32[(($1836)>>2)]=$_lcssa_i35_i_i;
 var $1837=$1823|1;
 var $1838=(($1799)|0);
 HEAP32[(($1838)>>2)]=$1837;
 var $1839=(($1751+((($1701)*(28))&-1)+20)|0);
 HEAP32[(($1839)>>2)]=$1811;
 var $__p_0_i29_i_i=$_lcssa_i35_i_i;label=675;break;
 case 675: 
 var $__p_0_i29_i_i;
 assert($1811 % 1 === 0);(_memcpy($__p_0_i29_i_i, $1809, $1811)|0);
 var $1840=(($__p_0_i29_i_i+$1811)|0);
 HEAP8[(($1840)>>0)]=0;
 label=680;break;
 case 676: 
 var $lpad_loopexit222$0 = ___cxa_find_matching_catch(); var $lpad_loopexit222$1 = tempRet0;
 var $lpad_phi224$1=$lpad_loopexit222$1;var $lpad_phi224$0=$lpad_loopexit222$0;label=678;break;
 case 677: 
 var $lpad_nonloopexit223$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit223$1 = tempRet0;
 var $lpad_phi224$1=$lpad_nonloopexit223$1;var $lpad_phi224$0=$lpad_nonloopexit223$0;label=678;break;
 case 678: 
 var $lpad_phi224$0;
 var $lpad_phi224$1;
 var $1842=$1752;
 var $1843=HEAP8[(($1842)>>0)];
 var $1844=$1843&1;
 var $1845=(($1844<<24)>>24)==0;
 if($1845){var $eh_lpad_body_i_i$1=$lpad_phi224$1;var $eh_lpad_body_i_i$0=$lpad_phi224$0;var $__v_i22_i_sroa_9_2=$1752;var $__v_i22_i_sroa_18_2=$1752;label=729;break;}else{label=679;break;}
 case 679: 
 var $1847=(($1751+((($1701)*(28))&-1)+8)|0);
 var $1848=HEAP32[(($1847)>>2)];
 _free($1848);
 var $eh_lpad_body_i_i$1=$lpad_phi224$1;var $eh_lpad_body_i_i$0=$lpad_phi224$0;var $__v_i22_i_sroa_9_2=$1752;var $__v_i22_i_sroa_18_2=$1752;label=729;break;
 case 680: 
 var $1849=HEAP32[(($1797)>>2)];
 HEAP32[(($1796)>>2)]=$1849;
 label=681;break;
 case 681: 
 var $_sum=((($1701)+(1))|0);
 var $1850=(($1751+((($_sum)*(28))&-1))|0);
 var $1851=HEAP32[(($1696)>>2)];
 var $1852=HEAP32[(($1591)>>2)];
 var $_0119=$1852;var $__v_i22_i_sroa_9_0=$1752;label=682;break;
 case 682: 
 var $__v_i22_i_sroa_9_0;
 var $_0119;
 var $1854=($_0119|0)==($1851|0);
 if($1854){label=718;break;}else{label=683;break;}
 case 683: 
 var $1856=((($_0119)-(28))|0);
 var $1857=((($__v_i22_i_sroa_9_0)-(28))|0);
 var $1858=$1856;
 var $1859=HEAP8[(($1858)>>0)];
 var $1860=$1859&1;
 var $1861=(($1860<<24)>>24)==0;
 if($1861){label=684;break;}else{label=685;break;}
 case 684: 
 var $1863=$1857;
 assert(12 % 1 === 0);HEAP32[(($1863)>>2)]=HEAP32[(($1858)>>2)];HEAP32[((($1863)+(4))>>2)]=HEAP32[((($1858)+(4))>>2)];HEAP32[((($1863)+(8))>>2)]=HEAP32[((($1858)+(8))>>2)];
 label=698;break;
 case 685: 
 var $1865=((($_0119)-(28)+8)|0);
 var $1866=HEAP32[(($1865)>>2)];
 var $1867=((($_0119)-(28)+4)|0);
 var $1868=HEAP32[(($1867)>>2)];
 var $1869=($1868>>>0)>4294967279;
 if($1869){label=686;break;}else{label=688;break;}
 case 686: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=687;break; } else { var $__v_i22_i_sroa_9_1_ph_ph=$__v_i22_i_sroa_9_0;var $__v_i22_i_sroa_18_1_ph_ph=$1850;label=728;break; }
 case 687: 
 throw "Reached an unreachable!";
 case 688: 
 var $1872=($1868>>>0)<11;
 if($1872){label=689;break;}else{label=690;break;}
 case 689: 
 var $1874=$1868<<1;
 var $1875=(($1874)&255);
 var $1876=$1857;
 HEAP8[(($1876)>>0)]=$1875;
 var $1877=$1857;
 var $1878=(($1877+1)|0);
 var $__p_0_i_i_i_i=$1878;label=697;break;
 case 690: 
 var $1879=((($1868)+(16))|0);
 var $1880=$1879&-16;
 var $1881=($1880|0)==0;
 var $_size_i_i3_i_i=($1881?1:$1880);
 var $1882=_malloc($_size_i_i3_i_i);
 var $1883=($1882|0)==0;
 if($1883){label=691;break;}else{var $_lcssa_i_i5_i_i=$1882;label=696;break;}
 case 691: 
 var $1884=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1885=($1884|0)==0;
 if($1885){label=694;break;}else{label=692;break;}
 case 692: 
 var $1887=$1884;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1887]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=693;break; } else { label=727;break; }
 case 693: 
 var $1888=_malloc($_size_i_i3_i_i);
 var $1889=($1888|0)==0;
 if($1889){label=691;break;}else{var $_lcssa_i_i5_i_i=$1888;label=696;break;}
 case 694: 
 var $1891=___cxa_allocate_exception(4);
 var $1892=$1891;
 HEAP32[(($1892)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1891,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=695;break; } else { var $__v_i22_i_sroa_9_1_ph_ph=$__v_i22_i_sroa_9_0;var $__v_i22_i_sroa_18_1_ph_ph=$1850;label=728;break; }
 case 695: 
 throw "Reached an unreachable!";
 case 696: 
 var $_lcssa_i_i5_i_i;
 var $1893=((($__v_i22_i_sroa_9_0)-(28)+8)|0);
 HEAP32[(($1893)>>2)]=$_lcssa_i_i5_i_i;
 var $1894=$1880|1;
 var $1895=(($1857)|0);
 HEAP32[(($1895)>>2)]=$1894;
 var $1896=((($__v_i22_i_sroa_9_0)-(28)+4)|0);
 HEAP32[(($1896)>>2)]=$1868;
 var $__p_0_i_i_i_i=$_lcssa_i_i5_i_i;label=697;break;
 case 697: 
 var $__p_0_i_i_i_i;
 assert($1868 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $1866, $1868)|0);
 var $1897=(($__p_0_i_i_i_i+$1868)|0);
 HEAP8[(($1897)>>0)]=0;
 label=698;break;
 case 698: 
 var $1898=((($__v_i22_i_sroa_9_0)-(28)+12)|0);
 var $1899=((($_0119)-(28)+12)|0);
 var $1900=HEAP32[(($1899)>>2)];
 HEAP32[(($1898)>>2)]=$1900;
 var $1901=((($__v_i22_i_sroa_9_0)-(28)+16)|0);
 var $1902=((($_0119)-(28)+16)|0);
 var $1903=$1902;
 var $1904=HEAP8[(($1903)>>0)];
 var $1905=$1904&1;
 var $1906=(($1905<<24)>>24)==0;
 if($1906){label=699;break;}else{label=700;break;}
 case 699: 
 var $1908=$1901;
 assert(12 % 1 === 0);HEAP32[(($1908)>>2)]=HEAP32[(($1903)>>2)];HEAP32[((($1908)+(4))>>2)]=HEAP32[((($1903)+(4))>>2)];HEAP32[((($1908)+(8))>>2)]=HEAP32[((($1903)+(8))>>2)];
 label=717;break;
 case 700: 
 var $1910=((($_0119)-(28)+24)|0);
 var $1911=HEAP32[(($1910)>>2)];
 var $1912=((($_0119)-(28)+20)|0);
 var $1913=HEAP32[(($1912)>>2)];
 var $1914=($1913>>>0)>4294967279;
 if($1914){label=701;break;}else{label=703;break;}
 case 701: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=702;break; } else { label=714;break; }
 case 702: 
 throw "Reached an unreachable!";
 case 703: 
 var $1917=($1913>>>0)<11;
 if($1917){label=704;break;}else{label=705;break;}
 case 704: 
 var $1919=$1913<<1;
 var $1920=(($1919)&255);
 var $1921=$1901;
 HEAP8[(($1921)>>0)]=$1920;
 var $1922=$1901;
 var $1923=(($1922+1)|0);
 var $__p_0_i2_i_i_i=$1923;label=712;break;
 case 705: 
 var $1924=((($1913)+(16))|0);
 var $1925=$1924&-16;
 var $1926=($1925|0)==0;
 var $_size_i5_i_i_i=($1926?1:$1925);
 var $1927=_malloc($_size_i5_i_i_i);
 var $1928=($1927|0)==0;
 if($1928){label=706;break;}else{var $_lcssa_i7_i_i_i=$1927;label=711;break;}
 case 706: 
 var $1929=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $1930=($1929|0)==0;
 if($1930){label=709;break;}else{label=707;break;}
 case 707: 
 var $1932=$1929;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1932]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=708;break; } else { label=713;break; }
 case 708: 
 var $1933=_malloc($_size_i5_i_i_i);
 var $1934=($1933|0)==0;
 if($1934){label=706;break;}else{var $_lcssa_i7_i_i_i=$1933;label=711;break;}
 case 709: 
 var $1936=___cxa_allocate_exception(4);
 var $1937=$1936;
 HEAP32[(($1937)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1936,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=710;break; } else { label=714;break; }
 case 710: 
 throw "Reached an unreachable!";
 case 711: 
 var $_lcssa_i7_i_i_i;
 var $1938=((($__v_i22_i_sroa_9_0)-(28)+24)|0);
 HEAP32[(($1938)>>2)]=$_lcssa_i7_i_i_i;
 var $1939=$1925|1;
 var $1940=(($1901)|0);
 HEAP32[(($1940)>>2)]=$1939;
 var $1941=((($__v_i22_i_sroa_9_0)-(28)+20)|0);
 HEAP32[(($1941)>>2)]=$1913;
 var $__p_0_i2_i_i_i=$_lcssa_i7_i_i_i;label=712;break;
 case 712: 
 var $__p_0_i2_i_i_i;
 assert($1913 % 1 === 0);(_memcpy($__p_0_i2_i_i_i, $1911, $1913)|0);
 var $1942=(($__p_0_i2_i_i_i+$1913)|0);
 HEAP8[(($1942)>>0)]=0;
 label=717;break;
 case 713: 
 var $lpad_loopexit230$0 = ___cxa_find_matching_catch(); var $lpad_loopexit230$1 = tempRet0;
 var $lpad_phi232$1=$lpad_loopexit230$1;var $lpad_phi232$0=$lpad_loopexit230$0;label=715;break;
 case 714: 
 var $lpad_nonloopexit231$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit231$1 = tempRet0;
 var $lpad_phi232$1=$lpad_nonloopexit231$1;var $lpad_phi232$0=$lpad_nonloopexit231$0;label=715;break;
 case 715: 
 var $lpad_phi232$0;
 var $lpad_phi232$1;
 var $1944=$1857;
 var $1945=HEAP8[(($1944)>>0)];
 var $1946=$1945&1;
 var $1947=(($1946<<24)>>24)==0;
 if($1947){var $eh_lpad_body_i_i$1=$lpad_phi232$1;var $eh_lpad_body_i_i$0=$lpad_phi232$0;var $__v_i22_i_sroa_9_2=$__v_i22_i_sroa_9_0;var $__v_i22_i_sroa_18_2=$1850;label=729;break;}else{label=716;break;}
 case 716: 
 var $1949=((($__v_i22_i_sroa_9_0)-(28)+8)|0);
 var $1950=HEAP32[(($1949)>>2)];
 _free($1950);
 var $eh_lpad_body_i_i$1=$lpad_phi232$1;var $eh_lpad_body_i_i$0=$lpad_phi232$0;var $__v_i22_i_sroa_9_2=$__v_i22_i_sroa_9_0;var $__v_i22_i_sroa_18_2=$1850;label=729;break;
 case 717: 
 var $1951=HEAP32[(($1899)>>2)];
 HEAP32[(($1898)>>2)]=$1951;
 var $_0119=$1856;var $__v_i22_i_sroa_9_0=$1857;label=682;break;
 case 718: 
 var $1952=HEAP32[(($1696)>>2)];
 HEAP32[(($1696)>>2)]=$__v_i22_i_sroa_9_0;
 var $1953=HEAP32[(($1591)>>2)];
 HEAP32[(($1591)>>2)]=$1850;
 HEAP32[(($1593)>>2)]=$1753;
 var $__v_i22_i_sroa_18_0=$1953;label=719;break;
 case 719: 
 var $__v_i22_i_sroa_18_0;
 var $1954=($1952|0)==($__v_i22_i_sroa_18_0|0);
 if($1954){label=724;break;}else{label=720;break;}
 case 720: 
 var $1956=((($__v_i22_i_sroa_18_0)-(28))|0);
 var $1957=((($__v_i22_i_sroa_18_0)-(28)+16)|0);
 var $1958=$1957;
 var $1959=HEAP8[(($1958)>>0)];
 var $1960=$1959&1;
 var $1961=(($1960<<24)>>24)==0;
 if($1961){label=722;break;}else{label=721;break;}
 case 721: 
 var $1963=((($__v_i22_i_sroa_18_0)-(28)+24)|0);
 var $1964=HEAP32[(($1963)>>2)];
 _free($1964);
 label=722;break;
 case 722: 
 var $1965=$1956;
 var $1966=HEAP8[(($1965)>>0)];
 var $1967=$1966&1;
 var $1968=(($1967<<24)>>24)==0;
 if($1968){var $__v_i22_i_sroa_18_0=$1956;label=719;break;}else{label=723;break;}
 case 723: 
 var $1970=((($__v_i22_i_sroa_18_0)-(28)+8)|0);
 var $1971=HEAP32[(($1970)>>2)];
 _free($1971);
 var $__v_i22_i_sroa_18_0=$1956;label=719;break;
 case 724: 
 var $1972=($1952|0)==0;
 if($1972){label=737;break;}else{label=725;break;}
 case 725: 
 var $1974=$1952;
 _free($1974);
 label=737;break;
 case 726: 
 var $lpad_loopexit217$0 = ___cxa_find_matching_catch(); var $lpad_loopexit217$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit217$1;var $eh_lpad_body_i_i$0=$lpad_loopexit217$0;var $__v_i22_i_sroa_9_2=$1752;var $__v_i22_i_sroa_18_2=$1752;label=729;break;
 case 727: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit225$1;var $eh_lpad_body_i_i$0=$lpad_loopexit225$0;var $__v_i22_i_sroa_9_2=$__v_i22_i_sroa_9_0;var $__v_i22_i_sroa_18_2=$1850;label=729;break;
 case 728: 
 var $__v_i22_i_sroa_18_1_ph_ph;
 var $__v_i22_i_sroa_9_1_ph_ph;
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_nonloopexit226$1;var $eh_lpad_body_i_i$0=$lpad_nonloopexit226$0;var $__v_i22_i_sroa_9_2=$__v_i22_i_sroa_9_1_ph_ph;var $__v_i22_i_sroa_18_2=$__v_i22_i_sroa_18_1_ph_ph;label=729;break;
 case 729: 
 var $__v_i22_i_sroa_18_2;
 var $__v_i22_i_sroa_9_2;
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $__v_i22_i_sroa_18_3=$__v_i22_i_sroa_18_2;label=730;break;
 case 730: 
 var $__v_i22_i_sroa_18_3;
 var $1975=($__v_i22_i_sroa_9_2|0)==($__v_i22_i_sroa_18_3|0);
 if($1975){label=735;break;}else{label=731;break;}
 case 731: 
 var $1977=((($__v_i22_i_sroa_18_3)-(28))|0);
 var $1978=((($__v_i22_i_sroa_18_3)-(28)+16)|0);
 var $1979=$1978;
 var $1980=HEAP8[(($1979)>>0)];
 var $1981=$1980&1;
 var $1982=(($1981<<24)>>24)==0;
 if($1982){label=733;break;}else{label=732;break;}
 case 732: 
 var $1984=((($__v_i22_i_sroa_18_3)-(28)+24)|0);
 var $1985=HEAP32[(($1984)>>2)];
 _free($1985);
 label=733;break;
 case 733: 
 var $1986=$1977;
 var $1987=HEAP8[(($1986)>>0)];
 var $1988=$1987&1;
 var $1989=(($1988<<24)>>24)==0;
 if($1989){var $__v_i22_i_sroa_18_3=$1977;label=730;break;}else{label=734;break;}
 case 734: 
 var $1991=((($__v_i22_i_sroa_18_3)-(28)+8)|0);
 var $1992=HEAP32[(($1991)>>2)];
 _free($1992);
 var $__v_i22_i_sroa_18_3=$1977;label=730;break;
 case 735: 
 var $1993=($1751|0)==0;
 if($1993){var $eh_lpad_body_i25$1=$eh_lpad_body_i_i$1;var $eh_lpad_body_i25$0=$eh_lpad_body_i_i$0;label=743;break;}else{label=736;break;}
 case 736: 
 var $1995=$1751;
 _free($1995);
 var $eh_lpad_body_i25$1=$eh_lpad_body_i_i$1;var $eh_lpad_body_i25$0=$eh_lpad_body_i_i$0;label=743;break;
 case 737: 
 var $1996=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$1996;label=585;break;
 case 738: 
 var $lpad_loopexit201$0 = ___cxa_find_matching_catch(); var $lpad_loopexit201$1 = tempRet0;
 var $eh_lpad_body_i25$1=$lpad_loopexit201$1;var $eh_lpad_body_i25$0=$lpad_loopexit201$0;label=743;break;
 case 739: 
 var $lpad_loopexit204$0 = ___cxa_find_matching_catch(); var $lpad_loopexit204$1 = tempRet0;
 var $eh_lpad_body_i25$1=$lpad_loopexit204$1;var $eh_lpad_body_i25$0=$lpad_loopexit204$0;label=743;break;
 case 740: 
 var $lpad_loopexit212$0 = ___cxa_find_matching_catch(); var $lpad_loopexit212$1 = tempRet0;
 var $eh_lpad_body_i25$1=$lpad_loopexit212$1;var $eh_lpad_body_i25$0=$lpad_loopexit212$0;label=743;break;
 case 741: 
 var $lpad_loopexit233$0 = ___cxa_find_matching_catch(); var $lpad_loopexit233$1 = tempRet0;
 var $eh_lpad_body_i25$1=$lpad_loopexit233$1;var $eh_lpad_body_i25$0=$lpad_loopexit233$0;label=743;break;
 case 742: 
 var $lpad_nonloopexit234$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit234$1 = tempRet0;
 var $eh_lpad_body_i25$1=$lpad_nonloopexit234$1;var $eh_lpad_body_i25$0=$lpad_nonloopexit234$0;label=743;break;
 case 743: 
 var $eh_lpad_body_i25$0;
 var $eh_lpad_body_i25$1;
 var $1997=$eh_lpad_body_i25$0;
 var $1998=$eh_lpad_body_i25$1;
 var $1999=HEAP32[(($1427)>>2)];
 var $2000=($1999|0)==0;
 if($2000){label=998;break;}else{label=744;break;}
 case 744: 
 var $_pre=HEAP32[(($1428)>>2)];
 var $2002=$_pre;label=745;break;
 case 745: 
 var $2002;
 var $2003=($1999|0)==($2002|0);
 if($2003){label=750;break;}else{label=746;break;}
 case 746: 
 var $2005=((($2002)-(28))|0);
 HEAP32[(($1428)>>2)]=$2005;
 var $2006=((($2002)-(28)+16)|0);
 var $2007=$2006;
 var $2008=HEAP8[(($2007)>>0)];
 var $2009=$2008&1;
 var $2010=(($2009<<24)>>24)==0;
 if($2010){label=748;break;}else{label=747;break;}
 case 747: 
 var $2012=((($2002)-(28)+24)|0);
 var $2013=HEAP32[(($2012)>>2)];
 _free($2013);
 label=748;break;
 case 748: 
 var $2014=$2005;
 var $2015=HEAP8[(($2014)>>0)];
 var $2016=$2015&1;
 var $2017=(($2016<<24)>>24)==0;
 if($2017){var $2002=$2005;label=745;break;}else{label=749;break;}
 case 749: 
 var $2019=((($2002)-(28)+8)|0);
 var $2020=HEAP32[(($2019)>>2)];
 _free($2020);
 var $2002=$2005;label=745;break;
 case 750: 
 var $2021=$1999;
 _free($2021);
 label=998;break;
 case 751: 
 var $2023=HEAP32[(($1427)>>2)];
 var $2024=($2023|0)==0;
 if($2024){label=759;break;}else{label=752;break;}
 case 752: 
 var $_pre345=HEAP32[(($1428)>>2)];
 var $2026=$_pre345;label=753;break;
 case 753: 
 var $2026;
 var $2027=($2023|0)==($2026|0);
 if($2027){label=758;break;}else{label=754;break;}
 case 754: 
 var $2029=((($2026)-(28))|0);
 HEAP32[(($1428)>>2)]=$2029;
 var $2030=((($2026)-(28)+16)|0);
 var $2031=$2030;
 var $2032=HEAP8[(($2031)>>0)];
 var $2033=$2032&1;
 var $2034=(($2033<<24)>>24)==0;
 if($2034){label=756;break;}else{label=755;break;}
 case 755: 
 var $2036=((($2026)-(28)+24)|0);
 var $2037=HEAP32[(($2036)>>2)];
 _free($2037);
 label=756;break;
 case 756: 
 var $2038=$2029;
 var $2039=HEAP8[(($2038)>>0)];
 var $2040=$2039&1;
 var $2041=(($2040<<24)>>24)==0;
 if($2041){var $2026=$2029;label=753;break;}else{label=757;break;}
 case 757: 
 var $2043=((($2026)-(28)+8)|0);
 var $2044=HEAP32[(($2043)>>2)];
 _free($2044);
 var $2026=$2029;label=753;break;
 case 758: 
 var $2045=$2023;
 _free($2045);
 label=759;break;
 case 759: 
 var $2046=((($storemerge_i9)+(1))|0);
 var $storemerge_i9=$2046;label=529;break;
 case 760: 
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $2047=$1;
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 var $2048=$2;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $2049=$3;
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $2050=$4;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $2051=$5;
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $2052=$6;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $2053=$7;
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $2054=$8;
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $2055=$9;
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $2056=$10;
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $2057=$11;
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $2058=$12;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $2059=$13;
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $2060=$14;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $2061=_strlen(3776);
 var $2062=($2061>>>0)>4294967279;
 if($2062){label=761;break;}else{label=763;break;}
 case 761: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=762;break; } else { label=1000;break; }
 case 762: 
 throw "Reached an unreachable!";
 case 763: 
 var $2065=($2061>>>0)<11;
 if($2065){label=764;break;}else{label=765;break;}
 case 764: 
 var $2067=$2061<<1;
 var $2068=(($2067)&255);
 var $2069=$agg_result;
 HEAP8[(($2069)>>0)]=$2068;
 var $2070=$agg_result;
 var $2071=(($2070+1)|0);
 var $__p_0_i_i34=$2071;label=772;break;
 case 765: 
 var $2072=((($2061)+(16))|0);
 var $2073=$2072&-16;
 var $2074=($2073|0)==0;
 var $_size_i_i29=($2074?1:$2073);
 var $2075=_malloc($_size_i_i29);
 var $2076=($2075|0)==0;
 if($2076){label=766;break;}else{var $_lcssa_i_i32=$2075;label=771;break;}
 case 766: 
 var $2077=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2078=($2077|0)==0;
 if($2078){label=769;break;}else{label=767;break;}
 case 767: 
 var $2080=$2077;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2080]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=768;break; } else { label=999;break; }
 case 768: 
 var $2081=_malloc($_size_i_i29);
 var $2082=($2081|0)==0;
 if($2082){label=766;break;}else{var $_lcssa_i_i32=$2081;label=771;break;}
 case 769: 
 var $2084=___cxa_allocate_exception(4);
 var $2085=$2084;
 HEAP32[(($2085)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2084,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=770;break; } else { label=1000;break; }
 case 770: 
 throw "Reached an unreachable!";
 case 771: 
 var $_lcssa_i_i32;
 var $2086=(($agg_result+8)|0);
 HEAP32[(($2086)>>2)]=$_lcssa_i_i32;
 var $2087=$2073|1;
 var $2088=(($agg_result)|0);
 HEAP32[(($2088)>>2)]=$2087;
 var $2089=(($agg_result+4)|0);
 HEAP32[(($2089)>>2)]=$2061;
 var $__p_0_i_i34=$_lcssa_i_i32;label=772;break;
 case 772: 
 var $__p_0_i_i34;
 assert($2061 % 1 === 0);(_memcpy($__p_0_i_i34, 3776, $2061)|0);
 var $2090=(($__p_0_i_i34+$2061)|0);
 HEAP8[(($2090)>>0)]=0;
 var $2091=$3;
 var $2092=(($2091+1)|0);
 var $2093=$2;
 var $2094=(($2093+1)|0);
 var $2095=(($3+8)|0);
 var $2096=(($2+8)|0);
 var $2097=(($2+4)|0);
 var $2098=(($3)|0);
 var $2099=(($3+4)|0);
 var $2100=$6;
 var $2101=(($2100+1)|0);
 var $2102=$5;
 var $2103=(($2102+1)|0);
 var $2104=(($6+8)|0);
 var $2105=(($5+8)|0);
 var $2106=(($5+4)|0);
 var $2107=(($6)|0);
 var $2108=(($6+4)|0);
 var $2109=$9;
 var $2110=(($2109+1)|0);
 var $2111=$8;
 var $2112=(($2111+1)|0);
 var $2113=(($9+8)|0);
 var $2114=(($8+8)|0);
 var $2115=(($8+4)|0);
 var $2116=(($9)|0);
 var $2117=(($9+4)|0);
 var $2118=$12;
 var $2119=(($2118+1)|0);
 var $2120=$11;
 var $2121=(($2120+1)|0);
 var $2122=(($12+8)|0);
 var $2123=(($11+8)|0);
 var $2124=(($11+4)|0);
 var $2125=(($12)|0);
 var $2126=(($12+4)|0);
 var $2127=$14;
 var $2128=(($2127+1)|0);
 var $2129=$13;
 var $2130=(($2129+1)|0);
 var $2131=(($14+8)|0);
 var $2132=(($13+8)|0);
 var $2133=(($13+4)|0);
 var $2134=(($14)|0);
 var $2135=(($14+4)|0);
 var $2136=(($10+8)|0);
 var $2137=$10;
 var $2138=(($2137+1)|0);
 var $2139=(($10)|0);
 var $2140=(($10+4)|0);
 var $2141=(($7+8)|0);
 var $2142=$7;
 var $2143=(($2142+1)|0);
 var $2144=(($7)|0);
 var $2145=(($7+4)|0);
 var $2146=(($4+8)|0);
 var $2147=$4;
 var $2148=(($2147+1)|0);
 var $2149=(($4)|0);
 var $2150=(($4+4)|0);
 var $2151=(($1+8)|0);
 var $2152=$1;
 var $2153=(($2152+1)|0);
 var $2154=(($1)|0);
 var $2155=(($1+4)|0);
 var $storemerge_i36=0;label=773;break;
 case 773: 
 var $storemerge_i36;
 var $2157=($storemerge_i36|0)<($70|0);
 if($2157){label=774;break;}else{label=993;break;}
 case 774: 
 var $2159=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,3704,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge1_i37=0;label=775;break; } else { label=824;break; }
 case 775: 
 var $storemerge1_i37;
 var $2160=($storemerge1_i37|0)<($70|0);
 if($2160){label=776;break;}else{label=991;break;}
 case 776: 
 var $2162=HEAP32[(($1424)>>2)];
 var $2163=(($2162+((($storemerge_i36)*(12))&-1))|0);
 var $2164=HEAP32[(($2163)>>2)];
 var $2165=(($2164+((($storemerge1_i37)*(28))&-1))|0);
 var $2166=$2165;
 var $2167=HEAP8[(($2166)>>0)];
 var $2168=$2167&1;
 var $2169=(($2168<<24)>>24)==0;
 if($2169){label=777;break;}else{label=778;break;}
 case 777: 
 assert(12 % 1 === 0);HEAP32[(($2047)>>2)]=HEAP32[(($2166)>>2)];HEAP32[((($2047)+(4))>>2)]=HEAP32[((($2166)+(4))>>2)];HEAP32[((($2047)+(8))>>2)]=HEAP32[((($2166)+(8))>>2)];
 label=791;break;
 case 778: 
 var $2172=(($2164+((($storemerge1_i37)*(28))&-1)+8)|0);
 var $2173=HEAP32[(($2172)>>2)];
 var $2174=(($2164+((($storemerge1_i37)*(28))&-1)+4)|0);
 var $2175=HEAP32[(($2174)>>2)];
 var $2176=($2175>>>0)>4294967279;
 if($2176){label=779;break;}else{label=781;break;}
 case 779: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=780;break; } else { label=825;break; }
 case 780: 
 throw "Reached an unreachable!";
 case 781: 
 var $2179=($2175>>>0)<11;
 if($2179){label=782;break;}else{label=783;break;}
 case 782: 
 var $2181=$2175<<1;
 var $2182=(($2181)&255);
 HEAP8[(($2047)>>0)]=$2182;
 var $__p_0_i_i_i42=$2153;label=790;break;
 case 783: 
 var $2183=((($2175)+(16))|0);
 var $2184=$2183&-16;
 var $2185=($2184|0)==0;
 var $_size_i116_i=($2185?1:$2184);
 var $2186=_malloc($_size_i116_i);
 var $2187=($2186|0)==0;
 if($2187){label=784;break;}else{var $_lcssa_i118_i=$2186;label=789;break;}
 case 784: 
 var $2188=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2189=($2188|0)==0;
 if($2189){label=787;break;}else{label=785;break;}
 case 785: 
 var $2191=$2188;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2191]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=786;break; } else { label=815;break; }
 case 786: 
 var $2192=_malloc($_size_i116_i);
 var $2193=($2192|0)==0;
 if($2193){label=784;break;}else{var $_lcssa_i118_i=$2192;label=789;break;}
 case 787: 
 var $2195=___cxa_allocate_exception(4);
 var $2196=$2195;
 HEAP32[(($2196)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2195,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=788;break; } else { label=825;break; }
 case 788: 
 throw "Reached an unreachable!";
 case 789: 
 var $_lcssa_i118_i;
 HEAP32[(($2151)>>2)]=$_lcssa_i118_i;
 var $2197=$2184|1;
 HEAP32[(($2154)>>2)]=$2197;
 HEAP32[(($2155)>>2)]=$2175;
 var $__p_0_i_i_i42=$_lcssa_i118_i;label=790;break;
 case 790: 
 var $__p_0_i_i_i42;
 assert($2175 % 1 === 0);(_memcpy($__p_0_i_i_i42, $2173, $2175)|0);
 var $2198=(($__p_0_i_i_i42+$2175)|0);
 HEAP8[(($2198)>>0)]=0;
 label=791;break;
 case 791: 
 var $2199=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($1,2600);
 var $2200=($2199|0)==0;
 var $2201=HEAP8[(($2047)>>0)];
 var $2202=$2201&1;
 var $2203=(($2202<<24)>>24)==0;
 if($2203){label=793;break;}else{label=792;break;}
 case 792: 
 var $2205=HEAP32[(($2151)>>2)];
 _free($2205);
 label=793;break;
 case 793: 
 if($2200){label=794;break;}else{label=832;break;}
 case 794: 
 var $2206=_strlen(3608);
 var $2207=($2206>>>0)>4294967279;
 if($2207){label=795;break;}else{label=797;break;}
 case 795: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=796;break; } else { label=825;break; }
 case 796: 
 throw "Reached an unreachable!";
 case 797: 
 var $2210=($2206>>>0)<11;
 if($2210){label=798;break;}else{label=799;break;}
 case 798: 
 var $2212=$2206<<1;
 var $2213=(($2212)&255);
 HEAP8[(($2049)>>0)]=$2213;
 var $__p_0_i7_i=$2092;label=806;break;
 case 799: 
 var $2214=((($2206)+(16))|0);
 var $2215=$2214&-16;
 var $2216=($2215|0)==0;
 var $_size_i11_i=($2216?1:$2215);
 var $2217=_malloc($_size_i11_i);
 var $2218=($2217|0)==0;
 if($2218){label=800;break;}else{var $_lcssa_i13_i=$2217;label=805;break;}
 case 800: 
 var $2219=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2220=($2219|0)==0;
 if($2220){label=803;break;}else{label=801;break;}
 case 801: 
 var $2222=$2219;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2222]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=802;break; } else { label=823;break; }
 case 802: 
 var $2223=_malloc($_size_i11_i);
 var $2224=($2223|0)==0;
 if($2224){label=800;break;}else{var $_lcssa_i13_i=$2223;label=805;break;}
 case 803: 
 var $2226=___cxa_allocate_exception(4);
 var $2227=$2226;
 HEAP32[(($2227)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2226,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=804;break; } else { label=825;break; }
 case 804: 
 throw "Reached an unreachable!";
 case 805: 
 var $_lcssa_i13_i;
 HEAP32[(($2095)>>2)]=$_lcssa_i13_i;
 var $2228=$2215|1;
 HEAP32[(($2098)>>2)]=$2228;
 HEAP32[(($2099)>>2)]=$2206;
 var $__p_0_i7_i=$_lcssa_i13_i;label=806;break;
 case 806: 
 var $__p_0_i7_i;
 assert($2206 % 1 === 0);(_memcpy($__p_0_i7_i, 3608, $2206)|0);
 var $2229=(($__p_0_i7_i+$2206)|0);
 HEAP8[(($2229)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($2,$3,64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=807;break; } else { label=827;break; }
 case 807: 
 var $2231=HEAP8[(($2048)>>0)];
 var $2232=$2231&1;
 var $2233=(($2232<<24)>>24)==0;
 if($2233){label=809;break;}else{label=808;break;}
 case 808: 
 var $2235=HEAP32[(($2096)>>2)];
 var $2236=HEAP32[(($2097)>>2)];
 var $2241=$2236;var $2240=$2235;label=810;break;
 case 809: 
 var $2238=($2231&255);
 var $2239=$2238>>>1;
 var $2241=$2239;var $2240=$2094;label=810;break;
 case 810: 
 var $2240;
 var $2241;
 var $2242=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,$2240,$2241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=811;break; } else { label=828;break; }
 case 811: 
 if($2233){label=813;break;}else{label=812;break;}
 case 812: 
 var $2244=HEAP32[(($2096)>>2)];
 _free($2244);
 label=813;break;
 case 813: 
 var $2245=HEAP8[(($2049)>>0)];
 var $2246=$2245&1;
 var $2247=(($2246<<24)>>24)==0;
 if($2247){label=990;break;}else{label=814;break;}
 case 814: 
 var $2249=HEAP32[(($2095)>>2)];
 _free($2249);
 label=990;break;
 case 815: 
 var $lpad_loopexit161$0 = ___cxa_find_matching_catch(); var $lpad_loopexit161$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit161$1;var $lpad_phi163$0=$lpad_loopexit161$0;label=826;break;
 case 816: 
 var $lpad_loopexit164$0 = ___cxa_find_matching_catch(); var $lpad_loopexit164$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit164$1;var $lpad_phi163$0=$lpad_loopexit164$0;label=826;break;
 case 817: 
 var $lpad_loopexit167$0 = ___cxa_find_matching_catch(); var $lpad_loopexit167$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit167$1;var $lpad_phi163$0=$lpad_loopexit167$0;label=826;break;
 case 818: 
 var $lpad_loopexit170$0 = ___cxa_find_matching_catch(); var $lpad_loopexit170$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit170$1;var $lpad_phi163$0=$lpad_loopexit170$0;label=826;break;
 case 819: 
 var $lpad_loopexit173$0 = ___cxa_find_matching_catch(); var $lpad_loopexit173$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit173$1;var $lpad_phi163$0=$lpad_loopexit173$0;label=826;break;
 case 820: 
 var $lpad_loopexit176$0 = ___cxa_find_matching_catch(); var $lpad_loopexit176$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit176$1;var $lpad_phi163$0=$lpad_loopexit176$0;label=826;break;
 case 821: 
 var $lpad_loopexit179$0 = ___cxa_find_matching_catch(); var $lpad_loopexit179$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit179$1;var $lpad_phi163$0=$lpad_loopexit179$0;label=826;break;
 case 822: 
 var $lpad_loopexit182$0 = ___cxa_find_matching_catch(); var $lpad_loopexit182$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit182$1;var $lpad_phi163$0=$lpad_loopexit182$0;label=826;break;
 case 823: 
 var $lpad_loopexit185$0 = ___cxa_find_matching_catch(); var $lpad_loopexit185$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit185$1;var $lpad_phi163$0=$lpad_loopexit185$0;label=826;break;
 case 824: 
 var $lpad_loopexit191$0 = ___cxa_find_matching_catch(); var $lpad_loopexit191$1 = tempRet0;
 var $lpad_phi163$1=$lpad_loopexit191$1;var $lpad_phi163$0=$lpad_loopexit191$0;label=826;break;
 case 825: 
 var $lpad_nonloopexit192$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit192$1 = tempRet0;
 var $lpad_phi163$1=$lpad_nonloopexit192$1;var $lpad_phi163$0=$lpad_nonloopexit192$0;label=826;break;
 case 826: 
 var $lpad_phi163$0;
 var $lpad_phi163$1;
 var $2250=$lpad_phi163$0;
 var $2251=$lpad_phi163$1;
 var $_5=$2250;var $_5118=$2251;label=994;break;
 case 827: 
 var $2253$0 = ___cxa_find_matching_catch(); var $2253$1 = tempRet0;
 var $2254=$2253$0;
 var $2255=$2253$1;
 var $_0111=$2254;var $_0113=$2255;label=830;break;
 case 828: 
 var $2257$0 = ___cxa_find_matching_catch(); var $2257$1 = tempRet0;
 var $2258=$2257$0;
 var $2259=$2257$1;
 if($2233){var $_0111=$2258;var $_0113=$2259;label=830;break;}else{label=829;break;}
 case 829: 
 var $2261=HEAP32[(($2096)>>2)];
 _free($2261);
 var $_0111=$2258;var $_0113=$2259;label=830;break;
 case 830: 
 var $_0113;
 var $_0111;
 var $2262=HEAP8[(($2049)>>0)];
 var $2263=$2262&1;
 var $2264=(($2263<<24)>>24)==0;
 if($2264){var $_5=$_0111;var $_5118=$_0113;label=994;break;}else{label=831;break;}
 case 831: 
 var $2266=HEAP32[(($2095)>>2)];
 _free($2266);
 var $_5=$_0111;var $_5118=$_0113;label=994;break;
 case 832: 
 var $2268=HEAP32[(($1424)>>2)];
 var $2269=(($2268+((($storemerge_i36)*(12))&-1))|0);
 var $2270=HEAP32[(($2269)>>2)];
 var $2271=(($2270+((($storemerge1_i37)*(28))&-1))|0);
 var $2272=$2271;
 var $2273=HEAP8[(($2272)>>0)];
 var $2274=$2273&1;
 var $2275=(($2274<<24)>>24)==0;
 if($2275){label=833;break;}else{label=834;break;}
 case 833: 
 assert(12 % 1 === 0);HEAP32[(($2050)>>2)]=HEAP32[(($2272)>>2)];HEAP32[((($2050)+(4))>>2)]=HEAP32[((($2272)+(4))>>2)];HEAP32[((($2050)+(8))>>2)]=HEAP32[((($2272)+(8))>>2)];
 label=847;break;
 case 834: 
 var $2278=(($2270+((($storemerge1_i37)*(28))&-1)+8)|0);
 var $2279=HEAP32[(($2278)>>2)];
 var $2280=(($2270+((($storemerge1_i37)*(28))&-1)+4)|0);
 var $2281=HEAP32[(($2280)>>2)];
 var $2282=($2281>>>0)>4294967279;
 if($2282){label=835;break;}else{label=837;break;}
 case 835: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=836;break; } else { label=825;break; }
 case 836: 
 throw "Reached an unreachable!";
 case 837: 
 var $2285=($2281>>>0)<11;
 if($2285){label=838;break;}else{label=839;break;}
 case 838: 
 var $2287=$2281<<1;
 var $2288=(($2287)&255);
 HEAP8[(($2050)>>0)]=$2288;
 var $__p_0_i_i22_i=$2148;label=846;break;
 case 839: 
 var $2289=((($2281)+(16))|0);
 var $2290=$2289&-16;
 var $2291=($2290|0)==0;
 var $_size_i122_i=($2291?1:$2290);
 var $2292=_malloc($_size_i122_i);
 var $2293=($2292|0)==0;
 if($2293){label=840;break;}else{var $_lcssa_i124_i=$2292;label=845;break;}
 case 840: 
 var $2294=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2295=($2294|0)==0;
 if($2295){label=843;break;}else{label=841;break;}
 case 841: 
 var $2297=$2294;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2297]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=842;break; } else { label=816;break; }
 case 842: 
 var $2298=_malloc($_size_i122_i);
 var $2299=($2298|0)==0;
 if($2299){label=840;break;}else{var $_lcssa_i124_i=$2298;label=845;break;}
 case 843: 
 var $2301=___cxa_allocate_exception(4);
 var $2302=$2301;
 HEAP32[(($2302)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2301,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=844;break; } else { label=825;break; }
 case 844: 
 throw "Reached an unreachable!";
 case 845: 
 var $_lcssa_i124_i;
 HEAP32[(($2146)>>2)]=$_lcssa_i124_i;
 var $2303=$2290|1;
 HEAP32[(($2149)>>2)]=$2303;
 HEAP32[(($2150)>>2)]=$2281;
 var $__p_0_i_i22_i=$_lcssa_i124_i;label=846;break;
 case 846: 
 var $__p_0_i_i22_i;
 assert($2281 % 1 === 0);(_memcpy($__p_0_i_i22_i, $2279, $2281)|0);
 var $2304=(($__p_0_i_i22_i+$2281)|0);
 HEAP8[(($2304)>>0)]=0;
 label=847;break;
 case 847: 
 var $2305=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,3616);
 var $2306=($2305|0)==0;
 var $2307=HEAP8[(($2050)>>0)];
 var $2308=$2307&1;
 var $2309=(($2308<<24)>>24)==0;
 if($2309){label=849;break;}else{label=848;break;}
 case 848: 
 var $2311=HEAP32[(($2146)>>2)];
 _free($2311);
 label=849;break;
 case 849: 
 if($2306){label=850;break;}else{label=876;break;}
 case 850: 
 var $2312=_strlen(3608);
 var $2313=($2312>>>0)>4294967279;
 if($2313){label=851;break;}else{label=853;break;}
 case 851: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=852;break; } else { label=825;break; }
 case 852: 
 throw "Reached an unreachable!";
 case 853: 
 var $2316=($2312>>>0)<11;
 if($2316){label=854;break;}else{label=855;break;}
 case 854: 
 var $2318=$2312<<1;
 var $2319=(($2318)&255);
 HEAP8[(($2052)>>0)]=$2319;
 var $__p_0_i32_i=$2101;label=862;break;
 case 855: 
 var $2320=((($2312)+(16))|0);
 var $2321=$2320&-16;
 var $2322=($2321|0)==0;
 var $_size_i36_i=($2322?1:$2321);
 var $2323=_malloc($_size_i36_i);
 var $2324=($2323|0)==0;
 if($2324){label=856;break;}else{var $_lcssa_i38_i=$2323;label=861;break;}
 case 856: 
 var $2325=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2326=($2325|0)==0;
 if($2326){label=859;break;}else{label=857;break;}
 case 857: 
 var $2328=$2325;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2328]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=858;break; } else { label=822;break; }
 case 858: 
 var $2329=_malloc($_size_i36_i);
 var $2330=($2329|0)==0;
 if($2330){label=856;break;}else{var $_lcssa_i38_i=$2329;label=861;break;}
 case 859: 
 var $2332=___cxa_allocate_exception(4);
 var $2333=$2332;
 HEAP32[(($2333)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2332,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=860;break; } else { label=825;break; }
 case 860: 
 throw "Reached an unreachable!";
 case 861: 
 var $_lcssa_i38_i;
 HEAP32[(($2104)>>2)]=$_lcssa_i38_i;
 var $2334=$2321|1;
 HEAP32[(($2107)>>2)]=$2334;
 HEAP32[(($2108)>>2)]=$2312;
 var $__p_0_i32_i=$_lcssa_i38_i;label=862;break;
 case 862: 
 var $__p_0_i32_i;
 assert($2312 % 1 === 0);(_memcpy($__p_0_i32_i, 3608, $2312)|0);
 var $2335=(($__p_0_i32_i+$2312)|0);
 HEAP8[(($2335)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($5,$6,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=863;break; } else { label=871;break; }
 case 863: 
 var $2337=HEAP8[(($2051)>>0)];
 var $2338=$2337&1;
 var $2339=(($2338<<24)>>24)==0;
 if($2339){label=865;break;}else{label=864;break;}
 case 864: 
 var $2341=HEAP32[(($2105)>>2)];
 var $2342=HEAP32[(($2106)>>2)];
 var $2347=$2342;var $2346=$2341;label=866;break;
 case 865: 
 var $2344=($2337&255);
 var $2345=$2344>>>1;
 var $2347=$2345;var $2346=$2103;label=866;break;
 case 866: 
 var $2346;
 var $2347;
 var $2348=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,$2346,$2347) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=867;break; } else { label=872;break; }
 case 867: 
 if($2339){label=869;break;}else{label=868;break;}
 case 868: 
 var $2350=HEAP32[(($2105)>>2)];
 _free($2350);
 label=869;break;
 case 869: 
 var $2351=HEAP8[(($2052)>>0)];
 var $2352=$2351&1;
 var $2353=(($2352<<24)>>24)==0;
 if($2353){label=990;break;}else{label=870;break;}
 case 870: 
 var $2355=HEAP32[(($2104)>>2)];
 _free($2355);
 label=990;break;
 case 871: 
 var $2357$0 = ___cxa_find_matching_catch(); var $2357$1 = tempRet0;
 var $2358=$2357$0;
 var $2359=$2357$1;
 var $_1112=$2358;var $_1114=$2359;label=874;break;
 case 872: 
 var $2361$0 = ___cxa_find_matching_catch(); var $2361$1 = tempRet0;
 var $2362=$2361$0;
 var $2363=$2361$1;
 if($2339){var $_1112=$2362;var $_1114=$2363;label=874;break;}else{label=873;break;}
 case 873: 
 var $2365=HEAP32[(($2105)>>2)];
 _free($2365);
 var $_1112=$2362;var $_1114=$2363;label=874;break;
 case 874: 
 var $_1114;
 var $_1112;
 var $2366=HEAP8[(($2052)>>0)];
 var $2367=$2366&1;
 var $2368=(($2367<<24)>>24)==0;
 if($2368){var $_5=$_1112;var $_5118=$_1114;label=994;break;}else{label=875;break;}
 case 875: 
 var $2370=HEAP32[(($2104)>>2)];
 _free($2370);
 var $_5=$_1112;var $_5118=$_1114;label=994;break;
 case 876: 
 var $2372=HEAP32[(($1424)>>2)];
 var $2373=(($2372+((($storemerge_i36)*(12))&-1))|0);
 var $2374=HEAP32[(($2373)>>2)];
 var $2375=(($2374+((($storemerge1_i37)*(28))&-1))|0);
 var $2376=$2375;
 var $2377=HEAP8[(($2376)>>0)];
 var $2378=$2377&1;
 var $2379=(($2378<<24)>>24)==0;
 if($2379){label=877;break;}else{label=878;break;}
 case 877: 
 assert(12 % 1 === 0);HEAP32[(($2053)>>2)]=HEAP32[(($2376)>>2)];HEAP32[((($2053)+(4))>>2)]=HEAP32[((($2376)+(4))>>2)];HEAP32[((($2053)+(8))>>2)]=HEAP32[((($2376)+(8))>>2)];
 label=891;break;
 case 878: 
 var $2382=(($2374+((($storemerge1_i37)*(28))&-1)+8)|0);
 var $2383=HEAP32[(($2382)>>2)];
 var $2384=(($2374+((($storemerge1_i37)*(28))&-1)+4)|0);
 var $2385=HEAP32[(($2384)>>2)];
 var $2386=($2385>>>0)>4294967279;
 if($2386){label=879;break;}else{label=881;break;}
 case 879: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=880;break; } else { label=825;break; }
 case 880: 
 throw "Reached an unreachable!";
 case 881: 
 var $2389=($2385>>>0)<11;
 if($2389){label=882;break;}else{label=883;break;}
 case 882: 
 var $2391=$2385<<1;
 var $2392=(($2391)&255);
 HEAP8[(($2053)>>0)]=$2392;
 var $__p_0_i_i47_i=$2143;label=890;break;
 case 883: 
 var $2393=((($2385)+(16))|0);
 var $2394=$2393&-16;
 var $2395=($2394|0)==0;
 var $_size_i128_i=($2395?1:$2394);
 var $2396=_malloc($_size_i128_i);
 var $2397=($2396|0)==0;
 if($2397){label=884;break;}else{var $_lcssa_i130_i=$2396;label=889;break;}
 case 884: 
 var $2398=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2399=($2398|0)==0;
 if($2399){label=887;break;}else{label=885;break;}
 case 885: 
 var $2401=$2398;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2401]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=886;break; } else { label=817;break; }
 case 886: 
 var $2402=_malloc($_size_i128_i);
 var $2403=($2402|0)==0;
 if($2403){label=884;break;}else{var $_lcssa_i130_i=$2402;label=889;break;}
 case 887: 
 var $2405=___cxa_allocate_exception(4);
 var $2406=$2405;
 HEAP32[(($2406)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2405,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=888;break; } else { label=825;break; }
 case 888: 
 throw "Reached an unreachable!";
 case 889: 
 var $_lcssa_i130_i;
 HEAP32[(($2141)>>2)]=$_lcssa_i130_i;
 var $2407=$2394|1;
 HEAP32[(($2144)>>2)]=$2407;
 HEAP32[(($2145)>>2)]=$2385;
 var $__p_0_i_i47_i=$_lcssa_i130_i;label=890;break;
 case 890: 
 var $__p_0_i_i47_i;
 assert($2385 % 1 === 0);(_memcpy($__p_0_i_i47_i, $2383, $2385)|0);
 var $2408=(($__p_0_i_i47_i+$2385)|0);
 HEAP8[(($2408)>>0)]=0;
 label=891;break;
 case 891: 
 var $2409=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($7,2184);
 var $2410=($2409|0)==0;
 var $2411=HEAP8[(($2053)>>0)];
 var $2412=$2411&1;
 var $2413=(($2412<<24)>>24)==0;
 if($2413){label=893;break;}else{label=892;break;}
 case 892: 
 var $2415=HEAP32[(($2141)>>2)];
 _free($2415);
 label=893;break;
 case 893: 
 if($2410){label=894;break;}else{label=920;break;}
 case 894: 
 var $2416=_strlen(3608);
 var $2417=($2416>>>0)>4294967279;
 if($2417){label=895;break;}else{label=897;break;}
 case 895: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=896;break; } else { label=825;break; }
 case 896: 
 throw "Reached an unreachable!";
 case 897: 
 var $2420=($2416>>>0)<11;
 if($2420){label=898;break;}else{label=899;break;}
 case 898: 
 var $2422=$2416<<1;
 var $2423=(($2422)&255);
 HEAP8[(($2055)>>0)]=$2423;
 var $__p_0_i56_i=$2110;label=906;break;
 case 899: 
 var $2424=((($2416)+(16))|0);
 var $2425=$2424&-16;
 var $2426=($2425|0)==0;
 var $_size_i60_i=($2426?1:$2425);
 var $2427=_malloc($_size_i60_i);
 var $2428=($2427|0)==0;
 if($2428){label=900;break;}else{var $_lcssa_i62_i=$2427;label=905;break;}
 case 900: 
 var $2429=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2430=($2429|0)==0;
 if($2430){label=903;break;}else{label=901;break;}
 case 901: 
 var $2432=$2429;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2432]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=902;break; } else { label=821;break; }
 case 902: 
 var $2433=_malloc($_size_i60_i);
 var $2434=($2433|0)==0;
 if($2434){label=900;break;}else{var $_lcssa_i62_i=$2433;label=905;break;}
 case 903: 
 var $2436=___cxa_allocate_exception(4);
 var $2437=$2436;
 HEAP32[(($2437)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2436,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=904;break; } else { label=825;break; }
 case 904: 
 throw "Reached an unreachable!";
 case 905: 
 var $_lcssa_i62_i;
 HEAP32[(($2113)>>2)]=$_lcssa_i62_i;
 var $2438=$2425|1;
 HEAP32[(($2116)>>2)]=$2438;
 HEAP32[(($2117)>>2)]=$2416;
 var $__p_0_i56_i=$_lcssa_i62_i;label=906;break;
 case 906: 
 var $__p_0_i56_i;
 assert($2416 % 1 === 0);(_memcpy($__p_0_i56_i, 3608, $2416)|0);
 var $2439=(($__p_0_i56_i+$2416)|0);
 HEAP8[(($2439)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($8,$9,114) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=907;break; } else { label=915;break; }
 case 907: 
 var $2441=HEAP8[(($2054)>>0)];
 var $2442=$2441&1;
 var $2443=(($2442<<24)>>24)==0;
 if($2443){label=909;break;}else{label=908;break;}
 case 908: 
 var $2445=HEAP32[(($2114)>>2)];
 var $2446=HEAP32[(($2115)>>2)];
 var $2451=$2446;var $2450=$2445;label=910;break;
 case 909: 
 var $2448=($2441&255);
 var $2449=$2448>>>1;
 var $2451=$2449;var $2450=$2112;label=910;break;
 case 910: 
 var $2450;
 var $2451;
 var $2452=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,$2450,$2451) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=911;break; } else { label=916;break; }
 case 911: 
 if($2443){label=913;break;}else{label=912;break;}
 case 912: 
 var $2454=HEAP32[(($2114)>>2)];
 _free($2454);
 label=913;break;
 case 913: 
 var $2455=HEAP8[(($2055)>>0)];
 var $2456=$2455&1;
 var $2457=(($2456<<24)>>24)==0;
 if($2457){label=990;break;}else{label=914;break;}
 case 914: 
 var $2459=HEAP32[(($2113)>>2)];
 _free($2459);
 label=990;break;
 case 915: 
 var $2461$0 = ___cxa_find_matching_catch(); var $2461$1 = tempRet0;
 var $2462=$2461$0;
 var $2463=$2461$1;
 var $_2=$2462;var $_2115=$2463;label=918;break;
 case 916: 
 var $2465$0 = ___cxa_find_matching_catch(); var $2465$1 = tempRet0;
 var $2466=$2465$0;
 var $2467=$2465$1;
 if($2443){var $_2=$2466;var $_2115=$2467;label=918;break;}else{label=917;break;}
 case 917: 
 var $2469=HEAP32[(($2114)>>2)];
 _free($2469);
 var $_2=$2466;var $_2115=$2467;label=918;break;
 case 918: 
 var $_2115;
 var $_2;
 var $2470=HEAP8[(($2055)>>0)];
 var $2471=$2470&1;
 var $2472=(($2471<<24)>>24)==0;
 if($2472){var $_5=$_2;var $_5118=$_2115;label=994;break;}else{label=919;break;}
 case 919: 
 var $2474=HEAP32[(($2113)>>2)];
 _free($2474);
 var $_5=$_2;var $_5118=$_2115;label=994;break;
 case 920: 
 var $2476=HEAP32[(($1424)>>2)];
 var $2477=(($2476+((($storemerge_i36)*(12))&-1))|0);
 var $2478=HEAP32[(($2477)>>2)];
 var $2479=(($2478+((($storemerge1_i37)*(28))&-1))|0);
 var $2480=$2479;
 var $2481=HEAP8[(($2480)>>0)];
 var $2482=$2481&1;
 var $2483=(($2482<<24)>>24)==0;
 if($2483){label=921;break;}else{label=922;break;}
 case 921: 
 assert(12 % 1 === 0);HEAP32[(($2056)>>2)]=HEAP32[(($2480)>>2)];HEAP32[((($2056)+(4))>>2)]=HEAP32[((($2480)+(4))>>2)];HEAP32[((($2056)+(8))>>2)]=HEAP32[((($2480)+(8))>>2)];
 label=935;break;
 case 922: 
 var $2486=(($2478+((($storemerge1_i37)*(28))&-1)+8)|0);
 var $2487=HEAP32[(($2486)>>2)];
 var $2488=(($2478+((($storemerge1_i37)*(28))&-1)+4)|0);
 var $2489=HEAP32[(($2488)>>2)];
 var $2490=($2489>>>0)>4294967279;
 if($2490){label=923;break;}else{label=925;break;}
 case 923: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=924;break; } else { label=825;break; }
 case 924: 
 throw "Reached an unreachable!";
 case 925: 
 var $2493=($2489>>>0)<11;
 if($2493){label=926;break;}else{label=927;break;}
 case 926: 
 var $2495=$2489<<1;
 var $2496=(($2495)&255);
 HEAP8[(($2056)>>0)]=$2496;
 var $__p_0_i_i71_i=$2138;label=934;break;
 case 927: 
 var $2497=((($2489)+(16))|0);
 var $2498=$2497&-16;
 var $2499=($2498|0)==0;
 var $_size_i134_i=($2499?1:$2498);
 var $2500=_malloc($_size_i134_i);
 var $2501=($2500|0)==0;
 if($2501){label=928;break;}else{var $_lcssa_i136_i=$2500;label=933;break;}
 case 928: 
 var $2502=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2503=($2502|0)==0;
 if($2503){label=931;break;}else{label=929;break;}
 case 929: 
 var $2505=$2502;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2505]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=930;break; } else { label=818;break; }
 case 930: 
 var $2506=_malloc($_size_i134_i);
 var $2507=($2506|0)==0;
 if($2507){label=928;break;}else{var $_lcssa_i136_i=$2506;label=933;break;}
 case 931: 
 var $2509=___cxa_allocate_exception(4);
 var $2510=$2509;
 HEAP32[(($2510)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2509,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=932;break; } else { label=825;break; }
 case 932: 
 throw "Reached an unreachable!";
 case 933: 
 var $_lcssa_i136_i;
 HEAP32[(($2136)>>2)]=$_lcssa_i136_i;
 var $2511=$2498|1;
 HEAP32[(($2139)>>2)]=$2511;
 HEAP32[(($2140)>>2)]=$2489;
 var $__p_0_i_i71_i=$_lcssa_i136_i;label=934;break;
 case 934: 
 var $__p_0_i_i71_i;
 assert($2489 % 1 === 0);(_memcpy($__p_0_i_i71_i, $2487, $2489)|0);
 var $2512=(($__p_0_i_i71_i+$2489)|0);
 HEAP8[(($2512)>>0)]=0;
 label=935;break;
 case 935: 
 var $2513=__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($10,1928);
 var $2514=($2513|0)==0;
 var $2515=HEAP8[(($2056)>>0)];
 var $2516=$2515&1;
 var $2517=(($2516<<24)>>24)==0;
 if($2517){label=937;break;}else{label=936;break;}
 case 936: 
 var $2519=HEAP32[(($2136)>>2)];
 _free($2519);
 label=937;break;
 case 937: 
 var $2520=_strlen(3608);
 var $2521=($2520>>>0)>4294967279;
 if($2514){label=938;break;}else{label=964;break;}
 case 938: 
 if($2521){label=939;break;}else{label=941;break;}
 case 939: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=940;break; } else { label=825;break; }
 case 940: 
 throw "Reached an unreachable!";
 case 941: 
 var $2524=($2520>>>0)<11;
 if($2524){label=942;break;}else{label=943;break;}
 case 942: 
 var $2526=$2520<<1;
 var $2527=(($2526)&255);
 HEAP8[(($2058)>>0)]=$2527;
 var $__p_0_i80_i=$2119;label=950;break;
 case 943: 
 var $2528=((($2520)+(16))|0);
 var $2529=$2528&-16;
 var $2530=($2529|0)==0;
 var $_size_i84_i=($2530?1:$2529);
 var $2531=_malloc($_size_i84_i);
 var $2532=($2531|0)==0;
 if($2532){label=944;break;}else{var $_lcssa_i86_i=$2531;label=949;break;}
 case 944: 
 var $2533=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2534=($2533|0)==0;
 if($2534){label=947;break;}else{label=945;break;}
 case 945: 
 var $2536=$2533;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2536]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=946;break; } else { label=820;break; }
 case 946: 
 var $2537=_malloc($_size_i84_i);
 var $2538=($2537|0)==0;
 if($2538){label=944;break;}else{var $_lcssa_i86_i=$2537;label=949;break;}
 case 947: 
 var $2540=___cxa_allocate_exception(4);
 var $2541=$2540;
 HEAP32[(($2541)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2540,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=948;break; } else { label=825;break; }
 case 948: 
 throw "Reached an unreachable!";
 case 949: 
 var $_lcssa_i86_i;
 HEAP32[(($2122)>>2)]=$_lcssa_i86_i;
 var $2542=$2529|1;
 HEAP32[(($2125)>>2)]=$2542;
 HEAP32[(($2126)>>2)]=$2520;
 var $__p_0_i80_i=$_lcssa_i86_i;label=950;break;
 case 950: 
 var $__p_0_i80_i;
 assert($2520 % 1 === 0);(_memcpy($__p_0_i80_i, 3608, $2520)|0);
 var $2543=(($__p_0_i80_i+$2520)|0);
 HEAP8[(($2543)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($11,$12,101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=951;break; } else { label=959;break; }
 case 951: 
 var $2545=HEAP8[(($2057)>>0)];
 var $2546=$2545&1;
 var $2547=(($2546<<24)>>24)==0;
 if($2547){label=953;break;}else{label=952;break;}
 case 952: 
 var $2549=HEAP32[(($2123)>>2)];
 var $2550=HEAP32[(($2124)>>2)];
 var $2555=$2550;var $2554=$2549;label=954;break;
 case 953: 
 var $2552=($2545&255);
 var $2553=$2552>>>1;
 var $2555=$2553;var $2554=$2121;label=954;break;
 case 954: 
 var $2554;
 var $2555;
 var $2556=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,$2554,$2555) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=955;break; } else { label=960;break; }
 case 955: 
 if($2547){label=957;break;}else{label=956;break;}
 case 956: 
 var $2558=HEAP32[(($2123)>>2)];
 _free($2558);
 label=957;break;
 case 957: 
 var $2559=HEAP8[(($2058)>>0)];
 var $2560=$2559&1;
 var $2561=(($2560<<24)>>24)==0;
 if($2561){label=990;break;}else{label=958;break;}
 case 958: 
 var $2563=HEAP32[(($2122)>>2)];
 _free($2563);
 label=990;break;
 case 959: 
 var $2565$0 = ___cxa_find_matching_catch(); var $2565$1 = tempRet0;
 var $2566=$2565$0;
 var $2567=$2565$1;
 var $_3=$2566;var $_3116=$2567;label=962;break;
 case 960: 
 var $2569$0 = ___cxa_find_matching_catch(); var $2569$1 = tempRet0;
 var $2570=$2569$0;
 var $2571=$2569$1;
 if($2547){var $_3=$2570;var $_3116=$2571;label=962;break;}else{label=961;break;}
 case 961: 
 var $2573=HEAP32[(($2123)>>2)];
 _free($2573);
 var $_3=$2570;var $_3116=$2571;label=962;break;
 case 962: 
 var $_3116;
 var $_3;
 var $2574=HEAP8[(($2058)>>0)];
 var $2575=$2574&1;
 var $2576=(($2575<<24)>>24)==0;
 if($2576){var $_5=$_3;var $_5118=$_3116;label=994;break;}else{label=963;break;}
 case 963: 
 var $2578=HEAP32[(($2122)>>2)];
 _free($2578);
 var $_5=$_3;var $_5118=$_3116;label=994;break;
 case 964: 
 if($2521){label=965;break;}else{label=967;break;}
 case 965: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=966;break; } else { label=825;break; }
 case 966: 
 throw "Reached an unreachable!";
 case 967: 
 var $2581=($2520>>>0)<11;
 if($2581){label=968;break;}else{label=969;break;}
 case 968: 
 var $2583=$2520<<1;
 var $2584=(($2583)&255);
 HEAP8[(($2060)>>0)]=$2584;
 var $__p_0_i97_i=$2128;label=976;break;
 case 969: 
 var $2585=((($2520)+(16))|0);
 var $2586=$2585&-16;
 var $2587=($2586|0)==0;
 var $_size_i101_i=($2587?1:$2586);
 var $2588=_malloc($_size_i101_i);
 var $2589=($2588|0)==0;
 if($2589){label=970;break;}else{var $_lcssa_i103_i=$2588;label=975;break;}
 case 970: 
 var $2590=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $2591=($2590|0)==0;
 if($2591){label=973;break;}else{label=971;break;}
 case 971: 
 var $2593=$2590;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2593]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=972;break; } else { label=819;break; }
 case 972: 
 var $2594=_malloc($_size_i101_i);
 var $2595=($2594|0)==0;
 if($2595){label=970;break;}else{var $_lcssa_i103_i=$2594;label=975;break;}
 case 973: 
 var $2597=___cxa_allocate_exception(4);
 var $2598=$2597;
 HEAP32[(($2598)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($2597,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=974;break; } else { label=825;break; }
 case 974: 
 throw "Reached an unreachable!";
 case 975: 
 var $_lcssa_i103_i;
 HEAP32[(($2131)>>2)]=$_lcssa_i103_i;
 var $2599=$2586|1;
 HEAP32[(($2134)>>2)]=$2599;
 HEAP32[(($2135)>>2)]=$2520;
 var $__p_0_i97_i=$_lcssa_i103_i;label=976;break;
 case 976: 
 var $__p_0_i97_i;
 assert($2520 % 1 === 0);(_memcpy($__p_0_i97_i, 3608, $2520)|0);
 var $2600=(($__p_0_i97_i+$2520)|0);
 HEAP8[(($2600)>>0)]=0;
 (function() { try { __THREW__ = 0; return __ZN8CaveView4wrapENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEc($13,$14,100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=977;break; } else { label=985;break; }
 case 977: 
 var $2602=HEAP8[(($2059)>>0)];
 var $2603=$2602&1;
 var $2604=(($2603<<24)>>24)==0;
 if($2604){label=979;break;}else{label=978;break;}
 case 978: 
 var $2606=HEAP32[(($2132)>>2)];
 var $2607=HEAP32[(($2133)>>2)];
 var $2612=$2607;var $2611=$2606;label=980;break;
 case 979: 
 var $2609=($2602&255);
 var $2610=$2609>>>1;
 var $2612=$2610;var $2611=$2130;label=980;break;
 case 980: 
 var $2611;
 var $2612;
 var $2613=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,$2611,$2612) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=981;break; } else { label=986;break; }
 case 981: 
 if($2604){label=983;break;}else{label=982;break;}
 case 982: 
 var $2615=HEAP32[(($2132)>>2)];
 _free($2615);
 label=983;break;
 case 983: 
 var $2616=HEAP8[(($2060)>>0)];
 var $2617=$2616&1;
 var $2618=(($2617<<24)>>24)==0;
 if($2618){label=990;break;}else{label=984;break;}
 case 984: 
 var $2620=HEAP32[(($2131)>>2)];
 _free($2620);
 label=990;break;
 case 985: 
 var $2622$0 = ___cxa_find_matching_catch(); var $2622$1 = tempRet0;
 var $2623=$2622$0;
 var $2624=$2622$1;
 var $_4=$2623;var $_4117=$2624;label=988;break;
 case 986: 
 var $2626$0 = ___cxa_find_matching_catch(); var $2626$1 = tempRet0;
 var $2627=$2626$0;
 var $2628=$2626$1;
 if($2604){var $_4=$2627;var $_4117=$2628;label=988;break;}else{label=987;break;}
 case 987: 
 var $2630=HEAP32[(($2132)>>2)];
 _free($2630);
 var $_4=$2627;var $_4117=$2628;label=988;break;
 case 988: 
 var $_4117;
 var $_4;
 var $2631=HEAP8[(($2060)>>0)];
 var $2632=$2631&1;
 var $2633=(($2632<<24)>>24)==0;
 if($2633){var $_5=$_4;var $_5118=$_4117;label=994;break;}else{label=989;break;}
 case 989: 
 var $2635=HEAP32[(($2131)>>2)];
 _free($2635);
 var $_5=$_4;var $_5118=$_4117;label=994;break;
 case 990: 
 var $2636=((($storemerge1_i37)+(1))|0);
 var $storemerge1_i37=$2636;label=775;break;
 case 991: 
 var $2638=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,3520,5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=992;break; } else { label=824;break; }
 case 992: 
 var $2639=((($storemerge_i36)+(1))|0);
 var $storemerge_i36=$2639;label=773;break;
 case 993: 
 var $2641=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($agg_result,3336,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=997;break; } else { label=825;break; }
 case 994: 
 var $_5118;
 var $_5;
 var $2642=$agg_result;
 var $2643=HEAP8[(($2642)>>0)];
 var $2644=$2643&1;
 var $2645=(($2644<<24)>>24)==0;
 if($2645){label=996;break;}else{label=995;break;}
 case 995: 
 var $2647=(($agg_result+8)|0);
 var $2648=HEAP32[(($2647)>>2)];
 _free($2648);
 label=996;break;
 case 996: 
 var $2649$0=$_5;
 var $2649$1=0;
 var $2650$0=$2649$0;
 var $2650$1=$_5118;
 var $eh_lpad_body66$1=$2650$1;var $eh_lpad_body66$0=$2650$0;label=1001;break;
 case 997: 
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $$etemp$45$0=12;
 var $$etemp$45$1=0;

 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $$etemp$54$0=12;
 var $$etemp$54$1=0;

 var $$etemp$55$0=12;
 var $$etemp$55$1=0;

 var $$etemp$56$0=12;
 var $$etemp$56$1=0;

 __ZNSt3__16vectorINS0_I4TileNS_9allocatorIS1_EEEENS2_IS4_EEED2Ev($28);
 __ZN13CaveGeneratorD2Ev($cg);
 STACKTOP=sp;return;
 case 998: 
 __ZNSt3__16vectorINS0_I4TileNS_9allocatorIS1_EEEENS2_IS4_EEED2Ev($28);
 var $_0=$1998;var $_0109=$1997;label=1002;break;
 case 999: 
 var $lpad_loopexit196$0 = ___cxa_find_matching_catch(); var $lpad_loopexit196$1 = tempRet0;
 var $eh_lpad_body66$1=$lpad_loopexit196$1;var $eh_lpad_body66$0=$lpad_loopexit196$0;label=1001;break;
 case 1000: 
 var $lpad_nonloopexit197$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit197$1 = tempRet0;
 var $eh_lpad_body66$1=$lpad_nonloopexit197$1;var $eh_lpad_body66$0=$lpad_nonloopexit197$0;label=1001;break;
 case 1001: 
 var $eh_lpad_body66$0;
 var $eh_lpad_body66$1;
 var $2652=$eh_lpad_body66$0;
 var $2653=$eh_lpad_body66$1;
 __ZNSt3__16vectorINS0_I4TileNS_9allocatorIS1_EEEENS2_IS4_EEED2Ev($28);
 var $_0=$2653;var $_0109=$2652;label=1002;break;
 case 1002: 
 var $_0109;
 var $_0;
 __ZN13CaveGeneratorD2Ev($cg);
 var $_1=$_0;var $_1110=$_0109;label=1003;break;
 case 1003: 
 var $_1110;
 var $_1;
 var $2655$0=$_1110;
 var $2655$1=0;
 var $2656$0=$2655$0;
 var $2656$1=$_1;
 ___resumeException($2656$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorINS0_I4TileNS_9allocatorIS1_EEEENS2_IS4_EEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=13;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+4)|0);
 label=3;break;
 case 3: 
 var $6=HEAP32[(($5)>>2)];
 var $7=($2|0)==($6|0);
 if($7){label=12;break;}else{label=4;break;}
 case 4: 
 var $9=((($6)-(12))|0);
 HEAP32[(($5)>>2)]=$9;
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=5;break;}
 case 5: 
 var $14=((($6)-(12)+4)|0);
 label=6;break;
 case 6: 
 var $15=HEAP32[(($14)>>2)];
 var $16=($11|0)==($15|0);
 if($16){label=11;break;}else{label=7;break;}
 case 7: 
 var $18=((($15)-(28))|0);
 HEAP32[(($14)>>2)]=$18;
 var $19=((($15)-(28)+16)|0);
 var $20=$19;
 var $21=HEAP8[(($20)>>0)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=9;break;}else{label=8;break;}
 case 8: 
 var $25=((($15)-(28)+24)|0);
 var $26=HEAP32[(($25)>>2)];
 _free($26);
 label=9;break;
 case 9: 
 var $27=$18;
 var $28=HEAP8[(($27)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=6;break;}else{label=10;break;}
 case 10: 
 var $32=((($15)-(28)+8)|0);
 var $33=HEAP32[(($32)>>2)];
 _free($33);
 label=6;break;
 case 11: 
 var $34=HEAP32[(($10)>>2)];
 var $35=$34;
 _free($35);
 label=3;break;
 case 12: 
 var $36=HEAP32[(($1)>>2)];
 var $37=$36;
 _free($37);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E($fn,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(($args+4)|0);
 var $4=(($args)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5>>>0)>4294967279;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $9=($5>>>0)<11;
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$5<<1;
 var $12=(($11)&255);
 var $13=$2;
 HEAP8[(($13)>>0)]=$12;
 var $14=$2;
 var $15=(($14+1)|0);
 var $__p_0_i_i=$15;label=10;break;
 case 5: 
 var $16=((($5)+(16))|0);
 var $17=$16&-16;
 var $18=($17|0)==0;
 var $_size_i_i=($18?1:$17);
 var $19=_malloc($_size_i_i);
 var $20=($19|0)==0;
 if($20){label=6;break;}else{var $_lcssa_i_i=$19;label=9;break;}
 case 6: 
 var $21=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 var $24=$21;
 FUNCTION_TABLE[$24]();
 var $25=_malloc($_size_i_i);
 var $26=($25|0)==0;
 if($26){label=6;break;}else{var $_lcssa_i_i=$25;label=9;break;}
 case 8: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 HEAP32[(($29)>>2)]=5208;
 ___cxa_throw($28,12352,(68));
 throw "Reached an unreachable!";
 case 9: 
 var $_lcssa_i_i;
 var $30=(($2+8)|0);
 HEAP32[(($30)>>2)]=$_lcssa_i_i;
 var $31=$17|1;
 var $32=(($2)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=(($2+4)|0);
 HEAP32[(($33)>>2)]=$5;
 var $__p_0_i_i=$_lcssa_i_i;label=10;break;
 case 10: 
 var $__p_0_i_i;
 assert($5 % 1 === 0);(_memcpy($__p_0_i_i, $3, $5)|0);
 var $34=(($__p_0_i_i+$5)|0);
 HEAP8[(($34)>>0)]=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=25;break; }
 case 11: 
 var $36=$1;
 var $37=HEAP8[(($36)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($1+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $46=$42;label=14;break;
 case 13: 
 var $44=($37&255);
 var $45=$44>>>1;
 var $46=$45;label=14;break;
 case 14: 
 var $46;
 var $47=((($46)+(4))|0);
 var $48=_malloc($47);
 var $49=$48;
 var $50=HEAP8[(($36)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=16;break;}else{label=15;break;}
 case 15: 
 var $54=(($1+4)|0);
 var $55=HEAP32[(($54)>>2)];
 var $59=$55;label=17;break;
 case 16: 
 var $57=($50&255);
 var $58=$57>>>1;
 var $59=$58;label=17;break;
 case 17: 
 var $59;
 var $60=$48;
 HEAP32[(($60)>>2)]=$59;
 var $61=(($48+4)|0);
 var $62=HEAP8[(($36)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=19;break;}else{label=18;break;}
 case 18: 
 var $66=(($1+8)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($1+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $77=$69;var $76=$67;label=20;break;
 case 19: 
 var $71=$1;
 var $72=(($71+1)|0);
 var $73=($62&255);
 var $74=$73>>>1;
 var $77=$74;var $76=$72;label=20;break;
 case 20: 
 var $76;
 var $77;
 assert($77 % 1 === 0);(_memcpy($61, $76, $77)|0);
 var $78=HEAP8[(($36)>>0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=22;break;}else{label=21;break;}
 case 21: 
 var $82=(($1+8)|0);
 var $83=HEAP32[(($82)>>2)];
 _free($83);
 label=22;break;
 case 22: 
 var $84=$2;
 var $85=HEAP8[(($84)>>0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=24;break;}else{label=23;break;}
 case 23: 
 var $89=(($2+8)|0);
 var $90=HEAP32[(($89)>>2)];
 _free($90);
 label=24;break;
 case 24: 
 STACKTOP=sp;return $49;
 case 25: 
 var $92$0 = ___cxa_find_matching_catch(); var $92$1 = tempRet0;
 var $93=$2;
 var $94=HEAP8[(($93)>>0)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=27;break;}else{label=26;break;}
 case 26: 
 var $98=(($2+8)|0);
 var $99=HEAP32[(($98)>>2)];
 _free($99);
 label=27;break;
 case 27: 
 ___resumeException($92$0)
  default: assert(0, "bad label: " + label);
 }

}


function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}


function __ZNSt3__16vectorI4TileNS_9allocatorIS1_EEEC2ERKS4_($this,$__x){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($__x+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($__x)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=(((($10|0))/(28))&-1);
 var $12=($5|0)==($7|0);
 if($12){label=69;break;}else{label=2;break;}
 case 2: 
 var $14=($11>>>0)>153391689;
 if($14){label=3;break;}else{label=14;break;}
 case 3: 
 var $15=___cxa_allocate_exception(8);
 var $16=$15;
 HEAP32[(($16)>>2)]=5400;
 var $17=(($15+4)|0);
 var $18=_strlen(1176);
 var $19=((($18)+(13))|0);
 var $20=($19|0)==0;
 var $_size_i1_i=($20?1:$19);
 var $21=_malloc($_size_i1_i);
 var $22=($21|0)==0;
 if($22){label=4;break;}else{var $_lcssa_i3_i=$21;label=9;break;}
 case 4: 
 var $23=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 var $26=$23;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $27=_malloc($_size_i1_i);
 var $28=($27|0)==0;
 if($28){label=4;break;}else{var $_lcssa_i3_i=$27;label=9;break;}
 case 7: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 HEAP32[(($31)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $_lcssa_i3_i;
 var $32=$_lcssa_i3_i;
 HEAP32[(($32)>>2)]=$18;
 var $33=(($_lcssa_i3_i+4)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=$18;
 var $35=(($_lcssa_i3_i+8)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=0;
 var $37=(($_lcssa_i3_i+12)|0);
 var $38=((($18)+(1))|0);
 assert($38 % 1 === 0);(_memcpy($37, 1176, $38)|0);
 var $39=$17;
 HEAP32[(($39)>>2)]=$37;
 HEAP32[(($16)>>2)]=5368;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,12432,(260)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=61;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=13;break;
 case 13: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 ___cxa_free_exception($15);
 var $eh_lpad_body$1=$lpad_phi$1;var $eh_lpad_body$0=$lpad_phi$0;label=62;break;
 case 14: 
 var $42=($5|0)==($7|0);
 var $_size_i_i=($42?1:$10);
 var $43=_malloc($_size_i_i);
 var $44=($43|0)==0;
 if($44){label=15;break;}else{var $_lcssa_i_i=$43;label=20;break;}
 case 15: 
 var $45=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $46=($45|0)==0;
 if($46){label=18;break;}else{label=16;break;}
 case 16: 
 var $48=$45;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=60;break; }
 case 17: 
 var $49=_malloc($_size_i_i);
 var $50=($49|0)==0;
 if($50){label=15;break;}else{var $_lcssa_i_i=$49;label=20;break;}
 case 18: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=61;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $_lcssa_i_i;
 var $54=$_lcssa_i_i;
 HEAP32[(($2)>>2)]=$54;
 HEAP32[(($1)>>2)]=$54;
 var $55=(($54+((($11)*(28))&-1))|0);
 HEAP32[(($3)>>2)]=$55;
 var $56=HEAP32[(($6)>>2)];
 var $57=HEAP32[(($4)>>2)];
 var $_0=$56;var $59=$54;label=21;break;
 case 21: 
 var $59;
 var $_0;
 var $60=($_0|0)==($57|0);
 if($60){label=69;break;}else{label=22;break;}
 case 22: 
 var $62=($59|0)==0;
 if($62){var $158=0;label=58;break;}else{label=23;break;}
 case 23: 
 var $64=$_0;
 var $65=HEAP8[(($64)>>0)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=24;break;}else{label=25;break;}
 case 24: 
 var $69=$59;
 assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
 label=38;break;
 case 25: 
 var $71=(($_0+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($_0+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($74>>>0)>4294967279;
 if($75){label=26;break;}else{label=28;break;}
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=61;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 var $78=($74>>>0)<11;
 if($78){label=29;break;}else{label=30;break;}
 case 29: 
 var $80=$74<<1;
 var $81=(($80)&255);
 var $82=$59;
 HEAP8[(($82)>>0)]=$81;
 var $83=$59;
 var $84=(($83+1)|0);
 var $__p_0_i_i=$84;label=37;break;
 case 30: 
 var $85=((($74)+(16))|0);
 var $86=$85&-16;
 var $87=($86|0)==0;
 var $_size_i_i3=($87?1:$86);
 var $88=_malloc($_size_i_i3);
 var $89=($88|0)==0;
 if($89){label=31;break;}else{var $_lcssa_i_i5=$88;label=36;break;}
 case 31: 
 var $90=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $91=($90|0)==0;
 if($91){label=34;break;}else{label=32;break;}
 case 32: 
 var $93=$90;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=59;break; }
 case 33: 
 var $94=_malloc($_size_i_i3);
 var $95=($94|0)==0;
 if($95){label=31;break;}else{var $_lcssa_i_i5=$94;label=36;break;}
 case 34: 
 var $97=___cxa_allocate_exception(4);
 var $98=$97;
 HEAP32[(($98)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($97,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=61;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $_lcssa_i_i5;
 var $99=(($59+8)|0);
 HEAP32[(($99)>>2)]=$_lcssa_i_i5;
 var $100=$86|1;
 var $101=(($59)|0);
 HEAP32[(($101)>>2)]=$100;
 var $102=(($59+4)|0);
 HEAP32[(($102)>>2)]=$74;
 var $__p_0_i_i=$_lcssa_i_i5;label=37;break;
 case 37: 
 var $__p_0_i_i;
 assert($74 % 1 === 0);(_memcpy($__p_0_i_i, $72, $74)|0);
 var $103=(($__p_0_i_i+$74)|0);
 HEAP8[(($103)>>0)]=0;
 label=38;break;
 case 38: 
 var $104=(($59+12)|0);
 var $105=(($_0+12)|0);
 var $106=HEAP32[(($105)>>2)];
 HEAP32[(($104)>>2)]=$106;
 var $107=(($59+16)|0);
 var $108=(($_0+16)|0);
 var $109=$108;
 var $110=HEAP8[(($109)>>0)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=39;break;}else{label=40;break;}
 case 39: 
 var $114=$107;
 assert(12 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];HEAP32[((($114)+(8))>>2)]=HEAP32[((($109)+(8))>>2)];
 label=57;break;
 case 40: 
 var $116=(($_0+24)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($_0+20)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119>>>0)>4294967279;
 if($120){label=41;break;}else{label=43;break;}
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=54;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $123=($119>>>0)<11;
 if($123){label=44;break;}else{label=45;break;}
 case 44: 
 var $125=$119<<1;
 var $126=(($125)&255);
 var $127=$107;
 HEAP8[(($127)>>0)]=$126;
 var $128=$107;
 var $129=(($128+1)|0);
 var $__p_0_i2_i=$129;label=52;break;
 case 45: 
 var $130=((($119)+(16))|0);
 var $131=$130&-16;
 var $132=($131|0)==0;
 var $_size_i5_i=($132?1:$131);
 var $133=_malloc($_size_i5_i);
 var $134=($133|0)==0;
 if($134){label=46;break;}else{var $_lcssa_i7_i=$133;label=51;break;}
 case 46: 
 var $135=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $136=($135|0)==0;
 if($136){label=49;break;}else{label=47;break;}
 case 47: 
 var $138=$135;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=53;break; }
 case 48: 
 var $139=_malloc($_size_i5_i);
 var $140=($139|0)==0;
 if($140){label=46;break;}else{var $_lcssa_i7_i=$139;label=51;break;}
 case 49: 
 var $142=___cxa_allocate_exception(4);
 var $143=$142;
 HEAP32[(($143)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($142,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=54;break; }
 case 50: 
 throw "Reached an unreachable!";
 case 51: 
 var $_lcssa_i7_i;
 var $144=(($59+24)|0);
 HEAP32[(($144)>>2)]=$_lcssa_i7_i;
 var $145=$131|1;
 var $146=(($107)|0);
 HEAP32[(($146)>>2)]=$145;
 var $147=(($59+20)|0);
 HEAP32[(($147)>>2)]=$119;
 var $__p_0_i2_i=$_lcssa_i7_i;label=52;break;
 case 52: 
 var $__p_0_i2_i;
 assert($119 % 1 === 0);(_memcpy($__p_0_i2_i, $117, $119)|0);
 var $148=(($__p_0_i2_i+$119)|0);
 HEAP8[(($148)>>0)]=0;
 label=57;break;
 case 53: 
 var $lpad_loopexit20$0 = ___cxa_find_matching_catch(); var $lpad_loopexit20$1 = tempRet0;
 var $lpad_phi22$1=$lpad_loopexit20$1;var $lpad_phi22$0=$lpad_loopexit20$0;label=55;break;
 case 54: 
 var $lpad_nonloopexit21$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit21$1 = tempRet0;
 var $lpad_phi22$1=$lpad_nonloopexit21$1;var $lpad_phi22$0=$lpad_nonloopexit21$0;label=55;break;
 case 55: 
 var $lpad_phi22$0;
 var $lpad_phi22$1;
 var $150=$59;
 var $151=HEAP8[(($150)>>0)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){var $eh_lpad_body$1=$lpad_phi22$1;var $eh_lpad_body$0=$lpad_phi22$0;label=62;break;}else{label=56;break;}
 case 56: 
 var $155=(($59+8)|0);
 var $156=HEAP32[(($155)>>2)];
 _free($156);
 var $eh_lpad_body$1=$lpad_phi22$1;var $eh_lpad_body$0=$lpad_phi22$0;label=62;break;
 case 57: 
 var $157=HEAP32[(($105)>>2)];
 HEAP32[(($104)>>2)]=$157;
 var $_pre=HEAP32[(($2)>>2)];
 var $158=$_pre;label=58;break;
 case 58: 
 var $158;
 var $159=(($158+28)|0);
 HEAP32[(($2)>>2)]=$159;
 var $160=(($_0+28)|0);
 var $_0=$160;var $59=$159;label=21;break;
 case 59: 
 var $lpad_loopexit15$0 = ___cxa_find_matching_catch(); var $lpad_loopexit15$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit15$1;var $eh_lpad_body$0=$lpad_loopexit15$0;label=62;break;
 case 60: 
 var $lpad_loopexit23$0 = ___cxa_find_matching_catch(); var $lpad_loopexit23$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit23$1;var $eh_lpad_body$0=$lpad_loopexit23$0;label=62;break;
 case 61: 
 var $lpad_nonloopexit24$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit24$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit24$1;var $eh_lpad_body$0=$lpad_nonloopexit24$0;label=62;break;
 case 62: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $161=HEAP32[(($1)>>2)];
 var $162=($161|0)==0;
 if($162){label=70;break;}else{label=63;break;}
 case 63: 
 var $163=HEAP32[(($2)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=68;break;}else{label=64;break;}
 case 64: 
 var $166=((($163)-(28))|0);
 HEAP32[(($2)>>2)]=$166;
 var $167=((($163)-(28)+16)|0);
 var $168=$167;
 var $169=HEAP8[(($168)>>0)];
 var $170=$169&1;
 var $171=(($170<<24)>>24)==0;
 if($171){label=66;break;}else{label=65;break;}
 case 65: 
 var $173=((($163)-(28)+24)|0);
 var $174=HEAP32[(($173)>>2)];
 _free($174);
 label=66;break;
 case 66: 
 var $175=$166;
 var $176=HEAP8[(($175)>>0)];
 var $177=$176&1;
 var $178=(($177<<24)>>24)==0;
 if($178){label=63;break;}else{label=67;break;}
 case 67: 
 var $180=((($163)-(28)+8)|0);
 var $181=HEAP32[(($180)>>2)];
 _free($181);
 label=63;break;
 case 68: 
 var $182=HEAP32[(($1)>>2)];
 var $183=$182;
 _free($183);
 label=70;break;
 case 69: 
 return;
 case 70: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE15__insert_uniqueINS_4pairIcS7_EEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEEOT_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__parent_i=sp;
 var $1=_malloc(32);
 var $2=($1|0)==0;
 if($2){label=2;break;}else{var $_lcssa_i_i=$1;label=5;break;}
 case 2: 
 var $3=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=3;break;}
 case 3: 
 var $6=$3;
 FUNCTION_TABLE[$6]();
 var $7=_malloc(32);
 var $8=($7|0)==0;
 if($8){label=2;break;}else{var $_lcssa_i_i=$7;label=5;break;}
 case 4: 
 var $10=___cxa_allocate_exception(4);
 var $11=$10;
 HEAP32[(($11)>>2)]=5208;
 ___cxa_throw($10,12352,(68));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa_i_i;
 var $12=$_lcssa_i_i;
 var $13=(($_lcssa_i_i+16)|0);
 var $14=(($__v)|0);
 var $15=HEAP8[(($14)>>0)];
 HEAP8[(($13)>>0)]=$15;
 var $16=(($_lcssa_i_i+20)|0);
 var $17=(($__v+4)|0);
 var $18=$17;
 assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 var $19=$17;
 var $storemerge_i=0;label=6;break;
 case 6: 
 var $storemerge_i;
 var $21=($storemerge_i>>>0)<3;
 if($21){label=7;break;}else{label=8;break;}
 case 7: 
 var $23=(($19+($storemerge_i<<2))|0);
 HEAP32[(($23)>>2)]=0;
 var $24=((($storemerge_i)+(1))|0);
 var $storemerge_i=$24;label=6;break;
 case 8: 
 var $25=$__parent_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $26=(($this+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=9;break;}
 case 9: 
 var $29=(($_lcssa_i_i+16)|0);
 var $30=HEAP8[(($29)>>0)];
 var $__nd_i_i_0_in=$27;label=10;break;
 case 10: 
 var $__nd_i_i_0_in;
 var $32=(($__nd_i_i_0_in+16)|0);
 var $33=$32;
 var $34=HEAP8[(($33)>>0)];
 var $35=(($30<<24)>>24)<(($34<<24)>>24);
 if($35){label=11;break;}else{label=13;break;}
 case 11: 
 var $37=(($__nd_i_i_0_in)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=12;break;}else{var $__nd_i_i_0_in=$38;label=10;break;}
 case 12: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $41=(($__nd_i_i_0_in)|0);
 var $56=$__nd_i_i_0_in;var $_028=$41;label=18;break;
 case 13: 
 var $43=(($34<<24)>>24)<(($30<<24)>>24);
 if($43){label=14;break;}else{label=17;break;}
 case 14: 
 var $45=(($__nd_i_i_0_in+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=15;break;}else{var $__nd_i_i_0_in=$46;label=10;break;}
 case 15: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $49=(($__nd_i_i_0_in+4)|0);
 var $56=$__nd_i_i_0_in;var $_028=$49;label=18;break;
 case 16: 
 var $51=(($this+4)|0);
 var $52=$51;
 HEAP32[(($__parent_i)>>2)]=$52;
 var $53=(($51)|0);
 var $56=$52;var $_028=$53;label=18;break;
 case 17: 
 HEAP32[(($__parent_i)>>2)]=$__nd_i_i_0_in;
 var $54=$__nd_i_i_0_in;
 var $55=($__nd_i_i_0_in|0)==0;
 if($55){var $56=$__nd_i_i_0_in;var $_028=$__parent_i;label=18;break;}else{var $__r_i_0=$54;var $__inserted_i_0=0;label=57;break;}
 case 18: 
 var $_028;
 var $56;
 var $57=$_lcssa_i_i;
 var $58=$_lcssa_i_i;
 HEAP32[(($58)>>2)]=0;
 var $59=(($_lcssa_i_i+4)|0);
 var $60=$59;
 HEAP32[(($60)>>2)]=0;
 var $61=(($_lcssa_i_i+8)|0);
 var $62=$61;
 HEAP32[(($62)>>2)]=$56;
 HEAP32[(($_028)>>2)]=$57;
 var $63=(($this)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)==0;
 if($67){var $71=$57;label=20;break;}else{label=19;break;}
 case 19: 
 var $69=$66;
 HEAP32[(($63)>>2)]=$69;
 var $_pre=HEAP32[(($_028)>>2)];
 var $71=$_pre;label=20;break;
 case 20: 
 var $71;
 var $72=HEAP32[(($26)>>2)];
 var $73=($71|0)==($72|0);
 var $74=(($71+12)|0);
 var $75=($73&1);
 HEAP8[(($74)>>0)]=$75;
 var $_0=$71;label=21;break;
 case 21: 
 var $_0;
 var $76=($_0|0)==($72|0);
 if($76){label=56;break;}else{label=22;break;}
 case 22: 
 var $78=(($_0+8)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+12)|0);
 var $81=HEAP8[(($80)>>0)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=23;break;}else{label=56;break;}
 case 23: 
 var $85=(($79+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($79|0)==($88|0);
 if($89){label=24;break;}else{label=40;break;}
 case 24: 
 var $91=(($86+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=27;break;}else{label=25;break;}
 case 25: 
 var $95=(($92+12)|0);
 var $96=HEAP8[(($95)>>0)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP8[(($80)>>0)]=1;
 var $100=($86|0)==($72|0);
 var $101=(($86+12)|0);
 var $102=($100&1);
 HEAP8[(($101)>>0)]=$102;
 HEAP8[(($95)>>0)]=1;
 var $_0=$86;label=21;break;
 case 27: 
 var $104=(($79)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($_0|0)==($105|0);
 if($106){var $127=$79;var $126=$86;label=34;break;}else{label=28;break;}
 case 28: 
 var $108=(($79+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109)|0);
 var $111=HEAP32[(($110)>>2)];
 HEAP32[(($108)>>2)]=$111;
 var $112=($111|0)==0;
 if($112){var $116=$86;label=30;break;}else{label=29;break;}
 case 29: 
 var $114=(($111+8)|0);
 HEAP32[(($114)>>2)]=$79;
 var $_pre4=HEAP32[(($85)>>2)];
 var $116=$_pre4;label=30;break;
 case 30: 
 var $116;
 var $117=(($109+8)|0);
 HEAP32[(($117)>>2)]=$116;
 var $118=HEAP32[(($85)>>2)];
 var $119=(($118)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($79|0)==($120|0);
 if($121){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($119)>>2)]=$109;
 label=33;break;
 case 32: 
 var $124=(($118+4)|0);
 HEAP32[(($124)>>2)]=$109;
 label=33;break;
 case 33: 
 HEAP32[(($110)>>2)]=$79;
 HEAP32[(($85)>>2)]=$109;
 var $_pre3=HEAP32[(($117)>>2)];
 var $127=$109;var $126=$_pre3;label=34;break;
 case 34: 
 var $126;
 var $127;
 var $128=(($127+12)|0);
 HEAP8[(($128)>>0)]=1;
 var $129=(($126+12)|0);
 HEAP8[(($129)>>0)]=0;
 var $130=(($126)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+4)|0);
 var $133=HEAP32[(($132)>>2)];
 HEAP32[(($130)>>2)]=$133;
 var $134=($133|0)==0;
 if($134){label=36;break;}else{label=35;break;}
 case 35: 
 var $136=(($133+8)|0);
 HEAP32[(($136)>>2)]=$126;
 label=36;break;
 case 36: 
 var $138=(($126+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($131+8)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=HEAP32[(($138)>>2)];
 var $142=(($141)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($126|0)==($143|0);
 if($144){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($142)>>2)]=$131;
 label=39;break;
 case 38: 
 var $147=(($141+4)|0);
 HEAP32[(($147)>>2)]=$131;
 label=39;break;
 case 39: 
 HEAP32[(($132)>>2)]=$126;
 HEAP32[(($138)>>2)]=$131;
 label=56;break;
 case 40: 
 var $149=($88|0)==0;
 if($149){label=43;break;}else{label=41;break;}
 case 41: 
 var $151=(($88+12)|0);
 var $152=HEAP8[(($151)>>0)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=42;break;}else{label=43;break;}
 case 42: 
 HEAP8[(($80)>>0)]=1;
 var $156=($86|0)==($72|0);
 var $157=(($86+12)|0);
 var $158=($156&1);
 HEAP8[(($157)>>0)]=$158;
 HEAP8[(($151)>>0)]=1;
 var $_0=$86;label=21;break;
 case 43: 
 var $160=(($79)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($_0|0)==($161|0);
 if($162){label=44;break;}else{var $180=$79;var $179=$86;label=50;break;}
 case 44: 
 var $164=(($_0+4)|0);
 var $165=HEAP32[(($164)>>2)];
 HEAP32[(($160)>>2)]=$165;
 var $166=($165|0)==0;
 if($166){var $170=$86;label=46;break;}else{label=45;break;}
 case 45: 
 var $168=(($165+8)|0);
 HEAP32[(($168)>>2)]=$79;
 var $_pre5=HEAP32[(($85)>>2)];
 var $170=$_pre5;label=46;break;
 case 46: 
 var $170;
 HEAP32[(($78)>>2)]=$170;
 var $171=HEAP32[(($85)>>2)];
 var $172=(($171)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($79|0)==($173|0);
 if($174){label=47;break;}else{label=48;break;}
 case 47: 
 HEAP32[(($172)>>2)]=$_0;
 label=49;break;
 case 48: 
 var $177=(($171+4)|0);
 HEAP32[(($177)>>2)]=$_0;
 label=49;break;
 case 49: 
 HEAP32[(($164)>>2)]=$79;
 HEAP32[(($85)>>2)]=$_0;
 var $_pre6=HEAP32[(($78)>>2)];
 var $180=$_0;var $179=$_pre6;label=50;break;
 case 50: 
 var $179;
 var $180;
 var $181=(($180+12)|0);
 HEAP8[(($181)>>0)]=1;
 var $182=(($179+12)|0);
 HEAP8[(($182)>>0)]=0;
 var $183=(($179+4)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184)|0);
 var $186=HEAP32[(($185)>>2)];
 HEAP32[(($183)>>2)]=$186;
 var $187=($186|0)==0;
 if($187){label=52;break;}else{label=51;break;}
 case 51: 
 var $189=(($186+8)|0);
 HEAP32[(($189)>>2)]=$179;
 label=52;break;
 case 52: 
 var $191=(($179+8)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($184+8)|0);
 HEAP32[(($193)>>2)]=$192;
 var $194=HEAP32[(($191)>>2)];
 var $195=(($194)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($179|0)==($196|0);
 if($197){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($195)>>2)]=$184;
 label=55;break;
 case 54: 
 var $200=(($194+4)|0);
 HEAP32[(($200)>>2)]=$184;
 label=55;break;
 case 55: 
 HEAP32[(($185)>>2)]=$179;
 HEAP32[(($191)>>2)]=$184;
 label=56;break;
 case 56: 
 var $201=(($this+8)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=((($202)+(1))|0);
 HEAP32[(($201)>>2)]=$203;
 var $__r_i_0=$12;var $__inserted_i_0=1;label=57;break;
 case 57: 
 var $__inserted_i_0;
 var $__r_i_0;
 var $205=(($agg_result)|0);
 HEAP32[(($205)>>2)]=$__r_i_0;
 var $206=(($agg_result+4)|0);
 HEAP8[(($206)>>0)]=$__inserted_i_0;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $207=(($__inserted_i_0<<24)>>24)==0;
 if($207){var $__h_sroa_0_0=$12;label=58;break;}else{label=62;break;}
 case 58: 
 var $__h_sroa_0_0;
 var $209=($__h_sroa_0_0|0)==0;
 if($209){label=62;break;}else{label=59;break;}
 case 59: 
 var $211=(($__h_sroa_0_0+16)|0);
 var $212=(($211+4)|0);
 var $213=HEAP8[(($212)>>0)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=61;break;}else{label=60;break;}
 case 60: 
 var $217=(($211+12)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 _free($219);
 label=61;break;
 case 61: 
 var $220=$__h_sroa_0_0;
 _free($220);
 label=62;break;
 case 62: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=29;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=(($__iob+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)>($7|0);
 var $11=((($9)-($7))|0);
 var $_=($10?$11:0);
 var $12=$__op;
 var $13=((($12)-($6))|0);
 var $14=($13|0)>0;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=$__s_0;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+48)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=FUNCTION_TABLE[$19]($__s_0,$__ob,$13);
 var $21=($20|0)==($13|0);
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($agg_result)|0);
 HEAP32[(($23)>>2)]=0;
 label=29;break;
 case 6: 
 var $25=($_|0)>0;
 if($25){label=7;break;}else{var $__s_sroa_0_1=$__s_0;label=25;break;}
 case 7: 
 var $27=($_>>>0)>4294967279;
 var $28=($_>>>0)<11;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 var $30=$_<<1;
 var $31=(($30)&255);
 var $32=$__sp;
 HEAP8[(($32)>>0)]=$31;
 var $33=$__sp;
 var $34=(($33+1)|0);
 var $__p_0_i=$34;var $_pre_phi=$32;label=14;break;
 case 9: 
 var $35=((($_)+(16))|0);
 var $36=$35&-16;
 var $37=($36|0)==0;
 var $_size_i=($37?1:$36);
 var $38=_malloc($_size_i);
 var $39=($38|0)==0;
 if($39){label=10;break;}else{var $_lcssa_i=$38;label=13;break;}
 case 10: 
 var $40=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $41=($40|0)==0;
 if($41){label=12;break;}else{label=11;break;}
 case 11: 
 var $43=$40;
 FUNCTION_TABLE[$43]();
 var $44=_malloc($_size_i);
 var $45=($44|0)==0;
 if($45){label=10;break;}else{var $_lcssa_i=$44;label=13;break;}
 case 12: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5208;
 ___cxa_throw($47,12352,(68));
 throw "Reached an unreachable!";
 case 13: 
 var $_lcssa_i;
 var $49=(($__sp+8)|0);
 HEAP32[(($49)>>2)]=$_lcssa_i;
 var $50=$36|1;
 var $51=(($__sp)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($__sp+4)|0);
 HEAP32[(($52)>>2)]=$_;
 var $_pre=$__sp;
 var $__p_0_i=$_lcssa_i;var $_pre_phi=$_pre;label=14;break;
 case 14: 
 var $_pre_phi;
 var $__p_0_i;
 _memset($__p_0_i, $__fl, $_)|0;
 var $53=(($__p_0_i+$_)|0);
 HEAP8[(($53)>>0)]=0;
 var $54=HEAP8[(($_pre_phi)>>0)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=16;break;}else{label=15;break;}
 case 15: 
 var $58=(($__sp+8)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=17;break;
 case 16: 
 var $61=$__sp;
 var $62=(($61+1)|0);
 var $63=$62;label=17;break;
 case 17: 
 var $63;
 var $64=$__s_0;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($__s_0,$63,$_) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 var $69=($68|0)==($_|0);
 if($69){var $storemerge1=0;var $__s_sroa_0_0=$__s_0;label=22;break;}else{label=19;break;}
 case 19: 
 var $71=(($agg_result)|0);
 HEAP32[(($71)>>2)]=0;
 var $storemerge1=1;var $__s_sroa_0_0=0;label=22;break;
 case 20: 
 var $73$0 = ___cxa_find_matching_catch(); var $73$1 = tempRet0;
 var $74=HEAP8[(($_pre_phi)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=30;break;}else{label=21;break;}
 case 21: 
 var $78=(($__sp+8)|0);
 var $79=HEAP32[(($78)>>2)];
 _free($79);
 label=30;break;
 case 22: 
 var $__s_sroa_0_0;
 var $storemerge1;
 var $81=HEAP8[(($_pre_phi)>>0)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=24;break;}else{label=23;break;}
 case 23: 
 var $85=(($__sp+8)|0);
 var $86=HEAP32[(($85)>>2)];
 _free($86);
 label=24;break;
 case 24: 
 var $cond=($storemerge1|0)==1;
 if($cond){label=29;break;}else{var $__s_sroa_0_1=$__s_sroa_0_0;label=25;break;}
 case 25: 
 var $__s_sroa_0_1;
 var $88=((($5)-($12))|0);
 var $89=($88|0)>0;
 if($89){label=26;break;}else{label=28;break;}
 case 26: 
 var $91=$__s_sroa_0_1;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+48)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($__s_sroa_0_1,$__op,$88);
 var $96=($95|0)==($88|0);
 if($96){label=28;break;}else{label=27;break;}
 case 27: 
 var $98=(($agg_result)|0);
 HEAP32[(($98)>>2)]=0;
 label=29;break;
 case 28: 
 HEAP32[(($8)>>2)]=0;
 var $100=(($agg_result)|0);
 HEAP32[(($100)>>2)]=$__s_sroa_0_1;
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
 case 30: 
 ___resumeException($73$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$__nd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__nd|0)==0;
 if($1){label=5;break;}else{label=2;break;}
 case 2: 
 var $3=(($__nd)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$5);
 var $6=(($__nd+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_12__value_typeIcNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIcS8_NS_4lessIcEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$8);
 var $9=(($__nd+16)|0);
 var $10=(($9+4)|0);
 var $11=HEAP8[(($10)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($9+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 _free($17);
 label=4;break;
 case 4: 
 var $18=$__nd;
 _free($18);
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a(){
 var label=0;


 __embind_register_function(2592,2,5184,5192,(120),(394));
 return;
}


function ___getTypeName($ti){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ti+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_strlen($2);
 var $4=((($3)+(1))|0);
 var $5=_malloc($4);
 var $6=($5|0)==0;
 if($6){var $_0_i=0;label=3;break;}else{label=2;break;}
 case 2: 
 assert($4 % 1 === 0);(_memcpy($5, $2, $4)|0);
 var $_0_i=$5;label=3;break;
 case 3: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}
Module["___getTypeName"] = ___getTypeName;

function __GLOBAL__I_a64(){
 var label=0;


 __embind_register_void(12232,2544);
 __embind_register_bool(12320,3968,1,1,0);
 __embind_register_integer(12312,3192,1,-128,127);
 __embind_register_integer(12328,2256,1,-128,127);
 __embind_register_integer(12288,2040,1,0,255);
 __embind_register_integer(12248,1808,2,-32768,32767);
 __embind_register_integer(12240,1480,2,0,65535);
 __embind_register_integer(12280,1288,4,-2147483648,2147483647);
 __embind_register_integer(12272,1152,4,0,-1);
 __embind_register_integer(12264,1024,4,-2147483648,2147483647);
 __embind_register_integer(12256,4448,4,0,-1);
 __embind_register_float(12296,4264,4);
 __embind_register_float(12304,4064,8);
 __embind_register_std_string(13704,3952);
 __embind_register_std_string(13680,3896);
 __embind_register_std_wstring(13656,4,3864);
 __embind_register_emval(13992,3840);
 __embind_register_memory_view(14080,0,3784);
 __embind_register_memory_view(14088,0,3712);
 __embind_register_memory_view(14048,1,3656);
 __embind_register_memory_view(14008,2,3544);
 __embind_register_memory_view(14000,3,3408);
 __embind_register_memory_view(14040,4,3256);
 __embind_register_memory_view(14032,5,3152);
 __embind_register_memory_view(14024,4,3080);
 __embind_register_memory_view(14016,5,2976);
 __embind_register_memory_view(14088,0,2920);
 __embind_register_memory_view(14048,1,2776);
 __embind_register_memory_view(14008,2,2712);
 __embind_register_memory_view(14000,3,2608);
 __embind_register_memory_view(14040,4,2552);
 __embind_register_memory_view(14032,5,2424);
 __embind_register_memory_view(14056,6,2392);
 __embind_register_memory_view(14072,7,2312);
 __embind_register_memory_view(14064,7,2216);
 return;
}


function __ZNSt3__18ios_base4InitC2Ev(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=HEAP32[((_stdin)>>2)];
 var $4=$2;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 HEAP32[((17248)>>2)]=7192;
 __ZNSt3__16localeC2Ev(17252);
 HEAP32[((17256)>>2)]=0; HEAP32[((17260)>>2)]=0; HEAP32[((17264)>>2)]=0; HEAP32[((17268)>>2)]=0; HEAP32[((17272)>>2)]=0; HEAP32[((17276)>>2)]=0;
 HEAP32[((17248)>>2)]=7960;
 HEAP32[((17280)>>2)]=$3;
 HEAP32[((17288)>>2)]=17376;
 HEAP32[((17296)>>2)]=-1;
 HEAP8[((17300)>>0)]=0;
 var $5=(($2)|0);
 var $6=HEAP32[((17252)>>2)];
 HEAP32[(($5)>>2)]=$6;
 var $7=(($6+4)|0);
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(17248,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $10=HEAP32[(($5)>>2)];
 var $11=(($10+4)|0);
 var $12=(tempValue=HEAP32[(($11)>>2)],HEAP32[(($11)>>2)]=tempValue+-1,tempValue);
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=9;break;}
 case 3: 
 var $15=(($10)|0);
 var $16=$10;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+8)|0);
 var $19=HEAP32[(($18)>>2)];
 FUNCTION_TABLE[$19]($15);
 label=9;break;
 case 4: 
 var $21$0 = ___cxa_find_matching_catch(); var $21$1 = tempRet0;
 var $22=HEAP32[(($5)>>2)];
 var $23=(($22+4)|0);
 var $24=(tempValue=HEAP32[(($23)>>2)],HEAP32[(($23)>>2)]=tempValue+-1,tempValue);
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=(($22)|0);
 var $28=$22;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+8)|0);
 var $31=HEAP32[(($30)>>2)];
 FUNCTION_TABLE[$31]($27);
 label=6;break;
 case 6: 
 HEAP32[((17248)>>2)]=7192;
 var $32=HEAP32[((17252)>>2)];
 var $33=(($32+4)|0);
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=(($32)|0);
 var $38=$32;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=8;break;
 case 8: 
 ___resumeException($21$0)
 case 9: 
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[((18240)>>2)]=7412;
 HEAP32[((18248)>>2)]=7432;
 HEAP32[((18244)>>2)]=0;
 HEAP32[((18272)>>2)]=17248;
 HEAP32[((18264)>>2)]=0;
 HEAP32[((18268)>>2)]=0;
 HEAP32[((18252)>>2)]=4098;
 HEAP32[((18260)>>2)]=0;
 HEAP32[((18256)>>2)]=6;
 _memset(18280, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18276);
 HEAP32[((18320)>>2)]=0;
 HEAP32[((18324)>>2)]=-1;
 var $42=HEAP32[((_stdout)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(17152,$42,17384);
 HEAP32[((17976)>>2)]=7316;
 HEAP32[((17980)>>2)]=7336;
 HEAP32[((18004)>>2)]=17152;
 HEAP32[((17996)>>2)]=0;
 HEAP32[((18000)>>2)]=0;
 HEAP32[((17984)>>2)]=4098;
 HEAP32[((17992)>>2)]=0;
 HEAP32[((17988)>>2)]=6;
 _memset(18012, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18008);
 HEAP32[((18052)>>2)]=0;
 HEAP32[((18056)>>2)]=-1;
 var $43=HEAP32[((_stderr)>>2)];
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(17200,$43,17392);
 HEAP32[((18152)>>2)]=7316;
 HEAP32[((18156)>>2)]=7336;
 HEAP32[((18180)>>2)]=17200;
 HEAP32[((18172)>>2)]=0;
 HEAP32[((18176)>>2)]=0;
 HEAP32[((18160)>>2)]=4098;
 HEAP32[((18168)>>2)]=0;
 HEAP32[((18164)>>2)]=6;
 _memset(18188, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18184);
 HEAP32[((18228)>>2)]=0;
 HEAP32[((18232)>>2)]=-1;
 var $44=HEAP32[((18152)>>2)];
 var $45=((($44)-(12))|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $_sum=((($47)+(24))|0);
 var $48=((18152+$_sum)|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 HEAP32[((18064)>>2)]=7316;
 HEAP32[((18068)>>2)]=7336;
 HEAP32[((18092)>>2)]=$50;
 var $not__i=($50|0)==0;
 var $51=($not__i&1);
 HEAP32[((18084)>>2)]=$51;
 HEAP32[((18088)>>2)]=0;
 HEAP32[((18072)>>2)]=4098;
 HEAP32[((18080)>>2)]=0;
 HEAP32[((18076)>>2)]=6;
 _memset(18100, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18096);
 HEAP32[((18140)>>2)]=0;
 HEAP32[((18144)>>2)]=-1;
 var $52=HEAP32[((18240)>>2)];
 var $53=((($52)-(12))|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $_sum19=((($55)+(72))|0);
 var $56=((18240+$_sum19)|0);
 var $57=$56;
 HEAP32[(($57)>>2)]=17976;
 var $58=HEAP32[((18152)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum20=((($61)+(4))|0);
 var $62=((18152+$_sum20)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|8192;
 HEAP32[(($63)>>2)]=$65;
 var $66=HEAP32[((18152)>>2)];
 var $67=((($66)-(12))|0);
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $_sum21=((($69)+(72))|0);
 var $70=((18152+$_sum21)|0);
 var $71=$70;
 HEAP32[(($71)>>2)]=17976;
 var $72=$1;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 HEAP32[((17096)>>2)]=7120;
 __ZNSt3__16localeC2Ev(17100);
 HEAP32[((17104)>>2)]=0; HEAP32[((17108)>>2)]=0; HEAP32[((17112)>>2)]=0; HEAP32[((17116)>>2)]=0; HEAP32[((17120)>>2)]=0; HEAP32[((17124)>>2)]=0;
 HEAP32[((17096)>>2)]=7888;
 HEAP32[((17128)>>2)]=$3;
 HEAP32[((17136)>>2)]=17400;
 HEAP32[((17144)>>2)]=-1;
 HEAP8[((17148)>>0)]=0;
 var $73=(($1)|0);
 var $74=HEAP32[((17100)>>2)];
 HEAP32[(($73)>>2)]=$74;
 var $75=(($74+4)|0);
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(17096,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $78=HEAP32[(($73)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=11;break;}else{label=17;break;}
 case 11: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=17;break;
 case 12: 
 var $89$0 = ___cxa_find_matching_catch(); var $89$1 = tempRet0;
 var $90=HEAP32[(($73)>>2)];
 var $91=(($90+4)|0);
 var $92=(tempValue=HEAP32[(($91)>>2)],HEAP32[(($91)>>2)]=tempValue+-1,tempValue);
 var $93=($92|0)==0;
 if($93){label=13;break;}else{label=14;break;}
 case 13: 
 var $95=(($90)|0);
 var $96=$90;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+8)|0);
 var $99=HEAP32[(($98)>>2)];
 FUNCTION_TABLE[$99]($95);
 label=14;break;
 case 14: 
 HEAP32[((17096)>>2)]=7120;
 var $100=HEAP32[((17100)>>2)];
 var $101=(($100+4)|0);
 var $102=(tempValue=HEAP32[(($101)>>2)],HEAP32[(($101)>>2)]=tempValue+-1,tempValue);
 var $103=($102|0)==0;
 if($103){label=15;break;}else{label=16;break;}
 case 15: 
 var $105=(($100)|0);
 var $106=$100;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+8)|0);
 var $109=HEAP32[(($108)>>2)];
 FUNCTION_TABLE[$109]($105);
 label=16;break;
 case 16: 
 ___resumeException($89$0)
 case 17: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 HEAP32[((17888)>>2)]=7364;
 HEAP32[((17896)>>2)]=7384;
 HEAP32[((17892)>>2)]=0;
 HEAP32[((17920)>>2)]=17096;
 HEAP32[((17912)>>2)]=0;
 HEAP32[((17916)>>2)]=0;
 HEAP32[((17900)>>2)]=4098;
 HEAP32[((17908)>>2)]=0;
 HEAP32[((17904)>>2)]=6;
 _memset(17928, 0, 40)|0;
 __ZNSt3__16localeC2Ev(17924);
 HEAP32[((17968)>>2)]=0;
 HEAP32[((17972)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(17000,$42,17408);
 HEAP32[((17608)>>2)]=7268;
 HEAP32[((17612)>>2)]=7288;
 HEAP32[((17636)>>2)]=17000;
 HEAP32[((17628)>>2)]=0;
 HEAP32[((17632)>>2)]=0;
 HEAP32[((17616)>>2)]=4098;
 HEAP32[((17624)>>2)]=0;
 HEAP32[((17620)>>2)]=6;
 _memset(17644, 0, 40)|0;
 __ZNSt3__16localeC2Ev(17640);
 HEAP32[((17684)>>2)]=0;
 HEAP32[((17688)>>2)]=-1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(17048,$43,17416);
 HEAP32[((17784)>>2)]=7268;
 HEAP32[((17788)>>2)]=7288;
 HEAP32[((17812)>>2)]=17048;
 HEAP32[((17804)>>2)]=0;
 HEAP32[((17808)>>2)]=0;
 HEAP32[((17792)>>2)]=4098;
 HEAP32[((17800)>>2)]=0;
 HEAP32[((17796)>>2)]=6;
 _memset(17820, 0, 40)|0;
 __ZNSt3__16localeC2Ev(17816);
 HEAP32[((17860)>>2)]=0;
 HEAP32[((17864)>>2)]=-1;
 var $110=HEAP32[((17784)>>2)];
 var $111=((($110)-(12))|0);
 var $112=$111;
 var $113=HEAP32[(($112)>>2)];
 var $_sum22=((($113)+(24))|0);
 var $114=((17784+$_sum22)|0);
 var $115=$114;
 var $116=HEAP32[(($115)>>2)];
 HEAP32[((17696)>>2)]=7268;
 HEAP32[((17700)>>2)]=7288;
 HEAP32[((17724)>>2)]=$116;
 var $not__i2=($116|0)==0;
 var $117=($not__i2&1);
 HEAP32[((17716)>>2)]=$117;
 HEAP32[((17720)>>2)]=0;
 HEAP32[((17704)>>2)]=4098;
 HEAP32[((17712)>>2)]=0;
 HEAP32[((17708)>>2)]=6;
 _memset(17732, 0, 40)|0;
 __ZNSt3__16localeC2Ev(17728);
 HEAP32[((17772)>>2)]=0;
 HEAP32[((17776)>>2)]=-1;
 var $118=HEAP32[((17888)>>2)];
 var $119=((($118)-(12))|0);
 var $120=$119;
 var $121=HEAP32[(($120)>>2)];
 var $_sum23=((($121)+(72))|0);
 var $122=((17888+$_sum23)|0);
 var $123=$122;
 HEAP32[(($123)>>2)]=17608;
 var $124=HEAP32[((17784)>>2)];
 var $125=((($124)-(12))|0);
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $_sum24=((($127)+(4))|0);
 var $128=((17784+$_sum24)|0);
 var $129=$128;
 var $130=HEAP32[(($129)>>2)];
 var $131=$130|8192;
 HEAP32[(($129)>>2)]=$131;
 var $132=HEAP32[((17784)>>2)];
 var $133=((($132)-(12))|0);
 var $134=$133;
 var $135=HEAP32[(($134)>>2)];
 var $_sum25=((($135)+(72))|0);
 var $136=((17784+$_sum25)|0);
 var $137=$136;
 HEAP32[(($137)>>2)]=17608;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(17976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(18064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(17696) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $6$0 = ___cxa_find_matching_catch(0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}


function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__124__generic_error_category4nameEv($this){
 var label=0;


 return 2768;
}


function __ZNKSt3__124__generic_error_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)>256;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=__Znwj(48);
 var $4=(($agg_result+8)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=49;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=34;
 assert(34 % 1 === 0);(_memcpy($3, 4008, 34)|0);
 var $7=(($3+34)|0);
 HEAP8[(($7)>>0)]=0;
 label=4;break;
 case 3: 
 var $9=_strerror($ev);
 var $10=_strlen($9);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,$9,$10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__123__system_error_category4nameEv($this){
 var label=0;


 return 3200;
}


function __ZNKSt3__123__system_error_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)>256;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=__Znwj(48);
 var $4=(($agg_result+8)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=49;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=33;
 assert(33 % 1 === 0);(_memcpy($3, 2272, 33)|0);
 var $7=(($3+33)|0);
 HEAP8[(($7)>>0)]=0;
 label=4;break;
 case 3: 
 var $9=_strerror($ev);
 var $10=_strlen($9);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,$9,$10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__123__system_error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)>256;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__115system_categoryEv();
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=$ev;
 var $4=(($agg_result+4)|0);
 HEAP32[(($4)>>2)]=16344;
 label=7;break;
 case 3: 
 var $6=HEAP8[((18464)>>0)];
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=6;break;}
 case 4: 
 var $9=___cxa_guard_acquire(18464);
 var $10=($9|0)==0;
 if($10){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[((16336)>>2)]=6864;

 label=6;break;
 case 6: 
 var $12=(($agg_result)|0);
 HEAP32[(($12)>>2)]=$ev;
 var $13=(($agg_result+4)|0);
 HEAP32[(($13)>>2)]=16336;
 label=7;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115system_categoryEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18472)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18472);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[((16344)>>2)]=6912;

 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($ec)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre1=$what_arg;
 if($4){label=16;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP8[(($_pre1)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($what_arg+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=5;break;
 case 4: 
 var $13=($6&255);
 var $14=$13>>>1;
 var $15=$14;label=5;break;
 case 5: 
 var $15;
 var $16=($15|0)==0;
 if($16){var $20=$3;label=7;break;}else{label=6;break;}
 case 6: 
 var $18=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,2056,2);
 var $_pre=HEAP32[(($2)>>2)];
 var $20=$_pre;label=7;break;
 case 7: 
 var $20;
 var $21=(($ec+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+24)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($1,$22,$20);
 var $27=$1;
 var $28=HEAP8[(($27)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($1+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($1+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $42=$35;var $41=$33;label=10;break;
 case 9: 
 var $37=$1;
 var $38=(($37+1)|0);
 var $39=($28&255);
 var $40=$39>>>1;
 var $42=$40;var $41=$38;label=10;break;
 case 10: 
 var $41;
 var $42;
 var $43=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$41,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $44=HEAP8[(($27)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=16;break;}else{label=12;break;}
 case 12: 
 var $48=(($1+8)|0);
 var $49=HEAP32[(($48)>>2)];
 _free($49);
 label=16;break;
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(); var $51$1 = tempRet0;
 var $52=HEAP8[(($27)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=15;break;}else{label=14;break;}
 case 14: 
 var $56=(($1+8)|0);
 var $57=HEAP32[(($56)>>2)];
 _free($57);
 label=15;break;
 case 15: 
 ___resumeException($51$0)
 case 16: 
 var $58=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($_pre1)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($_pre1)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($_pre1)+(8))>>2)];
 HEAP32[(($_pre1)>>2)]=0; HEAP32[((($_pre1)+(4))>>2)]=0; HEAP32[((($_pre1)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec_0,$ec_1,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ec=sp;
 var $tmpcast=$ec;
 var $_02=$ec;
 HEAP32[(($_02)>>2)]=$ec_0;
 var $_1=(($tmpcast+4)|0);
 HEAP32[(($_1)>>2)]=$ec_1;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=_strlen($what_arg);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2,$what_arg,$3);
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1,$tmpcast,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $5=(($this)|0);
 HEAP32[(($5)>>2)]=5304;
 var $6=$1;
 var $7=HEAP8[(($6)>>0)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $11=(($1+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $16=$12;label=5;break;
 case 4: 
 var $14=$1;
 var $15=(($14+1)|0);
 var $16=$15;label=5;break;
 case 5: 
 var $16;
 var $17=_strlen($16);
 var $18=((($17)+(13))|0);
 var $19=(function() { try { __THREW__ = 0; return __Znwj($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $21=$19;
 HEAP32[(($21)>>2)]=$17;
 var $22=(($19+4)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=$17;
 var $24=(($19+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 var $26=(($19+12)|0);
 var $27=((($17)+(1))|0);
 assert($27 % 1 === 0);(_memcpy($26, $16, $27)|0);
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$26;
 if($9){label=8;break;}else{label=7;break;}
 case 7: 
 var $30=(($1+8)|0);
 var $31=HEAP32[(($30)>>2)];
 _free($31);
 label=8;break;
 case 8: 
 var $32=$2;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 _free($38);
 label=10;break;
 case 10: 
 HEAP32[(($5)>>2)]=7456;
 var $39=(($this+8)|0);
 var $40=$39;
 var $ld$0$0=(($ec)|0);
 var $41$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($ec+4)|0);
 var $41$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($40)|0);
 HEAP32[(($st$2$0)>>2)]=$41$0;
 var $st$3$1=(($40+4)|0);
 HEAP32[(($st$3$1)>>2)]=$41$1;
 STACKTOP=sp;return;
 case 11: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=$43$0;
 var $45=$43$1;
 var $_0=$45;var $_01=$44;label=14;break;
 case 12: 
 var $46$0 = ___cxa_find_matching_catch(); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=$46$1;
 if($9){var $_0=$48;var $_01=$47;label=14;break;}else{label=13;break;}
 case 13: 
 var $50=(($1+8)|0);
 var $51=HEAP32[(($50)>>2)];
 _free($51);
 var $_0=$48;var $_01=$47;label=14;break;
 case 14: 
 var $_01;
 var $_0;
 var $52=$2;
 var $53=HEAP8[(($52)>>0)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=16;break;}else{label=15;break;}
 case 15: 
 var $57=(($2+8)|0);
 var $58=HEAP32[(($57)>>2)];
 _free($58);
 label=16;break;
 case 16: 
 var $59$0=$_01;
 var $59$1=0;
 var $60$0=$59$0;
 var $60$1=$_0;
 ___resumeException($60$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__throw_system_errorEiPKc($ev,$what_arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(16);
 var $2=$1;
 __ZNSt3__115system_categoryEv();
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($2,$ev,16344,$what_arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($1,13632,(552));
 throw "Reached an unreachable!";
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(); var $5$1 = tempRet0;
 ___cxa_free_exception($1);
 ___resumeException($5$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=5400;
 var $2=(($0+4)|0);
 var $3=_strlen(1320);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, 1320, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 HEAP32[(($1)>>2)]=5368;
 ___cxa_throw($0,12432,(260));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=5400;
 var $2=(($0+4)|0);
 var $3=_strlen(1320);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, 1320, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 HEAP32[(($1)>>2)]=5336;
 ___cxa_throw($0,12416,(260));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__str;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$this;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=4;break;
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$9,$11);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=6;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=__Znwj($12);
 var $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=$12|1;
 var $16=(($this)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=(($this+4)|0);
 HEAP32[(($17)>>2)]=$__sz;
 var $__p_0=$13;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $19=(($__p_0+$__sz)|0);
 HEAP8[(($19)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 var $13=$10&1;
 var $14=(($13<<24)>>24)==0;
 if($12){label=10;break;}else{label=4;break;}
 case 4: 
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=7;break;
 case 6: 
 var $20=$this;
 var $21=(($20+1)|0);
 var $22=$21;label=7;break;
 case 7: 
 var $22;
 _memmove($22,$__s,$__n,1,0);
 var $23=(($22+$__n)|0);
 HEAP8[(($23)>>0)]=0;
 var $24=HEAP8[(($1)>>0)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $28=(($this+4)|0);
 HEAP32[(($28)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $30=$__n<<1;
 var $31=(($30)&255);
 HEAP8[(($1)>>0)]=$31;
 label=14;break;
 case 10: 
 if($14){label=12;break;}else{label=11;break;}
 case 11: 
 var $34=(($this+4)|0);
 var $35=HEAP32[(($34)>>2)];
 var $39=$35;label=13;break;
 case 12: 
 var $37=($10&255);
 var $38=$37>>>1;
 var $39=$38;label=13;break;
 case 13: 
 var $39;
 var $40=((($__n)-($11))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$40,$39,0,$39,$__n,$__s);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=5;break;}else{label=20;break;}
 case 5: 
 var $14=((($__n)-($11))|0);
 var $15=($11|0)==($__n|0);
 if($15){label=23;break;}else{label=6;break;}
 case 6: 
 if($4){var $23=10;var $22=$2;label=8;break;}else{label=7;break;}
 case 7: 
 var $18=(($this)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2;
 var $phitmp_i_i=((($20)-(1))|0);
 var $21=(($19)&255);
 var $23=$phitmp_i_i;var $22=$21;label=8;break;
 case 8: 
 var $22;
 var $23;
 var $24=$22&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=($22&255);
 var $31=$30>>>1;
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=((($23)-($32))|0);
 var $34=($33>>>0)<($14>>>0);
 if($34){label=12;break;}else{var $39=$22;label=13;break;}
 case 12: 
 var $36=((($14)-($23))|0);
 var $37=((($36)+($32))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$23,$37,$32,$32,0);
 var $_pre_i=HEAP8[(($1)>>0)];
 var $39=$_pre_i;label=13;break;
 case 13: 
 var $39;
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=(($this+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $48=$44;label=16;break;
 case 15: 
 var $46=$this;
 var $47=(($46+1)|0);
 var $48=$47;label=16;break;
 case 16: 
 var $48;
 var $49=(($48+$32)|0);
 _memset($49, 0, $14)|0;
 var $50=((($32)+($14))|0);
 var $51=HEAP8[(($1)>>0)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=19;break;
 case 18: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[(($1)>>0)]=$58;
 label=19;break;
 case 19: 
 var $59=(($48+$50)|0);
 HEAP8[(($59)>>0)]=0;
 label=23;break;
 case 20: 
 if($4){label=22;break;}else{label=21;break;}
 case 21: 
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+$__n)|0);
 HEAP8[(($64)>>0)]=0;
 var $65=(($this+4)|0);
 HEAP32[(($65)>>2)]=$__n;
 label=23;break;
 case 22: 
 var $67=$this;
 var $68=(($67+1+$__n)|0);
 HEAP8[(($68)>>0)]=0;
 var $69=$__n<<1;
 var $70=(($69)&255);
 HEAP8[(($1)>>0)]=$70;
 label=23;break;
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<11;
 if($21){var $25=10;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(16))|0);
 var $24=$23&-16;
 var $phitmp_i2=((($24)-(1))|0);
 var $25=$phitmp_i2;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)==($11|0);
 if($26){label=26;break;}else{label=9;break;}
 case 9: 
 var $28=($25|0)==10;
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 var $30=$this;
 var $31=(($30+1)|0);
 var $32=(($this+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $__new_data_1=$31;var $__p_0=$33;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $54=$10;label=18;break;
 case 11: 
 var $35=($25>>>0)>($11>>>0);
 var $36=((($25)+(1))|0);
 if($35){label=12;break;}else{label=13;break;}
 case 12: 
 var $38=__Znwj($36);
 var $__new_data_0=$38;label=15;break;
 case 13: 
 var $40=(function() { try { __THREW__ = 0; return __Znwj($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$40;label=15;break; } else { label=14;break; }
 case 14: 
 var $42$0 = ___cxa_find_matching_catch(0); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=___cxa_begin_catch($43);
 ___cxa_end_catch();
 label=26;break;
 case 15: 
 var $__new_data_0;
 var $45=HEAP8[(($1)>>0)];
 var $46=$45&1;
 var $47=(($46<<24)>>24)==0;
 if($47){label=17;break;}else{label=16;break;}
 case 16: 
 var $49=(($this+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $__new_data_1=$__new_data_0;var $__p_0=$50;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $54=$45;label=18;break;
 case 17: 
 var $52=$this;
 var $53=(($52+1)|0);
 var $__new_data_1=$__new_data_0;var $__p_0=$53;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $54=$45;label=18;break;
 case 18: 
 var $54;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=20;break;}else{label=19;break;}
 case 19: 
 var $58=(($this+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=21;break;
 case 20: 
 var $61=($54&255);
 var $62=$61>>>1;
 var $63=$62;label=21;break;
 case 21: 
 var $63;
 var $64=((($63)+(1))|0);
 assert($64 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $64)|0);
 if($__was_long_0_off0){label=22;break;}else{label=23;break;}
 case 22: 
 _free($__p_0);
 label=23;break;
 case 23: 
 if($__now_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 var $68=((($25)+(1))|0);
 var $69=$68|1;
 var $70=(($this)|0);
 HEAP32[(($70)>>2)]=$69;
 var $71=(($this+4)|0);
 HEAP32[(($71)>>2)]=$20;
 var $72=(($this+8)|0);
 HEAP32[(($72)>>2)]=$__new_data_1;
 label=26;break;
 case 25: 
 var $74=$20<<1;
 var $75=(($74)&255);
 HEAP8[(($1)>>0)]=$75;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=10;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0);
 var $18=HEAP8[(($1)>>0)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=$this;
 var $24=(($23+1)|0);
 var $25=$__sz_0<<1;
 var $26=((($25)+(2))|0);
 var $27=(($26)&255);
 HEAP8[(($1)>>0)]=$27;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$24;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $29=(($this+8)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($__sz_0)+(1))|0);
 var $32=(($this+4)|0);
 HEAP32[(($32)>>2)]=$31;
 var $_pn=$30;var $__p_0_sum_pre_phi=$31;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+$__sz_0)|0);
 HEAP8[(($__p_0)>>0)]=$__c;
 var $34=(($_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[(($34)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=((($11)-($20))|0);
 var $22=($21>>>0)<($__n>>>0);
 if($22){label=15;break;}else{label=7;break;}
 case 7: 
 var $24=($__n|0)==0;
 if($24){label=16;break;}else{label=8;break;}
 case 8: 
 if($13){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=$this;
 var $31=(($30+1)|0);
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=(($32+$20)|0);
 assert($__n % 1 === 0);(_memcpy($33, $__s, $__n)|0);
 var $34=((($20)+($__n))|0);
 var $35=HEAP8[(($1)>>0)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=13;break;}else{label=12;break;}
 case 12: 
 var $39=(($this+4)|0);
 HEAP32[(($39)>>2)]=$34;
 label=14;break;
 case 13: 
 var $41=$34<<1;
 var $42=(($41)&255);
 HEAP8[(($1)>>0)]=$42;
 label=14;break;
 case 14: 
 var $43=(($32+$34)|0);
 HEAP8[(($43)>>0)]=0;
 label=16;break;
 case 15: 
 var $45=((($__n)-($11))|0);
 var $46=((($45)+($20))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$46,$20,$20,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=($__n_add|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=(($27+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($33, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=15;break;}else{label=14;break;}
 case 14: 
 var $38=((($35)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $39=(($27+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $40=(($15+$_sum1)|0);
 assert($38 % 1 === 0);(_memcpy($39, $40, $38)|0);
 label=15;break;
 case 15: 
 var $42=($__old_cap|0)==10;
 if($42){label=17;break;}else{label=16;break;}
 case 16: 
 _free($15);
 label=17;break;
 case 17: 
 var $45=(($this+8)|0);
 HEAP32[(($45)>>2)]=$27;
 var $46=$26|1;
 var $47=(($this)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=((($35)+($__n_add))|0);
 var $49=(($this+4)|0);
 HEAP32[(($49)>>2)]=$48;
 var $50=(($27+$48)|0);
 HEAP8[(($50)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=__Znwj($26);
 var $28=($__n_copy|0)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($27, $15, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $31=($__old_sz|0)==($__n_copy|0);
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=((($__old_sz)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $34=(($27+$_sum)|0);
 var $35=(($15+$__n_copy)|0);
 assert($33 % 1 === 0);(_memcpy($34, $35, $33)|0);
 label=13;break;
 case 13: 
 var $37=($__old_cap|0)==10;
 if($37){label=15;break;}else{label=14;break;}
 case 14: 
 _free($15);
 label=15;break;
 case 15: 
 var $40=(($this+8)|0);
 HEAP32[(($40)>>2)]=$27;
 var $41=$26|1;
 var $42=(($this)|0);
 HEAP32[(($42)>>2)]=$41;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=($3&255);
 var $11=$10>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($1|0)==-1;
 if($13){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=16;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 if($5){label=9;break;}else{label=8;break;}
 case 8: 
 var $17=(($this+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=10;break;
 case 9: 
 var $20=$this;
 var $21=(($20+1)|0);
 var $22=$21;label=10;break;
 case 10: 
 var $22;
 var $23=($12>>>0)>($1>>>0);
 var $24=($23?$1:$12);
 var $25=($24|0)==0;
 if($25){label=14;break;}else{var $_02_i_i=$24;var $l_03_i_i=$22;var $r_04_i_i=$__s;label=11;break;}
 case 11: 
 var $r_04_i_i;
 var $l_03_i_i;
 var $_02_i_i;
 var $26=HEAP8[(($l_03_i_i)>>0)];
 var $27=HEAP8[(($r_04_i_i)>>0)];
 var $28=(($26<<24)>>24)==(($27<<24)>>24);
 if($28){label=12;break;}else{label=13;break;}
 case 12: 
 var $30=((($_02_i_i)-(1))|0);
 var $31=(($l_03_i_i+1)|0);
 var $32=(($r_04_i_i+1)|0);
 var $33=($30|0)==0;
 if($33){label=14;break;}else{var $_02_i_i=$30;var $l_03_i_i=$31;var $r_04_i_i=$32;label=11;break;}
 case 13: 
 var $34=($26&255);
 var $35=($27&255);
 var $36=((($34)-($35))|0);
 var $37=(($26<<24)>>24)==(($27<<24)>>24);
 if($37){label=14;break;}else{label=15;break;}
 case 14: 
 var $38=($12>>>0)<($1>>>0);
 var $__i=($23&1);
 var $___i=($38?-1:$__i);
 return $___i;
 case 15: 
 return $36;
 case 16: 
 var $40$0 = ___cxa_find_matching_catch(0); var $40$1 = tempRet0;
 var $41=$40$0;
 ___clang_call_terminate($41);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__sz)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__sz;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=($__sz|0)==0;
 if($20){label=8;break;}else{var $_023_i=$__s;var $_014_i=$__sz;var $_05_i=$__p_0;label=7;break;}
 case 7: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $21=((($_014_i)-(1))|0);
 var $22=(($_023_i+4)|0);
 var $23=HEAP32[(($_023_i)>>2)];
 var $24=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$23;
 var $25=($21|0)==0;
 if($25){label=8;break;}else{var $_023_i=$22;var $_014_i=$21;var $_05_i=$24;label=7;break;}
 case 8: 
 var $26=(($__p_0+($__sz<<2))|0);
 HEAP32[(($26)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741807;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__n>>>0)<2;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__n<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[(($8)>>0)]=$7;
 var $9=(($this+4)|0);
 var $__p_0=$9;label=6;break;
 case 5: 
 var $10=((($__n)+(4))|0);
 var $11=$10&-4;
 var $12=$11<<2;
 var $13=__Znwj($12);
 var $14=$13;
 var $15=(($this+8)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=$11|1;
 var $17=(($this)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($this+4)|0);
 HEAP32[(($18)>>2)]=$__n;
 var $__p_0=$14;label=6;break;
 case 6: 
 var $__p_0;
 var $20=($__n|0)==0;
 if($20){label=8;break;}else{var $_012_i=$__n;var $_03_i=$__p_0;label=7;break;}
 case 7: 
 var $_03_i;
 var $_012_i;
 var $21=((($_012_i)-(1))|0);
 var $22=(($_03_i+4)|0);
 HEAP32[(($_03_i)>>2)]=$__c;
 var $23=($21|0)==0;
 if($23){label=8;break;}else{var $_012_i=$21;var $_03_i=$22;label=7;break;}
 case 8: 
 var $24=(($__p_0+($__n<<2))|0);
 HEAP32[(($24)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 _free($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=$__s;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=$__s;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=$this;
 var $10=HEAP8[(($9)>>0)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){var $19=1;var $18=$10;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($this)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&-2;
 var $phitmp_i_i=((($16)-(1))|0);
 var $17=(($15)&255);
 var $19=$phitmp_i_i;var $18=$17;label=5;break;
 case 5: 
 var $18;
 var $19;
 var $20=($8>>>0)>($19>>>0);
 if($20){label=12;break;}else{label=6;break;}
 case 6: 
 var $22=$18&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($this+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=9;break;
 case 8: 
 var $28=(($this+4)|0);
 var $29=$28;label=9;break;
 case 9: 
 var $29;
 _wmemmove($29,$__s,$8);
 var $30=(($29+($8<<2))|0);
 HEAP32[(($30)>>2)]=0;
 var $31=HEAP8[(($9)>>0)];
 var $32=$31&1;
 var $33=(($32<<24)>>24)==0;
 if($33){label=11;break;}else{label=10;break;}
 case 10: 
 var $35=(($this+4)|0);
 HEAP32[(($35)>>2)]=$8;
 label=25;break;
 case 11: 
 var $37=$7>>>1;
 var $38=(($37)&255);
 HEAP8[(($9)>>0)]=$38;
 label=25;break;
 case 12: 
 var $39=((($8)-($19))|0);
 var $40=(((1073741806)-($19))|0);
 var $41=($40>>>0)<($39>>>0);
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 14: 
 var $44=$18&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=16;break;}else{label=15;break;}
 case 15: 
 var $47=(($this+8)|0);
 var $48=HEAP32[(($47)>>2)];
 var $51=$48;label=17;break;
 case 16: 
 var $50=(($this+4)|0);
 var $51=$50;label=17;break;
 case 17: 
 var $51;
 var $52=($19>>>0)<536870887;
 if($52){label=18;break;}else{var $61=1073741807;label=20;break;}
 case 18: 
 var $54=$19<<1;
 var $55=($8>>>0)<($54>>>0);
 var $56=($55?$54:$8);
 var $57=($56>>>0)<2;
 if($57){var $61=2;label=20;break;}else{label=19;break;}
 case 19: 
 var $59=((($56)+(4))|0);
 var $60=$59&-4;
 var $61=$60;label=20;break;
 case 20: 
 var $61;
 var $62=$61<<2;
 var $63=__Znwj($62);
 var $64=$63;
 var $65=($8|0)==0;
 if($65){label=22;break;}else{var $_023_i_i_i=$__s;var $_014_i_i_i=$8;var $_05_i_i_i=$64;label=21;break;}
 case 21: 
 var $_05_i_i_i;
 var $_014_i_i_i;
 var $_023_i_i_i;
 var $66=((($_014_i_i_i)-(1))|0);
 var $67=(($_023_i_i_i+4)|0);
 var $68=HEAP32[(($_023_i_i_i)>>2)];
 var $69=(($_05_i_i_i+4)|0);
 HEAP32[(($_05_i_i_i)>>2)]=$68;
 var $70=($66|0)==0;
 if($70){label=22;break;}else{var $_023_i_i_i=$67;var $_014_i_i_i=$66;var $_05_i_i_i=$69;label=21;break;}
 case 22: 
 var $71=($19|0)==1;
 if($71){label=24;break;}else{label=23;break;}
 case 23: 
 var $73=$51;
 _free($73);
 label=24;break;
 case 24: 
 var $74=(($this+8)|0);
 HEAP32[(($74)>>2)]=$64;
 var $75=$61|1;
 var $76=(($this)|0);
 HEAP32[(($76)>>2)]=$75;
 var $77=(($this+4)|0);
 HEAP32[(($77)>>2)]=$8;
 var $78=(($64+($8<<2))|0);
 HEAP32[(($78)>>2)]=0;
 label=25;break;
 case 25: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<2;
 if($21){var $25=1;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $phitmp_i2=((($24)-(1))|0);
 var $25=$phitmp_i2;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)==($11|0);
 if($26){label=28;break;}else{label=9;break;}
 case 9: 
 var $28=($25|0)==1;
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 var $30=(($this+4)|0);
 var $31=(($this+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $__new_data_1=$30;var $__p_0=$32;var $__was_long_0_off0=1;var $__now_long_0_off0=0;var $54=$10;label=18;break;
 case 11: 
 var $34=($25>>>0)>($11>>>0);
 var $35=$25<<2;
 var $36=((($35)+(4))|0);
 if($34){label=12;break;}else{label=13;break;}
 case 12: 
 var $38=__Znwj($36);
 var $_sink=$38;label=15;break;
 case 13: 
 var $40=(function() { try { __THREW__ = 0; return __Znwj($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_sink=$40;label=15;break; } else { label=14;break; }
 case 14: 
 var $42$0 = ___cxa_find_matching_catch(0); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=___cxa_begin_catch($43);
 ___cxa_end_catch();
 label=28;break;
 case 15: 
 var $_sink;
 var $45=$_sink;
 var $46=HEAP8[(($1)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=17;break;}else{label=16;break;}
 case 16: 
 var $50=(($this+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $__new_data_1=$45;var $__p_0=$51;var $__was_long_0_off0=1;var $__now_long_0_off0=1;var $54=$46;label=18;break;
 case 17: 
 var $53=(($this+4)|0);
 var $__new_data_1=$45;var $__p_0=$53;var $__was_long_0_off0=0;var $__now_long_0_off0=1;var $54=$46;label=18;break;
 case 18: 
 var $54;
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){label=20;break;}else{label=19;break;}
 case 19: 
 var $58=(($this+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $63=$59;label=21;break;
 case 20: 
 var $61=($54&255);
 var $62=$61>>>1;
 var $63=$62;label=21;break;
 case 21: 
 var $63;
 var $64=((($63)+(1))|0);
 var $65=($64|0)==0;
 if($65){label=23;break;}else{var $_023_i=$__p_0;var $_014_i=$64;var $_05_i=$__new_data_1;label=22;break;}
 case 22: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $66=((($_014_i)-(1))|0);
 var $67=(($_023_i+4)|0);
 var $68=HEAP32[(($_023_i)>>2)];
 var $69=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$68;
 var $70=($66|0)==0;
 if($70){label=23;break;}else{var $_023_i=$67;var $_014_i=$66;var $_05_i=$69;label=22;break;}
 case 23: 
 if($__was_long_0_off0){label=24;break;}else{label=25;break;}
 case 24: 
 var $72=$__p_0;
 _free($72);
 label=25;break;
 case 25: 
 if($__now_long_0_off0){label=26;break;}else{label=27;break;}
 case 26: 
 var $75=((($25)+(1))|0);
 var $76=$75|1;
 var $77=(($this)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($this+4)|0);
 HEAP32[(($78)>>2)]=$20;
 var $79=(($this+8)|0);
 HEAP32[(($79)>>2)]=$__new_data_1;
 label=28;break;
 case 27: 
 var $81=$20<<1;
 var $82=(($81)&255);
 HEAP8[(($1)>>0)]=$82;
 label=28;break;
 case 28: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)!=0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=($2&255);
 var $7=$6>>>1;
 var $__sz_0=$7;var $__cap_0=1;label=4;break;
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $12=((($11)-(1))|0);
 var $13=(($this+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $__sz_0=$14;var $__cap_0=$12;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $16=($__sz_0|0)==($__cap_0|0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $18=HEAP8[(($1)>>0)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=7;break;}else{label=8;break;}
 case 6: 
 if($4){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($this+4)|0);
 var $24=$__sz_0<<1;
 var $25=((($24)+(2))|0);
 var $26=(($25)&255);
 HEAP8[(($1)>>0)]=$26;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$23;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $28=(($this+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($__sz_0)+(1))|0);
 var $31=(($this+4)|0);
 HEAP32[(($31)>>2)]=$30;
 var $_pn=$29;var $__p_0_sum_pre_phi=$30;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $33=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($33)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $25=1073741807;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=9;break;
 case 9: 
 var $25;
 var $26=$25<<2;
 var $27=__Znwj($26);
 var $28=$27;
 var $29=($__n_copy|0)==0;
 if($29){label=11;break;}else{var $_023_i=$14;var $_014_i=$__n_copy;var $_05_i=$28;label=10;break;}
 case 10: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $30=((($_014_i)-(1))|0);
 var $31=(($_023_i+4)|0);
 var $32=HEAP32[(($_023_i)>>2)];
 var $33=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$32;
 var $34=($30|0)==0;
 if($34){label=11;break;}else{var $_023_i=$31;var $_014_i=$30;var $_05_i=$33;label=10;break;}
 case 11: 
 var $35=((($__old_sz)-($__n_del))|0);
 var $36=($35|0)==($__n_copy|0);
 if($36){label=14;break;}else{label=12;break;}
 case 12: 
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $37=(($14+($_sum1<<2))|0);
 var $38=(($28+($_sum<<2))|0);
 var $39=((($35)-($__n_copy))|0);
 var $_023_i3=$37;var $_014_i2=$39;var $_05_i1=$38;label=13;break;
 case 13: 
 var $_05_i1;
 var $_014_i2;
 var $_023_i3;
 var $40=((($_014_i2)-(1))|0);
 var $41=(($_023_i3+4)|0);
 var $42=HEAP32[(($_023_i3)>>2)];
 var $43=(($_05_i1+4)|0);
 HEAP32[(($_05_i1)>>2)]=$42;
 var $44=($40|0)==0;
 if($44){label=14;break;}else{var $_023_i3=$41;var $_014_i2=$40;var $_05_i1=$43;label=13;break;}
 case 14: 
 var $45=($__old_cap|0)==1;
 if($45){label=16;break;}else{label=15;break;}
 case 15: 
 var $47=$14;
 _free($47);
 label=16;break;
 case 16: 
 var $49=(($this+8)|0);
 HEAP32[(($49)>>2)]=$28;
 var $50=$25|1;
 var $51=(($this)|0);
 HEAP32[(($51)>>2)]=$50;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+24)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+16)|0);
 HEAP32[(($5)>>2)]=$state;
 label=4;break;
 case 3: 
 var $7=$state|1;
 var $8=(($this+16)|0);
 HEAP32[(($8)>>2)]=$7;
 label=4;break;
 case 4: 
 var $10=($3&1);
 var $11=$10|$state;
 var $12=(($this+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$11&$13;
 var $15=($14|0)==0;
 if($15){label=11;break;}else{label=5;break;}
 case 5: 
 var $17=___cxa_allocate_exception(16);
 var $18=HEAP8[((18456)>>0)];
 var $19=(($18<<24)>>24)==0;
 if($19){label=6;break;}else{label=8;break;}
 case 6: 
 var $21=___cxa_guard_acquire(18456);
 var $22=($21|0)==0;
 if($22){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((16328)>>2)]=6960;

 label=8;break;
 case 8: 
 var $24=$17;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($24,1,16328,3504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $26=$17;
 HEAP32[(($26)>>2)]=6048;
 ___cxa_throw($17,12976,(62));
 throw "Reached an unreachable!";
 case 10: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 ___cxa_free_exception($17);
 ___resumeException($28$0)
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6024;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+32)|0);
 var $6=(($this+36)|0);
 var $i_01_i=$3;label=3;break;
 case 3: 
 var $i_01_i;
 var $8=((($i_01_i)-(1))|0);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=HEAP32[(($6)>>2)];
 var $13=(($12+($8<<2))|0);
 var $14=HEAP32[(($13)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11](0,$this,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $15=($8|0)==0;
 if($15){label=5;break;}else{var $i_01_i=$8;label=3;break;}
 case 5: 
 var $16=(($this+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$17;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=7;break;
 case 7: 
 var $28=(($this+32)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 _free($30);
 var $31=(($this+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32;
 _free($33);
 var $34=(($this+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=$35;
 _free($36);
 var $37=(($this+60)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 _free($39);
 return;
 case 8: 
 var $41$0 = ___cxa_find_matching_catch(0); var $41$1 = tempRet0;
 var $42=$41$0;
 ___clang_call_terminate($42);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[(($6)>>0)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[(($_01)>>0)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[(($9)>>0)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[(($_02)>>0)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[(($6)>>0)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[(($_02)>>0)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=(($_01+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01=$20;var $__i_02=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_02+4)|0);
 var $21=((($__i_01)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_01=$21;var $_02=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=13;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $12=(($__s)|0);
 var $13=HEAP8[(($12)>>0)];
 var $14=(($13<<24)>>24)==0;
 if($14){label=14;break;}else{label=4;break;}
 case 4: 
 var $16=HEAP32[(($1)>>2)];
 var $17=((($16)-(12))|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $_sum1=((($19)+(24))|0);
 var $20=(($6+$_sum1)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$22;
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 var $29=($28|0)==-1;
 if($29){label=6;break;}else{label=14;break;}
 case 6: 
 var $31=HEAP32[(($1)>>2)];
 var $32=((($31)-(12))|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($6+$34)|0);
 var $36=$35;
 var $_sum2=((($34)+(16))|0);
 var $37=(($6+$_sum2)|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=$39|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($36,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=8;break; }
 case 7: 
 var $42$0 = ___cxa_find_matching_catch(0); var $42$1 = tempRet0;
 var $43=$42$0;
 var $_0=$43;label=9;break;
 case 8: 
 var $45$0 = ___cxa_find_matching_catch(0); var $45$1 = tempRet0;
 var $46=$45$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$46;label=9;break;
 case 9: 
 var $_0;
 var $48=___cxa_begin_catch($_0);
 var $49=HEAP32[(($1)>>2)];
 var $50=((($49)-(12))|0);
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $_sum3=((($52)+(16))|0);
 var $53=(($6+$_sum3)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=$55|1;
 HEAP32[(($54)>>2)]=$56;
 var $_sum4=((($52)+(20))|0);
 var $57=(($6+$_sum4)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=$59&1;
 var $61=($60|0)==0;
 if($61){label=12;break;}else{label=10;break;}
 case 10: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 ___cxa_end_catch();
 label=13;break;
 case 13: 
 STACKTOP=sp;return;
 case 14: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=13;break;
 case 15: 
 var $65$0 = ___cxa_find_matching_catch(); var $65$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 ___resumeException($65$0)
 case 17: 
 var $68$0 = ___cxa_find_matching_catch(0); var $68$1 = tempRet0;
 var $69=$68$0;
 ___clang_call_terminate($69);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=14;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[(($12)>>0)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=15;break;}
 case 3: 
 var $_sum1_i=((($5)+(72))|0);
 var $19=(($6+$_sum1_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[(($12)>>0)]=1;
 var $25=HEAP32[(($1)>>2)];
 var $26=((($25)-(12))|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $_sum1=((($28)+(24))|0);
 var $29=(($6+$_sum1)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=$31;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+24)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $38=($37|0)==-1;
 if($38){label=7;break;}else{label=15;break;}
 case 7: 
 var $40=HEAP32[(($1)>>2)];
 var $41=((($40)-(12))|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($6+$43)|0);
 var $45=$44;
 var $_sum2=((($43)+(16))|0);
 var $46=(($6+$_sum2)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$48|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($45,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $51$0 = ___cxa_find_matching_catch(0); var $51$1 = tempRet0;
 var $52=$51$0;
 var $_0=$52;label=10;break;
 case 9: 
 var $54$0 = ___cxa_find_matching_catch(0); var $54$1 = tempRet0;
 var $55=$54$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$55;label=10;break;
 case 10: 
 var $_0;
 var $57=___cxa_begin_catch($_0);
 var $58=HEAP32[(($1)>>2)];
 var $59=((($58)-(12))|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $_sum3=((($61)+(16))|0);
 var $62=(($6+$_sum3)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64|1;
 HEAP32[(($63)>>2)]=$65;
 var $_sum4=((($61)+(20))|0);
 var $66=(($6+$_sum4)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&1;
 var $70=($69|0)==0;
 if($70){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $74$0 = ___cxa_find_matching_catch(); var $74$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($74$0)
 case 18: 
 var $77$0 = ___cxa_find_matching_catch(0); var $77$1 = tempRet0;
 var $78=$77$0;
 ___clang_call_terminate($78);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP8[(($1)>>0)]=0;
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$__os;
 var $3=$__os;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$__os;
 var $_sum=((($7)+(16))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=2;break;}else{label=5;break;}
 case 2: 
 var $_sum1=((($7)+(72))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($16);
 label=4;break;
 case 4: 
 HEAP8[(($1)>>0)]=1;
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 _free($7);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 3976;
}


function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)!=1;
 var $2=($ev|0)<257;
 var $or_cond=$1&$2;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_strerror($ev);
 var $5=_strlen($4);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,$4,$5);
 label=4;break;
 case 3: 
 var $7=__Znwj(48);
 var $8=(($agg_result+8)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=(($agg_result)|0);
 HEAP32[(($9)>>2)]=49;
 var $10=(($agg_result+4)|0);
 HEAP32[(($10)>>2)]=35;
 assert(35 % 1 === 0);(_memcpy($7, 4280, 35)|0);
 var $11=(($7+35)|0);
 HEAP8[(($11)>>0)]=0;
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;


 __ZNSt3__18ios_baseD2Ev($this);
 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17collateIcED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 return;
}


function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[(($_024)>>0)];
 var $5=HEAP8[(($_015)>>0)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;


 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg_result,$__lo,$__hi);
 return;
}


function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[(($__p_01)>>0)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;


 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg_result,$__lo,$__hi);
 return;
}


function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__lv=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $__names=(sp)+(32);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[(($__v)>>0)]=0;
 label=6;break;
 case 4: 
 HEAP8[(($__v)>>0)]=1;
 label=6;break;
 case 5: 
 HEAP8[(($__v)>>0)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=35;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $_idx13=(($29+8)|0);
 var $34=$_idx13;
 var $_idx13_val=HEAP32[(($34)>>2)];
 var $_idx14=(($29+12)|0);
 var $35=$_idx14;
 var $_idx14_val=HEAP32[(($35)>>2)];
 var $36=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx13_val,$_idx14_val,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $37=$36;
 var $38=(($29+4)|0);
 var $39=$38;
 var $40=(tempValue=HEAP32[(($39)>>2)],HEAP32[(($39)>>2)]=tempValue+-1,tempValue);
 var $41=($40|0)==0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$29;
 var $44=$29;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($43);
 label=11;break;
 case 11: 
 var $48=HEAP32[(($28)>>2)];
 var $49=(($48+4)|0);
 var $50=$49;
 var $51=(tempValue=HEAP32[(($50)>>2)],HEAP32[(($50)>>2)]=tempValue+1,tempValue);
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $_idx=(($48+8)|0);
 var $53=$_idx;
 var $_idx_val=HEAP32[(($53)>>2)];
 var $_idx12=(($48+12)|0);
 var $54=$_idx12;
 var $_idx12_val=HEAP32[(($54)>>2)];
 var $55=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx12_val,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 var $56=$55;
 var $57=(($48+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+-1,tempValue);
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$48;
 var $63=$48;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+8)|0);
 var $66=HEAP32[(($65)>>2)];
 FUNCTION_TABLE[$66]($62);
 label=15;break;
 case 15: 
 var $67=(($__names)|0);
 var $68=$55;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($67,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $_02=$67;label=26;break; }
 case 16: 
 var $72=(($__names+12)|0);
 var $73=HEAP32[(($68)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($72,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { var $_02=$72;label=26;break; }
 case 17: 
 var $76=(($__e)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($__names+24)|0);
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$77,$67,$78,$37,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=30;break; }
 case 18: 
 var $80=($79|0)==($67|0);
 var $81=($80&1);
 HEAP8[(($__v)>>0)]=$81;
 var $82=(($__b)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($agg_result)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=$72;
 var $86=HEAP8[(($85)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=20;break;}else{label=19;break;}
 case 19: 
 var $90=(($__names+20)|0);
 var $91=HEAP32[(($90)>>2)];
 _free($91);
 label=20;break;
 case 20: 
 var $92=$__names;
 var $93=HEAP8[(($92)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=35;break;}else{label=21;break;}
 case 21: 
 var $97=(($__names+8)|0);
 var $98=HEAP32[(($97)>>2)];
 _free($98);
 label=35;break;
 case 22: 
 var $100$0 = ___cxa_find_matching_catch(); var $100$1 = tempRet0;
 var $101=$100$0;
 var $102=$100$1;
 var $103=(($29+4)|0);
 var $104=$103;
 var $105=(tempValue=HEAP32[(($104)>>2)],HEAP32[(($104)>>2)]=tempValue+-1,tempValue);
 var $106=($105|0)==0;
 if($106){label=23;break;}else{var $_0=$101;var $_01=$102;label=36;break;}
 case 23: 
 var $108=$29;
 var $109=$29;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+8)|0);
 var $112=HEAP32[(($111)>>2)];
 FUNCTION_TABLE[$112]($108);
 var $_0=$101;var $_01=$102;label=36;break;
 case 24: 
 var $114$0 = ___cxa_find_matching_catch(); var $114$1 = tempRet0;
 var $115=$114$0;
 var $116=$114$1;
 var $117=(($48+4)|0);
 var $118=$117;
 var $119=(tempValue=HEAP32[(($118)>>2)],HEAP32[(($118)>>2)]=tempValue+-1,tempValue);
 var $120=($119|0)==0;
 if($120){label=25;break;}else{var $_0=$115;var $_01=$116;label=36;break;}
 case 25: 
 var $122=$48;
 var $123=$48;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+8)|0);
 var $126=HEAP32[(($125)>>2)];
 FUNCTION_TABLE[$126]($122);
 var $_0=$115;var $_01=$116;label=36;break;
 case 26: 
 var $_02;
 var $128$0 = ___cxa_find_matching_catch(); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $131=($67|0)==($_02|0);
 if($131){var $_0=$129;var $_01=$130;label=36;break;}else{var $132=$_02;label=27;break;}
 case 27: 
 var $132;
 var $133=((($132)-(12))|0);
 var $134=$133;
 var $135=HEAP8[(($134)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=29;break;}else{label=28;break;}
 case 28: 
 var $139=((($132)-(12)+8)|0);
 var $140=HEAP32[(($139)>>2)];
 _free($140);
 label=29;break;
 case 29: 
 var $141=($133|0)==($67|0);
 if($141){var $_0=$129;var $_01=$130;label=36;break;}else{var $132=$133;label=27;break;}
 case 30: 
 var $142$0 = ___cxa_find_matching_catch(); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$72;
 var $145=HEAP8[(($144)>>0)];
 var $146=$145&1;
 var $147=(($146<<24)>>24)==0;
 if($147){label=32;break;}else{label=31;break;}
 case 31: 
 var $149=(($__names+20)|0);
 var $150=HEAP32[(($149)>>2)];
 _free($150);
 label=32;break;
 case 32: 
 var $151=$__names;
 var $152=HEAP8[(($151)>>0)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=34;break;}else{label=33;break;}
 case 33: 
 var $156=(($__names+8)|0);
 var $157=HEAP32[(($156)>>2)];
 _free($157);
 label=34;break;
 case 34: 
 var $158=$142$1;
 var $_0=$143;var $_01=$158;label=36;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $_01;
 var $_0;
 var $159$0=$_0;
 var $159$1=0;
 var $160$0=$159$0;
 var $160$1=$_01;
 ___resumeException($160$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $161$0=$161$r;var $161$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$161$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$161$1;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP16[(($__v)>>1)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$161;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[(($7)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre28_i=$__buf_i;
 var $_pre29_i=(($_pre28_i+1)|0);
 var $26=$22;var $_pre_phi30_i=$_pre29_i;var $_pre_phi32_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre31_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi30_i=$25;var $_pre_phi32_i=$_pre31_i;label=9;break;
 case 9: 
 var $_pre_phi32_i;
 var $_pre_phi30_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=50;break;}
 case 21: 
 var $_sroa_06_2;
 var $62=HEAP32[(($__a_end_i)>>2)];
 var $63=HEAP8[(($7)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($30)>>2)];
 var $71=$67;label=24;break;
 case 23: 
 var $69=($63&255);
 var $70=$69>>>1;
 var $71=$70;label=24;break;
 case 24: 
 var $71;
 var $72=(($__a_0_i+$71)|0);
 var $73=($62|0)==($72|0);
 if($73){label=25;break;}else{var $__a_1_i=$__a_0_i;label=42;break;}
 case 25: 
 if($65){label=27;break;}else{label=26;break;}
 case 26: 
 var $76=HEAP32[(($30)>>2)];
 var $80=$76;label=28;break;
 case 27: 
 var $78=($63&255);
 var $79=$78>>>1;
 var $80=$79;label=28;break;
 case 28: 
 var $80;
 var $81=$80<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $82=HEAP8[(($7)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){var $88=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $86=HEAP32[(($29)>>2)];
 var $87=$86&-2;
 var $phitmp_i19_i=((($87)-(1))|0);
 var $88=$phitmp_i19_i;label=31;break;
 case 31: 
 var $88;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $89=HEAP8[(($7)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){var $94=$_pre_phi30_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $93=HEAP32[(($_pre_phi32_i)>>2)];
 var $94=$93;label=34;break;
 case 34: 
 var $94;
 var $95=(($94+$80)|0);
 HEAP32[(($__a_end_i)>>2)]=$95;
 var $__a_1_i=$94;label=42;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=39;break;}else{label=38;break;}
 case 38: 
 var $101=(($__buf_i+8)|0);
 var $102=HEAP32[(($101)>>2)];
 _free($102);
 label=39;break;
 case 39: 
 var $103=HEAP8[(($6)>>0)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=41;break;}else{label=40;break;}
 case 40: 
 var $107=(($__grouping_i+8)|0);
 var $108=HEAP32[(($107)>>2)];
 _free($108);
 label=41;break;
 case 41: 
 ___resumeException($lpad_phi_i$0)
 case 42: 
 var $__a_1_i;
 var $110=(($45+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($45+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=43;break;}else{label=45;break;}
 case 43: 
 var $116=$45;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=35;break; }
 case 44: 
 var $extract_t_i_i=(($120)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=46;break;
 case 45: 
 var $122=HEAP8[(($111)>>0)];
 var $_0_i_off0_i_i=$122;label=46;break;
 case 46: 
 var $_0_i_off0_i_i;
 var $124=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $125=($124|0)==0;
 if($125){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $127=HEAP32[(($110)>>2)];
 var $128=HEAP32[(($112)>>2)];
 var $129=($127|0)==($128|0);
 if($129){label=48;break;}else{label=49;break;}
 case 48: 
 var $131=$45;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+40)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$134]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 49: 
 var $137=(($127+1)|0);
 HEAP32[(($110)>>2)]=$137;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $139=HEAP8[(($6)>>0)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=52;break;}else{label=51;break;}
 case 51: 
 var $143=(($__grouping_i+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $148=$144;label=53;break;
 case 52: 
 var $146=($139&255);
 var $147=$146>>>1;
 var $148=$147;label=53;break;
 case 53: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=56;break;}else{label=54;break;}
 case 54: 
 var $151=HEAP32[(($__g_end_i)>>2)];
 var $152=$151;
 var $153=$__g_i;
 var $154=((($152)-($153))|0);
 var $155=($154|0)<160;
 if($155){label=55;break;}else{label=56;break;}
 case 55: 
 var $157=HEAP32[(($__dc_i)>>2)];
 var $158=(($151+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$158;
 HEAP32[(($151)>>2)]=$157;
 label=56;break;
 case 56: 
 var $160=HEAP32[(($__a_end_i)>>2)];
 var $161$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$160,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $161$0=$161$r;var $161$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=36;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$161$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$161$1;
 var $163=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$163,$__err);
 if($46){var $176=0;label=61;break;}else{label=58;break;}
 case 58: 
 var $165=(($45+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($45+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=59;break;}else{var $176=$45;label=61;break;}
 case 59: 
 var $170=$45;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=36;break; }
 case 60: 
 var $175=($174|0)==-1;
 var $_=($175?0:$45);
 var $176=$_;label=61;break;
 case 61: 
 var $176;
 var $177=($176|0)==0;
 var $178=($_pre_i2_i_i_i|0)==0;
 if($178){label=66;break;}else{label=62;break;}
 case 62: 
 var $180=(($_pre_i2_i_i_i+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($_pre_i2_i_i_i+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=64;break;}else{label=63;break;}
 case 63: 
 if($177){label=69;break;}else{label=68;break;}
 case 64: 
 var $185=$_pre_i2_i_i_i;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=36;break; }
 case 65: 
 var $190=($189|0)==-1;
 if($190){label=66;break;}else{label=67;break;}
 case 66: 
 if($177){label=68;break;}else{label=69;break;}
 case 67: 
 if($177){label=69;break;}else{label=68;break;}
 case 68: 
 var $192=HEAP32[(($__err)>>2)];
 var $193=$192|2;
 HEAP32[(($__err)>>2)]=$193;
 label=69;break;
 case 69: 
 var $195=(($agg_result)|0);
 HEAP32[(($195)>>2)]=$176;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $196=HEAP8[(($7)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=71;break;}else{label=70;break;}
 case 70: 
 var $200=(($__buf_i+8)|0);
 var $201=HEAP32[(($200)>>2)];
 _free($201);
 label=71;break;
 case 71: 
 var $202=HEAP8[(($6)>>0)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=73;break;}else{label=72;break;}
 case 72: 
 var $206=(($__grouping_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 _free($207);
 label=73;break;
 case 73: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF32[(($__v)>>2)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[(($7)>>0)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre29_i=$__buf_i;
 var $_pre30_i=(($_pre29_i+1)|0);
 var $20=$16;var $_pre_phi31_i=$_pre30_i;var $_pre_phi33_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre32_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi31_i=$19;var $_pre_phi33_i=$_pre32_i;label=5;break;
 case 5: 
 var $_pre_phi33_i;
 var $_pre_phi31_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[(($__decimal_point_i)>>0)];
 var $26=HEAP8[(($__thousands_sep_i)>>0)];
 var $__a_0_i=$20;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i5_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i5_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i5_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i5_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i5_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i5_i=($39?0:$_pre_i_i_i5_i);
 var $40=$__pre_i_i_i5_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=46;break;}
 case 17: 
 var $_sroa_06_2;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=HEAP8[(($7)>>0)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=19;break;}else{label=18;break;}
 case 18: 
 var $62=HEAP32[(($24)>>2)];
 var $66=$62;label=20;break;
 case 19: 
 var $64=($58&255);
 var $65=$64>>>1;
 var $66=$65;label=20;break;
 case 20: 
 var $66;
 var $67=(($__a_0_i+$66)|0);
 var $68=($57|0)==($67|0);
 if($68){label=21;break;}else{var $__a_1_i=$__a_0_i;label=38;break;}
 case 21: 
 if($60){label=23;break;}else{label=22;break;}
 case 22: 
 var $71=HEAP32[(($24)>>2)];
 var $75=$71;label=24;break;
 case 23: 
 var $73=($58&255);
 var $74=$73>>>1;
 var $75=$74;label=24;break;
 case 24: 
 var $75;
 var $76=$75<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $77=HEAP8[(($7)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){var $83=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $81=HEAP32[(($23)>>2)];
 var $82=$81&-2;
 var $phitmp_i20_i=((($82)-(1))|0);
 var $83=$phitmp_i20_i;label=27;break;
 case 27: 
 var $83;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $84=HEAP8[(($7)>>0)];
 var $85=$84&1;
 var $86=(($85<<24)>>24)==0;
 if($86){var $89=$_pre_phi31_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($_pre_phi33_i)>>2)];
 var $89=$88;label=30;break;
 case 30: 
 var $89;
 var $90=(($89+$75)|0);
 HEAP32[(($__a_end_i)>>2)]=$90;
 var $__a_1_i=$89;label=38;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $92=HEAP8[(($7)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=35;break;}else{label=34;break;}
 case 34: 
 var $96=(($__buf_i+8)|0);
 var $97=HEAP32[(($96)>>2)];
 _free($97);
 label=35;break;
 case 35: 
 var $98=HEAP8[(($6)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=37;break;}else{label=36;break;}
 case 36: 
 var $102=(($__grouping_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 _free($103);
 label=37;break;
 case 37: 
 ___resumeException($lpad_phi_i$0)
 case 38: 
 var $__a_1_i;
 var $105=(($40+12)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($40+16)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($106|0)==($108|0);
 if($109){label=39;break;}else{label=41;break;}
 case 39: 
 var $111=$40;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=31;break; }
 case 40: 
 var $extract_t_i_i=(($115)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=42;break;
 case 41: 
 var $117=HEAP8[(($106)>>0)];
 var $_0_i_off0_i_i=$117;label=42;break;
 case 42: 
 var $_0_i_off0_i_i;
 var $119=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $120=($119|0)==0;
 if($120){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $122=HEAP32[(($105)>>2)];
 var $123=HEAP32[(($107)>>2)];
 var $124=($122|0)==($123|0);
 if($124){label=44;break;}else{label=45;break;}
 case 44: 
 var $126=$40;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+40)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$129]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 45: 
 var $132=(($122+1)|0);
 HEAP32[(($105)>>2)]=$132;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $134=HEAP8[(($6)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=48;break;}else{label=47;break;}
 case 47: 
 var $138=(($__grouping_i+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=49;break;
 case 48: 
 var $141=($134&255);
 var $142=$141>>>1;
 var $143=$142;label=49;break;
 case 49: 
 var $143;
 var $144=($143|0)==0;
 var $145=HEAP8[(($__in_units_i)>>0)];
 var $146=(($145<<24)>>24)==0;
 var $or_cond_i=$144|$146;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $148=HEAP32[(($__g_end_i)>>2)];
 var $149=$148;
 var $150=$__g_i;
 var $151=((($149)-($150))|0);
 var $152=($151|0)<160;
 if($152){label=51;break;}else{label=52;break;}
 case 51: 
 var $154=HEAP32[(($__dc_i)>>2)];
 var $155=(($148+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$155;
 HEAP32[(($148)>>2)]=$154;
 label=52;break;
 case 52: 
 var $157=HEAP32[(($__a_end_i)>>2)];
 var $158=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$157,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=32;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$158;
 var $160=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$160,$__err);
 if($41){var $173=0;label=57;break;}else{label=54;break;}
 case 54: 
 var $162=(($40+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($40+16)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($163|0)==($165|0);
 if($166){label=55;break;}else{var $173=$40;label=57;break;}
 case 55: 
 var $167=$40;
 var $168=HEAP32[(($167)>>2)];
 var $169=(($168+36)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 var $172=($171|0)==-1;
 var $_=($172?0:$40);
 var $173=$_;label=57;break;
 case 57: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i_i|0)==0;
 if($175){label=62;break;}else{label=58;break;}
 case 58: 
 var $177=(($_pre_i2_i_i_i+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i_i+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=60;break;}else{label=59;break;}
 case 59: 
 if($174){label=65;break;}else{label=64;break;}
 case 60: 
 var $182=$_pre_i2_i_i_i;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=32;break; }
 case 61: 
 var $187=($186|0)==-1;
 if($187){label=62;break;}else{label=63;break;}
 case 62: 
 if($174){label=64;break;}else{label=65;break;}
 case 63: 
 if($174){label=65;break;}else{label=64;break;}
 case 64: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=65;break;
 case 65: 
 var $192=(($agg_result)|0);
 HEAP32[(($192)>>2)]=$173;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $193=HEAP8[(($7)>>0)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=67;break;}else{label=66;break;}
 case 66: 
 var $197=(($__buf_i+8)|0);
 var $198=HEAP32[(($197)>>2)];
 _free($198);
 label=67;break;
 case 67: 
 var $199=HEAP8[(($6)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=69;break;}else{label=68;break;}
 case 68: 
 var $203=(($__grouping_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 label=69;break;
 case 69: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__grouping=(sp)+(32);
 var $__buf=(sp)+(48);
 var $__a_end=(sp)+(64);
 var $__g=(sp)+(72);
 var $__g_end=(sp)+(232);
 var $__dc=(sp)+(240);
 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=38;break; }
 case 3: 
 var $10=$9;
 var $11=(($__atoms)|0);
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+32)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($10,14232,14258,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=38;break; }
 case 4: 
 var $17=(($2+4)|0);
 var $18=$17;
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=$2;
 var $23=$2;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+8)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($22);
 label=6;break;
 case 6: 
 var $this2_i_i_i5=$__buf;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 var $27=HEAP8[(($this2_i_i_i5)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($__buf+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $36=$32;var $_pre_phi35=$_pre34;var $_pre_phi37=$31;label=10;break;
 case 9: 
 var $34=$__buf;
 var $35=(($34+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $36=$35;var $_pre_phi35=$35;var $_pre_phi37=$_pre36;label=10;break;
 case 10: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $36;
 HEAP32[(($__a_end)>>2)]=$36;
 var $37=$__g;
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 var $38=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$38;
 HEAP32[(($__dc)>>2)]=0;
 var $39=(($__b)|0);
 var $40=(($__e)|0);
 var $41=(($__buf)|0);
 var $42=(($__buf+4)|0);
 var $_pre=HEAP32[(($39)>>2)];
 var $__a_0=$36;var $_pre_i_i_i8=$_pre;label=11;break;
 case 11: 
 var $_pre_i_i_i8;
 var $__a_0;
 var $43=($_pre_i_i_i8|0)==0;
 if($43){var $57=0;label=16;break;}else{label=12;break;}
 case 12: 
 var $45=(($_pre_i_i_i8+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($_pre_i_i_i8+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=13;break;}else{var $57=$_pre_i_i_i8;label=16;break;}
 case 13: 
 var $50=$_pre_i_i_i8;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($_pre_i_i_i8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=40;break; }
 case 14: 
 var $55=($54|0)==-1;
 if($55){label=15;break;}else{var $57=$_pre_i_i_i8;label=16;break;}
 case 15: 
 HEAP32[(($39)>>2)]=0;
 var $57=0;label=16;break;
 case 16: 
 var $57;
 var $58=($57|0)==0;
 var $59=HEAP32[(($40)>>2)];
 var $60=($59|0)==0;
 if($60){label=22;break;}else{label=17;break;}
 case 17: 
 var $62=(($59+12)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($59+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($63|0)==($65|0);
 if($66){label=19;break;}else{label=18;break;}
 case 18: 
 if($58){var $76=$59;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$59;label=52;break;}
 case 19: 
 var $67=$59;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+36)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=40;break; }
 case 20: 
 var $72=($71|0)==-1;
 if($72){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($40)>>2)]=0;
 label=22;break;
 case 22: 
 if($58){var $__a_2=$__a_0;var $_pre_i2_i_i=0;label=52;break;}else{var $76=0;label=24;break;}
 case 23: 
 if($58){var $76=$59;label=24;break;}else{var $__a_2=$__a_0;var $_pre_i2_i_i=$59;label=52;break;}
 case 24: 
 var $76;
 var $77=HEAP32[(($__a_end)>>2)];
 var $78=HEAP8[(($this2_i_i_i5)>>0)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=26;break;}else{label=25;break;}
 case 25: 
 var $82=HEAP32[(($42)>>2)];
 var $86=$82;label=27;break;
 case 26: 
 var $84=($78&255);
 var $85=$84>>>1;
 var $86=$85;label=27;break;
 case 27: 
 var $86;
 var $87=(($__a_0+$86)|0);
 var $88=($77|0)==($87|0);
 if($88){label=28;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 28: 
 if($80){label=30;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($42)>>2)];
 var $95=$91;label=31;break;
 case 30: 
 var $93=($78&255);
 var $94=$93>>>1;
 var $95=$94;label=31;break;
 case 31: 
 var $95;
 var $96=$95<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $97=HEAP8[(($this2_i_i_i5)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $103=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $101=HEAP32[(($41)>>2)];
 var $102=$101&-2;
 var $phitmp_i24=((($102)-(1))|0);
 var $103=$phitmp_i24;label=34;break;
 case 34: 
 var $103;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $104=HEAP8[(($this2_i_i_i5)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){var $109=$_pre_phi35;label=37;break;}else{label=36;break;}
 case 36: 
 var $108=HEAP32[(($_pre_phi37)>>2)];
 var $109=$108;label=37;break;
 case 37: 
 var $109;
 var $110=(($109+$95)|0);
 HEAP32[(($__a_end)>>2)]=$110;
 var $__a_1=$109;label=44;break;
 case 38: 
 var $112$0 = ___cxa_find_matching_catch(); var $112$1 = tempRet0;
 var $113=$112$0;
 var $114=$112$1;
 var $115=(($2+4)|0);
 var $116=$115;
 var $117=(tempValue=HEAP32[(($116)>>2)],HEAP32[(($116)>>2)]=tempValue+-1,tempValue);
 var $118=($117|0)==0;
 if($118){label=39;break;}else{var $_0=$113;var $_01=$114;label=78;break;}
 case 39: 
 var $120=$2;
 var $121=$2;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+8)|0);
 var $124=HEAP32[(($123)>>2)];
 FUNCTION_TABLE[$124]($120);
 var $_0=$113;var $_01=$114;label=78;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $126=$lpad_phi$0;
 var $127=$lpad_phi$1;
 var $128=HEAP8[(($this2_i_i_i5)>>0)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $_0=$126;var $_01=$127;label=78;break;}else{label=43;break;}
 case 43: 
 var $132=(($__buf+8)|0);
 var $133=HEAP32[(($132)>>2)];
 _free($133);
 var $_0=$126;var $_01=$127;label=78;break;
 case 44: 
 var $__a_1;
 var $135=(($57+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($57+16)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($136|0)==($138|0);
 if($139){label=45;break;}else{label=47;break;}
 case 45: 
 var $141=$57;
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+36)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=40;break; }
 case 46: 
 var $extract_t_i=(($145)&255);
 var $_0_i_off0_i=$extract_t_i;label=48;break;
 case 47: 
 var $147=HEAP8[(($136)>>0)];
 var $_0_i_off0_i=$147;label=48;break;
 case 48: 
 var $_0_i_off0_i;
 var $149=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$38,$__g_end,$11);
 var $150=($149|0)==0;
 if($150){label=49;break;}else{var $__a_2=$__a_1;var $_pre_i2_i_i=$76;label=52;break;}
 case 49: 
 var $152=HEAP32[(($135)>>2)];
 var $153=HEAP32[(($137)>>2)];
 var $154=($152|0)==($153|0);
 if($154){label=50;break;}else{label=51;break;}
 case 50: 
 var $156=$57;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+40)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i8=$57;label=11;break; } else { label=40;break; }
 case 51: 
 var $162=(($152+1)|0);
 HEAP32[(($135)>>2)]=$162;
 var $__a_0=$__a_1;var $_pre_i_i_i8=$57;label=11;break;
 case 52: 
 var $_pre_i2_i_i;
 var $__a_2;
 var $164=HEAP32[(($__a_end)>>2)];
 var $165=$164;
 var $166=$__a_2;
 var $167=((($165)-($166))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=41;break; }
 case 53: 
 var $168=HEAP8[(($this2_i_i_i5)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){var $173=$_pre_phi35;label=55;break;}else{label=54;break;}
 case 54: 
 var $172=HEAP32[(($_pre_phi37)>>2)];
 var $173=$172;label=55;break;
 case 55: 
 var $173;
 var $174=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=41;break; }
 case 56: 
 var $176=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($173,$174,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $178=($176|0)==1;
 if($178){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 if($58){var $194=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $182=(($57+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($57+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=61;break;}else{var $194=$57;label=64;break;}
 case 61: 
 var $187=$57;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+36)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$190]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $192=($191|0)==-1;
 if($192){label=63;break;}else{var $194=$57;label=64;break;}
 case 63: 
 HEAP32[(($39)>>2)]=0;
 var $194=0;label=64;break;
 case 64: 
 var $194;
 var $195=($194|0)==0;
 var $196=($_pre_i2_i_i|0)==0;
 if($196){label=70;break;}else{label=65;break;}
 case 65: 
 var $198=(($_pre_i2_i_i+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($_pre_i2_i_i+16)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($199|0)==($201|0);
 if($202){label=67;break;}else{label=66;break;}
 case 66: 
 if($195){label=73;break;}else{label=72;break;}
 case 67: 
 var $203=$_pre_i2_i_i;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+36)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$206]($_pre_i2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $208=($207|0)==-1;
 if($208){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($40)>>2)]=0;
 label=70;break;
 case 70: 
 if($195){label=72;break;}else{label=73;break;}
 case 71: 
 if($195){label=73;break;}else{label=72;break;}
 case 72: 
 var $211=HEAP32[(($__err)>>2)];
 var $212=$211|2;
 HEAP32[(($__err)>>2)]=$212;
 label=73;break;
 case 73: 
 var $214=(($agg_result)|0);
 HEAP32[(($214)>>2)]=$194;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $215=HEAP8[(($this2_i_i_i5)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=75;break;}else{label=74;break;}
 case 74: 
 var $219=(($__buf+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=75;break;
 case 75: 
 var $221=HEAP8[(($this2_i_i_i)>>0)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=77;break;}else{label=76;break;}
 case 76: 
 var $225=(($__grouping+8)|0);
 var $226=HEAP32[(($225)>>2)];
 _free($226);
 label=77;break;
 case 77: 
 STACKTOP=sp;return;
 case 78: 
 var $_01;
 var $_0;
 var $227=HEAP8[(($this2_i_i_i)>>0)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=80;break;}else{label=79;break;}
 case 79: 
 var $231=(($__grouping+8)|0);
 var $232=HEAP32[(($231)>>2)];
 _free($232);
 label=80;break;
 case 80: 
 var $233$0=$_0;
 var $233$1=0;
 var $234$0=$233$0;
 var $234$1=$_01;
 ___resumeException($234$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[(($4)>>0)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[(($8)>>0)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[(($__a)>>0)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[(($15)>>0)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP8[(($_01_i)>>0)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_01_i+1)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[(($61)>>0)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((14232+$47)|0);
 var $66=HEAP8[(($65)>>0)];
 var $67=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$67;
 HEAP8[(($1)>>0)]=$66;
 var $_0=0;label=23;break;
 case 22: 
 var $69=((14232+$47)|0);
 var $70=HEAP8[(($69)>>0)];
 var $71=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$71;
 HEAP8[(($1)>>0)]=$70;
 var $72=HEAP32[(($__dc)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($__dc)>>2)]=$73;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16__clocEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18448)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18448);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1048,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 HEAP32[((16320)>>2)]=$7;

 label=5;break;
 case 5: 
 var $10=HEAP32[((16320)>>2)];
 return $10;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(); var $12$1 = tempRet0;

 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__lv=sp;
 var $1=(sp)+(8);
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $__names=(sp)+(32);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[(($__v)>>0)]=0;
 label=6;break;
 case 4: 
 HEAP8[(($__v)>>0)]=1;
 label=6;break;
 case 5: 
 HEAP8[(($__v)>>0)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=35;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $_idx13=(($29+8)|0);
 var $34=$_idx13;
 var $_idx13_val=HEAP32[(($34)>>2)];
 var $_idx14=(($29+12)|0);
 var $35=$_idx14;
 var $_idx14_val=HEAP32[(($35)>>2)];
 var $36=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx13_val,$_idx14_val,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $37=$36;
 var $38=(($29+4)|0);
 var $39=$38;
 var $40=(tempValue=HEAP32[(($39)>>2)],HEAP32[(($39)>>2)]=tempValue+-1,tempValue);
 var $41=($40|0)==0;
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=$29;
 var $44=$29;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($43);
 label=11;break;
 case 11: 
 var $48=HEAP32[(($28)>>2)];
 var $49=(($48+4)|0);
 var $50=$49;
 var $51=(tempValue=HEAP32[(($50)>>2)],HEAP32[(($50)>>2)]=tempValue+1,tempValue);
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $_idx=(($48+8)|0);
 var $53=$_idx;
 var $_idx_val=HEAP32[(($53)>>2)];
 var $_idx12=(($48+12)|0);
 var $54=$_idx12;
 var $_idx12_val=HEAP32[(($54)>>2)];
 var $55=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx12_val,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=24;break; }
 case 13: 
 var $56=$55;
 var $57=(($48+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+-1,tempValue);
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=15;break;}
 case 14: 
 var $62=$48;
 var $63=$48;
 var $64=HEAP32[(($63)>>2)];
 var $65=(($64+8)|0);
 var $66=HEAP32[(($65)>>2)];
 FUNCTION_TABLE[$66]($62);
 label=15;break;
 case 15: 
 var $67=(($__names)|0);
 var $68=$55;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+24)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($67,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $_02=$67;label=26;break; }
 case 16: 
 var $72=(($__names+12)|0);
 var $73=HEAP32[(($68)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($72,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { var $_02=$72;label=26;break; }
 case 17: 
 var $76=(($__e)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($__names+24)|0);
 var $79=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$77,$67,$78,$37,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=30;break; }
 case 18: 
 var $80=($79|0)==($67|0);
 var $81=($80&1);
 HEAP8[(($__v)>>0)]=$81;
 var $82=(($__b)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($agg_result)|0);
 HEAP32[(($84)>>2)]=$83;
 var $85=$72;
 var $86=HEAP8[(($85)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=20;break;}else{label=19;break;}
 case 19: 
 var $90=(($__names+20)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91;
 _free($92);
 label=20;break;
 case 20: 
 var $93=$__names;
 var $94=HEAP8[(($93)>>0)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=35;break;}else{label=21;break;}
 case 21: 
 var $98=(($__names+8)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=$99;
 _free($100);
 label=35;break;
 case 22: 
 var $102$0 = ___cxa_find_matching_catch(); var $102$1 = tempRet0;
 var $103=$102$0;
 var $104=$102$1;
 var $105=(($29+4)|0);
 var $106=$105;
 var $107=(tempValue=HEAP32[(($106)>>2)],HEAP32[(($106)>>2)]=tempValue+-1,tempValue);
 var $108=($107|0)==0;
 if($108){label=23;break;}else{var $_0=$103;var $_01=$104;label=36;break;}
 case 23: 
 var $110=$29;
 var $111=$29;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($110);
 var $_0=$103;var $_01=$104;label=36;break;
 case 24: 
 var $116$0 = ___cxa_find_matching_catch(); var $116$1 = tempRet0;
 var $117=$116$0;
 var $118=$116$1;
 var $119=(($48+4)|0);
 var $120=$119;
 var $121=(tempValue=HEAP32[(($120)>>2)],HEAP32[(($120)>>2)]=tempValue+-1,tempValue);
 var $122=($121|0)==0;
 if($122){label=25;break;}else{var $_0=$117;var $_01=$118;label=36;break;}
 case 25: 
 var $124=$48;
 var $125=$48;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+8)|0);
 var $128=HEAP32[(($127)>>2)];
 FUNCTION_TABLE[$128]($124);
 var $_0=$117;var $_01=$118;label=36;break;
 case 26: 
 var $_02;
 var $130$0 = ___cxa_find_matching_catch(); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $133=($67|0)==($_02|0);
 if($133){var $_0=$131;var $_01=$132;label=36;break;}else{var $134=$_02;label=27;break;}
 case 27: 
 var $134;
 var $135=((($134)-(12))|0);
 var $136=$135;
 var $137=HEAP8[(($136)>>0)];
 var $138=$137&1;
 var $139=(($138<<24)>>24)==0;
 if($139){label=29;break;}else{label=28;break;}
 case 28: 
 var $141=((($134)-(12)+8)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=$142;
 _free($143);
 label=29;break;
 case 29: 
 var $144=($135|0)==($67|0);
 if($144){var $_0=$131;var $_01=$132;label=36;break;}else{var $134=$135;label=27;break;}
 case 30: 
 var $145$0 = ___cxa_find_matching_catch(); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$72;
 var $148=HEAP8[(($147)>>0)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=32;break;}else{label=31;break;}
 case 31: 
 var $152=(($__names+20)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153;
 _free($154);
 label=32;break;
 case 32: 
 var $155=$__names;
 var $156=HEAP8[(($155)>>0)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=34;break;}else{label=33;break;}
 case 33: 
 var $160=(($__names+8)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=$161;
 _free($162);
 label=34;break;
 case 34: 
 var $163=$145$1;
 var $_0=$146;var $_01=$163;label=36;break;
 case 35: 
 STACKTOP=sp;return;
 case 36: 
 var $_01;
 var $_0;
 var $164$0=$_0;
 var $164$1=0;
 var $165$0=$164$0;
 var $165$1=$_01;
 ___resumeException($165$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $169$0=$169$r;var $169$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$169$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$169$1;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP16[(($__v)>>1)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 HEAP32[(($__v)>>2)]=$169;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[(($7)>>0)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $28=$24;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi33_i=$27;var $_pre_phi35_i=$_pre34_i;label=9;break;
 case 9: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=50;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=50;break;}
 case 22: 
 var $_sroa_06_2;
 var $70=HEAP32[(($__a_end_i)>>2)];
 var $71=HEAP8[(($7)>>0)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=HEAP32[(($32)>>2)];
 var $79=$75;label=25;break;
 case 24: 
 var $77=($71&255);
 var $78=$77>>>1;
 var $79=$78;label=25;break;
 case 25: 
 var $79;
 var $80=(($__a_0_i+$79)|0);
 var $81=($70|0)==($80|0);
 if($81){label=26;break;}else{var $__a_1_i=$__a_0_i;label=43;break;}
 case 26: 
 if($73){label=28;break;}else{label=27;break;}
 case 27: 
 var $84=HEAP32[(($32)>>2)];
 var $88=$84;label=29;break;
 case 28: 
 var $86=($71&255);
 var $87=$86>>>1;
 var $88=$87;label=29;break;
 case 29: 
 var $88;
 var $89=$88<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $90=HEAP8[(($7)>>0)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $96=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $94=HEAP32[(($31)>>2)];
 var $95=$94&-2;
 var $phitmp_i23_i=((($95)-(1))|0);
 var $96=$phitmp_i23_i;label=32;break;
 case 32: 
 var $96;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $97=HEAP8[(($7)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $102=$_pre_phi33_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $101=HEAP32[(($_pre_phi35_i)>>2)];
 var $102=$101;label=35;break;
 case 35: 
 var $102;
 var $103=(($102+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$103;
 var $__a_1_i=$102;label=43;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $105=HEAP8[(($7)>>0)];
 var $106=$105&1;
 var $107=(($106<<24)>>24)==0;
 if($107){label=40;break;}else{label=39;break;}
 case 39: 
 var $109=(($__buf_i+8)|0);
 var $110=HEAP32[(($109)>>2)];
 _free($110);
 label=40;break;
 case 40: 
 var $111=HEAP8[(($6)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=42;break;}else{label=41;break;}
 case 41: 
 var $115=(($__grouping_i+8)|0);
 var $116=HEAP32[(($115)>>2)];
 _free($116);
 label=42;break;
 case 42: 
 ___resumeException($lpad_phi_i$0)
 case 43: 
 var $__a_1_i;
 var $118=(($50+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($50+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=44;break;}else{label=45;break;}
 case 44: 
 var $124=$50;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=46;break; } else { label=36;break; }
 case 45: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=46;break;
 case 46: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $133=($132|0)==0;
 if($133){label=47;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=50;break;}
 case 47: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=48;break;}else{label=49;break;}
 case 48: 
 var $139=$50;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 49: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 50: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[(($6)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=52;break;}else{label=51;break;}
 case 51: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=53;break;
 case 52: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=53;break;
 case 53: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=56;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($__g_end_i)>>2)];
 var $160=$159;
 var $161=$__g_i;
 var $162=((($160)-($161))|0);
 var $163=($162|0)<160;
 if($163){label=55;break;}else{label=56;break;}
 case 55: 
 var $165=HEAP32[(($__dc_i)>>2)];
 var $166=(($159+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$166;
 HEAP32[(($159)>>2)]=$165;
 label=56;break;
 case 56: 
 var $168=HEAP32[(($__a_end_i)>>2)];
 var $169$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$168,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $169$0=$169$r;var $169$1=tempRet0;if (!__THREW__) { label=57;break; } else { label=37;break; }
 case 57: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$169$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$169$1;
 var $171=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$171,$__err);
 var $172=($50|0)==0;
 if($172){var $189=1;var $188=0;label=62;break;}else{label=58;break;}
 case 58: 
 var $174=(($50+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($50+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($175|0)==($177|0);
 if($178){label=59;break;}else{label=60;break;}
 case 59: 
 var $180=$50;
 var $181=HEAP32[(($180)>>2)];
 var $182=(($181+36)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$183]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$184;label=61;break; } else { label=37;break; }
 case 60: 
 var $186=HEAP32[(($175)>>2)];
 var $_0_i_i_i_i_i=$186;label=61;break;
 case 61: 
 var $_0_i_i_i_i_i;
 var $187=($_0_i_i_i_i_i|0)==-1;
 var $_7=($187?0:$50);
 var $_8=($187?1:0);
 var $189=$_8;var $188=$_7;label=62;break;
 case 62: 
 var $188;
 var $189;
 var $190=($_pre_i3_i_i_i|0)==0;
 if($190){label=67;break;}else{label=63;break;}
 case 63: 
 var $192=(($_pre_i3_i_i_i+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(($_pre_i3_i_i_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($193|0)==($195|0);
 if($196){label=64;break;}else{label=65;break;}
 case 64: 
 var $198=$_pre_i3_i_i_i;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+36)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$202;label=66;break; } else { label=37;break; }
 case 65: 
 var $204=HEAP32[(($193)>>2)];
 var $_0_i_i1_i_i_i=$204;label=66;break;
 case 66: 
 var $_0_i_i1_i_i_i;
 var $205=($_0_i_i1_i_i_i|0)==-1;
 if($205){label=67;break;}else{label=68;break;}
 case 67: 
 if($189){label=69;break;}else{label=70;break;}
 case 68: 
 if($189){label=70;break;}else{label=69;break;}
 case 69: 
 var $207=HEAP32[(($__err)>>2)];
 var $208=$207|2;
 HEAP32[(($__err)>>2)]=$208;
 label=70;break;
 case 70: 
 var $210=(($agg_result)|0);
 HEAP32[(($210)>>2)]=$188;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $211=HEAP8[(($7)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=72;break;}else{label=71;break;}
 case 71: 
 var $215=(($__buf_i+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=72;break;
 case 72: 
 var $217=HEAP8[(($6)>>0)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=74;break;}else{label=73;break;}
 case 73: 
 var $221=(($__grouping_i+8)|0);
 var $222=HEAP32[(($221)>>2)];
 _free($222);
 label=74;break;
 case 74: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF32[(($__v)>>2)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[(($8)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $23=$19;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi34_i=$22;var $_pre_phi36_i=$_pre35_i;label=5;break;
 case 5: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[(($__in_units_i)>>0)]=1;
 HEAP8[(($__exp_i)>>0)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i6_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i6_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i6_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i6_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i6_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i6_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i6_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i4_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i4_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i4_i;
 var $45=($_0_i_i_i_i4_i|0)==-1;
 var $__pre_i_i_i6_i=($45?0:$_pre_i_i_i6_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i6_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i10_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i10_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i10_i;
 var $63=($_0_i_i1_i_i10_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=46;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=46;break;}
 case 18: 
 var $_sroa_06_2;
 var $66=HEAP32[(($__a_end_i)>>2)];
 var $67=HEAP8[(($8)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=HEAP32[(($27)>>2)];
 var $75=$71;label=21;break;
 case 20: 
 var $73=($67&255);
 var $74=$73>>>1;
 var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76=(($__a_0_i+$75)|0);
 var $77=($66|0)==($76|0);
 if($77){label=22;break;}else{var $__a_1_i=$__a_0_i;label=39;break;}
 case 22: 
 if($69){label=24;break;}else{label=23;break;}
 case 23: 
 var $80=HEAP32[(($27)>>2)];
 var $84=$80;label=25;break;
 case 24: 
 var $82=($67&255);
 var $83=$82>>>1;
 var $84=$83;label=25;break;
 case 25: 
 var $84;
 var $85=$84<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $86=HEAP8[(($8)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){var $92=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $90=HEAP32[(($26)>>2)];
 var $91=$90&-2;
 var $phitmp_i24_i=((($91)-(1))|0);
 var $92=$phitmp_i24_i;label=28;break;
 case 28: 
 var $92;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $93=HEAP8[(($8)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){var $98=$_pre_phi34_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $97=HEAP32[(($_pre_phi36_i)>>2)];
 var $98=$97;label=31;break;
 case 31: 
 var $98;
 var $99=(($98+$84)|0);
 HEAP32[(($__a_end_i)>>2)]=$99;
 var $__a_1_i=$98;label=39;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $101=HEAP8[(($8)>>0)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=36;break;}else{label=35;break;}
 case 35: 
 var $105=(($__buf_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 _free($106);
 label=36;break;
 case 36: 
 var $107=HEAP8[(($7)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=38;break;}else{label=37;break;}
 case 37: 
 var $111=(($__grouping_i+8)|0);
 var $112=HEAP32[(($111)>>2)];
 _free($112);
 label=38;break;
 case 38: 
 ___resumeException($lpad_phi_i$0)
 case 39: 
 var $__a_1_i;
 var $114=(($46+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($46+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=40;break;}else{label=41;break;}
 case 40: 
 var $120=$46;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$124;label=42;break; } else { label=32;break; }
 case 41: 
 var $126=HEAP32[(($115)>>2)];
 var $_0_i_i_i=$126;label=42;break;
 case 42: 
 var $_0_i_i_i;
 var $128=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $129=($128|0)==0;
 if($129){label=43;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=46;break;}
 case 43: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=44;break;}else{label=45;break;}
 case 44: 
 var $135=$46;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 45: 
 var $141=(($131+4)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i6_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 46: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[(($7)>>0)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=48;break;}else{label=47;break;}
 case 47: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=49;break;
 case 48: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=49;break;
 case 49: 
 var $152;
 var $153=($152|0)==0;
 var $154=HEAP8[(($__in_units_i)>>0)];
 var $155=(($154<<24)>>24)==0;
 var $or_cond_i=$153|$155;
 if($or_cond_i){label=52;break;}else{label=50;break;}
 case 50: 
 var $157=HEAP32[(($__g_end_i)>>2)];
 var $158=$157;
 var $159=$__g_i;
 var $160=((($158)-($159))|0);
 var $161=($160|0)<160;
 if($161){label=51;break;}else{label=52;break;}
 case 51: 
 var $163=HEAP32[(($__dc_i)>>2)];
 var $164=(($157+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$164;
 HEAP32[(($157)>>2)]=$163;
 label=52;break;
 case 52: 
 var $166=HEAP32[(($__a_end_i)>>2)];
 var $167=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$166,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=33;break; }
 case 53: 
 HEAPF64[(($__v)>>3)]=$167;
 var $169=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$169,$__err);
 var $170=($46|0)==0;
 if($170){var $187=1;var $186=0;label=58;break;}else{label=54;break;}
 case 54: 
 var $172=(($46+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($46+16)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($173|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$46;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+36)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$182;label=57;break; } else { label=33;break; }
 case 56: 
 var $184=HEAP32[(($173)>>2)];
 var $_0_i_i_i_i_i=$184;label=57;break;
 case 57: 
 var $_0_i_i_i_i_i;
 var $185=($_0_i_i_i_i_i|0)==-1;
 var $_7=($185?0:$46);
 var $_8=($185?1:0);
 var $187=$_8;var $186=$_7;label=58;break;
 case 58: 
 var $186;
 var $187;
 var $188=($_pre_i3_i_i_i|0)==0;
 if($188){label=63;break;}else{label=59;break;}
 case 59: 
 var $190=(($_pre_i3_i_i_i+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($_pre_i3_i_i_i+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=60;break;}else{label=61;break;}
 case 60: 
 var $196=$_pre_i3_i_i_i;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$200;label=62;break; } else { label=33;break; }
 case 61: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i1_i_i_i=$202;label=62;break;
 case 62: 
 var $_0_i_i1_i_i_i;
 var $203=($_0_i_i1_i_i_i|0)==-1;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 if($187){label=65;break;}else{label=66;break;}
 case 64: 
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 var $205=HEAP32[(($__err)>>2)];
 var $206=$205|2;
 HEAP32[(($__err)>>2)]=$206;
 label=66;break;
 case 66: 
 var $208=(($agg_result)|0);
 HEAP32[(($208)>>2)]=$186;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $209=HEAP8[(($8)>>0)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=68;break;}else{label=67;break;}
 case 67: 
 var $213=(($__buf_i+8)|0);
 var $214=HEAP32[(($213)>>2)];
 _free($214);
 label=68;break;
 case 68: 
 var $215=HEAP8[(($7)>>0)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=70;break;}else{label=69;break;}
 case 69: 
 var $219=(($__grouping_i+8)|0);
 var $220=HEAP32[(($219)>>2)];
 _free($220);
 label=70;break;
 case 70: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__grouping=(sp)+(104);
 var $__buf=(sp)+(120);
 var $__a_end=(sp)+(136);
 var $__g=(sp)+(144);
 var $__g_end=(sp)+(304);
 var $__dc=(sp)+(312);
 var $1=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $2=(($__iob+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $_idx=(($3+8)|0);
 var $8=$_idx;
 var $_idx_val=HEAP32[(($8)>>2)];
 var $_idx6=(($3+12)|0);
 var $9=$_idx6;
 var $_idx6_val=HEAP32[(($9)>>2)];
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=39;break; }
 case 3: 
 var $11=$10;
 var $12=(($__atoms)|0);
 var $13=$10;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+48)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$16]($11,14232,14258,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $18=(($3+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$3;
 var $24=$3;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=6;break;
 case 6: 
 var $this2_i_i_i5=$__buf;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=42;break; }
 case 7: 
 var $28=HEAP8[(($this2_i_i_i5)>>0)];
 var $29=$28&1;
 var $30=(($29<<24)>>24)==0;
 if($30){label=9;break;}else{label=8;break;}
 case 8: 
 var $32=(($__buf+8)|0);
 var $33=HEAP32[(($32)>>2)];
 var $_pre36=$__buf;
 var $_pre37=(($_pre36+1)|0);
 var $37=$33;var $_pre_phi38=$_pre37;var $_pre_phi40=$32;label=10;break;
 case 9: 
 var $35=$__buf;
 var $36=(($35+1)|0);
 var $_pre39=(($__buf+8)|0);
 var $37=$36;var $_pre_phi38=$36;var $_pre_phi40=$_pre39;label=10;break;
 case 10: 
 var $_pre_phi40;
 var $_pre_phi38;
 var $37;
 HEAP32[(($__a_end)>>2)]=$37;
 var $38=$__g;
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $39=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$39;
 HEAP32[(($__dc)>>2)]=0;
 var $40=(($__b)|0);
 var $41=(($__e)|0);
 var $42=(($__buf)|0);
 var $43=(($__buf+4)|0);
 var $_pre=HEAP32[(($40)>>2)];
 var $__a_0=$37;var $_pre_i_i_i9=$_pre;label=11;break;
 case 11: 
 var $_pre_i_i_i9;
 var $__a_0;
 var $44=($_pre_i_i_i9|0)==0;
 if($44){var $62=1;var $61=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $46=(($_pre_i_i_i9+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($_pre_i_i_i9+16)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($47|0)==($49|0);
 if($50){label=13;break;}else{label=14;break;}
 case 13: 
 var $52=$_pre_i_i_i9;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+36)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($_pre_i_i_i9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i7=$56;label=15;break; } else { label=41;break; }
 case 14: 
 var $58=HEAP32[(($47)>>2)];
 var $_0_i_i_i_i7=$58;label=15;break;
 case 15: 
 var $_0_i_i_i_i7;
 var $59=($_0_i_i_i_i7|0)==-1;
 if($59){label=16;break;}else{var $62=0;var $61=$_pre_i_i_i9;label=17;break;}
 case 16: 
 HEAP32[(($40)>>2)]=0;
 var $62=1;var $61=0;label=17;break;
 case 17: 
 var $61;
 var $62;
 var $63=HEAP32[(($41)>>2)];
 var $64=($63|0)==0;
 if($64){label=23;break;}else{label=18;break;}
 case 18: 
 var $66=(($63+12)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(($63+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($67|0)==($69|0);
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=$63;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i13=$76;label=21;break; } else { label=41;break; }
 case 20: 
 var $78=HEAP32[(($67)>>2)];
 var $_0_i_i1_i_i13=$78;label=21;break;
 case 21: 
 var $_0_i_i1_i_i13;
 var $79=($_0_i_i1_i_i13|0)==-1;
 if($79){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($41)>>2)]=0;
 label=23;break;
 case 23: 
 if($62){var $__a_2=$__a_0;var $_pre_i3_i_i=0;label=52;break;}else{var $83=0;label=25;break;}
 case 24: 
 if($62){var $83=$63;label=25;break;}else{var $__a_2=$__a_0;var $_pre_i3_i_i=$63;label=52;break;}
 case 25: 
 var $83;
 var $84=HEAP32[(($__a_end)>>2)];
 var $85=HEAP8[(($this2_i_i_i5)>>0)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=27;break;}else{label=26;break;}
 case 26: 
 var $89=HEAP32[(($43)>>2)];
 var $93=$89;label=28;break;
 case 27: 
 var $91=($85&255);
 var $92=$91>>>1;
 var $93=$92;label=28;break;
 case 28: 
 var $93;
 var $94=(($__a_0+$93)|0);
 var $95=($84|0)==($94|0);
 if($95){label=29;break;}else{var $__a_1=$__a_0;label=45;break;}
 case 29: 
 if($87){label=31;break;}else{label=30;break;}
 case 30: 
 var $98=HEAP32[(($43)>>2)];
 var $102=$98;label=32;break;
 case 31: 
 var $100=($85&255);
 var $101=$100>>>1;
 var $102=$101;label=32;break;
 case 32: 
 var $102;
 var $103=$102<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $104=HEAP8[(($this2_i_i_i5)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){var $110=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $108=HEAP32[(($42)>>2)];
 var $109=$108&-2;
 var $phitmp_i28=((($109)-(1))|0);
 var $110=$phitmp_i28;label=35;break;
 case 35: 
 var $110;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $111=HEAP8[(($this2_i_i_i5)>>0)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){var $116=$_pre_phi38;label=38;break;}else{label=37;break;}
 case 37: 
 var $115=HEAP32[(($_pre_phi40)>>2)];
 var $116=$115;label=38;break;
 case 38: 
 var $116;
 var $117=(($116+$102)|0);
 HEAP32[(($__a_end)>>2)]=$117;
 var $__a_1=$116;label=45;break;
 case 39: 
 var $119$0 = ___cxa_find_matching_catch(); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $122=(($3+4)|0);
 var $123=$122;
 var $124=(tempValue=HEAP32[(($123)>>2)],HEAP32[(($123)>>2)]=tempValue+-1,tempValue);
 var $125=($124|0)==0;
 if($125){label=40;break;}else{var $_0=$120;var $_01=$121;label=79;break;}
 case 40: 
 var $127=$3;
 var $128=$3;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+8)|0);
 var $131=HEAP32[(($130)>>2)];
 FUNCTION_TABLE[$131]($127);
 var $_0=$120;var $_01=$121;label=79;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $133=$lpad_phi$0;
 var $134=$lpad_phi$1;
 var $135=HEAP8[(($this2_i_i_i5)>>0)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){var $_0=$133;var $_01=$134;label=79;break;}else{label=44;break;}
 case 44: 
 var $139=(($__buf+8)|0);
 var $140=HEAP32[(($139)>>2)];
 _free($140);
 var $_0=$133;var $_01=$134;label=79;break;
 case 45: 
 var $__a_1;
 var $142=(($61+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($61+16)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($143|0)==($145|0);
 if($146){label=46;break;}else{label=47;break;}
 case 46: 
 var $148=$61;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+36)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$152;label=48;break; } else { label=41;break; }
 case 47: 
 var $154=HEAP32[(($143)>>2)];
 var $_0_i_i=$154;label=48;break;
 case 48: 
 var $_0_i_i;
 var $156=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$39,$__g_end,$12);
 var $157=($156|0)==0;
 if($157){label=49;break;}else{var $__a_2=$__a_1;var $_pre_i3_i_i=$83;label=52;break;}
 case 49: 
 var $159=HEAP32[(($142)>>2)];
 var $160=HEAP32[(($144)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=50;break;}else{label=51;break;}
 case 50: 
 var $163=$61;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+40)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i9=$61;label=11;break; } else { label=41;break; }
 case 51: 
 var $169=(($159+4)|0);
 HEAP32[(($142)>>2)]=$169;
 var $__a_0=$__a_1;var $_pre_i_i_i9=$61;label=11;break;
 case 52: 
 var $_pre_i3_i_i;
 var $__a_2;
 var $171=HEAP32[(($__a_end)>>2)];
 var $172=$171;
 var $173=$__a_2;
 var $174=((($172)-($173))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=42;break; }
 case 53: 
 var $175=HEAP8[(($this2_i_i_i5)>>0)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 if($177){var $180=$_pre_phi38;label=55;break;}else{label=54;break;}
 case 54: 
 var $179=HEAP32[(($_pre_phi40)>>2)];
 var $180=$179;label=55;break;
 case 55: 
 var $180;
 var $181=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=42;break; }
 case 56: 
 var $183=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($180,$181,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $185=($183|0)==1;
 if($185){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $188=($61|0)==0;
 if($188){var $206=1;var $205=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $190=(($61+12)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(($61+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($191|0)==($193|0);
 if($194){label=61;break;}else{label=62;break;}
 case 61: 
 var $196=$61;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$200;label=63;break; } else { label=42;break; }
 case 62: 
 var $202=HEAP32[(($191)>>2)];
 var $_0_i_i_i_i=$202;label=63;break;
 case 63: 
 var $_0_i_i_i_i;
 var $203=($_0_i_i_i_i|0)==-1;
 if($203){label=64;break;}else{var $206=0;var $205=$61;label=65;break;}
 case 64: 
 HEAP32[(($40)>>2)]=0;
 var $206=1;var $205=0;label=65;break;
 case 65: 
 var $205;
 var $206;
 var $207=($_pre_i3_i_i|0)==0;
 if($207){label=71;break;}else{label=66;break;}
 case 66: 
 var $209=(($_pre_i3_i_i+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($_pre_i3_i_i+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=67;break;}else{label=68;break;}
 case 67: 
 var $215=$_pre_i3_i_i;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$218]($_pre_i3_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$219;label=69;break; } else { label=42;break; }
 case 68: 
 var $221=HEAP32[(($210)>>2)];
 var $_0_i_i1_i_i=$221;label=69;break;
 case 69: 
 var $_0_i_i1_i_i;
 var $222=($_0_i_i1_i_i|0)==-1;
 if($222){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($41)>>2)]=0;
 label=71;break;
 case 71: 
 if($206){label=73;break;}else{label=74;break;}
 case 72: 
 if($206){label=74;break;}else{label=73;break;}
 case 73: 
 var $225=HEAP32[(($__err)>>2)];
 var $226=$225|2;
 HEAP32[(($__err)>>2)]=$226;
 label=74;break;
 case 74: 
 var $228=(($agg_result)|0);
 HEAP32[(($228)>>2)]=$205;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $229=HEAP8[(($this2_i_i_i5)>>0)];
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 if($231){label=76;break;}else{label=75;break;}
 case 75: 
 var $233=(($__buf+8)|0);
 var $234=HEAP32[(($233)>>2)];
 _free($234);
 label=76;break;
 case 76: 
 var $235=HEAP8[(($this2_i_i_i)>>0)];
 var $236=$235&1;
 var $237=(($236<<24)>>24)==0;
 if($237){label=78;break;}else{label=77;break;}
 case 77: 
 var $239=(($__grouping+8)|0);
 var $240=HEAP32[(($239)>>2)];
 _free($240);
 label=78;break;
 case 78: 
 var $$etemp$3$0=104;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 79: 
 var $_01;
 var $_0;
 var $241=HEAP8[(($this2_i_i_i)>>0)];
 var $242=$241&1;
 var $243=(($242<<24)>>24)==0;
 if($243){label=81;break;}else{label=80;break;}
 case 80: 
 var $245=(($__grouping+8)|0);
 var $246=HEAP32[(($245)>>2)];
 _free($246);
 label=81;break;
 case 81: 
 var $247$0=$_0;
 var $247$1=0;
 var $248$0=$247$0;
 var $248$1=$_01;
 ___resumeException($248$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[(($__a)>>0)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[(($15)>>0)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP32[(($_01_i)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_01_i+4)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[(($62)>>0)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((14232+$48)|0);
 var $67=HEAP8[(($66)>>0)];
 var $68=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[(($1)>>0)]=$67;
 var $_0=0;label=23;break;
 case 22: 
 var $70=((14232+$48)|0);
 var $71=HEAP8[(($70)>>0)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[(($1)>>0)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,14232,14258,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 HEAP8[(($__thousands_sep)>>0)]=$23;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+20)|0);
 var $27=HEAP32[(($26)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $28=(($2+4)|0);
 var $29=$28;
 var $30=(tempValue=HEAP32[(($29)>>2)],HEAP32[(($29)>>2)]=tempValue+-1,tempValue);
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 var $33=$2;
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($33);
 label=10;break;
 case 10: 
 return;
 case 11: 
 var $39$0 = ___cxa_find_matching_catch(); var $39$1 = tempRet0;
 var $40=(($2+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 var $45=$2;
 var $46=$2;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=13;break;
 case 13: 
 ___resumeException($39$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=12;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+32)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,14232,14264,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 HEAP8[(($__decimal_point)>>0)]=$23;
 var $24=HEAP32[(($19)>>2)];
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 HEAP8[(($__thousands_sep)>>0)]=$27;
 var $28=$17;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $32=(($2+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$2;
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=11;break;
 case 11: 
 return;
 case 12: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=(($2+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 var $49=$2;
 var $50=$2;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=14;break;
 case 14: 
 ___resumeException($43$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[(($__in_units)>>0)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[(($__in_units)>>0)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[(($6)>>0)]=46;
 var $8=$__grouping;
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[(($__in_units)>>0)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+32)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP8[(($_01_i)>>0)];
 var $62=(($61<<24)>>24)==(($__ct<<24)>>24);
 var $63=(($_01_i+1)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=($66|0)>31;
 if($67){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $69=((14232+$66)|0);
 var $70=HEAP8[(($69)>>0)];
 if(($66|0)==25|($66|0)==24){ label=22;break;}else if(($66|0)==22|($66|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $72=HEAP32[(($__a_end)>>2)];
 var $73=($72|0)==($__a|0);
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=((($72)-(1))|0);
 var $76=HEAP8[(($75)>>0)];
 var $77=($76&255);
 var $78=$77&95;
 var $79=HEAP8[(($__exp)>>0)];
 var $80=($79&255);
 var $81=$80&127;
 var $82=($78|0)==($81|0);
 if($82){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $84=(($72+1)|0);
 HEAP32[(($__a_end)>>2)]=$84;
 HEAP8[(($72)>>0)]=$70;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[(($__exp)>>0)]=80;
 var $85=HEAP32[(($__a_end)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[(($85)>>0)]=$70;
 var $_0=0;label=36;break;
 case 26: 
 var $88=($70&255);
 var $89=$88&95;
 var $90=HEAP8[(($__exp)>>0)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[(($__exp)>>0)]=$94;
 var $95=HEAP8[(($__in_units)>>0)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[(($__in_units)>>0)]=0;
 var $98=$__grouping;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[(($120)>>0)]=$70;
 var $122=($66|0)>21;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,14232,14258,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 HEAP32[(($__thousands_sep)>>2)]=$23;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+20)|0);
 var $27=HEAP32[(($26)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 8: 
 var $28=(($2+4)|0);
 var $29=$28;
 var $30=(tempValue=HEAP32[(($29)>>2)],HEAP32[(($29)>>2)]=tempValue+-1,tempValue);
 var $31=($30|0)==0;
 if($31){label=9;break;}else{label=10;break;}
 case 9: 
 var $33=$2;
 var $34=$2;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+8)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($33);
 label=10;break;
 case 10: 
 return;
 case 11: 
 var $39$0 = ___cxa_find_matching_catch(); var $39$1 = tempRet0;
 var $40=(($2+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=12;break;}else{label=13;break;}
 case 12: 
 var $45=$2;
 var $46=$2;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=13;break;
 case 13: 
 ___resumeException($39$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=12;break; }
 case 2: 
 var $_idx7=(($2+8)|0);
 var $7=$_idx7;
 var $_idx7_val=HEAP32[(($7)>>2)];
 var $_idx8=(($2+12)|0);
 var $8=$_idx8;
 var $_idx8_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx7_val,$_idx8_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=$9;
 var $11=$9;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10,14232,14264,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=12;break; }
 case 4: 
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx6_val=HEAP32[(($8)>>2)];
 var $17=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx6_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 var $18=$17;
 var $19=$17;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 HEAP32[(($__decimal_point)>>2)]=$23;
 var $24=HEAP32[(($19)>>2)];
 var $25=(($24+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=12;break; }
 case 8: 
 HEAP32[(($__thousands_sep)>>2)]=$27;
 var $28=$17;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+20)|0);
 var $31=HEAP32[(($30)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($agg_result,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $32=(($2+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 var $37=$2;
 var $38=$2;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=11;break;
 case 11: 
 return;
 case 12: 
 var $43$0 = ___cxa_find_matching_catch(); var $43$1 = tempRet0;
 var $44=(($2+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=13;break;}else{label=14;break;}
 case 13: 
 var $49=$2;
 var $50=$2;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=14;break;
 case 14: 
 ___resumeException($43$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[(($__in_units)>>0)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[(($__in_units)>>0)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[(($6)>>0)]=46;
 var $8=$__grouping;
 var $9=HEAP8[(($8)>>0)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=($__ct|0)==($__thousands_sep|0);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[(($32)>>0)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[(($__in_units)>>0)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+128)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP32[(($_01_i)>>2)];
 var $62=($61|0)==($__ct|0);
 var $63=(($_01_i+4)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=$66>>2;
 var $68=($66|0)>124;
 if($68){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((14232+$67)|0);
 var $71=HEAP8[(($70)>>0)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[(($76)>>0)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[(($__exp)>>0)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[(($73)>>0)]=$71;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[(($__exp)>>0)]=80;
 label=34;break;
 case 26: 
 var $88=($71&255);
 var $89=$88&95;
 var $90=HEAP8[(($__exp)>>0)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[(($__exp)>>0)]=$94;
 var $95=HEAP8[(($__in_units)>>0)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[(($__in_units)>>0)]=0;
 var $98=$__grouping;
 var $99=HEAP8[(($98)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[(($120)>>0)]=$71;
 var $122=($66|0)>84;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__nm=(sp)+(8);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=31;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=25;break; }
 case 4: 
 var $_idx=(($17+8)|0);
 var $22=$_idx;
 var $_idx_val=HEAP32[(($22)>>2)];
 var $_idx5=(($17+12)|0);
 var $23=$_idx5;
 var $_idx5_val=HEAP32[(($23)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx5_val,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=25;break; }
 case 5: 
 var $25=$24;
 var $26=(($17+4)|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$17;
 var $32=$17;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 FUNCTION_TABLE[$35]($31);
 label=7;break;
 case 7: 
 var $36=$24;
 var $37=HEAP32[(($36)>>2)];
 if($__v){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=(($37+24)|0);
 var $40=HEAP32[(($39)>>2)];
 FUNCTION_TABLE[$40]($__nm,$25);
 label=10;break;
 case 9: 
 var $42=(($37+28)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($__nm,$25);
 label=10;break;
 case 10: 
 var $45=$__nm;
 var $46=HEAP8[(($45)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=12;break;}else{label=11;break;}
 case 11: 
 var $50=(($__nm+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $_pre2=$__nm;
 var $_pre3=(($_pre2+1)|0);
 var $_ph=$51;var $_pre_phi4=$_pre3;var $_pre_phi6=$50;label=13;break;
 case 12: 
 var $53=$__nm;
 var $54=(($53+1)|0);
 var $_pre5=(($__nm+8)|0);
 var $_ph=$54;var $_pre_phi4=$54;var $_pre_phi6=$_pre5;label=13;break;
 case 13: 
 var $_pre_phi6;
 var $_pre_phi4;
 var $_ph;
 var $55=(($__s)|0);
 var $56=(($__nm+4)|0);
 var $58=$_ph;var $57=$46;label=14;break;
 case 14: 
 var $57;
 var $58;
 var $59=$57&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=16;break;}else{label=15;break;}
 case 15: 
 var $62=HEAP32[(($_pre_phi6)>>2)];
 var $63=HEAP32[(($56)>>2)];
 var $68=$63;var $67=$62;label=17;break;
 case 16: 
 var $65=($57&255);
 var $66=$65>>>1;
 var $68=$66;var $67=$_pre_phi4;label=17;break;
 case 17: 
 var $67;
 var $68;
 var $69=(($67+$68)|0);
 var $70=($58|0)==($69|0);
 if($70){label=29;break;}else{label=18;break;}
 case 18: 
 var $72=HEAP8[(($58)>>0)];
 var $73=HEAP32[(($55)>>2)];
 var $74=($73|0)==0;
 if($74){label=24;break;}else{label=19;break;}
 case 19: 
 var $76=(($73+24)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($73+28)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=21;break;}else{label=20;break;}
 case 20: 
 var $81=(($77+1)|0);
 HEAP32[(($76)>>2)]=$81;
 HEAP8[(($77)>>0)]=$72;
 label=24;break;
 case 21: 
 var $82=$73;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+52)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($72&255);
 var $87=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($73,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $88=($87|0)==-1;
 if($88){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($55)>>2)]=0;
 label=24;break;
 case 24: 
 var $90=(($58+1)|0);
 var $_pre=HEAP8[(($45)>>0)];
 var $58=$90;var $57=$_pre;label=14;break;
 case 25: 
 var $92$0 = ___cxa_find_matching_catch(); var $92$1 = tempRet0;
 var $93=$92$0;
 var $94=$92$1;
 var $95=(($17+4)|0);
 var $96=$95;
 var $97=(tempValue=HEAP32[(($96)>>2)],HEAP32[(($96)>>2)]=tempValue+-1,tempValue);
 var $98=($97|0)==0;
 if($98){label=26;break;}else{var $_0=$93;var $_01=$94;label=32;break;}
 case 26: 
 var $100=$17;
 var $101=$17;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+8)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($100);
 var $_0=$93;var $_01=$94;label=32;break;
 case 27: 
 var $106$0 = ___cxa_find_matching_catch(); var $106$1 = tempRet0;
 var $107=$106$0;
 var $108=$106$1;
 var $109=HEAP8[(($45)>>0)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){var $_0=$107;var $_01=$108;label=32;break;}else{label=28;break;}
 case 28: 
 var $113=(($__nm+8)|0);
 var $114=HEAP32[(($113)>>2)];
 _free($114);
 var $_0=$107;var $_01=$108;label=32;break;
 case 29: 
 var $116=HEAP32[(($55)>>2)];
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$116;
 if($60){label=31;break;}else{label=30;break;}
 case 30: 
 var $119=(($__nm+8)|0);
 var $120=HEAP32[(($119)>>2)];
 _free($120);
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $_01;
 var $_0;
 var $121$0=$_0;
 var $121$1=0;
 var $122$0=$121$0;
 var $122$1=$_01;
 ___resumeException($122$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((5168)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((5169)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((5170)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((5171)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((5172)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((5173)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,4104,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__flags&2048;
 var $2=($1|0)==0;
 if($2){var $_0=$__fmtp;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($__fmtp+1)|0);
 HEAP8[(($__fmtp)>>0)]=43;
 var $_0=$4;label=3;break;
 case 3: 
 var $_0;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 if($7){var $_1_ph=$_0;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($_0+1)|0);
 HEAP8[(($_0)>>0)]=35;
 var $_1_ph=$9;label=5;break;
 case 5: 
 var $_1_ph;
 var $10=HEAP8[(($__len)>>0)];
 var $11=(($10<<24)>>24)==0;
 if($11){var $_1_lcssa=$_1_ph;label=7;break;}else{var $_012=$__len;var $_13=$_1_ph;var $12=$10;label=6;break;}
 case 6: 
 var $12;
 var $_13;
 var $_012;
 var $13=(($_012+1)|0);
 var $14=(($_13+1)|0);
 HEAP8[(($_13)>>0)]=$12;
 var $15=HEAP8[(($13)>>0)];
 var $16=(($15<<24)>>24)==0;
 if($16){var $_1_lcssa=$14;label=7;break;}else{var $_012=$13;var $_13=$14;var $12=$15;label=6;break;}
 case 7: 
 var $_1_lcssa;
 var $17=$__flags&74;
 if(($17|0)==64){ label=8;break;}else if(($17|0)==8){ label=9;break;}else{label=12;break;}
 case 8: 
 HEAP8[(($_1_lcssa)>>0)]=111;
 label=15;break;
 case 9: 
 var $20=$__flags&16384;
 var $21=($20|0)==0;
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP8[(($_1_lcssa)>>0)]=88;
 label=15;break;
 case 11: 
 HEAP8[(($_1_lcssa)>>0)]=120;
 label=15;break;
 case 12: 
 if($__signd){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP8[(($_1_lcssa)>>0)]=100;
 label=15;break;
 case 14: 
 HEAP8[(($_1_lcssa)>>0)]=117;
 label=15;break;
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17880);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(17496);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 var $14=$__grouping;
 var $15=HEAP8[(($14)>>0)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=3;break;}else{label=2;break;}
 case 2: 
 var $19=(($__grouping+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=4;break;
 case 3: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=4;break;
 case 4: 
 var $24;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=12;break;}
 case 5: 
 var $27=$4;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+32)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($5,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $32=$__ne;
 var $33=$__nb;
 var $34=((($32)-($33))|0);
 var $35=(($__ob+$34)|0);
 HEAP32[(($__oe)>>2)]=$35;
 label=37;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=HEAP8[(($14)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 var $41=(($__grouping+8)|0);
 var $42=HEAP32[(($41)>>2)];
 _free($42);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $44=HEAP8[(($__nb)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=13;break;}else{var $__nf_0=$__nb;label=15;break;}
 case 13: 
 var $46=$4;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+28)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($5,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=8;break; }
 case 14: 
 var $51=(($__nb+1)|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__oe)>>2)]=$53;
 HEAP8[(($52)>>0)]=$50;
 var $__nf_0=$51;label=15;break;
 case 15: 
 var $__nf_0;
 var $55=$__ne;
 var $56=$__nf_0;
 var $57=((($55)-($56))|0);
 var $58=($57|0)>1;
 if($58){label=16;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 16: 
 var $60=HEAP8[(($__nf_0)>>0)];
 var $61=(($60<<24)>>24)==48;
 if($61){label=17;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 17: 
 var $63=(($__nf_0+1)|0);
 var $64=HEAP8[(($63)>>0)];
 if((($64<<24)>>24)==120|(($64<<24)>>24)==88){ label=18;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 18: 
 var $66=$4;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+28)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=8;break; }
 case 19: 
 var $71=HEAP32[(($__oe)>>2)];
 var $72=(($71+1)|0);
 HEAP32[(($__oe)>>2)]=$72;
 HEAP8[(($71)>>0)]=$70;
 var $73=HEAP8[(($63)>>0)];
 var $74=HEAP32[(($66)>>2)];
 var $75=(($74+28)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($5,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $78=(($__nf_0+2)|0);
 var $79=HEAP32[(($__oe)>>2)];
 var $80=(($79+1)|0);
 HEAP32[(($__oe)>>2)]=$80;
 HEAP8[(($79)>>0)]=$77;
 var $__nf_1=$78;label=21;break;
 case 21: 
 var $__nf_1;
 var $82=($__nf_1|0)==($__ne|0);
 if($82){label=24;break;}else{label=22;break;}
 case 22: 
 var $83=((($__ne)-(1))|0);
 var $84=($83>>>0)>($__nf_1>>>0);
 if($84){var $_012_i_i5=$__nf_1;var $85=$83;label=23;break;}else{label=24;break;}
 case 23: 
 var $85;
 var $_012_i_i5;
 var $86=HEAP8[(($_012_i_i5)>>0)];
 var $87=HEAP8[(($85)>>0)];
 HEAP8[(($_012_i_i5)>>0)]=$87;
 HEAP8[(($85)>>0)]=$86;
 var $88=(($_012_i_i5+1)|0);
 var $89=((($85)-(1))|0);
 var $90=($88>>>0)<($89>>>0);
 if($90){var $_012_i_i5=$88;var $85=$89;label=23;break;}else{label=24;break;}
 case 24: 
 var $91=$8;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 var $96=($__nf_1>>>0)<($__ne>>>0);
 if($96){label=26;break;}else{label=34;break;}
 case 26: 
 var $97=$__grouping;
 var $98=(($97+1)|0);
 var $99=$4;
 var $100=(($__grouping+4)|0);
 var $101=(($__grouping+8)|0);
 var $__dc_09=0;var $__dg_010=0;var $__p_011=$__nf_1;label=27;break;
 case 27: 
 var $__p_011;
 var $__dg_010;
 var $__dc_09;
 var $102=HEAP8[(($14)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=HEAP32[(($101)>>2)];
 var $_=($104?$98:$105);
 var $106=(($_+$__dg_010)|0);
 var $107=HEAP8[(($106)>>0)];
 var $108=(($107<<24)>>24)!=0;
 var $109=(($107<<24)>>24);
 var $110=($__dc_09|0)==($109|0);
 var $or_cond=$108&$110;
 if($or_cond){label=28;break;}else{var $__dg_1=$__dg_010;var $__dc_1=$__dc_09;label=32;break;}
 case 28: 
 var $112=HEAP32[(($__oe)>>2)];
 var $113=(($112+1)|0);
 HEAP32[(($__oe)>>2)]=$113;
 HEAP8[(($112)>>0)]=$95;
 var $114=HEAP8[(($14)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=30;break;}else{label=29;break;}
 case 29: 
 var $118=HEAP32[(($100)>>2)];
 var $122=$118;label=31;break;
 case 30: 
 var $120=($114&255);
 var $121=$120>>>1;
 var $122=$121;label=31;break;
 case 31: 
 var $122;
 var $123=((($122)-(1))|0);
 var $124=($__dg_010>>>0)<($123>>>0);
 var $125=($124&1);
 var $___dg_0=((($125)+($__dg_010))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=32;break;
 case 32: 
 var $__dc_1;
 var $__dg_1;
 var $127=HEAP8[(($__p_011)>>0)];
 var $128=HEAP32[(($99)>>2)];
 var $129=(($128+28)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($5,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=7;break; }
 case 33: 
 var $132=HEAP32[(($__oe)>>2)];
 var $133=(($132+1)|0);
 HEAP32[(($__oe)>>2)]=$133;
 HEAP8[(($132)>>0)]=$131;
 var $134=((($__dc_1)+(1))|0);
 var $135=(($__p_011+1)|0);
 var $136=($135>>>0)<($__ne>>>0);
 if($136){var $__dc_09=$134;var $__dg_010=$__dg_1;var $__p_011=$135;label=27;break;}else{label=34;break;}
 case 34: 
 var $137=$__nf_1;
 var $138=$__nb;
 var $139=((($137)-($138))|0);
 var $140=(($__ob+$139)|0);
 var $141=HEAP32[(($__oe)>>2)];
 var $142=($140|0)==($141|0);
 if($142){label=37;break;}else{label=35;break;}
 case 35: 
 var $143=((($141)-(1))|0);
 var $144=($143>>>0)>($140>>>0);
 if($144){var $_012_i_i=$140;var $145=$143;label=36;break;}else{label=37;break;}
 case 36: 
 var $145;
 var $_012_i_i;
 var $146=HEAP8[(($_012_i_i)>>0)];
 var $147=HEAP8[(($145)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$147;
 HEAP8[(($145)>>0)]=$146;
 var $148=(($_012_i_i+1)|0);
 var $149=((($145)-(1))|0);
 var $150=($148>>>0)<($149>>>0);
 if($150){var $_012_i_i=$148;var $145=$149;label=36;break;}else{label=37;break;}
 case 37: 
 var $151=($__np|0)==($__ne|0);
 if($151){label=38;break;}else{label=39;break;}
 case 38: 
 var $153=HEAP32[(($__oe)>>2)];
 var $storemerge=$153;label=40;break;
 case 39: 
 var $155=$__np;
 var $156=$__nb;
 var $157=((($155)-($156))|0);
 var $158=(($__ob+$157)|0);
 var $storemerge=$158;label=40;break;
 case 40: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $160=HEAP8[(($14)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=42;break;}else{label=41;break;}
 case 41: 
 var $164=(($__grouping+8)|0);
 var $165=HEAP32[(($164)>>2)];
 _free($165);
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,3328,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,22,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $$etemp$3$0=41;
 var $$etemp$3$1=0;

 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 var $$etemp$4$0=41;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((5168)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((5169)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((5170)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((5171)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((5172)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((5173)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,4104,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,3328,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,23,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=(($__o)|0);
 var $$etemp$3$0=43;
 var $$etemp$3$1=0;

 var $26=(($__iob+28)|0);
 var $27=(($1)|0);
 var $28=HEAP32[(($26)>>2)];
 var $29=$28;
 HEAP32[(($27)>>2)]=$29;
 var $30=(($28+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($6,$_0_i,$9,$25,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $34=HEAP32[(($27)>>2)];
 var $35=(($34+4)|0);
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=10;break;}else{label=11;break;}
 case 10: 
 var $39=(($34)|0);
 var $40=$34;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=11;break;
 case 11: 
 var $44=(($__s)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=HEAP32[(($__op)>>2)];
 var $47=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$45,$25,$46,$47,$__iob,$__fl);
 var $$etemp$4$0=43;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=HEAP32[(($27)>>2)];
 var $51=(($50+4)|0);
 var $52=(tempValue=HEAP32[(($51)>>2)],HEAP32[(($51)>>2)]=tempValue+-1,tempValue);
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($50)|0);
 var $56=$50;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+8)|0);
 var $59=HEAP32[(($58)>>2)];
 FUNCTION_TABLE[$59]($55);
 label=14;break;
 case 14: 
 ___resumeException($49$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,14320,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $41=0;var $40=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_127=$27;var $_18=$26;label=41;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(($__iob+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$33;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $35=HEAP32[(($__nb)>>2)];
 var $36=($35|0)==0;
 if($36){label=12;break;}else{var $__nc_2=$__nc_1;var $41=$35;var $40=$35;label=14;break;}
 case 12: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 HEAP32[(($39)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($38,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $40;
 var $41;
 var $__nc_2;
 var $42=(($40+$__nc_2)|0);
 var $43=HEAP32[(($5)>>2)];
 var $44=$43&176;
 if(($44|0)==16){ label=15;break;}else if(($44|0)==32){ var $_0_i=$42;label=21;break;}else{label=20;break;}
 case 15: 
 var $46=HEAP8[(($40)>>0)];
 if((($46<<24)>>24)==45|(($46<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $48=(($40+1)|0);
 var $_0_i=$48;label=21;break;
 case 17: 
 var $50=($__nc_2|0)>1;
 var $51=(($46<<24)>>24)==48;
 var $or_cond_i=$50&$51;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=(($40+1)|0);
 var $54=HEAP8[(($53)>>0)];
 if((($54<<24)>>24)==120|(($54<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $56=(($40+2)|0);
 var $_0_i=$56;label=21;break;
 case 20: 
 var $_0_i=$40;label=21;break;
 case 21: 
 var $_0_i;
 var $58=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $59=($40|0)==($8|0);
 if($59){var $__ob_0=$58;var $74=0;var $73=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $61=$__nc_2<<1;
 var $62=_malloc($61);
 var $63=($62|0)==0;
 if($63){label=23;break;}else{var $__ob_0=$62;var $74=$62;var $73=$40;label=26;break;}
 case 23: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $68=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $68;
 var $69$0 = ___cxa_find_matching_catch(); var $69$1 = tempRet0;
 var $70=$69$0;
 var $71=$69$1;
 var $_0=$70;var $_01=$71;var $119=$68;label=37;break;
 case 26: 
 var $73;
 var $74;
 var $__ob_0;
 var $75=(($__iob+28)|0);
 var $76=(($1)|0);
 var $77=HEAP32[(($75)>>2)];
 var $78=$77;
 HEAP32[(($76)>>2)]=$78;
 var $79=(($77+4)|0);
 var $80=$79;
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($73,$_0_i,$42,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=35;break; }
 case 27: 
 var $83=HEAP32[(($76)>>2)];
 var $84=(($83+4)|0);
 var $85=(tempValue=HEAP32[(($84)>>2)],HEAP32[(($84)>>2)]=tempValue+-1,tempValue);
 var $86=($85|0)==0;
 if($86){label=28;break;}else{label=29;break;}
 case 28: 
 var $88=(($83)|0);
 var $89=$83;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+8)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($88);
 label=29;break;
 case 29: 
 var $93=(($__s)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=HEAP32[(($__op)>>2)];
 var $96=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$94,$__ob_0,$95,$96,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $68=$74;label=25;break; }
 case 30: 
 var $98=(($2)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP32[(($93)>>2)]=$99;
 var $100=(($agg_result)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=($74|0)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 _free($74);
 label=32;break;
 case 32: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $103=($41|0)==0;
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 _free($41);
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
 case 35: 
 var $106$0 = ___cxa_find_matching_catch(); var $106$1 = tempRet0;
 var $107=$106$0;
 var $108=$106$1;
 var $109=HEAP32[(($76)>>2)];
 var $110=(($109+4)|0);
 var $111=(tempValue=HEAP32[(($110)>>2)],HEAP32[(($110)>>2)]=tempValue+-1,tempValue);
 var $112=($111|0)==0;
 if($112){label=36;break;}else{var $_0=$107;var $_01=$108;var $119=$74;label=37;break;}
 case 36: 
 var $114=(($109)|0);
 var $115=$109;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+8)|0);
 var $118=HEAP32[(($117)>>2)];
 FUNCTION_TABLE[$118]($114);
 var $_0=$107;var $_01=$108;var $119=$74;label=37;break;
 case 37: 
 var $119;
 var $_01;
 var $_0;
 var $120=($119|0)==0;
 if($120){label=39;break;}else{label=38;break;}
 case 38: 
 _free($119);
 label=39;break;
 case 39: 
 var $122=($41|0)==0;
 if($122){var $_127=$_01;var $_18=$_0;label=41;break;}else{label=40;break;}
 case 40: 
 _free($41);
 var $_127=$_01;var $_18=$_0;label=41;break;
 case 41: 
 var $_18;
 var $_127;
 var $124$0=$_18;
 var $124$1=0;
 var $125$0=$124$0;
 var $125$1=$_127;
 ___resumeException($125$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__flags&2048;
 var $2=($1|0)==0;
 if($2){var $_0=$__fmtp;label=3;break;}else{label=2;break;}
 case 2: 
 var $4=(($__fmtp+1)|0);
 HEAP8[(($__fmtp)>>0)]=43;
 var $_0=$4;label=3;break;
 case 3: 
 var $_0;
 var $6=$__flags&1024;
 var $7=($6|0)==0;
 if($7){var $_1=$_0;label=5;break;}else{label=4;break;}
 case 4: 
 var $9=(($_0+1)|0);
 HEAP8[(($_0)>>0)]=35;
 var $_1=$9;label=5;break;
 case 5: 
 var $_1;
 var $11=$__flags&260;
 var $12=$__flags>>>14;
 var $13=($11|0)==260;
 if($13){var $_2_ph=$_1;var $specify_precision_0_off0_ph=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $15=(($_1+1)|0);
 HEAP8[(($_1)>>0)]=46;
 var $16=(($_1+2)|0);
 HEAP8[(($15)>>0)]=42;
 var $_2_ph=$16;var $specify_precision_0_off0_ph=1;label=7;break;
 case 7: 
 var $specify_precision_0_off0_ph;
 var $_2_ph;
 var $17=HEAP8[(($__len)>>0)];
 var $18=(($17<<24)>>24)==0;
 if($18){var $_2_lcssa=$_2_ph;label=9;break;}else{var $_012=$__len;var $_23=$_2_ph;var $19=$17;label=8;break;}
 case 8: 
 var $19;
 var $_23;
 var $_012;
 var $20=(($_012+1)|0);
 var $21=(($_23+1)|0);
 HEAP8[(($_23)>>0)]=$19;
 var $22=HEAP8[(($20)>>0)];
 var $23=(($22<<24)>>24)==0;
 if($23){var $_2_lcssa=$21;label=9;break;}else{var $_012=$20;var $_23=$21;var $19=$22;label=8;break;}
 case 9: 
 var $_2_lcssa;
 if(($11|0)==4){ label=10;break;}else if(($11|0)==256){ label=13;break;}else{label=16;break;}
 case 10: 
 var $25=$12&1;
 var $26=($25|0)==0;
 if($26){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[(($_2_lcssa)>>0)]=70;
 label=23;break;
 case 12: 
 HEAP8[(($_2_lcssa)>>0)]=102;
 label=23;break;
 case 13: 
 var $30=$12&1;
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[(($_2_lcssa)>>0)]=69;
 label=23;break;
 case 15: 
 HEAP8[(($_2_lcssa)>>0)]=101;
 label=23;break;
 case 16: 
 var $35=$12&1;
 var $36=($35|0)!=0;
 if($13){label=17;break;}else{label=20;break;}
 case 17: 
 if($36){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP8[(($_2_lcssa)>>0)]=65;
 label=23;break;
 case 19: 
 HEAP8[(($_2_lcssa)>>0)]=97;
 label=23;break;
 case 20: 
 if($36){label=21;break;}else{label=22;break;}
 case 21: 
 HEAP8[(($_2_lcssa)>>0)]=71;
 label=23;break;
 case 22: 
 HEAP8[(($_2_lcssa)>>0)]=103;
 label=23;break;
 case 23: 
 return $specify_precision_0_off0_ph;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17880);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(17496);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $14=HEAP8[(($__nb)>>0)];
 if((($14<<24)>>24)==45|(($14<<24)>>24)==43){ label=2;break;}else{var $__nf_0=$__nb;label=12;break;}
 case 2: 
 var $16=$4;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+28)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($5,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $21=(($__nb+1)|0);
 var $22=HEAP32[(($__oe)>>2)];
 var $23=(($22+1)|0);
 HEAP32[(($__oe)>>2)]=$23;
 HEAP8[(($22)>>0)]=$20;
 var $__nf_0=$21;label=12;break;
 case 4: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 5: 
 var $lpad_loopexit15$0 = ___cxa_find_matching_catch(); var $lpad_loopexit15$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit15$1;var $lpad_phi$0=$lpad_loopexit15$0;label=9;break;
 case 6: 
 var $lpad_loopexit23$0 = ___cxa_find_matching_catch(); var $lpad_loopexit23$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit23$1;var $lpad_phi$0=$lpad_loopexit23$0;label=9;break;
 case 7: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(); var $lpad_loopexit30$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit30$1;var $lpad_phi$0=$lpad_loopexit30$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit31$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit31$1;var $lpad_phi$0=$lpad_nonloopexit31$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $24=$__grouping;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=(($__grouping+8)|0);
 var $30=HEAP32[(($29)>>2)];
 _free($30);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 var $__nf_0;
 var $32=$__ne;
 var $33=$__nf_0;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>1;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $36=($__nf_0>>>0)<($__ne>>>0);
 if($36){var $__ns_126=$__nf_0;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=26;break;}
 case 14: 
 var $38=HEAP8[(($__nf_0)>>0)];
 var $39=(($38<<24)>>24)==48;
 if($39){label=15;break;}else{label=13;break;}
 case 15: 
 var $41=(($__nf_0+1)|0);
 var $42=HEAP8[(($41)>>0)];
 if((($42<<24)>>24)==120|(($42<<24)>>24)==88){ label=16;break;}else{label=13;break;}
 case 16: 
 var $44=$4;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+28)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 17: 
 var $49=HEAP32[(($__oe)>>2)];
 var $50=(($49+1)|0);
 HEAP32[(($__oe)>>2)]=$50;
 HEAP8[(($49)>>0)]=$48;
 var $51=(($__nf_0+2)|0);
 var $52=HEAP8[(($41)>>0)];
 var $53=HEAP32[(($44)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($5,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=8;break; }
 case 18: 
 var $57=HEAP32[(($__oe)>>2)];
 var $58=(($57+1)|0);
 HEAP32[(($__oe)>>2)]=$58;
 HEAP8[(($57)>>0)]=$56;
 var $59=($51>>>0)<($__ne>>>0);
 if($59){var $__ns_034=$51;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$51;label=26;break;}
 case 19: 
 var $60=(($__ns_034+1)|0);
 var $61=($60>>>0)<($__ne>>>0);
 if($61){var $__ns_034=$60;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$60;label=26;break;}
 case 20: 
 var $__ns_034;
 var $62=HEAP8[(($__ns_034)>>0)];
 var $63=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=7;break; }
 case 21: 
 var $65=(($62<<24)>>24);
 var $isdigittmp_i_i=((($65)-(48))|0);
 var $isdigit_i_i=($isdigittmp_i_i>>>0)<10;
 if($isdigit_i_i){label=19;break;}else{label=22;break;}
 case 22: 
 var $66=$65|32;
 var $67=((($66)-(97))|0);
 var $68=($67>>>0)<6;
 if($68){label=19;break;}else{var $__nf_1=$51;var $__ns_2=$__ns_034;label=26;break;}
 case 23: 
 var $70=($75>>>0)<($__ne>>>0);
 if($70){var $__ns_126=$75;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$75;label=26;break;}
 case 24: 
 var $__ns_126;
 var $71=HEAP8[(($__ns_126)>>0)];
 var $72=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=6;break; }
 case 25: 
 var $74=(($71<<24)>>24);
 var $isdigittmp_i=((($74)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 var $75=(($__ns_126+1)|0);
 if($isdigit_i){label=23;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__ns_126;label=26;break;}
 case 26: 
 var $__ns_2;
 var $__nf_1;
 var $76=$__grouping;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=28;break;}else{label=27;break;}
 case 27: 
 var $81=(($__grouping+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $86=$82;label=29;break;
 case 28: 
 var $84=($77&255);
 var $85=$84>>>1;
 var $86=$85;label=29;break;
 case 29: 
 var $86;
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=32;break;}
 case 30: 
 var $89=HEAP32[(($__oe)>>2)];
 var $90=$4;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+32)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($5,$__nf_1,$__ns_2,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=8;break; }
 case 31: 
 var $95=$__ns_2;
 var $96=$__nf_1;
 var $97=((($95)-($96))|0);
 var $98=HEAP32[(($__oe)>>2)];
 var $99=(($98+$97)|0);
 HEAP32[(($__oe)>>2)]=$99;
 label=48;break;
 case 32: 
 var $101=($__nf_1|0)==($__ns_2|0);
 if($101){label=35;break;}else{label=33;break;}
 case 33: 
 var $102=((($__ns_2)-(1))|0);
 var $103=($102>>>0)>($__nf_1>>>0);
 if($103){var $_012_i_i=$__nf_1;var $104=$102;label=34;break;}else{label=35;break;}
 case 34: 
 var $104;
 var $_012_i_i;
 var $105=HEAP8[(($_012_i_i)>>0)];
 var $106=HEAP8[(($104)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$106;
 HEAP8[(($104)>>0)]=$105;
 var $107=(($_012_i_i+1)|0);
 var $108=((($104)-(1))|0);
 var $109=($107>>>0)<($108>>>0);
 if($109){var $_012_i_i=$107;var $104=$108;label=34;break;}else{label=35;break;}
 case 35: 
 var $110=$8;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=8;break; }
 case 36: 
 var $115=($__nf_1>>>0)<($__ns_2>>>0);
 if($115){label=37;break;}else{label=45;break;}
 case 37: 
 var $116=$__grouping;
 var $117=(($116+1)|0);
 var $118=(($__grouping+4)|0);
 var $119=(($__grouping+8)|0);
 var $120=$4;
 var $__dc_018=0;var $__dg_019=0;var $__p_020=$__nf_1;label=38;break;
 case 38: 
 var $__p_020;
 var $__dg_019;
 var $__dc_018;
 var $121=HEAP8[(($76)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 var $124=HEAP32[(($119)>>2)];
 var $_=($123?$117:$124);
 var $125=(($_+$__dg_019)|0);
 var $126=HEAP8[(($125)>>0)];
 var $127=(($126<<24)>>24)>0;
 var $128=(($126<<24)>>24);
 var $129=($__dc_018|0)==($128|0);
 var $or_cond=$127&$129;
 if($or_cond){label=39;break;}else{var $__dg_1=$__dg_019;var $__dc_1=$__dc_018;label=43;break;}
 case 39: 
 var $131=HEAP32[(($__oe)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__oe)>>2)]=$132;
 HEAP8[(($131)>>0)]=$114;
 var $133=HEAP8[(($76)>>0)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=41;break;}else{label=40;break;}
 case 40: 
 var $137=HEAP32[(($118)>>2)];
 var $141=$137;label=42;break;
 case 41: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=42;break;
 case 42: 
 var $141;
 var $142=((($141)-(1))|0);
 var $143=($__dg_019>>>0)<($142>>>0);
 var $144=($143&1);
 var $___dg_0=((($144)+($__dg_019))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=43;break;
 case 43: 
 var $__dc_1;
 var $__dg_1;
 var $146=HEAP8[(($__p_020)>>0)];
 var $147=HEAP32[(($120)>>2)];
 var $148=(($147+28)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($5,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=5;break; }
 case 44: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+1)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP8[(($151)>>0)]=$150;
 var $153=((($__dc_1)+(1))|0);
 var $154=(($__p_020+1)|0);
 var $155=($154>>>0)<($__ns_2>>>0);
 if($155){var $__dc_018=$153;var $__dg_019=$__dg_1;var $__p_020=$154;label=38;break;}else{label=45;break;}
 case 45: 
 var $156=$__nf_1;
 var $157=$__nb;
 var $158=((($156)-($157))|0);
 var $159=(($__ob+$158)|0);
 var $160=HEAP32[(($__oe)>>2)];
 var $161=($159|0)==($160|0);
 if($161){label=48;break;}else{label=46;break;}
 case 46: 
 var $162=((($160)-(1))|0);
 var $163=($162>>>0)>($159>>>0);
 if($163){var $_012_i_i7=$159;var $164=$162;label=47;break;}else{label=48;break;}
 case 47: 
 var $164;
 var $_012_i_i7;
 var $165=HEAP8[(($_012_i_i7)>>0)];
 var $166=HEAP8[(($164)>>0)];
 HEAP8[(($_012_i_i7)>>0)]=$166;
 HEAP8[(($164)>>0)]=$165;
 var $167=(($_012_i_i7+1)|0);
 var $168=((($164)-(1))|0);
 var $169=($167>>>0)<($168>>>0);
 if($169){var $_012_i_i7=$167;var $164=$168;label=47;break;}else{label=48;break;}
 case 48: 
 var $170=($__ns_2>>>0)<($__ne>>>0);
 if($170){label=49;break;}else{var $__nf_3=$__ns_2;label=55;break;}
 case 49: 
 var $171=$4;
 var $__nf_214=$__ns_2;label=50;break;
 case 50: 
 var $__nf_214;
 var $173=HEAP8[(($__nf_214)>>0)];
 var $174=(($173<<24)>>24)==46;
 if($174){label=51;break;}else{label=53;break;}
 case 51: 
 var $176=$8;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=8;break; }
 case 52: 
 var $181=HEAP32[(($__oe)>>2)];
 var $182=(($181+1)|0);
 HEAP32[(($__oe)>>2)]=$182;
 HEAP8[(($181)>>0)]=$180;
 var $183=(($__nf_214+1)|0);
 var $__nf_3=$183;label=55;break;
 case 53: 
 var $185=HEAP32[(($171)>>2)];
 var $186=(($185+28)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($5,$173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=4;break; }
 case 54: 
 var $189=HEAP32[(($__oe)>>2)];
 var $190=(($189+1)|0);
 HEAP32[(($__oe)>>2)]=$190;
 HEAP8[(($189)>>0)]=$188;
 var $191=(($__nf_214+1)|0);
 var $192=($191>>>0)<($__ne>>>0);
 if($192){var $__nf_214=$191;label=50;break;}else{var $__nf_3=$191;label=55;break;}
 case 55: 
 var $__nf_3;
 var $193=HEAP32[(($__oe)>>2)];
 var $194=$4;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+32)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($5,$__nf_3,$__ne,$193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=8;break; }
 case 56: 
 var $199=$__nf_3;
 var $200=((($32)-($199))|0);
 var $201=HEAP32[(($__oe)>>2)];
 var $202=(($201+$200)|0);
 HEAP32[(($__oe)>>2)]=$202;
 var $203=($__np|0)==($__ne|0);
 if($203){var $storemerge=$202;label=58;break;}else{label=57;break;}
 case 57: 
 var $205=$__np;
 var $206=$__nb;
 var $207=((($205)-($206))|0);
 var $208=(($__ob+$207)|0);
 var $storemerge=$208;label=58;break;
 case 58: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $210=HEAP8[(($76)>>0)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=60;break;}else{label=59;break;}
 case 59: 
 var $214=(($__grouping+8)|0);
 var $215=HEAP32[(($214)>>2)];
 _free($215);
 label=60;break;
 case 60: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,2120,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $39=0;var $38=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_127=$27;var $_18=$26;label=34;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$31;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $33=HEAP32[(($__nb)>>2)];
 var $34=($33|0)==0;
 if($34){label=12;break;}else{var $__nc_2=$__nc_1;var $39=$33;var $38=$33;label=14;break;}
 case 12: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $38;
 var $39;
 var $__nc_2;
 var $40=(($38+$__nc_2)|0);
 var $41=HEAP32[(($5)>>2)];
 var $42=$41&176;
 if(($42|0)==16){ label=15;break;}else if(($42|0)==32){ var $_0_i=$40;label=21;break;}else{label=20;break;}
 case 15: 
 var $44=HEAP8[(($38)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $46=(($38+1)|0);
 var $_0_i=$46;label=21;break;
 case 17: 
 var $48=($__nc_2|0)>1;
 var $49=(($44<<24)>>24)==48;
 var $or_cond_i=$48&$49;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $51=(($38+1)|0);
 var $52=HEAP8[(($51)>>0)];
 if((($52<<24)>>24)==120|(($52<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $54=(($38+2)|0);
 var $_0_i=$54;label=21;break;
 case 20: 
 var $_0_i=$38;label=21;break;
 case 21: 
 var $_0_i;
 var $56=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $57=($38|0)==($8|0);
 if($57){var $__ob_0=$56;var $72=0;var $71=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $59=$__nc_2<<1;
 var $60=_malloc($59);
 var $61=($60|0)==0;
 if($61){label=23;break;}else{var $__ob_0=$60;var $72=$60;var $71=$38;label=26;break;}
 case 23: 
 var $63=___cxa_allocate_exception(4);
 var $64=$63;
 HEAP32[(($64)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($63,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $66=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $66;
 var $67$0 = ___cxa_find_matching_catch(); var $67$1 = tempRet0;
 var $68=$67$0;
 var $69=$67$1;
 var $_0=$68;var $_01=$69;var $112=$66;label=33;break;
 case 26: 
 var $71;
 var $72;
 var $__ob_0;
 var $73=(($__iob+28)|0);
 var $74=(($1)|0);
 var $75=HEAP32[(($73)>>2)];
 var $76=$75;
 HEAP32[(($74)>>2)]=$76;
 var $77=(($75+4)|0);
 var $78=$77;
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($71,$_0_i,$40,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=31;break; }
 case 27: 
 var $81=HEAP32[(($74)>>2)];
 var $82=(($81+4)|0);
 var $83=(tempValue=HEAP32[(($82)>>2)],HEAP32[(($82)>>2)]=tempValue+-1,tempValue);
 var $84=($83|0)==0;
 if($84){label=28;break;}else{label=29;break;}
 case 28: 
 var $86=(($81)|0);
 var $87=$81;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+8)|0);
 var $90=HEAP32[(($89)>>2)];
 FUNCTION_TABLE[$90]($86);
 label=29;break;
 case 29: 
 var $91=(($__s)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=HEAP32[(($__op)>>2)];
 var $94=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$92,$__ob_0,$93,$94,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $66=$72;label=25;break; }
 case 30: 
 var $95=(($2)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($agg_result)|0);
 HEAP32[(($97)>>2)]=$96;
 _free($72);
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 _free($39);
 STACKTOP=sp;return;
 case 31: 
 var $99$0 = ___cxa_find_matching_catch(); var $99$1 = tempRet0;
 var $100=$99$0;
 var $101=$99$1;
 var $102=HEAP32[(($74)>>2)];
 var $103=(($102+4)|0);
 var $104=(tempValue=HEAP32[(($103)>>2)],HEAP32[(($103)>>2)]=tempValue+-1,tempValue);
 var $105=($104|0)==0;
 if($105){label=32;break;}else{var $_0=$100;var $_01=$101;var $112=$72;label=33;break;}
 case 32: 
 var $107=(($102)|0);
 var $108=$102;
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+8)|0);
 var $111=HEAP32[(($110)>>2)];
 FUNCTION_TABLE[$111]($107);
 var $_0=$100;var $_01=$101;var $112=$72;label=33;break;
 case 33: 
 var $112;
 var $_01;
 var $_0;
 _free($112);
 _free($39);
 var $_127=$_01;var $_18=$_0;label=34;break;
 case 34: 
 var $_18;
 var $_127;
 var $113$0=$_18;
 var $113$1=0;
 var $114$0=$113$0;
 var $114$1=$_127;
 ___resumeException($114$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($1)>>0)]=HEAP8[((5176)>>0)];HEAP8[((($1)+(1))>>0)]=HEAP8[((5177)>>0)];HEAP8[((($1)+(2))>>0)]=HEAP8[((5178)>>0)];HEAP8[((($1)+(3))>>0)]=HEAP8[((5179)>>0)];HEAP8[((($1)+(4))>>0)]=HEAP8[((5180)>>0)];HEAP8[((($1)+(5))>>0)]=HEAP8[((5181)>>0)];
 var $2=(($__nar)|0);
 var $3=__ZNSt3__16__clocEv();
 var $4=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$3,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($__nar+$4)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&176;
 if(($8|0)==16){ label=2;break;}else if(($8|0)==32){ var $_0_i=$5;label=8;break;}else{label=7;break;}
 case 2: 
 var $10=HEAP8[(($2)>>0)];
 if((($10<<24)>>24)==45|(($10<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $12=(($__nar+1)|0);
 var $_0_i=$12;label=8;break;
 case 4: 
 var $14=($4|0)>1;
 var $15=(($10<<24)>>24)==48;
 var $or_cond_i=$14&$15;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $17=(($__nar+1)|0);
 var $18=HEAP8[(($17)>>0)];
 if((($18<<24)>>24)==120|(($18<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($__nar+2)|0);
 var $_0_i=$20;label=8;break;
 case 7: 
 var $_0_i=$2;label=8;break;
 case 8: 
 var $_0_i;
 var $22=(($__o)|0);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;

 var $23=(($__iob+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+4)|0);
 var $26=$25;
 var $27=(tempValue=HEAP32[(($26)>>2)],HEAP32[(($26)>>2)]=tempValue+1,tempValue);
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 var $_idx=(($24+8)|0);
 var $29=$_idx;
 var $_idx_val=HEAP32[(($29)>>2)];
 var $_idx3=(($24+12)|0);
 var $30=$_idx3;
 var $_idx3_val=HEAP32[(($30)>>2)];
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 var $32=$31;
 var $33=(($24+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=$24;
 var $39=$24;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=12;break;
 case 12: 
 var $43=$31;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+32)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($32,$2,$5,$22);
 var $48=(($__o+$4)|0);
 var $49=($_0_i|0)==($5|0);
 if($49){var $__op_0=$48;label=17;break;}else{label=16;break;}
 case 13: 
 var $51$0 = ___cxa_find_matching_catch(); var $51$1 = tempRet0;
 var $52=(($24+4)|0);
 var $53=$52;
 var $54=(tempValue=HEAP32[(($53)>>2)],HEAP32[(($53)>>2)]=tempValue+-1,tempValue);
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=15;break;}
 case 14: 
 var $57=$24;
 var $58=$24;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+8)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($57);
 label=15;break;
 case 15: 
 ___resumeException($51$0)
 case 16: 
 var $63=$__nar;
 var $64=$_0_i;
 var $65=((($64)-($63))|0);
 var $66=(($__o+$65)|0);
 var $__op_0=$66;label=17;break;
 case 17: 
 var $__op_0;
 var $68=(($__s)|0);
 var $69=HEAP32[(($68)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$69,$22,$__op_0,$48,$__iob,$__fl);
 var $$etemp$1$0=37;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $__nm=(sp)+(8);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=31;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=25;break; }
 case 4: 
 var $_idx=(($17+8)|0);
 var $22=$_idx;
 var $_idx_val=HEAP32[(($22)>>2)];
 var $_idx4=(($17+12)|0);
 var $23=$_idx4;
 var $_idx4_val=HEAP32[(($23)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx4_val,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=25;break; }
 case 5: 
 var $25=$24;
 var $26=(($17+4)|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=($28|0)==0;
 if($29){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=$17;
 var $32=$17;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+8)|0);
 var $35=HEAP32[(($34)>>2)];
 FUNCTION_TABLE[$35]($31);
 label=7;break;
 case 7: 
 var $36=$24;
 var $37=HEAP32[(($36)>>2)];
 if($__v){label=8;break;}else{label=9;break;}
 case 8: 
 var $39=(($37+24)|0);
 var $40=HEAP32[(($39)>>2)];
 FUNCTION_TABLE[$40]($__nm,$25);
 label=10;break;
 case 9: 
 var $42=(($37+28)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($__nm,$25);
 label=10;break;
 case 10: 
 var $45=$__nm;
 var $46=HEAP8[(($45)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=12;break;}else{label=11;break;}
 case 11: 
 var $50=(($__nm+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $_pre2=(($__nm+4)|0);
 var $_ph=$51;var $_pre_phi=$_pre2;var $_pre_phi4=$50;label=13;break;
 case 12: 
 var $53=(($__nm+4)|0);
 var $_pre3=(($__nm+8)|0);
 var $_ph=$53;var $_pre_phi=$53;var $_pre_phi4=$_pre3;label=13;break;
 case 13: 
 var $_pre_phi4;
 var $_pre_phi;
 var $_ph;
 var $54=(($__s)|0);
 var $56=$_ph;var $55=$46;label=14;break;
 case 14: 
 var $55;
 var $56;
 var $57=$55&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=16;break;}else{label=15;break;}
 case 15: 
 var $60=HEAP32[(($_pre_phi4)>>2)];
 var $61=HEAP32[(($_pre_phi)>>2)];
 var $66=$61;var $65=$60;label=17;break;
 case 16: 
 var $63=($55&255);
 var $64=$63>>>1;
 var $66=$64;var $65=$_pre_phi;label=17;break;
 case 17: 
 var $65;
 var $66;
 var $67=(($65+($66<<2))|0);
 var $68=($56|0)==($67|0);
 if($68){label=29;break;}else{label=18;break;}
 case 18: 
 var $70=HEAP32[(($56)>>2)];
 var $71=HEAP32[(($54)>>2)];
 var $72=($71|0)==0;
 if($72){label=24;break;}else{label=19;break;}
 case 19: 
 var $74=(($71+24)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(($71+28)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($75|0)==($77|0);
 if($78){label=20;break;}else{label=21;break;}
 case 20: 
 var $80=$71;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+52)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($71,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$84;label=22;break; } else { label=27;break; }
 case 21: 
 var $86=(($75+4)|0);
 HEAP32[(($74)>>2)]=$86;
 HEAP32[(($75)>>2)]=$70;
 var $_0_i_i=$70;label=22;break;
 case 22: 
 var $_0_i_i;
 var $87=($_0_i_i|0)==-1;
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($54)>>2)]=0;
 label=24;break;
 case 24: 
 var $89=(($56+4)|0);
 var $_pre=HEAP8[(($45)>>0)];
 var $56=$89;var $55=$_pre;label=14;break;
 case 25: 
 var $91$0 = ___cxa_find_matching_catch(); var $91$1 = tempRet0;
 var $92=$91$0;
 var $93=$91$1;
 var $94=(($17+4)|0);
 var $95=$94;
 var $96=(tempValue=HEAP32[(($95)>>2)],HEAP32[(($95)>>2)]=tempValue+-1,tempValue);
 var $97=($96|0)==0;
 if($97){label=26;break;}else{var $_0=$92;var $_01=$93;label=32;break;}
 case 26: 
 var $99=$17;
 var $100=$17;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+8)|0);
 var $103=HEAP32[(($102)>>2)];
 FUNCTION_TABLE[$103]($99);
 var $_0=$92;var $_01=$93;label=32;break;
 case 27: 
 var $105$0 = ___cxa_find_matching_catch(); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP8[(($45)>>0)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){var $_0=$106;var $_01=$107;label=32;break;}else{label=28;break;}
 case 28: 
 var $112=(($__nm+8)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$113;
 _free($114);
 var $_0=$106;var $_01=$107;label=32;break;
 case 29: 
 var $116=HEAP32[(($54)>>2)];
 var $117=(($agg_result)|0);
 HEAP32[(($117)>>2)]=$116;
 if($58){label=31;break;}else{label=30;break;}
 case 30: 
 var $119=(($__nm+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$120;
 _free($121);
 label=31;break;
 case 31: 
 STACKTOP=sp;return;
 case 32: 
 var $_01;
 var $_0;
 var $122$0=$_0;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_01;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((5168)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((5169)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((5170)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((5171)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((5172)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((5173)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,4104,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17872);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(17488);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 var $14=$__grouping;
 var $15=HEAP8[(($14)>>0)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=3;break;}else{label=2;break;}
 case 2: 
 var $19=(($__grouping+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=4;break;
 case 3: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=4;break;
 case 4: 
 var $24;
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=12;break;}
 case 5: 
 var $27=$4;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($5,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $32=$__ne;
 var $33=$__nb;
 var $34=((($32)-($33))|0);
 var $35=(($__ob+($34<<2))|0);
 HEAP32[(($__oe)>>2)]=$35;
 var $151=$35;label=38;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $37=HEAP8[(($14)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=11;break;}else{label=10;break;}
 case 10: 
 var $41=(($__grouping+8)|0);
 var $42=HEAP32[(($41)>>2)];
 _free($42);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $44=HEAP8[(($__nb)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=13;break;}else{var $__nf_0=$__nb;label=15;break;}
 case 13: 
 var $46=$4;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+44)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($5,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=8;break; }
 case 14: 
 var $51=(($__nb+1)|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $53=(($52+4)|0);
 HEAP32[(($__oe)>>2)]=$53;
 HEAP32[(($52)>>2)]=$50;
 var $__nf_0=$51;label=15;break;
 case 15: 
 var $__nf_0;
 var $55=$__ne;
 var $56=$__nf_0;
 var $57=((($55)-($56))|0);
 var $58=($57|0)>1;
 if($58){label=16;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 16: 
 var $60=HEAP8[(($__nf_0)>>0)];
 var $61=(($60<<24)>>24)==48;
 if($61){label=17;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 17: 
 var $63=(($__nf_0+1)|0);
 var $64=HEAP8[(($63)>>0)];
 if((($64<<24)>>24)==120|(($64<<24)>>24)==88){ label=18;break;}else{var $__nf_1=$__nf_0;label=21;break;}
 case 18: 
 var $66=$4;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+44)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=8;break; }
 case 19: 
 var $71=HEAP32[(($__oe)>>2)];
 var $72=(($71+4)|0);
 HEAP32[(($__oe)>>2)]=$72;
 HEAP32[(($71)>>2)]=$70;
 var $73=HEAP8[(($63)>>0)];
 var $74=HEAP32[(($66)>>2)];
 var $75=(($74+44)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($5,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=8;break; }
 case 20: 
 var $78=(($__nf_0+2)|0);
 var $79=HEAP32[(($__oe)>>2)];
 var $80=(($79+4)|0);
 HEAP32[(($__oe)>>2)]=$80;
 HEAP32[(($79)>>2)]=$77;
 var $__nf_1=$78;label=21;break;
 case 21: 
 var $__nf_1;
 var $82=($__nf_1|0)==($__ne|0);
 if($82){label=24;break;}else{label=22;break;}
 case 22: 
 var $83=((($__ne)-(1))|0);
 var $84=($83>>>0)>($__nf_1>>>0);
 if($84){var $_012_i_i5=$__nf_1;var $85=$83;label=23;break;}else{label=24;break;}
 case 23: 
 var $85;
 var $_012_i_i5;
 var $86=HEAP8[(($_012_i_i5)>>0)];
 var $87=HEAP8[(($85)>>0)];
 HEAP8[(($_012_i_i5)>>0)]=$87;
 HEAP8[(($85)>>0)]=$86;
 var $88=(($_012_i_i5+1)|0);
 var $89=((($85)-(1))|0);
 var $90=($88>>>0)<($89>>>0);
 if($90){var $_012_i_i5=$88;var $85=$89;label=23;break;}else{label=24;break;}
 case 24: 
 var $91=$8;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$94]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=8;break; }
 case 25: 
 var $96=($__nf_1>>>0)<($__ne>>>0);
 if($96){label=27;break;}else{label=26;break;}
 case 26: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $137=$_pre;label=35;break;
 case 27: 
 var $97=$__grouping;
 var $98=(($97+1)|0);
 var $99=$4;
 var $100=(($__grouping+4)|0);
 var $101=(($__grouping+8)|0);
 var $__dc_08=0;var $__dg_09=0;var $__p_010=$__nf_1;label=28;break;
 case 28: 
 var $__p_010;
 var $__dg_09;
 var $__dc_08;
 var $102=HEAP8[(($14)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=HEAP32[(($101)>>2)];
 var $_=($104?$98:$105);
 var $106=(($_+$__dg_09)|0);
 var $107=HEAP8[(($106)>>0)];
 var $108=(($107<<24)>>24)!=0;
 var $109=(($107<<24)>>24);
 var $110=($__dc_08|0)==($109|0);
 var $or_cond=$108&$110;
 if($or_cond){label=29;break;}else{var $__dg_1=$__dg_09;var $__dc_1=$__dc_08;label=33;break;}
 case 29: 
 var $112=HEAP32[(($__oe)>>2)];
 var $113=(($112+4)|0);
 HEAP32[(($__oe)>>2)]=$113;
 HEAP32[(($112)>>2)]=$95;
 var $114=HEAP8[(($14)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=31;break;}else{label=30;break;}
 case 30: 
 var $118=HEAP32[(($100)>>2)];
 var $122=$118;label=32;break;
 case 31: 
 var $120=($114&255);
 var $121=$120>>>1;
 var $122=$121;label=32;break;
 case 32: 
 var $122;
 var $123=((($122)-(1))|0);
 var $124=($__dg_09>>>0)<($123>>>0);
 var $125=($124&1);
 var $___dg_0=((($125)+($__dg_09))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=33;break;
 case 33: 
 var $__dc_1;
 var $__dg_1;
 var $127=HEAP8[(($__p_010)>>0)];
 var $128=HEAP32[(($99)>>2)];
 var $129=(($128+44)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($5,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=7;break; }
 case 34: 
 var $132=HEAP32[(($__oe)>>2)];
 var $133=(($132+4)|0);
 HEAP32[(($__oe)>>2)]=$133;
 HEAP32[(($132)>>2)]=$131;
 var $134=((($__dc_1)+(1))|0);
 var $135=(($__p_010+1)|0);
 var $136=($135>>>0)<($__ne>>>0);
 if($136){var $__dc_08=$134;var $__dg_09=$__dg_1;var $__p_010=$135;label=28;break;}else{var $137=$133;label=35;break;}
 case 35: 
 var $137;
 var $138=$__nf_1;
 var $139=$__nb;
 var $140=((($138)-($139))|0);
 var $141=(($__ob+($140<<2))|0);
 var $142=($141|0)==($137|0);
 if($142){var $151=$137;label=38;break;}else{label=36;break;}
 case 36: 
 var $143=((($137)-(4))|0);
 var $144=($143>>>0)>($141>>>0);
 if($144){var $_012_i_i=$141;var $145=$143;label=37;break;}else{var $151=$137;label=38;break;}
 case 37: 
 var $145;
 var $_012_i_i;
 var $146=HEAP32[(($_012_i_i)>>2)];
 var $147=HEAP32[(($145)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$147;
 HEAP32[(($145)>>2)]=$146;
 var $148=(($_012_i_i+4)|0);
 var $149=((($145)-(4))|0);
 var $150=($148>>>0)<($149>>>0);
 if($150){var $_012_i_i=$148;var $145=$149;label=37;break;}else{var $151=$137;label=38;break;}
 case 38: 
 var $151;
 var $152=($__np|0)==($__ne|0);
 if($152){var $storemerge=$151;label=40;break;}else{label=39;break;}
 case 39: 
 var $154=$__np;
 var $155=$__nb;
 var $156=((($154)-($155))|0);
 var $157=(($__ob+($156<<2))|0);
 var $storemerge=$157;label=40;break;
 case 40: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $159=HEAP8[(($14)>>0)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)==0;
 if($161){label=42;break;}else{label=41;break;}
 case 41: 
 var $163=(($__grouping+8)|0);
 var $164=HEAP32[(($163)>>2)];
 _free($164);
 label=42;break;
 case 42: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,3328,1,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,22,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$3$0=164;
 var $$etemp$3$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$4$0=164;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($2)>>0)]=HEAP8[((5168)>>0)];HEAP8[((($2)+(1))>>0)]=HEAP8[((5169)>>0)];HEAP8[((($2)+(2))>>0)]=HEAP8[((5170)>>0)];HEAP8[((($2)+(3))>>0)]=HEAP8[((5171)>>0)];HEAP8[((($2)+(4))>>0)]=HEAP8[((5172)>>0)];HEAP8[((($2)+(5))>>0)]=HEAP8[((5173)>>0)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,4104,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,12,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($3,3328,0,$5);
 var $6=(($__nar)|0);
 var $7=__ZNSt3__16__clocEv();
 var $8=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($6,23,$7,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $9=(($__nar+$8)|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=$10&176;
 if(($11|0)==16){ label=2;break;}else if(($11|0)==32){ var $_0_i=$9;label=8;break;}else{label=7;break;}
 case 2: 
 var $13=HEAP8[(($6)>>0)];
 if((($13<<24)>>24)==45|(($13<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($__nar+1)|0);
 var $_0_i=$15;label=8;break;
 case 4: 
 var $17=($8|0)>1;
 var $18=(($13<<24)>>24)==48;
 var $or_cond_i=$17&$18;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $20=(($__nar+1)|0);
 var $21=HEAP8[(($20)>>0)];
 if((($21<<24)>>24)==120|(($21<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $23=(($__nar+2)|0);
 var $_0_i=$23;label=8;break;
 case 7: 
 var $_0_i=$6;label=8;break;
 case 8: 
 var $_0_i;
 var $25=$__o;
 var $$etemp$3$0=172;
 var $$etemp$3$1=0;

 var $26=(($__o)|0);
 var $27=(($__iob+28)|0);
 var $28=(($1)|0);
 var $29=HEAP32[(($27)>>2)];
 var $30=$29;
 HEAP32[(($28)>>2)]=$30;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($6,$_0_i,$9,$26,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $35=HEAP32[(($28)>>2)];
 var $36=(($35+4)|0);
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+-1,tempValue);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{label=11;break;}
 case 10: 
 var $40=(($35)|0);
 var $41=$35;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+8)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($40);
 label=11;break;
 case 11: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__op)>>2)];
 var $48=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$46,$26,$47,$48,$__iob,$__fl);
 var $$etemp$4$0=172;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=HEAP32[(($28)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $54=($53|0)==0;
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=(($51)|0);
 var $57=$51;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($58+8)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$60]($56);
 label=14;break;
 case 14: 
 ___resumeException($50$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,14320,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $41=0;var $40=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_125=$27;var $_16=$26;label=38;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(($__iob+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$32,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$33;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $35=HEAP32[(($__nb)>>2)];
 var $36=($35|0)==0;
 if($36){label=12;break;}else{var $__nc_2=$__nc_1;var $41=$35;var $40=$35;label=14;break;}
 case 12: 
 var $38=___cxa_allocate_exception(4);
 var $39=$38;
 HEAP32[(($39)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($38,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $40;
 var $41;
 var $__nc_2;
 var $42=(($40+$__nc_2)|0);
 var $43=HEAP32[(($5)>>2)];
 var $44=$43&176;
 if(($44|0)==16){ label=15;break;}else if(($44|0)==32){ var $_0_i=$42;label=21;break;}else{label=20;break;}
 case 15: 
 var $46=HEAP8[(($40)>>0)];
 if((($46<<24)>>24)==45|(($46<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $48=(($40+1)|0);
 var $_0_i=$48;label=21;break;
 case 17: 
 var $50=($__nc_2|0)>1;
 var $51=(($46<<24)>>24)==48;
 var $or_cond_i=$50&$51;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=(($40+1)|0);
 var $54=HEAP8[(($53)>>0)];
 if((($54<<24)>>24)==120|(($54<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $56=(($40+2)|0);
 var $_0_i=$56;label=21;break;
 case 20: 
 var $_0_i=$40;label=21;break;
 case 21: 
 var $_0_i;
 var $58=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $59=(($__o)|0);
 var $60=($40|0)==($8|0);
 if($60){var $__ob_0=$59;var $76=0;var $75=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $62=$__nc_2<<3;
 var $63=_malloc($62);
 var $64=$63;
 var $65=($63|0)==0;
 if($65){label=23;break;}else{var $__ob_0=$64;var $76=$64;var $75=$40;label=26;break;}
 case 23: 
 var $67=___cxa_allocate_exception(4);
 var $68=$67;
 HEAP32[(($68)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($67,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $70=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $70;
 var $71$0 = ___cxa_find_matching_catch(); var $71$1 = tempRet0;
 var $72=$71$0;
 var $73=$71$1;
 var $_0=$72;var $_01=$73;var $120=$70;label=35;break;
 case 26: 
 var $75;
 var $76;
 var $__ob_0;
 var $77=(($__iob+28)|0);
 var $78=(($1)|0);
 var $79=HEAP32[(($77)>>2)];
 var $80=$79;
 HEAP32[(($78)>>2)]=$80;
 var $81=(($79+4)|0);
 var $82=$81;
 var $83=(tempValue=HEAP32[(($82)>>2)],HEAP32[(($82)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($75,$_0_i,$42,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $85=HEAP32[(($78)>>2)];
 var $86=(($85+4)|0);
 var $87=(tempValue=HEAP32[(($86)>>2)],HEAP32[(($86)>>2)]=tempValue+-1,tempValue);
 var $88=($87|0)==0;
 if($88){label=28;break;}else{label=29;break;}
 case 28: 
 var $90=(($85)|0);
 var $91=$85;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP32[(($93)>>2)];
 FUNCTION_TABLE[$94]($90);
 label=29;break;
 case 29: 
 var $95=(($__s)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=HEAP32[(($__op)>>2)];
 var $98=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$96,$__ob_0,$97,$98,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $70=$76;label=25;break; }
 case 30: 
 var $100=(($2)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($95)>>2)]=$101;
 var $102=(($agg_result)|0);
 HEAP32[(($102)>>2)]=$101;
 var $103=($76|0)==0;
 if($103){label=32;break;}else{label=31;break;}
 case 31: 
 var $105=$76;
 _free($105);
 label=32;break;
 case 32: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 _free($41);
 STACKTOP=sp;return;
 case 33: 
 var $107$0 = ___cxa_find_matching_catch(); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 var $110=HEAP32[(($78)>>2)];
 var $111=(($110+4)|0);
 var $112=(tempValue=HEAP32[(($111)>>2)],HEAP32[(($111)>>2)]=tempValue+-1,tempValue);
 var $113=($112|0)==0;
 if($113){label=34;break;}else{var $_0=$108;var $_01=$109;var $120=$76;label=35;break;}
 case 34: 
 var $115=(($110)|0);
 var $116=$110;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+8)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($115);
 var $_0=$108;var $_01=$109;var $120=$76;label=35;break;
 case 35: 
 var $120;
 var $_01;
 var $_0;
 var $121=($120|0)==0;
 if($121){label=37;break;}else{label=36;break;}
 case 36: 
 var $123=$120;
 _free($123);
 label=37;break;
 case 37: 
 _free($41);
 var $_125=$_01;var $_16=$_0;label=38;break;
 case 38: 
 var $_16;
 var $_125;
 var $124$0=$_16;
 var $124$1=0;
 var $125$0=$124$0;
 var $125$1=$_125;
 ___resumeException($125$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__grouping=sp;
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17872);
 var $_idx3=(($2+8)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $_idx4=(($2+12)|0);
 var $_idx4_val=HEAP32[(($_idx4)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx3_val,$_idx4_val,$3);
 var $5=$4;
 var $6=HEAP32[(($1)>>2)];
 var $7=__ZNSt3__16locale2id5__getEv(17488);
 var $_idx=(($6+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx2=(($6+12)|0);
 var $_idx2_val=HEAP32[(($_idx2)>>2)];
 var $8=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx2_val,$7);
 var $9=$8;
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($__grouping,$9);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $14=HEAP8[(($__nb)>>0)];
 if((($14<<24)>>24)==45|(($14<<24)>>24)==43){ label=2;break;}else{var $__nf_0=$__nb;label=12;break;}
 case 2: 
 var $16=$4;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+44)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($5,$14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $21=(($__nb+1)|0);
 var $22=HEAP32[(($__oe)>>2)];
 var $23=(($22+4)|0);
 HEAP32[(($__oe)>>2)]=$23;
 HEAP32[(($22)>>2)]=$20;
 var $__nf_0=$21;label=12;break;
 case 4: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 5: 
 var $lpad_loopexit14$0 = ___cxa_find_matching_catch(); var $lpad_loopexit14$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit14$1;var $lpad_phi$0=$lpad_loopexit14$0;label=9;break;
 case 6: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(); var $lpad_loopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit22$1;var $lpad_phi$0=$lpad_loopexit22$0;label=9;break;
 case 7: 
 var $lpad_loopexit29$0 = ___cxa_find_matching_catch(); var $lpad_loopexit29$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit29$1;var $lpad_phi$0=$lpad_loopexit29$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit30$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit30$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit30$1;var $lpad_phi$0=$lpad_nonloopexit30$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $24=$__grouping;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=11;break;}else{label=10;break;}
 case 10: 
 var $29=(($__grouping+8)|0);
 var $30=HEAP32[(($29)>>2)];
 _free($30);
 label=11;break;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 var $__nf_0;
 var $32=$__ne;
 var $33=$__nf_0;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>1;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $36=($__nf_0>>>0)<($__ne>>>0);
 if($36){var $__ns_125=$__nf_0;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=26;break;}
 case 14: 
 var $38=HEAP8[(($__nf_0)>>0)];
 var $39=(($38<<24)>>24)==48;
 if($39){label=15;break;}else{label=13;break;}
 case 15: 
 var $41=(($__nf_0+1)|0);
 var $42=HEAP8[(($41)>>0)];
 if((($42<<24)>>24)==120|(($42<<24)>>24)==88){ label=16;break;}else{label=13;break;}
 case 16: 
 var $44=$4;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+44)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($5,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 17: 
 var $49=HEAP32[(($__oe)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__oe)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $51=(($__nf_0+2)|0);
 var $52=HEAP8[(($41)>>0)];
 var $53=HEAP32[(($44)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($5,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=8;break; }
 case 18: 
 var $57=HEAP32[(($__oe)>>2)];
 var $58=(($57+4)|0);
 HEAP32[(($__oe)>>2)]=$58;
 HEAP32[(($57)>>2)]=$56;
 var $59=($51>>>0)<($__ne>>>0);
 if($59){var $__ns_033=$51;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$51;label=26;break;}
 case 19: 
 var $60=(($__ns_033+1)|0);
 var $61=($60>>>0)<($__ne>>>0);
 if($61){var $__ns_033=$60;label=20;break;}else{var $__nf_1=$51;var $__ns_2=$60;label=26;break;}
 case 20: 
 var $__ns_033;
 var $62=HEAP8[(($__ns_033)>>0)];
 var $63=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=7;break; }
 case 21: 
 var $65=(($62<<24)>>24);
 var $isdigittmp_i_i=((($65)-(48))|0);
 var $isdigit_i_i=($isdigittmp_i_i>>>0)<10;
 if($isdigit_i_i){label=19;break;}else{label=22;break;}
 case 22: 
 var $66=$65|32;
 var $67=((($66)-(97))|0);
 var $68=($67>>>0)<6;
 if($68){label=19;break;}else{var $__nf_1=$51;var $__ns_2=$__ns_033;label=26;break;}
 case 23: 
 var $70=($75>>>0)<($__ne>>>0);
 if($70){var $__ns_125=$75;label=24;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$75;label=26;break;}
 case 24: 
 var $__ns_125;
 var $71=HEAP8[(($__ns_125)>>0)];
 var $72=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=6;break; }
 case 25: 
 var $74=(($71<<24)>>24);
 var $isdigittmp_i=((($74)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 var $75=(($__ns_125+1)|0);
 if($isdigit_i){label=23;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__ns_125;label=26;break;}
 case 26: 
 var $__ns_2;
 var $__nf_1;
 var $76=$__grouping;
 var $77=HEAP8[(($76)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=28;break;}else{label=27;break;}
 case 27: 
 var $81=(($__grouping+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $86=$82;label=29;break;
 case 28: 
 var $84=($77&255);
 var $85=$84>>>1;
 var $86=$85;label=29;break;
 case 29: 
 var $86;
 var $87=($86|0)==0;
 if($87){label=30;break;}else{label=32;break;}
 case 30: 
 var $89=HEAP32[(($__oe)>>2)];
 var $90=$4;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+48)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($5,$__nf_1,$__ns_2,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=8;break; }
 case 31: 
 var $95=$__ns_2;
 var $96=$__nf_1;
 var $97=((($95)-($96))|0);
 var $98=HEAP32[(($__oe)>>2)];
 var $99=(($98+($97<<2))|0);
 HEAP32[(($__oe)>>2)]=$99;
 var $170=$99;label=49;break;
 case 32: 
 var $101=($__nf_1|0)==($__ns_2|0);
 if($101){label=35;break;}else{label=33;break;}
 case 33: 
 var $102=((($__ns_2)-(1))|0);
 var $103=($102>>>0)>($__nf_1>>>0);
 if($103){var $_012_i_i=$__nf_1;var $104=$102;label=34;break;}else{label=35;break;}
 case 34: 
 var $104;
 var $_012_i_i;
 var $105=HEAP8[(($_012_i_i)>>0)];
 var $106=HEAP8[(($104)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$106;
 HEAP8[(($104)>>0)]=$105;
 var $107=(($_012_i_i+1)|0);
 var $108=((($104)-(1))|0);
 var $109=($107>>>0)<($108>>>0);
 if($109){var $_012_i_i=$107;var $104=$108;label=34;break;}else{label=35;break;}
 case 35: 
 var $110=$8;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=8;break; }
 case 36: 
 var $115=($__nf_1>>>0)<($__ns_2>>>0);
 if($115){label=38;break;}else{label=37;break;}
 case 37: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $156=$_pre;label=46;break;
 case 38: 
 var $116=$__grouping;
 var $117=(($116+1)|0);
 var $118=(($__grouping+4)|0);
 var $119=(($__grouping+8)|0);
 var $120=$4;
 var $__dc_017=0;var $__dg_018=0;var $__p_019=$__nf_1;label=39;break;
 case 39: 
 var $__p_019;
 var $__dg_018;
 var $__dc_017;
 var $121=HEAP8[(($76)>>0)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 var $124=HEAP32[(($119)>>2)];
 var $_=($123?$117:$124);
 var $125=(($_+$__dg_018)|0);
 var $126=HEAP8[(($125)>>0)];
 var $127=(($126<<24)>>24)>0;
 var $128=(($126<<24)>>24);
 var $129=($__dc_017|0)==($128|0);
 var $or_cond=$127&$129;
 if($or_cond){label=40;break;}else{var $__dg_1=$__dg_018;var $__dc_1=$__dc_017;label=44;break;}
 case 40: 
 var $131=HEAP32[(($__oe)>>2)];
 var $132=(($131+4)|0);
 HEAP32[(($__oe)>>2)]=$132;
 HEAP32[(($131)>>2)]=$114;
 var $133=HEAP8[(($76)>>0)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=42;break;}else{label=41;break;}
 case 41: 
 var $137=HEAP32[(($118)>>2)];
 var $141=$137;label=43;break;
 case 42: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=43;break;
 case 43: 
 var $141;
 var $142=((($141)-(1))|0);
 var $143=($__dg_018>>>0)<($142>>>0);
 var $144=($143&1);
 var $___dg_0=((($144)+($__dg_018))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=44;break;
 case 44: 
 var $__dc_1;
 var $__dg_1;
 var $146=HEAP8[(($__p_019)>>0)];
 var $147=HEAP32[(($120)>>2)];
 var $148=(($147+44)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($5,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=5;break; }
 case 45: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=(($151+4)|0);
 HEAP32[(($__oe)>>2)]=$152;
 HEAP32[(($151)>>2)]=$150;
 var $153=((($__dc_1)+(1))|0);
 var $154=(($__p_019+1)|0);
 var $155=($154>>>0)<($__ns_2>>>0);
 if($155){var $__dc_017=$153;var $__dg_018=$__dg_1;var $__p_019=$154;label=39;break;}else{var $156=$152;label=46;break;}
 case 46: 
 var $156;
 var $157=$__nf_1;
 var $158=$__nb;
 var $159=((($157)-($158))|0);
 var $160=(($__ob+($159<<2))|0);
 var $161=($160|0)==($156|0);
 if($161){var $170=$156;label=49;break;}else{label=47;break;}
 case 47: 
 var $162=((($156)-(4))|0);
 var $163=($162>>>0)>($160>>>0);
 if($163){var $_012_i_i7=$160;var $164=$162;label=48;break;}else{var $170=$156;label=49;break;}
 case 48: 
 var $164;
 var $_012_i_i7;
 var $165=HEAP32[(($_012_i_i7)>>2)];
 var $166=HEAP32[(($164)>>2)];
 HEAP32[(($_012_i_i7)>>2)]=$166;
 HEAP32[(($164)>>2)]=$165;
 var $167=(($_012_i_i7+4)|0);
 var $168=((($164)-(4))|0);
 var $169=($167>>>0)<($168>>>0);
 if($169){var $_012_i_i7=$167;var $164=$168;label=48;break;}else{var $170=$156;label=49;break;}
 case 49: 
 var $170;
 var $171=($__ns_2>>>0)<($__ne>>>0);
 if($171){label=50;break;}else{var $__nf_3=$__ns_2;var $194=$170;label=56;break;}
 case 50: 
 var $172=$4;
 var $__nf_213=$__ns_2;label=51;break;
 case 51: 
 var $__nf_213;
 var $174=HEAP8[(($__nf_213)>>0)];
 var $175=(($174<<24)>>24)==46;
 if($175){label=52;break;}else{label=54;break;}
 case 52: 
 var $177=$8;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=8;break; }
 case 53: 
 var $182=HEAP32[(($__oe)>>2)];
 var $183=(($182+4)|0);
 HEAP32[(($__oe)>>2)]=$183;
 HEAP32[(($182)>>2)]=$181;
 var $184=(($__nf_213+1)|0);
 var $__nf_3=$184;var $194=$183;label=56;break;
 case 54: 
 var $186=HEAP32[(($172)>>2)];
 var $187=(($186+44)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($5,$174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=4;break; }
 case 55: 
 var $190=HEAP32[(($__oe)>>2)];
 var $191=(($190+4)|0);
 HEAP32[(($__oe)>>2)]=$191;
 HEAP32[(($190)>>2)]=$189;
 var $192=(($__nf_213+1)|0);
 var $193=($192>>>0)<($__ne>>>0);
 if($193){var $__nf_213=$192;label=51;break;}else{var $__nf_3=$192;var $194=$191;label=56;break;}
 case 56: 
 var $194;
 var $__nf_3;
 var $195=$4;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+48)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($5,$__nf_3,$__ne,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=8;break; }
 case 57: 
 var $200=$__nf_3;
 var $201=((($32)-($200))|0);
 var $202=HEAP32[(($__oe)>>2)];
 var $203=(($202+($201<<2))|0);
 HEAP32[(($__oe)>>2)]=$203;
 var $204=($__np|0)==($__ne|0);
 if($204){var $storemerge=$203;label=59;break;}else{label=58;break;}
 case 58: 
 var $206=$__np;
 var $207=$__nb;
 var $208=((($206)-($207))|0);
 var $209=(($__ob+($208<<2))|0);
 var $storemerge=$209;label=59;break;
 case 59: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $211=HEAP8[(($76)>>0)];
 var $212=$211&1;
 var $213=(($212<<24)>>24)==0;
 if($213){label=61;break;}else{label=60;break;}
 case 60: 
 var $215=(($__grouping+8)|0);
 var $216=HEAP32[(($215)>>2)];
 _free($216);
 label=61;break;
 case 61: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=__ZNSt3__114__num_put_base14__format_floatEPcPKcj($4,2120,$6);
 var $8=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$8;
 var $9=__ZNSt3__16__clocEv();
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $11=(($__iob+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$12,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$13;label=4;break;
 case 3: 
 var $15=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($8,30,$9,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$15;label=4;break;
 case 4: 
 var $__nc_0;
 var $17=($__nc_0|0)>29;
 if($17){label=5;break;}else{var $__nc_2=$__nc_0;var $39=0;var $38=$8;label=14;break;}
 case 5: 
 if($7){label=6;break;}else{label=9;break;}
 case 6: 
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $22=(($__iob+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$23,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$24;label=11;break; } else { label=8;break; }
 case 8: 
 var $25$0 = ___cxa_find_matching_catch(); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_125=$27;var $_16=$26;label=38;break;
 case 9: 
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 10: 
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$29,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$31;label=11;break; } else { label=8;break; }
 case 11: 
 var $__nc_1;
 var $33=HEAP32[(($__nb)>>2)];
 var $34=($33|0)==0;
 if($34){label=12;break;}else{var $__nc_2=$__nc_1;var $39=$33;var $38=$33;label=14;break;}
 case 12: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $38;
 var $39;
 var $__nc_2;
 var $40=(($38+$__nc_2)|0);
 var $41=HEAP32[(($5)>>2)];
 var $42=$41&176;
 if(($42|0)==16){ label=15;break;}else if(($42|0)==32){ var $_0_i=$40;label=21;break;}else{label=20;break;}
 case 15: 
 var $44=HEAP8[(($38)>>0)];
 if((($44<<24)>>24)==45|(($44<<24)>>24)==43){ label=16;break;}else{label=17;break;}
 case 16: 
 var $46=(($38+1)|0);
 var $_0_i=$46;label=21;break;
 case 17: 
 var $48=($__nc_2|0)>1;
 var $49=(($44<<24)>>24)==48;
 var $or_cond_i=$48&$49;
 if($or_cond_i){label=18;break;}else{label=20;break;}
 case 18: 
 var $51=(($38+1)|0);
 var $52=HEAP8[(($51)>>0)];
 if((($52<<24)>>24)==120|(($52<<24)>>24)==88){ label=19;break;}else{label=20;break;}
 case 19: 
 var $54=(($38+2)|0);
 var $_0_i=$54;label=21;break;
 case 20: 
 var $_0_i=$38;label=21;break;
 case 21: 
 var $_0_i;
 var $56=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $57=(($__o)|0);
 var $58=($38|0)==($8|0);
 if($58){var $__ob_0=$57;var $74=0;var $73=$8;label=26;break;}else{label=22;break;}
 case 22: 
 var $60=$__nc_2<<3;
 var $61=_malloc($60);
 var $62=$61;
 var $63=($61|0)==0;
 if($63){label=23;break;}else{var $__ob_0=$62;var $74=$62;var $73=$38;label=26;break;}
 case 23: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $68=0;label=25;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $68;
 var $69$0 = ___cxa_find_matching_catch(); var $69$1 = tempRet0;
 var $70=$69$0;
 var $71=$69$1;
 var $_0=$70;var $_01=$71;var $118=$68;label=35;break;
 case 26: 
 var $73;
 var $74;
 var $__ob_0;
 var $75=(($__iob+28)|0);
 var $76=(($1)|0);
 var $77=HEAP32[(($75)>>2)];
 var $78=$77;
 HEAP32[(($76)>>2)]=$78;
 var $79=(($77+4)|0);
 var $80=$79;
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($73,$_0_i,$40,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=33;break; }
 case 27: 
 var $83=HEAP32[(($76)>>2)];
 var $84=(($83+4)|0);
 var $85=(tempValue=HEAP32[(($84)>>2)],HEAP32[(($84)>>2)]=tempValue+-1,tempValue);
 var $86=($85|0)==0;
 if($86){label=28;break;}else{label=29;break;}
 case 28: 
 var $88=(($83)|0);
 var $89=$83;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+8)|0);
 var $92=HEAP32[(($91)>>2)];
 FUNCTION_TABLE[$92]($88);
 label=29;break;
 case 29: 
 var $93=(($__s)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=HEAP32[(($__op)>>2)];
 var $96=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$94,$__ob_0,$95,$96,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $68=$74;label=25;break; }
 case 30: 
 var $98=(($2)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP32[(($93)>>2)]=$99;
 var $100=(($agg_result)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=($74|0)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 var $103=$74;
 _free($103);
 label=32;break;
 case 32: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 _free($39);
 STACKTOP=sp;return;
 case 33: 
 var $105$0 = ___cxa_find_matching_catch(); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP32[(($76)>>2)];
 var $109=(($108+4)|0);
 var $110=(tempValue=HEAP32[(($109)>>2)],HEAP32[(($109)>>2)]=tempValue+-1,tempValue);
 var $111=($110|0)==0;
 if($111){label=34;break;}else{var $_0=$106;var $_01=$107;var $118=$74;label=35;break;}
 case 34: 
 var $113=(($108)|0);
 var $114=$108;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+8)|0);
 var $117=HEAP32[(($116)>>2)];
 FUNCTION_TABLE[$117]($113);
 var $_0=$106;var $_01=$107;var $118=$74;label=35;break;
 case 35: 
 var $118;
 var $_01;
 var $_0;
 var $119=($118|0)==0;
 if($119){label=37;break;}else{label=36;break;}
 case 36: 
 var $121=$118;
 _free($121);
 label=37;break;
 case 37: 
 _free($39);
 var $_125=$_01;var $_16=$_0;label=38;break;
 case 38: 
 var $_16;
 var $_125;
 var $122$0=$_16;
 var $122$1=0;
 var $123$0=$122$0;
 var $123$1=$_125;
 ___resumeException($123$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[(($1)>>0)]=HEAP8[((5176)>>0)];HEAP8[((($1)+(1))>>0)]=HEAP8[((5177)>>0)];HEAP8[((($1)+(2))>>0)]=HEAP8[((5178)>>0)];HEAP8[((($1)+(3))>>0)]=HEAP8[((5179)>>0)];HEAP8[((($1)+(4))>>0)]=HEAP8[((5180)>>0)];HEAP8[((($1)+(5))>>0)]=HEAP8[((5181)>>0)];
 var $2=(($__nar)|0);
 var $3=__ZNSt3__16__clocEv();
 var $4=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$3,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=(($__nar+$4)|0);
 var $6=(($__iob+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&176;
 if(($8|0)==16){ label=2;break;}else if(($8|0)==32){ var $_0_i=$5;label=8;break;}else{label=7;break;}
 case 2: 
 var $10=HEAP8[(($2)>>0)];
 if((($10<<24)>>24)==45|(($10<<24)>>24)==43){ label=3;break;}else{label=4;break;}
 case 3: 
 var $12=(($__nar+1)|0);
 var $_0_i=$12;label=8;break;
 case 4: 
 var $14=($4|0)>1;
 var $15=(($10<<24)>>24)==48;
 var $or_cond_i=$14&$15;
 if($or_cond_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $17=(($__nar+1)|0);
 var $18=HEAP8[(($17)>>0)];
 if((($18<<24)>>24)==120|(($18<<24)>>24)==88){ label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($__nar+2)|0);
 var $_0_i=$20;label=8;break;
 case 7: 
 var $_0_i=$2;label=8;break;
 case 8: 
 var $_0_i;
 var $22=$__o;
 var $$etemp$0$0=148;
 var $$etemp$0$1=0;

 var $23=(($__iob+28)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+4)|0);
 var $26=$25;
 var $27=(tempValue=HEAP32[(($26)>>2)],HEAP32[(($26)>>2)]=tempValue+1,tempValue);
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=13;break; }
 case 9: 
 var $_idx=(($24+8)|0);
 var $29=$_idx;
 var $_idx_val=HEAP32[(($29)>>2)];
 var $_idx3=(($24+12)|0);
 var $30=$_idx3;
 var $_idx3_val=HEAP32[(($30)>>2)];
 var $31=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 var $32=$31;
 var $33=(($24+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=11;break;}else{label=12;break;}
 case 11: 
 var $38=$24;
 var $39=$24;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=12;break;
 case 12: 
 var $43=(($__o)|0);
 var $44=$31;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+48)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($32,$2,$5,$43);
 var $49=(($__o+($4<<2))|0);
 var $50=($_0_i|0)==($5|0);
 if($50){var $__op_0=$49;label=17;break;}else{label=16;break;}
 case 13: 
 var $52$0 = ___cxa_find_matching_catch(); var $52$1 = tempRet0;
 var $53=(($24+4)|0);
 var $54=$53;
 var $55=(tempValue=HEAP32[(($54)>>2)],HEAP32[(($54)>>2)]=tempValue+-1,tempValue);
 var $56=($55|0)==0;
 if($56){label=14;break;}else{label=15;break;}
 case 14: 
 var $58=$24;
 var $59=$24;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+8)|0);
 var $62=HEAP32[(($61)>>2)];
 FUNCTION_TABLE[$62]($58);
 label=15;break;
 case 15: 
 ___resumeException($52$0)
 case 16: 
 var $64=$__nar;
 var $65=$_0_i;
 var $66=((($65)-($64))|0);
 var $67=(($__o+($66<<2))|0);
 var $__op_0=$67;label=17;break;
 case 17: 
 var $__op_0;
 var $69=(($__s)|0);
 var $70=HEAP32[(($69)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$70,$43,$__op_0,$49,$__iob,$__fl);
 var $$etemp$1$0=148;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=18;break; }
 case 2: 
 var $_idx=(($5+8)|0);
 var $10=$_idx;
 var $_idx_val=HEAP32[(($10)>>2)];
 var $_idx3=(($5+12)|0);
 var $11=$_idx3;
 var $_idx3_val=HEAP32[(($11)>>2)];
 var $12=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $13=$12;
 var $14=(($5+4)|0);
 var $15=$14;
 var $16=(tempValue=HEAP32[(($15)>>2)],HEAP32[(($15)>>2)]=tempValue+-1,tempValue);
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$5;
 var $20=$5;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 FUNCTION_TABLE[$23]($19);
 label=5;break;
 case 5: 
 HEAP32[(($__err)>>2)]=0;
 var $24=($__fmtb|0)==($__fmte|0);
 if($24){var $_pre_i_i_i4=$__b_0;var $__e_sroa_0_10=$__e_0;label=63;break;}else{label=6;break;}
 case 6: 
 var $25=$12;
 var $26=(($12+8)|0);
 var $27=$26;
 var $28=$12;
 var $29=$this;
 var $30=(($2)|0);
 var $31=(($3)|0);
 var $32=(($1)|0);
 var $_0_ph36=$__fmtb;var $_pre37=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=7;break;
 case 7: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre37;
 var $_0_ph36;
 var $34=$_pre37;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=8;break;
 case 8: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $34;
 var $35=($34|0)==0;
 if($35){label=9;break;}else{var $_pre_i_i_i4=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=63;break;}
 case 9: 
 var $37=($__b_sroa_0_1|0)==0;
 if($37){var $50=0;var $__b_sroa_0_2=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $39=(($__b_sroa_0_1+12)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($__b_sroa_0_1+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($40|0)==($42|0);
 if($43){label=11;break;}else{var $50=$__b_sroa_0_1;var $__b_sroa_0_2=$__b_sroa_0_1;label=12;break;}
 case 11: 
 var $44=$__b_sroa_0_1;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($__b_sroa_0_1);
 var $49=($48|0)==-1;
 var $___b_sroa_0_1=($49?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($49?0:$__b_sroa_0_1);
 var $50=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=12;break;
 case 12: 
 var $__b_sroa_0_2;
 var $50;
 var $51=($50|0)==0;
 var $52=($__e_sroa_0_1|0)==0;
 if($52){label=16;break;}else{label=13;break;}
 case 13: 
 var $54=(($__e_sroa_0_1+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($__e_sroa_0_1+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 var $59=$__e_sroa_0_1;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+36)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=FUNCTION_TABLE[$62]($__e_sroa_0_1);
 var $64=($63|0)==-1;
 if($64){label=16;break;}else{label=15;break;}
 case 15: 
 if($51){var $__e_sroa_0_4=$__e_sroa_0_1;label=21;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=17;break;}
 case 16: 
 if($51){var $__e_sroa_0_3=0;label=17;break;}else{var $__e_sroa_0_4=0;label=21;break;}
 case 17: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_3;label=63;break;
 case 18: 
 var $67$0 = ___cxa_find_matching_catch(); var $67$1 = tempRet0;
 var $68=(($5+4)|0);
 var $69=$68;
 var $70=(tempValue=HEAP32[(($69)>>2)],HEAP32[(($69)>>2)]=tempValue+-1,tempValue);
 var $71=($70|0)==0;
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 var $73=$5;
 var $74=$5;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+8)|0);
 var $77=HEAP32[(($76)>>2)];
 FUNCTION_TABLE[$77]($73);
 label=20;break;
 case 20: 
 ___resumeException($67$0)
 case 21: 
 var $__e_sroa_0_4;
 var $79=HEAP8[(($_0_ph36)>>0)];
 var $80=HEAP32[(($25)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=FUNCTION_TABLE[$82]($13,$79,0);
 var $84=(($83<<24)>>24)==37;
 if($84){label=22;break;}else{label=31;break;}
 case 22: 
 var $86=(($_0_ph36+1)|0);
 var $87=($86|0)==($__fmte|0);
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_4;label=63;break;
 case 24: 
 var $90=HEAP8[(($86)>>0)];
 var $91=HEAP32[(($25)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($13,$90,0);
 if((($94<<24)>>24)==69|(($94<<24)>>24)==48){ label=25;break;}else{var $__opt_0=0;var $__cmd_0=$94;var $_1=$86;label=28;break;}
 case 25: 
 var $96=(($_0_ph36+2)|0);
 var $97=($96|0)==($__fmte|0);
 if($97){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i4=$50;var $__e_sroa_0_10=$__e_sroa_0_4;label=63;break;
 case 27: 
 var $100=HEAP8[(($96)>>0)];
 var $101=HEAP32[(($25)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($13,$100,0);
 var $__opt_0=$94;var $__cmd_0=$104;var $_1=$96;label=28;break;
 case 28: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $106=HEAP32[(($29)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP32[(($30)>>2)]=$50;
 HEAP32[(($31)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$108]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $109=HEAP32[(($32)>>2)];
 var $110=(($_1+1)|0);
 var $_0_ph_be=$110;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$109;label=29;break;
 case 29: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $111=($_0_ph_be|0)==($__fmte|0);
 if($111){var $_pre_i_i_i4=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=63;break;}else{label=30;break;}
 case 30: 
 var $_pre37_pre=HEAP32[(($__err)>>2)];
 var $_0_ph36=$_0_ph_be;var $_pre37=$_pre37_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=7;break;
 case 31: 
 var $113=HEAP8[(($_0_ph36)>>0)];
 var $isascii1_i=(($113<<24)>>24)>-1;
 if($isascii1_i){label=32;break;}else{label=54;break;}
 case 32: 
 var $114=(($113<<24)>>24);
 var $115=HEAP32[(($27)>>2)];
 var $116=(($115+($114<<1))|0);
 var $117=HEAP16[(($116)>>1)];
 var $118=$117&8192;
 var $119=(($118<<16)>>16)==0;
 if($119){label=54;break;}else{var $_0_pn=$_0_ph36;label=33;break;}
 case 33: 
 var $_0_pn;
 var $_2=(($_0_pn+1)|0);
 var $120=($_2|0)==($__fmte|0);
 if($120){var $_2_lcssa=$__fmte;label=36;break;}else{label=34;break;}
 case 34: 
 var $122=HEAP8[(($_2)>>0)];
 var $isascii1_i1=(($122<<24)>>24)>-1;
 if($isascii1_i1){label=35;break;}else{var $_2_lcssa=$_2;label=36;break;}
 case 35: 
 var $123=(($122<<24)>>24);
 var $124=(($115+($123<<1))|0);
 var $125=HEAP16[(($124)>>1)];
 var $126=$125&8192;
 var $127=(($126<<16)>>16)==0;
 if($127){var $_2_lcssa=$_2;label=36;break;}else{var $_0_pn=$_2;label=33;break;}
 case 36: 
 var $_2_lcssa;
 var $_pre_i_i_i13=$50;var $128=$__e_sroa_0_4;var $_pre_i2_i_i17=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=37;break;
 case 37: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i2_i_i17;
 var $128;
 var $_pre_i_i_i13;
 var $129=($_pre_i_i_i13|0)==0;
 if($129){var $142=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=40;break;}else{label=38;break;}
 case 38: 
 var $131=(($_pre_i_i_i13+12)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=(($_pre_i_i_i13+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($132|0)==($134|0);
 if($135){label=39;break;}else{var $142=$_pre_i_i_i13;var $__b_sroa_0_5=$__b_sroa_0_4;label=40;break;}
 case 39: 
 var $136=$_pre_i_i_i13;
 var $137=HEAP32[(($136)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=FUNCTION_TABLE[$139]($_pre_i_i_i13);
 var $141=($140|0)==-1;
 var $___b_sroa_0_4=($141?0:$__b_sroa_0_4);
 var $__pre_i_i_i13=($141?0:$_pre_i_i_i13);
 var $142=$__pre_i_i_i13;var $__b_sroa_0_5=$___b_sroa_0_4;label=40;break;
 case 40: 
 var $__b_sroa_0_5;
 var $142;
 var $143=($142|0)==0;
 var $144=($128|0)==0;
 if($144){var $_pre_i2_i_i1739=$_pre_i2_i_i17;var $__e_sroa_0_7=$__e_sroa_0_6;label=44;break;}else{label=41;break;}
 case 41: 
 var $146=(($128+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($128+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($147|0)==($149|0);
 if($150){label=43;break;}else{label=42;break;}
 case 42: 
 if($143){var $159=$128;var $_pre_i2_i_i1738=$_pre_i2_i_i17;var $__e_sroa_0_8=$__e_sroa_0_6;label=46;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 43: 
 var $151=$128;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+36)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=FUNCTION_TABLE[$154]($128);
 var $156=($155|0)==-1;
 if($156){var $_pre_i2_i_i1739=0;var $__e_sroa_0_7=0;label=44;break;}else{label=45;break;}
 case 44: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i1739;
 if($143){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}else{var $159=0;var $_pre_i2_i_i1738=$_pre_i2_i_i1739;var $__e_sroa_0_8=$__e_sroa_0_7;label=46;break;}
 case 45: 
 var $157=($_pre_i2_i_i17|0)==0;
 var $tmp_i_i19=$143^$157;
 if($tmp_i_i19){var $159=$_pre_i2_i_i17;var $_pre_i2_i_i1738=$_pre_i2_i_i17;var $__e_sroa_0_8=$__e_sroa_0_6;label=46;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 46: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i1738;
 var $159;
 var $160=(($142+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($142+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=47;break;}else{label=48;break;}
 case 47: 
 var $166=$142;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($142);
 var $extract_t_i=(($170)&255);
 var $_0_i_off0_i=$extract_t_i;label=49;break;
 case 48: 
 var $172=HEAP8[(($161)>>0)];
 var $_0_i_off0_i=$172;label=49;break;
 case 49: 
 var $_0_i_off0_i;
 var $isascii1_i20=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i20){label=50;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}
 case 50: 
 var $173=(($_0_i_off0_i<<24)>>24);
 var $174=HEAP32[(($27)>>2)];
 var $175=(($174+($173<<1))|0);
 var $176=HEAP16[(($175)>>1)];
 var $177=$176&8192;
 var $178=(($177<<16)>>16)==0;
 if($178){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=29;break;}else{label=51;break;}
 case 51: 
 var $180=HEAP32[(($160)>>2)];
 var $181=HEAP32[(($162)>>2)];
 var $182=($180|0)==($181|0);
 if($182){label=52;break;}else{label=53;break;}
 case 52: 
 var $184=$142;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+40)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($142);
 var $_pre_i_i_i13=$142;var $128=$159;var $_pre_i2_i_i17=$_pre_i2_i_i1738;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=37;break;
 case 53: 
 var $190=(($180+1)|0);
 HEAP32[(($160)>>2)]=$190;
 var $_pre_i_i_i13=$142;var $128=$159;var $_pre_i2_i_i17=$_pre_i2_i_i1738;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=37;break;
 case 54: 
 var $191=(($50+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($50+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($192|0)==($194|0);
 if($195){label=55;break;}else{label=56;break;}
 case 55: 
 var $197=$50;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+36)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=FUNCTION_TABLE[$200]($50);
 var $extract_t_i22=(($201)&255);
 var $_0_i_off0_i23=$extract_t_i22;label=57;break;
 case 56: 
 var $203=HEAP8[(($192)>>0)];
 var $_0_i_off0_i23=$203;label=57;break;
 case 57: 
 var $_0_i_off0_i23;
 var $204=HEAP32[(($28)>>2)];
 var $205=(($204+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($13,$_0_i_off0_i23);
 var $208=HEAP8[(($_0_ph36)>>0)];
 var $209=HEAP32[(($28)>>2)];
 var $210=(($209+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($13,$208);
 var $213=(($207<<24)>>24)==(($212<<24)>>24);
 if($213){label=58;break;}else{label=62;break;}
 case 58: 
 var $215=HEAP32[(($191)>>2)];
 var $216=HEAP32[(($193)>>2)];
 var $217=($215|0)==($216|0);
 if($217){label=59;break;}else{label=60;break;}
 case 59: 
 var $219=$50;
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+40)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=FUNCTION_TABLE[$222]($50);
 label=61;break;
 case 60: 
 var $225=(($215+1)|0);
 HEAP32[(($191)>>2)]=$225;
 label=61;break;
 case 61: 
 var $226=(($_0_ph36+1)|0);
 var $_0_ph_be=$226;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=29;break;
 case 62: 
 HEAP32[(($__err)>>2)]=4;
 var $34=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=8;break;
 case 63: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i4;
 var $227=($_pre_i_i_i4|0)==0;
 if($227){var $240=0;label=66;break;}else{label=64;break;}
 case 64: 
 var $229=(($_pre_i_i_i4+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($_pre_i_i_i4+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($230|0)==($232|0);
 if($233){label=65;break;}else{var $240=$_pre_i_i_i4;label=66;break;}
 case 65: 
 var $234=$_pre_i_i_i4;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=FUNCTION_TABLE[$237]($_pre_i_i_i4);
 var $239=($238|0)==-1;
 var $__pre_i_i_i4=($239?0:$_pre_i_i_i4);
 var $240=$__pre_i_i_i4;label=66;break;
 case 66: 
 var $240;
 var $241=($240|0)==0;
 var $242=($__e_sroa_0_10|0)==0;
 if($242){label=70;break;}else{label=67;break;}
 case 67: 
 var $244=(($__e_sroa_0_10+12)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(($__e_sroa_0_10+16)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($245|0)==($247|0);
 if($248){label=68;break;}else{label=69;break;}
 case 68: 
 var $249=$__e_sroa_0_10;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+36)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=FUNCTION_TABLE[$252]($__e_sroa_0_10);
 var $254=($253|0)==-1;
 if($254){label=70;break;}else{label=69;break;}
 case 69: 
 if($241){label=72;break;}else{label=71;break;}
 case 70: 
 if($241){label=71;break;}else{label=72;break;}
 case 71: 
 var $256=HEAP32[(($__err)>>2)];
 var $257=$256|2;
 HEAP32[(($__err)>>2)]=$257;
 label=72;break;
 case 72: 
 var $259=(($agg_result)|0);
 HEAP32[(($259)>>2)]=$240;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5160,5168);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[(($11)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $26=$19;var $25=$17;label=4;break;
 case 3: 
 var $21=$6;
 var $22=(($21+1)|0);
 var $23=($12&255);
 var $24=$23>>>1;
 var $26=$24;var $25=$22;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=(($25+$26)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$25,$27);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+24)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($1);
 var $6=(($5+168)|0);
 var $7=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$5,$6,$__ct,$__err,0);
 var $8=$7;
 var $9=$5;
 var $10=((($8)-($9))|0);
 var $11=($10|0)<168;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(((($10|0))/(12))&-1);
 var $14=(((($13|0))%(7))&-1);
 HEAP32[(($__w)>>2)]=$14;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+16)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($6+288)|0);
 var $8=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$6,$7,$__ct,$__err,0);
 var $9=$8;
 var $10=$6;
 var $11=((($9)-($10))|0);
 var $12=($11|0)<288;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=(((($11|0))/(12))&-1);
 var $15=(((($14|0))%(12))&-1);
 HEAP32[(($__m)>>2)]=$15;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+20)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($__y,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,4);
 var $2=HEAP32[(($__err)>>2)];
 var $3=$2&4;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=($1|0)<69;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=((($1)+(2000))|0);
 var $__t_0=$8;label=5;break;
 case 4: 
 var $_off=((($1)-(69))|0);
 var $10=($_off>>>0)<31;
 var $11=((($1)+(1900))|0);
 var $_=($10?$11:$1);
 var $__t_0=$_;label=5;break;
 case 5: 
 var $__t_0;
 var $13=((($__t_0)-(1900))|0);
 HEAP32[(($__y)>>2)]=$13;
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($12+8)|0);
 var $17=$_idx;
 var $_idx_val=HEAP32[(($17)>>2)];
 var $_idx50=(($12+12)|0);
 var $18=$_idx50;
 var $_idx50_val=HEAP32[(($18)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx50_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$19;
 var $21=(($12+4)|0);
 var $22=$21;
 var $23=(tempValue=HEAP32[(($22)>>2)],HEAP32[(($22)>>2)]=tempValue+-1,tempValue);
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$12;
 var $27=$12;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($26);
 label=5;break;
 case 5: 
 var $31=(($__fmt<<24)>>24);
 switch(($31|0)){case 98:case 66:case 104:{ label=10;break;}case 99:{ label=11;break;}case 100:case 101:{ label=15;break;}case 68:{ label=18;break;}case 70:{ label=19;break;}case 72:{ label=20;break;}case 73:{ label=23;break;}case 106:{ label=26;break;}case 109:{ label=29;break;}case 77:{ label=32;break;}case 110:case 116:{ label=35;break;}case 112:{ label=66;break;}case 114:{ label=80;break;}case 82:{ label=81;break;}case 83:{ label=82;break;}case 84:{ label=85;break;}case 119:{ label=86;break;}case 120:{ label=89;break;}case 97:case 65:{ label=9;break;}case 88:{ label=90;break;}case 121:{ label=94;break;}case 89:{ label=95;break;}case 37:{ label=97;break;}default:{label=127;break;}}break;
 case 6: 
 var $33$0 = ___cxa_find_matching_catch(); var $33$1 = tempRet0;
 var $34=(($12+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$12;
 var $40=$12;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=8;break;
 case 8: 
 ___resumeException($33$0)
 case 9: 
 var $45=(($__tm+24)|0);
 var $46=(($__e)|0);
 var $47=HEAP32[(($46)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$45,$__b,$47,$__err,$20);
 label=128;break;
 case 10: 
 var $49=(($__tm+16)|0);
 var $50=(($__e)|0);
 var $51=HEAP32[(($50)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$49,$__b,$51,$__err,$20);
 label=128;break;
 case 11: 
 var $53=(($this+8)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($53);
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($__e)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$58;
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=13;break;}else{label=12;break;}
 case 12: 
 var $68=(($58+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($58+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $78=$71;var $77=$69;label=14;break;
 case 13: 
 var $73=$58;
 var $74=(($73+1)|0);
 var $75=($64&255);
 var $76=$75>>>1;
 var $78=$76;var $77=$74;label=14;break;
 case 14: 
 var $77;
 var $78;
 var $79=(($77+$78)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$60,$62,$__iob,$__err,$__tm,$77,$79);
 var $80=(($2)|0);
 var $81=HEAP32[(($80)>>2)];
 HEAP32[(($59)>>2)]=$81;
 label=128;break;
 case 15: 
 var $83=(($__e)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$84,$__err,$20,2);
 var $86=HEAP32[(($__err)>>2)];
 var $87=$86&4;
 var $88=($87|0)==0;
 var $89=($85|0)>0;
 var $or_cond_i=$88&$89;
 var $90=($85|0)<32;
 var $or_cond3_i=$or_cond_i&$90;
 if($or_cond3_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $92=(($__tm+12)|0);
 HEAP32[(($92)>>2)]=$85;
 label=128;break;
 case 17: 
 var $94=$86|4;
 HEAP32[(($__err)>>2)]=$94;
 label=128;break;
 case 18: 
 var $96=(($__b)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($__e)|0);
 var $99=HEAP32[(($98)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$97,$99,$__iob,$__err,$__tm,5152,5160);
 var $100=(($3)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($96)>>2)]=$101;
 label=128;break;
 case 19: 
 var $103=(($__b)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=(($__e)|0);
 var $106=HEAP32[(($105)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$104,$106,$__iob,$__err,$__tm,5144,5152);
 var $107=(($4)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP32[(($103)>>2)]=$108;
 label=128;break;
 case 20: 
 var $110=(($__e)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$111,$__err,$20,2);
 var $113=HEAP32[(($__err)>>2)];
 var $114=$113&4;
 var $115=($114|0)==0;
 var $116=($112|0)<24;
 var $or_cond_i8=$115&$116;
 if($or_cond_i8){label=21;break;}else{label=22;break;}
 case 21: 
 var $118=(($__tm+8)|0);
 HEAP32[(($118)>>2)]=$112;
 label=128;break;
 case 22: 
 var $120=$113|4;
 HEAP32[(($__err)>>2)]=$120;
 label=128;break;
 case 23: 
 var $122=(($__e)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$123,$__err,$20,2);
 var $125=HEAP32[(($__err)>>2)];
 var $126=$125&4;
 var $127=($126|0)==0;
 var $128=($124|0)>0;
 var $or_cond_i11=$127&$128;
 var $129=($124|0)<13;
 var $or_cond3_i12=$or_cond_i11&$129;
 if($or_cond3_i12){label=24;break;}else{label=25;break;}
 case 24: 
 var $131=(($__tm+8)|0);
 HEAP32[(($131)>>2)]=$124;
 label=128;break;
 case 25: 
 var $133=$125|4;
 HEAP32[(($__err)>>2)]=$133;
 label=128;break;
 case 26: 
 var $135=(($__e)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$136,$__err,$20,3);
 var $138=HEAP32[(($__err)>>2)];
 var $139=$138&4;
 var $140=($139|0)==0;
 var $141=($137|0)<366;
 var $or_cond_i15=$140&$141;
 if($or_cond_i15){label=27;break;}else{label=28;break;}
 case 27: 
 var $143=(($__tm+28)|0);
 HEAP32[(($143)>>2)]=$137;
 label=128;break;
 case 28: 
 var $145=$138|4;
 HEAP32[(($__err)>>2)]=$145;
 label=128;break;
 case 29: 
 var $147=(($__e)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$148,$__err,$20,2);
 var $150=HEAP32[(($__err)>>2)];
 var $151=$150&4;
 var $152=($151|0)==0;
 var $153=($149|0)<13;
 var $or_cond_i18=$152&$153;
 if($or_cond_i18){label=30;break;}else{label=31;break;}
 case 30: 
 var $155=(($__tm+16)|0);
 var $156=((($149)-(1))|0);
 HEAP32[(($155)>>2)]=$156;
 label=128;break;
 case 31: 
 var $158=$150|4;
 HEAP32[(($__err)>>2)]=$158;
 label=128;break;
 case 32: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$161,$__err,$20,2);
 var $163=HEAP32[(($__err)>>2)];
 var $164=$163&4;
 var $165=($164|0)==0;
 var $166=($162|0)<60;
 var $or_cond_i21=$165&$166;
 if($or_cond_i21){label=33;break;}else{label=34;break;}
 case 33: 
 var $168=(($__tm+4)|0);
 HEAP32[(($168)>>2)]=$162;
 label=128;break;
 case 34: 
 var $170=$163|4;
 HEAP32[(($__err)>>2)]=$170;
 label=128;break;
 case 35: 
 var $172=(($__e)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($__b)|0);
 var $175=(($19+8)|0);
 var $176=$175;
 var $_sroa_082_0=$173;label=36;break;
 case 36: 
 var $_sroa_082_0;
 var $177=HEAP32[(($174)>>2)];
 var $178=($177|0)==0;
 if($178){var $192=0;label=41;break;}else{label=37;break;}
 case 37: 
 var $180=(($177+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($177+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=38;break;}else{var $192=$177;label=41;break;}
 case 38: 
 var $185=$177;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+36)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=FUNCTION_TABLE[$188]($177);
 var $190=($189|0)==-1;
 if($190){label=40;break;}else{label=39;break;}
 case 39: 
 var $_pre_i_i_i_i26=HEAP32[(($174)>>2)];
 var $192=$_pre_i_i_i_i26;label=41;break;
 case 40: 
 HEAP32[(($174)>>2)]=0;
 var $192=0;label=41;break;
 case 41: 
 var $192;
 var $193=($192|0)==0;
 var $194=($_sroa_082_0|0)==0;
 if($194){label=45;break;}else{label=42;break;}
 case 42: 
 var $196=(($_sroa_082_0+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($_sroa_082_0+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($197|0)==($199|0);
 if($200){label=44;break;}else{label=43;break;}
 case 43: 
 if($193){var $_sroa_082_2=$_sroa_082_0;label=47;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_0;label=55;break;}
 case 44: 
 var $201=$_sroa_082_0;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=FUNCTION_TABLE[$204]($_sroa_082_0);
 var $206=($205|0)==-1;
 if($206){label=45;break;}else{label=46;break;}
 case 45: 
 if($193){var $_pre_i2_i_i6_i=0;label=55;break;}else{var $_sroa_082_2=0;label=47;break;}
 case 46: 
 if($193){var $_sroa_082_2=$_sroa_082_0;label=47;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_0;label=55;break;}
 case 47: 
 var $_sroa_082_2;
 var $208=HEAP32[(($174)>>2)];
 var $209=(($208+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($208+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=48;break;}else{label=49;break;}
 case 48: 
 var $215=$208;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($208);
 var $extract_t_i_i30=(($219)&255);
 var $_0_i_off0_i_i31=$extract_t_i_i30;label=50;break;
 case 49: 
 var $221=HEAP8[(($210)>>0)];
 var $_0_i_off0_i_i31=$221;label=50;break;
 case 50: 
 var $_0_i_off0_i_i31;
 var $isascii1_i_i=(($_0_i_off0_i_i31<<24)>>24)>-1;
 if($isascii1_i_i){label=51;break;}else{var $_pre_i2_i_i6_i=$_sroa_082_2;label=55;break;}
 case 51: 
 var $222=(($_0_i_off0_i_i31<<24)>>24);
 var $223=HEAP32[(($176)>>2)];
 var $224=(($223+($222<<1))|0);
 var $225=HEAP16[(($224)>>1)];
 var $226=$225&8192;
 var $227=(($226<<16)>>16)==0;
 if($227){var $_pre_i2_i_i6_i=$_sroa_082_2;label=55;break;}else{label=52;break;}
 case 52: 
 var $229=HEAP32[(($174)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($229+16)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($231|0)==($233|0);
 if($234){label=53;break;}else{label=54;break;}
 case 53: 
 var $236=$229;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+40)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=FUNCTION_TABLE[$239]($229);
 var $_sroa_082_0=$_sroa_082_2;label=36;break;
 case 54: 
 var $242=(($231+1)|0);
 HEAP32[(($230)>>2)]=$242;
 var $_sroa_082_0=$_sroa_082_2;label=36;break;
 case 55: 
 var $_pre_i2_i_i6_i;
 var $243=HEAP32[(($174)>>2)];
 var $244=($243|0)==0;
 if($244){var $258=0;label=60;break;}else{label=56;break;}
 case 56: 
 var $246=(($243+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(($243+16)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=($247|0)==($249|0);
 if($250){label=57;break;}else{var $258=$243;label=60;break;}
 case 57: 
 var $251=$243;
 var $252=HEAP32[(($251)>>2)];
 var $253=(($252+36)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=FUNCTION_TABLE[$254]($243);
 var $256=($255|0)==-1;
 if($256){label=59;break;}else{label=58;break;}
 case 58: 
 var $_pre_i_i_i2_i34=HEAP32[(($174)>>2)];
 var $258=$_pre_i_i_i2_i34;label=60;break;
 case 59: 
 HEAP32[(($174)>>2)]=0;
 var $258=0;label=60;break;
 case 60: 
 var $258;
 var $259=($258|0)==0;
 var $260=($_pre_i2_i_i6_i|0)==0;
 if($260){label=64;break;}else{label=61;break;}
 case 61: 
 var $262=(($_pre_i2_i_i6_i+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($_pre_i2_i_i6_i+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=62;break;}else{label=63;break;}
 case 62: 
 var $267=$_pre_i2_i_i6_i;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=FUNCTION_TABLE[$270]($_pre_i2_i_i6_i);
 var $272=($271|0)==-1;
 if($272){label=64;break;}else{label=63;break;}
 case 63: 
 if($259){label=128;break;}else{label=65;break;}
 case 64: 
 if($259){label=65;break;}else{label=128;break;}
 case 65: 
 var $274=HEAP32[(($__err)>>2)];
 var $275=$274|2;
 HEAP32[(($__err)>>2)]=$275;
 label=128;break;
 case 66: 
 var $277=(($__tm+8)|0);
 var $278=(($__e)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($this+8)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=(($282+8)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=FUNCTION_TABLE[$284]($280);
 var $286=$285;
 var $287=HEAP8[(($286)>>0)];
 var $288=$287&1;
 var $289=(($288<<24)>>24)==0;
 if($289){label=68;break;}else{label=67;break;}
 case 67: 
 var $291=(($285+4)|0);
 var $292=HEAP32[(($291)>>2)];
 var $296=$292;label=69;break;
 case 68: 
 var $294=($287&255);
 var $295=$294>>>1;
 var $296=$295;label=69;break;
 case 69: 
 var $296;
 var $297=(($285+12)|0);
 var $298=$297;
 var $299=HEAP8[(($298)>>0)];
 var $300=$299&1;
 var $301=(($300<<24)>>24)==0;
 if($301){label=71;break;}else{label=70;break;}
 case 70: 
 var $303=(($285+16)|0);
 var $304=HEAP32[(($303)>>2)];
 var $308=$304;label=72;break;
 case 71: 
 var $306=($299&255);
 var $307=$306>>>1;
 var $308=$307;label=72;break;
 case 72: 
 var $308;
 var $309=(((-$308))|0);
 var $310=($296|0)==($309|0);
 if($310){label=73;break;}else{label=74;break;}
 case 73: 
 var $312=HEAP32[(($__err)>>2)];
 var $313=$312|4;
 HEAP32[(($__err)>>2)]=$313;
 label=128;break;
 case 74: 
 var $315=(($285+24)|0);
 var $316=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$279,$285,$315,$20,$__err,0);
 var $317=$316;
 var $318=$285;
 var $319=((($317)-($318))|0);
 var $320=($316|0)==($285|0);
 if($320){label=75;break;}else{label=77;break;}
 case 75: 
 var $322=HEAP32[(($277)>>2)];
 var $323=($322|0)==12;
 if($323){label=76;break;}else{label=77;break;}
 case 76: 
 HEAP32[(($277)>>2)]=0;
 label=128;break;
 case 77: 
 var $326=($319|0)==12;
 if($326){label=78;break;}else{label=128;break;}
 case 78: 
 var $328=HEAP32[(($277)>>2)];
 var $329=($328|0)<12;
 if($329){label=79;break;}else{label=128;break;}
 case 79: 
 var $331=((($328)+(12))|0);
 HEAP32[(($277)>>2)]=$331;
 label=128;break;
 case 80: 
 var $333=(($__b)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=(($__e)|0);
 var $336=HEAP32[(($335)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$334,$336,$__iob,$__err,$__tm,5128,5139);
 var $337=(($5)|0);
 var $338=HEAP32[(($337)>>2)];
 HEAP32[(($333)>>2)]=$338;
 label=128;break;
 case 81: 
 var $340=(($__b)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$341,$343,$__iob,$__err,$__tm,5120,5125);
 var $344=(($6)|0);
 var $345=HEAP32[(($344)>>2)];
 HEAP32[(($340)>>2)]=$345;
 label=128;break;
 case 82: 
 var $347=(($__e)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$348,$__err,$20,2);
 var $350=HEAP32[(($__err)>>2)];
 var $351=$350&4;
 var $352=($351|0)==0;
 var $353=($349|0)<61;
 var $or_cond_i44=$352&$353;
 if($or_cond_i44){label=83;break;}else{label=84;break;}
 case 83: 
 var $355=(($__tm)|0);
 HEAP32[(($355)>>2)]=$349;
 label=128;break;
 case 84: 
 var $357=$350|4;
 HEAP32[(($__err)>>2)]=$357;
 label=128;break;
 case 85: 
 var $359=(($__b)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($__e)|0);
 var $362=HEAP32[(($361)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($7,$this,$360,$362,$__iob,$__err,$__tm,5112,5120);
 var $363=(($7)|0);
 var $364=HEAP32[(($363)>>2)];
 HEAP32[(($359)>>2)]=$364;
 label=128;break;
 case 86: 
 var $366=(($__e)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$367,$__err,$20,1);
 var $369=HEAP32[(($__err)>>2)];
 var $370=$369&4;
 var $371=($370|0)==0;
 var $372=($368|0)<7;
 var $or_cond_i47=$371&$372;
 if($or_cond_i47){label=87;break;}else{label=88;break;}
 case 87: 
 var $374=(($__tm+24)|0);
 HEAP32[(($374)>>2)]=$368;
 label=128;break;
 case 88: 
 var $376=$369|4;
 HEAP32[(($__err)>>2)]=$376;
 label=128;break;
 case 89: 
 var $378=$this;
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+20)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($__b)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=(($8)|0);
 HEAP32[(($384)>>2)]=$383;
 var $385=(($__e)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($9)|0);
 HEAP32[(($387)>>2)]=$386;
 FUNCTION_TABLE[$381]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=129;break;
 case 90: 
 var $389=(($this+8)|0);
 var $390=$389;
 var $391=HEAP32[(($390)>>2)];
 var $392=(($391+24)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=FUNCTION_TABLE[$393]($389);
 var $395=(($__b)|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=(($__e)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=$394;
 var $400=HEAP8[(($399)>>0)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 if($402){label=92;break;}else{label=91;break;}
 case 91: 
 var $404=(($394+8)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=(($394+4)|0);
 var $407=HEAP32[(($406)>>2)];
 var $414=$407;var $413=$405;label=93;break;
 case 92: 
 var $409=$394;
 var $410=(($409+1)|0);
 var $411=($400&255);
 var $412=$411>>>1;
 var $414=$412;var $413=$410;label=93;break;
 case 93: 
 var $413;
 var $414;
 var $415=(($413+$414)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($10,$this,$396,$398,$__iob,$__err,$__tm,$413,$415);
 var $416=(($10)|0);
 var $417=HEAP32[(($416)>>2)];
 HEAP32[(($395)>>2)]=$417;
 label=128;break;
 case 94: 
 var $419=(($__tm+20)|0);
 var $420=(($__e)|0);
 var $421=HEAP32[(($420)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($419,$__b,$421,$__err,$20);
 label=128;break;
 case 95: 
 var $423=(($__e)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$424,$__err,$20,4);
 var $426=HEAP32[(($__err)>>2)];
 var $427=$426&4;
 var $428=($427|0)==0;
 if($428){label=96;break;}else{label=128;break;}
 case 96: 
 var $430=(($__tm+20)|0);
 var $431=((($425)-(1900))|0);
 HEAP32[(($430)>>2)]=$431;
 label=128;break;
 case 97: 
 var $433=(($__e)|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=(($__b)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($436|0)==0;
 if($437){var $451=0;label=102;break;}else{label=98;break;}
 case 98: 
 var $439=(($436+12)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($436+16)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=($440|0)==($442|0);
 if($443){label=99;break;}else{var $451=$436;label=102;break;}
 case 99: 
 var $444=$436;
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+36)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=FUNCTION_TABLE[$447]($436);
 var $449=($448|0)==-1;
 if($449){label=101;break;}else{label=100;break;}
 case 100: 
 var $_pre_i_i_i_i=HEAP32[(($435)>>2)];
 var $451=$_pre_i_i_i_i;label=102;break;
 case 101: 
 HEAP32[(($435)>>2)]=0;
 var $451=0;label=102;break;
 case 102: 
 var $451;
 var $452=($451|0)==0;
 var $453=($434|0)==0;
 if($453){label=106;break;}else{label=103;break;}
 case 103: 
 var $455=(($434+12)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($434+16)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($456|0)==($458|0);
 if($459){label=104;break;}else{label=105;break;}
 case 104: 
 var $460=$434;
 var $461=HEAP32[(($460)>>2)];
 var $462=(($461+36)|0);
 var $463=HEAP32[(($462)>>2)];
 var $464=FUNCTION_TABLE[$463]($434);
 var $465=($464|0)==-1;
 if($465){label=106;break;}else{label=105;break;}
 case 105: 
 if($452){var $_pre_i2_i_i611_i=$434;label=108;break;}else{label=107;break;}
 case 106: 
 if($452){label=107;break;}else{var $_pre_i2_i_i611_i=0;label=108;break;}
 case 107: 
 var $467=HEAP32[(($__err)>>2)];
 var $468=$467|6;
 HEAP32[(($__err)>>2)]=$468;
 label=128;break;
 case 108: 
 var $_pre_i2_i_i611_i;
 var $470=HEAP32[(($435)>>2)];
 var $471=(($470+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($470+16)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($472|0)==($474|0);
 if($475){label=109;break;}else{label=110;break;}
 case 109: 
 var $477=$470;
 var $478=HEAP32[(($477)>>2)];
 var $479=(($478+36)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=FUNCTION_TABLE[$480]($470);
 var $extract_t_i_i=(($481)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=111;break;
 case 110: 
 var $483=HEAP8[(($472)>>0)];
 var $_0_i_off0_i_i=$483;label=111;break;
 case 111: 
 var $_0_i_off0_i_i;
 var $484=$19;
 var $485=HEAP32[(($484)>>2)];
 var $486=(($485+36)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=FUNCTION_TABLE[$487]($20,$_0_i_off0_i_i,0);
 var $489=(($488<<24)>>24)==37;
 if($489){label=113;break;}else{label=112;break;}
 case 112: 
 var $491=HEAP32[(($__err)>>2)];
 var $492=$491|4;
 HEAP32[(($__err)>>2)]=$492;
 label=128;break;
 case 113: 
 var $494=HEAP32[(($435)>>2)];
 var $495=(($494+12)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=(($494+16)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($496|0)==($498|0);
 if($499){label=114;break;}else{label=115;break;}
 case 114: 
 var $501=$494;
 var $502=HEAP32[(($501)>>2)];
 var $503=(($502+40)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=FUNCTION_TABLE[$504]($494);
 var $_pre_i=HEAP32[(($435)>>2)];
 var $508=$_pre_i;label=116;break;
 case 115: 
 var $507=(($496+1)|0);
 HEAP32[(($495)>>2)]=$507;
 var $508=$494;label=116;break;
 case 116: 
 var $508;
 var $509=($508|0)==0;
 if($509){var $523=0;label=121;break;}else{label=117;break;}
 case 117: 
 var $511=(($508+12)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=(($508+16)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($512|0)==($514|0);
 if($515){label=118;break;}else{var $523=$508;label=121;break;}
 case 118: 
 var $516=$508;
 var $517=HEAP32[(($516)>>2)];
 var $518=(($517+36)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=FUNCTION_TABLE[$519]($508);
 var $521=($520|0)==-1;
 if($521){label=120;break;}else{label=119;break;}
 case 119: 
 var $_pre_i_i_i2_i=HEAP32[(($435)>>2)];
 var $523=$_pre_i_i_i2_i;label=121;break;
 case 120: 
 HEAP32[(($435)>>2)]=0;
 var $523=0;label=121;break;
 case 121: 
 var $523;
 var $524=($523|0)==0;
 var $525=($_pre_i2_i_i611_i|0)==0;
 if($525){label=125;break;}else{label=122;break;}
 case 122: 
 var $527=(($_pre_i2_i_i611_i+12)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=(($_pre_i2_i_i611_i+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($528|0)==($530|0);
 if($531){label=123;break;}else{label=124;break;}
 case 123: 
 var $532=$_pre_i2_i_i611_i;
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533+36)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=FUNCTION_TABLE[$535]($_pre_i2_i_i611_i);
 var $537=($536|0)==-1;
 if($537){label=125;break;}else{label=124;break;}
 case 124: 
 if($524){label=128;break;}else{label=126;break;}
 case 125: 
 if($524){label=126;break;}else{label=128;break;}
 case 126: 
 var $539=HEAP32[(($__err)>>2)];
 var $540=$539|2;
 HEAP32[(($__err)>>2)]=$540;
 label=128;break;
 case 127: 
 var $542=HEAP32[(($__err)>>2)];
 var $543=$542|4;
 HEAP32[(($__err)>>2)]=$543;
 label=128;break;
 case 128: 
 var $544=(($__b)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=(($agg_result)|0);
 HEAP32[(($546)>>2)]=$545;
 label=129;break;
 case 129: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=22;break; }
 case 2: 
 var $_idx=(($5+8)|0);
 var $10=$_idx;
 var $_idx_val=HEAP32[(($10)>>2)];
 var $_idx3=(($5+12)|0);
 var $11=$_idx3;
 var $_idx3_val=HEAP32[(($11)>>2)];
 var $12=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $13=$12;
 var $14=(($5+4)|0);
 var $15=$14;
 var $16=(tempValue=HEAP32[(($15)>>2)],HEAP32[(($15)>>2)]=tempValue+-1,tempValue);
 var $17=($16|0)==0;
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $19=$5;
 var $20=$5;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 FUNCTION_TABLE[$23]($19);
 label=5;break;
 case 5: 
 HEAP32[(($__err)>>2)]=0;
 var $24=($__fmtb|0)==($__fmte|0);
 if($24){var $_pre_i_i_i18=$__b_0;var $__e_sroa_0_10=$__e_0;label=67;break;}else{label=6;break;}
 case 6: 
 var $25=$12;
 var $26=$12;
 var $27=$12;
 var $28=$this;
 var $29=(($2)|0);
 var $30=(($3)|0);
 var $31=(($1)|0);
 var $_0_ph40=$__fmtb;var $_pre41=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=7;break;
 case 7: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre41;
 var $_0_ph40;
 var $33=$_pre41;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=8;break;
 case 8: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $33;
 var $34=($33|0)==0;
 if($34){label=9;break;}else{var $_pre_i_i_i18=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=67;break;}
 case 9: 
 var $36=($__b_sroa_0_1|0)==0;
 if($36){var $53=1;var $52=0;var $__b_sroa_0_2=0;label=14;break;}else{label=10;break;}
 case 10: 
 var $38=(($__b_sroa_0_1+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($__b_sroa_0_1+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=11;break;}else{label=12;break;}
 case 11: 
 var $44=$__b_sroa_0_1;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($__b_sroa_0_1);
 var $_0_i_i_i_i=$48;label=13;break;
 case 12: 
 var $50=HEAP32[(($39)>>2)];
 var $_0_i_i_i_i=$50;label=13;break;
 case 13: 
 var $_0_i_i_i_i;
 var $51=($_0_i_i_i_i|0)==-1;
 var $___b_sroa_0_1=($51?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($51?0:$__b_sroa_0_1);
 var $_=($51?1:0);
 var $53=$_;var $52=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=14;break;
 case 14: 
 var $__b_sroa_0_2;
 var $52;
 var $53;
 var $54=($__e_sroa_0_1|0)==0;
 if($54){label=19;break;}else{label=15;break;}
 case 15: 
 var $56=(($__e_sroa_0_1+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($__e_sroa_0_1+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=16;break;}else{label=17;break;}
 case 16: 
 var $62=$__e_sroa_0_1;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=FUNCTION_TABLE[$65]($__e_sroa_0_1);
 var $_0_i_i1_i_i=$66;label=18;break;
 case 17: 
 var $68=HEAP32[(($57)>>2)];
 var $_0_i_i1_i_i=$68;label=18;break;
 case 18: 
 var $_0_i_i1_i_i;
 var $69=($_0_i_i1_i_i|0)==-1;
 if($69){label=19;break;}else{label=20;break;}
 case 19: 
 if($53){var $__e_sroa_0_3=0;label=21;break;}else{var $__e_sroa_0_4=0;label=25;break;}
 case 20: 
 if($53){var $__e_sroa_0_4=$__e_sroa_0_1;label=25;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=21;break;}
 case 21: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_3;label=67;break;
 case 22: 
 var $72$0 = ___cxa_find_matching_catch(); var $72$1 = tempRet0;
 var $73=(($5+4)|0);
 var $74=$73;
 var $75=(tempValue=HEAP32[(($74)>>2)],HEAP32[(($74)>>2)]=tempValue+-1,tempValue);
 var $76=($75|0)==0;
 if($76){label=23;break;}else{label=24;break;}
 case 23: 
 var $78=$5;
 var $79=$5;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+8)|0);
 var $82=HEAP32[(($81)>>2)];
 FUNCTION_TABLE[$82]($78);
 label=24;break;
 case 24: 
 ___resumeException($72$0)
 case 25: 
 var $__e_sroa_0_4;
 var $84=HEAP32[(($_0_ph40)>>2)];
 var $85=HEAP32[(($25)>>2)];
 var $86=(($85+52)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($13,$84,0);
 var $89=(($88<<24)>>24)==37;
 if($89){label=26;break;}else{label=35;break;}
 case 26: 
 var $91=(($_0_ph40+4)|0);
 var $92=($91|0)==($__fmte|0);
 if($92){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 28: 
 var $95=HEAP32[(($91)>>2)];
 var $96=HEAP32[(($25)>>2)];
 var $97=(($96+52)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($13,$95,0);
 if((($99<<24)>>24)==69|(($99<<24)>>24)==48){ label=29;break;}else{var $__opt_0=0;var $__cmd_0=$99;var $_1=$91;label=32;break;}
 case 29: 
 var $101=(($_0_ph40+8)|0);
 var $102=($101|0)==($__fmte|0);
 if($102){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i18=$52;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 31: 
 var $105=HEAP32[(($101)>>2)];
 var $106=HEAP32[(($25)>>2)];
 var $107=(($106+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($13,$105,0);
 var $__opt_0=$99;var $__cmd_0=$109;var $_1=$101;label=32;break;
 case 32: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $111=HEAP32[(($28)>>2)];
 var $112=(($111+36)|0);
 var $113=HEAP32[(($112)>>2)];
 HEAP32[(($29)>>2)]=$52;
 HEAP32[(($30)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$113]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $114=HEAP32[(($31)>>2)];
 var $115=(($_1+4)|0);
 var $_0_ph_be=$115;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$114;label=33;break;
 case 33: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $116=($_0_ph_be|0)==($__fmte|0);
 if($116){var $_pre_i_i_i18=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=67;break;}else{label=34;break;}
 case 34: 
 var $_pre41_pre=HEAP32[(($__err)>>2)];
 var $_0_ph40=$_0_ph_be;var $_pre41=$_pre41_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=7;break;
 case 35: 
 var $118=HEAP32[(($_0_ph40)>>2)];
 var $119=HEAP32[(($26)>>2)];
 var $120=(($119+12)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($13,8192,$118);
 if($122){var $_0_pn=$_0_ph40;label=36;break;}else{label=58;break;}
 case 36: 
 var $_0_pn;
 var $_2=(($_0_pn+4)|0);
 var $123=($_2|0)==($__fmte|0);
 if($123){var $_2_lcssa=$__fmte;label=38;break;}else{label=37;break;}
 case 37: 
 var $125=HEAP32[(($_2)>>2)];
 var $126=HEAP32[(($26)>>2)];
 var $127=(($126+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($13,8192,$125);
 if($129){var $_0_pn=$_2;label=36;break;}else{var $_2_lcssa=$_2;label=38;break;}
 case 38: 
 var $_2_lcssa;
 var $_pre_i_i_i3=$52;var $130=$__e_sroa_0_4;var $_pre_i3_i_i9=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=39;break;
 case 39: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i3_i_i9;
 var $130;
 var $_pre_i_i_i3;
 var $131=($_pre_i_i_i3|0)==0;
 if($131){var $148=1;var $147=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}else{label=40;break;}
 case 40: 
 var $133=(($_pre_i_i_i3+12)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($_pre_i_i_i3+16)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($134|0)==($136|0);
 if($137){label=41;break;}else{label=42;break;}
 case 41: 
 var $139=$_pre_i_i_i3;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+36)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=FUNCTION_TABLE[$142]($_pre_i_i_i3);
 var $_0_i_i_i_i1=$143;label=43;break;
 case 42: 
 var $145=HEAP32[(($134)>>2)];
 var $_0_i_i_i_i1=$145;label=43;break;
 case 43: 
 var $_0_i_i_i_i1;
 var $146=($_0_i_i_i_i1|0)==-1;
 var $___b_sroa_0_4=($146?0:$__b_sroa_0_4);
 var $__pre_i_i_i3=($146?0:$_pre_i_i_i3);
 var $_4=($146?1:0);
 var $148=$_4;var $147=$__pre_i_i_i3;var $__b_sroa_0_5=$___b_sroa_0_4;label=44;break;
 case 44: 
 var $__b_sroa_0_5;
 var $147;
 var $148;
 var $149=($130|0)==0;
 if($149){var $_pre_i3_i_i943=$_pre_i3_i_i9;var $__e_sroa_0_7=$__e_sroa_0_6;label=49;break;}else{label=45;break;}
 case 45: 
 var $151=(($130+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($130+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=46;break;}else{label=47;break;}
 case 46: 
 var $157=$130;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($130);
 var $_0_i_i1_i_i7=$161;label=48;break;
 case 47: 
 var $163=HEAP32[(($152)>>2)];
 var $_0_i_i1_i_i7=$163;label=48;break;
 case 48: 
 var $_0_i_i1_i_i7;
 var $164=($_0_i_i1_i_i7|0)==-1;
 if($164){var $_pre_i3_i_i943=0;var $__e_sroa_0_7=0;label=49;break;}else{label=50;break;}
 case 49: 
 var $__e_sroa_0_7;
 var $_pre_i3_i_i943;
 if($148){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{var $166=0;var $_pre_i3_i_i942=$_pre_i3_i_i943;var $__e_sroa_0_8=$__e_sroa_0_7;label=51;break;}
 case 50: 
 var $phitmp_i4_i_i10=($_pre_i3_i_i9|0)==0;
 var $tmp_i_i12=$148^$phitmp_i4_i_i10;
 if($tmp_i_i12){var $166=$_pre_i3_i_i9;var $_pre_i3_i_i942=$_pre_i3_i_i9;var $__e_sroa_0_8=$__e_sroa_0_6;label=51;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 51: 
 var $__e_sroa_0_8;
 var $_pre_i3_i_i942;
 var $166;
 var $167=(($147+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($147+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=52;break;}else{label=53;break;}
 case 52: 
 var $173=$147;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=FUNCTION_TABLE[$176]($147);
 var $_0_i_i=$177;label=54;break;
 case 53: 
 var $179=HEAP32[(($168)>>2)];
 var $_0_i_i=$179;label=54;break;
 case 54: 
 var $_0_i_i;
 var $180=HEAP32[(($26)>>2)];
 var $181=(($180+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=FUNCTION_TABLE[$182]($13,8192,$_0_i_i);
 if($183){label=55;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 55: 
 var $185=HEAP32[(($167)>>2)];
 var $186=HEAP32[(($169)>>2)];
 var $187=($185|0)==($186|0);
 if($187){label=56;break;}else{label=57;break;}
 case 56: 
 var $189=$147;
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+40)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=FUNCTION_TABLE[$192]($147);
 var $_pre_i_i_i3=$147;var $130=$166;var $_pre_i3_i_i9=$_pre_i3_i_i942;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=39;break;
 case 57: 
 var $195=(($185+4)|0);
 HEAP32[(($167)>>2)]=$195;
 var $_pre_i_i_i3=$147;var $130=$166;var $_pre_i3_i_i9=$_pre_i3_i_i942;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=39;break;
 case 58: 
 var $197=(($52+12)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(($52+16)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($198|0)==($200|0);
 if($201){label=59;break;}else{label=60;break;}
 case 59: 
 var $203=$52;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+36)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($52);
 var $_0_i_i13=$207;label=61;break;
 case 60: 
 var $209=HEAP32[(($198)>>2)];
 var $_0_i_i13=$209;label=61;break;
 case 61: 
 var $_0_i_i13;
 var $210=HEAP32[(($27)>>2)];
 var $211=(($210+28)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=FUNCTION_TABLE[$212]($13,$_0_i_i13);
 var $214=HEAP32[(($_0_ph40)>>2)];
 var $215=HEAP32[(($27)>>2)];
 var $216=(($215+28)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=FUNCTION_TABLE[$217]($13,$214);
 var $219=($213|0)==($218|0);
 if($219){label=62;break;}else{label=66;break;}
 case 62: 
 var $221=HEAP32[(($197)>>2)];
 var $222=HEAP32[(($199)>>2)];
 var $223=($221|0)==($222|0);
 if($223){label=63;break;}else{label=64;break;}
 case 63: 
 var $225=$52;
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+40)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=FUNCTION_TABLE[$228]($52);
 label=65;break;
 case 64: 
 var $231=(($221+4)|0);
 HEAP32[(($197)>>2)]=$231;
 label=65;break;
 case 65: 
 var $232=(($_0_ph40+4)|0);
 var $_0_ph_be=$232;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=33;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $33=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=8;break;
 case 67: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i18;
 var $234=($_pre_i_i_i18|0)==0;
 if($234){var $251=1;var $250=0;label=72;break;}else{label=68;break;}
 case 68: 
 var $236=(($_pre_i_i_i18+12)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($_pre_i_i_i18+16)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($237|0)==($239|0);
 if($240){label=69;break;}else{label=70;break;}
 case 69: 
 var $242=$_pre_i_i_i18;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+36)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=FUNCTION_TABLE[$245]($_pre_i_i_i18);
 var $_0_i_i_i_i16=$246;label=71;break;
 case 70: 
 var $248=HEAP32[(($237)>>2)];
 var $_0_i_i_i_i16=$248;label=71;break;
 case 71: 
 var $_0_i_i_i_i16;
 var $249=($_0_i_i_i_i16|0)==-1;
 var $__pre_i_i_i18=($249?0:$_pre_i_i_i18);
 var $_5=($249?1:0);
 var $251=$_5;var $250=$__pre_i_i_i18;label=72;break;
 case 72: 
 var $250;
 var $251;
 var $252=($__e_sroa_0_10|0)==0;
 if($252){label=77;break;}else{label=73;break;}
 case 73: 
 var $254=(($__e_sroa_0_10+12)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(($__e_sroa_0_10+16)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($255|0)==($257|0);
 if($258){label=74;break;}else{label=75;break;}
 case 74: 
 var $260=$__e_sroa_0_10;
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+36)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=FUNCTION_TABLE[$263]($__e_sroa_0_10);
 var $_0_i_i1_i_i22=$264;label=76;break;
 case 75: 
 var $266=HEAP32[(($255)>>2)];
 var $_0_i_i1_i_i22=$266;label=76;break;
 case 76: 
 var $_0_i_i1_i_i22;
 var $267=($_0_i_i1_i_i22|0)==-1;
 if($267){label=77;break;}else{label=78;break;}
 case 77: 
 if($251){label=79;break;}else{label=80;break;}
 case 78: 
 if($251){label=80;break;}else{label=79;break;}
 case 79: 
 var $269=HEAP32[(($__err)>>2)];
 var $270=$269|2;
 HEAP32[(($__err)>>2)]=$270;
 label=80;break;
 case 80: 
 var $272=(($agg_result)|0);
 HEAP32[(($272)>>2)]=$250;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5080,5112);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[(($11)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $25=$19;var $24=$17;label=4;break;
 case 3: 
 var $21=(($6+4)|0);
 var $22=($12&255);
 var $23=$22>>>1;
 var $25=$23;var $24=$21;label=4;break;
 case 4: 
 var $24;
 var $25;
 var $26=(($24+($25<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$24,$26);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+24)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($1);
 var $6=(($5+168)|0);
 var $7=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$5,$6,$__ct,$__err,0);
 var $8=$7;
 var $9=$5;
 var $10=((($8)-($9))|0);
 var $11=($10|0)<168;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=(((($10|0))/(12))&-1);
 var $14=(((($13|0))%(7))&-1);
 HEAP32[(($__w)>>2)]=$14;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+16)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($6+288)|0);
 var $8=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$6,$7,$__ct,$__err,0);
 var $9=$8;
 var $10=$6;
 var $11=((($9)-($10))|0);
 var $12=($11|0)<288;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=(((($11|0))/(12))&-1);
 var $15=(((($14|0))%(12))&-1);
 HEAP32[(($__m)>>2)]=$15;
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $7=$_idx;
 var $_idx_val=HEAP32[(($7)>>2)];
 var $_idx3=(($2+12)|0);
 var $8=$_idx3;
 var $_idx3_val=HEAP32[(($8)>>2)];
 var $9=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $10=$9;
 var $11=(($2+4)|0);
 var $12=$11;
 var $13=(tempValue=HEAP32[(($12)>>2)],HEAP32[(($12)>>2)]=tempValue+-1,tempValue);
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$2;
 var $17=$2;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+8)|0);
 var $20=HEAP32[(($19)>>2)];
 FUNCTION_TABLE[$20]($16);
 label=5;break;
 case 5: 
 var $21=(($__tm+20)|0);
 var $22=(($__e)|0);
 var $23=HEAP32[(($22)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($21,$__b,$23,$__err,$10);
 var $24=(($__b)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP=sp;return;
 case 6: 
 var $28$0 = ___cxa_find_matching_catch(); var $28$1 = tempRet0;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=8;break;
 case 8: 
 ___resumeException($28$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($__y,$__b,$__e_0,$__err,$__ct){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,4);
 var $2=HEAP32[(($__err)>>2)];
 var $3=$2&4;
 var $4=($3|0)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=($1|0)<69;
 if($6){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=((($1)+(2000))|0);
 var $__t_0=$8;label=5;break;
 case 4: 
 var $_off=((($1)-(69))|0);
 var $10=($_off>>>0)<31;
 var $11=((($1)+(1900))|0);
 var $_=($10?$11:$1);
 var $__t_0=$_;label=5;break;
 case 5: 
 var $__t_0;
 var $13=((($__t_0)-(1900))|0);
 HEAP32[(($__y)>>2)]=$13;
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=(sp)+(8);
 var $4=(sp)+(16);
 var $5=(sp)+(24);
 var $6=(sp)+(32);
 var $7=(sp)+(40);
 var $8=(sp)+(48);
 var $9=(sp)+(56);
 var $10=(sp)+(64);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($12+8)|0);
 var $17=$_idx;
 var $_idx_val=HEAP32[(($17)>>2)];
 var $_idx55=(($12+12)|0);
 var $18=$_idx55;
 var $_idx55_val=HEAP32[(($18)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx55_val,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $20=$19;
 var $21=(($12+4)|0);
 var $22=$21;
 var $23=(tempValue=HEAP32[(($22)>>2)],HEAP32[(($22)>>2)]=tempValue+-1,tempValue);
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=$12;
 var $27=$12;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+8)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($26);
 label=5;break;
 case 5: 
 var $31=(($__fmt<<24)>>24);
 switch(($31|0)){case 98:case 66:case 104:{ label=10;break;}case 121:{ label=100;break;}case 89:{ label=101;break;}case 37:{ label=103;break;}case 99:{ label=11;break;}case 100:case 101:{ label=15;break;}case 68:{ label=18;break;}case 70:{ label=19;break;}case 72:{ label=20;break;}case 73:{ label=23;break;}case 106:{ label=26;break;}case 109:{ label=29;break;}case 77:{ label=32;break;}case 110:case 116:{ label=35;break;}case 112:{ label=72;break;}case 114:{ label=86;break;}case 82:{ label=87;break;}case 83:{ label=88;break;}case 97:case 65:{ label=9;break;}case 84:{ label=91;break;}case 119:{ label=92;break;}case 120:{ label=95;break;}case 88:{ label=96;break;}default:{label=141;break;}}break;
 case 6: 
 var $33$0 = ___cxa_find_matching_catch(); var $33$1 = tempRet0;
 var $34=(($12+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+-1,tempValue);
 var $37=($36|0)==0;
 if($37){label=7;break;}else{label=8;break;}
 case 7: 
 var $39=$12;
 var $40=$12;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+8)|0);
 var $43=HEAP32[(($42)>>2)];
 FUNCTION_TABLE[$43]($39);
 label=8;break;
 case 8: 
 ___resumeException($33$0)
 case 9: 
 var $45=(($__tm+24)|0);
 var $46=(($__e)|0);
 var $47=HEAP32[(($46)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$45,$__b,$47,$__err,$20);
 label=142;break;
 case 10: 
 var $49=(($__tm+16)|0);
 var $50=(($__e)|0);
 var $51=HEAP32[(($50)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$49,$__b,$51,$__err,$20);
 label=142;break;
 case 11: 
 var $53=(($this+8)|0);
 var $54=$53;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=FUNCTION_TABLE[$57]($53);
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($__e)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=$58;
 var $64=HEAP8[(($63)>>0)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=13;break;}else{label=12;break;}
 case 12: 
 var $68=(($58+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($58+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $77=$71;var $76=$69;label=14;break;
 case 13: 
 var $73=(($58+4)|0);
 var $74=($64&255);
 var $75=$74>>>1;
 var $77=$75;var $76=$73;label=14;break;
 case 14: 
 var $76;
 var $77;
 var $78=(($76+($77<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$60,$62,$__iob,$__err,$__tm,$76,$78);
 var $79=(($2)|0);
 var $80=HEAP32[(($79)>>2)];
 HEAP32[(($59)>>2)]=$80;
 label=142;break;
 case 15: 
 var $82=(($__e)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$83,$__err,$20,2);
 var $85=HEAP32[(($__err)>>2)];
 var $86=$85&4;
 var $87=($86|0)==0;
 var $88=($84|0)>0;
 var $or_cond_i=$87&$88;
 var $89=($84|0)<32;
 var $or_cond3_i=$or_cond_i&$89;
 if($or_cond3_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $91=(($__tm+12)|0);
 HEAP32[(($91)>>2)]=$84;
 label=142;break;
 case 17: 
 var $93=$85|4;
 HEAP32[(($__err)>>2)]=$93;
 label=142;break;
 case 18: 
 var $95=(($__b)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$96,$98,$__iob,$__err,$__tm,5048,5080);
 var $99=(($3)|0);
 var $100=HEAP32[(($99)>>2)];
 HEAP32[(($95)>>2)]=$100;
 label=142;break;
 case 19: 
 var $102=(($__b)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($__e)|0);
 var $105=HEAP32[(($104)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$103,$105,$__iob,$__err,$__tm,5016,5048);
 var $106=(($4)|0);
 var $107=HEAP32[(($106)>>2)];
 HEAP32[(($102)>>2)]=$107;
 label=142;break;
 case 20: 
 var $109=(($__e)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$110,$__err,$20,2);
 var $112=HEAP32[(($__err)>>2)];
 var $113=$112&4;
 var $114=($113|0)==0;
 var $115=($111|0)<24;
 var $or_cond_i8=$114&$115;
 if($or_cond_i8){label=21;break;}else{label=22;break;}
 case 21: 
 var $117=(($__tm+8)|0);
 HEAP32[(($117)>>2)]=$111;
 label=142;break;
 case 22: 
 var $119=$112|4;
 HEAP32[(($__err)>>2)]=$119;
 label=142;break;
 case 23: 
 var $121=(($__e)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$122,$__err,$20,2);
 var $124=HEAP32[(($__err)>>2)];
 var $125=$124&4;
 var $126=($125|0)==0;
 var $127=($123|0)>0;
 var $or_cond_i11=$126&$127;
 var $128=($123|0)<13;
 var $or_cond3_i12=$or_cond_i11&$128;
 if($or_cond3_i12){label=24;break;}else{label=25;break;}
 case 24: 
 var $130=(($__tm+8)|0);
 HEAP32[(($130)>>2)]=$123;
 label=142;break;
 case 25: 
 var $132=$124|4;
 HEAP32[(($__err)>>2)]=$132;
 label=142;break;
 case 26: 
 var $134=(($__e)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$135,$__err,$20,3);
 var $137=HEAP32[(($__err)>>2)];
 var $138=$137&4;
 var $139=($138|0)==0;
 var $140=($136|0)<366;
 var $or_cond_i15=$139&$140;
 if($or_cond_i15){label=27;break;}else{label=28;break;}
 case 27: 
 var $142=(($__tm+28)|0);
 HEAP32[(($142)>>2)]=$136;
 label=142;break;
 case 28: 
 var $144=$137|4;
 HEAP32[(($__err)>>2)]=$144;
 label=142;break;
 case 29: 
 var $146=(($__e)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$147,$__err,$20,2);
 var $149=HEAP32[(($__err)>>2)];
 var $150=$149&4;
 var $151=($150|0)==0;
 var $152=($148|0)<13;
 var $or_cond_i18=$151&$152;
 if($or_cond_i18){label=30;break;}else{label=31;break;}
 case 30: 
 var $154=(($__tm+16)|0);
 var $155=((($148)-(1))|0);
 HEAP32[(($154)>>2)]=$155;
 label=142;break;
 case 31: 
 var $157=$149|4;
 HEAP32[(($__err)>>2)]=$157;
 label=142;break;
 case 32: 
 var $159=(($__e)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$160,$__err,$20,2);
 var $162=HEAP32[(($__err)>>2)];
 var $163=$162&4;
 var $164=($163|0)==0;
 var $165=($161|0)<60;
 var $or_cond_i21=$164&$165;
 if($or_cond_i21){label=33;break;}else{label=34;break;}
 case 33: 
 var $167=(($__tm+4)|0);
 HEAP32[(($167)>>2)]=$161;
 label=142;break;
 case 34: 
 var $169=$162|4;
 HEAP32[(($__err)>>2)]=$169;
 label=142;break;
 case 35: 
 var $171=(($__e)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($__b)|0);
 var $174=$19;
 var $_sroa_087_0=$172;label=36;break;
 case 36: 
 var $_sroa_087_0;
 var $175=HEAP32[(($173)>>2)];
 var $176=($175|0)==0;
 if($176){var $193=1;label=43;break;}else{label=37;break;}
 case 37: 
 var $178=(($175+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($175+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=38;break;}else{label=39;break;}
 case 38: 
 var $184=$175;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($175);
 var $_0_i_i_i_i_i25=$188;label=40;break;
 case 39: 
 var $190=HEAP32[(($179)>>2)];
 var $_0_i_i_i_i_i25=$190;label=40;break;
 case 40: 
 var $_0_i_i_i_i_i25;
 var $191=($_0_i_i_i_i_i25|0)==-1;
 if($191){label=42;break;}else{label=41;break;}
 case 41: 
 var $_pre_i_i_i_i27=HEAP32[(($173)>>2)];
 var $phitmp_i_i_i_i28=($_pre_i_i_i_i27|0)==0;
 var $193=$phitmp_i_i_i_i28;label=43;break;
 case 42: 
 HEAP32[(($173)>>2)]=0;
 var $193=1;label=43;break;
 case 43: 
 var $193;
 var $194=($_sroa_087_0|0)==0;
 if($194){label=48;break;}else{label=44;break;}
 case 44: 
 var $196=(($_sroa_087_0+12)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=(($_sroa_087_0+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=($197|0)==($199|0);
 if($200){label=45;break;}else{label=46;break;}
 case 45: 
 var $202=$_sroa_087_0;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+36)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=FUNCTION_TABLE[$205]($_sroa_087_0);
 var $_0_i_i1_i_i_i31=$206;label=47;break;
 case 46: 
 var $208=HEAP32[(($197)>>2)];
 var $_0_i_i1_i_i_i31=$208;label=47;break;
 case 47: 
 var $_0_i_i1_i_i_i31;
 var $209=($_0_i_i1_i_i_i31|0)==-1;
 if($209){label=48;break;}else{label=49;break;}
 case 48: 
 if($193){var $_pre_i3_i_i9_i=0;label=57;break;}else{var $_sroa_087_2=0;label=50;break;}
 case 49: 
 if($193){var $_sroa_087_2=$_sroa_087_0;label=50;break;}else{var $_pre_i3_i_i9_i=$_sroa_087_0;label=57;break;}
 case 50: 
 var $_sroa_087_2;
 var $211=HEAP32[(($173)>>2)];
 var $212=(($211+12)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($211+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=($213|0)==($215|0);
 if($216){label=51;break;}else{label=52;break;}
 case 51: 
 var $218=$211;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+36)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($211);
 var $_0_i_i_i33=$222;label=53;break;
 case 52: 
 var $224=HEAP32[(($213)>>2)];
 var $_0_i_i_i33=$224;label=53;break;
 case 53: 
 var $_0_i_i_i33;
 var $225=HEAP32[(($174)>>2)];
 var $226=(($225+12)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=FUNCTION_TABLE[$227]($20,8192,$_0_i_i_i33);
 if($228){label=54;break;}else{var $_pre_i3_i_i9_i=$_sroa_087_2;label=57;break;}
 case 54: 
 var $230=HEAP32[(($173)>>2)];
 var $231=(($230+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($230+16)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($232|0)==($234|0);
 if($235){label=55;break;}else{label=56;break;}
 case 55: 
 var $237=$230;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($230);
 var $_sroa_087_0=$_sroa_087_2;label=36;break;
 case 56: 
 var $243=(($232+4)|0);
 HEAP32[(($231)>>2)]=$243;
 var $_sroa_087_0=$_sroa_087_2;label=36;break;
 case 57: 
 var $_pre_i3_i_i9_i;
 var $245=HEAP32[(($173)>>2)];
 var $246=($245|0)==0;
 if($246){var $263=1;label=64;break;}else{label=58;break;}
 case 58: 
 var $248=(($245+12)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($245+16)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($249|0)==($251|0);
 if($252){label=59;break;}else{label=60;break;}
 case 59: 
 var $254=$245;
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+36)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=FUNCTION_TABLE[$257]($245);
 var $_0_i_i_i_i1_i35=$258;label=61;break;
 case 60: 
 var $260=HEAP32[(($249)>>2)];
 var $_0_i_i_i_i1_i35=$260;label=61;break;
 case 61: 
 var $_0_i_i_i_i1_i35;
 var $261=($_0_i_i_i_i1_i35|0)==-1;
 if($261){label=63;break;}else{label=62;break;}
 case 62: 
 var $_pre_i_i_i3_i37=HEAP32[(($173)>>2)];
 var $phitmp_i_i_i4_i38=($_pre_i_i_i3_i37|0)==0;
 var $263=$phitmp_i_i_i4_i38;label=64;break;
 case 63: 
 HEAP32[(($173)>>2)]=0;
 var $263=1;label=64;break;
 case 64: 
 var $263;
 var $264=($_pre_i3_i_i9_i|0)==0;
 if($264){label=69;break;}else{label=65;break;}
 case 65: 
 var $266=(($_pre_i3_i_i9_i+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=(($_pre_i3_i_i9_i+16)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($267|0)==($269|0);
 if($270){label=66;break;}else{label=67;break;}
 case 66: 
 var $272=$_pre_i3_i_i9_i;
 var $273=HEAP32[(($272)>>2)];
 var $274=(($273+36)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=FUNCTION_TABLE[$275]($_pre_i3_i_i9_i);
 var $_0_i_i1_i_i7_i41=$276;label=68;break;
 case 67: 
 var $278=HEAP32[(($267)>>2)];
 var $_0_i_i1_i_i7_i41=$278;label=68;break;
 case 68: 
 var $_0_i_i1_i_i7_i41;
 var $279=($_0_i_i1_i_i7_i41|0)==-1;
 if($279){label=69;break;}else{label=70;break;}
 case 69: 
 if($263){label=71;break;}else{label=142;break;}
 case 70: 
 if($263){label=142;break;}else{label=71;break;}
 case 71: 
 var $281=HEAP32[(($__err)>>2)];
 var $282=$281|2;
 HEAP32[(($__err)>>2)]=$282;
 label=142;break;
 case 72: 
 var $284=(($__tm+8)|0);
 var $285=(($__e)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=(($this+8)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+8)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=FUNCTION_TABLE[$291]($287);
 var $293=$292;
 var $294=HEAP8[(($293)>>0)];
 var $295=$294&1;
 var $296=(($295<<24)>>24)==0;
 if($296){label=74;break;}else{label=73;break;}
 case 73: 
 var $298=(($292+4)|0);
 var $299=HEAP32[(($298)>>2)];
 var $303=$299;label=75;break;
 case 74: 
 var $301=($294&255);
 var $302=$301>>>1;
 var $303=$302;label=75;break;
 case 75: 
 var $303;
 var $304=(($292+12)|0);
 var $305=$304;
 var $306=HEAP8[(($305)>>0)];
 var $307=$306&1;
 var $308=(($307<<24)>>24)==0;
 if($308){label=77;break;}else{label=76;break;}
 case 76: 
 var $310=(($292+16)|0);
 var $311=HEAP32[(($310)>>2)];
 var $315=$311;label=78;break;
 case 77: 
 var $313=($306&255);
 var $314=$313>>>1;
 var $315=$314;label=78;break;
 case 78: 
 var $315;
 var $316=(((-$315))|0);
 var $317=($303|0)==($316|0);
 if($317){label=79;break;}else{label=80;break;}
 case 79: 
 var $319=HEAP32[(($__err)>>2)];
 var $320=$319|4;
 HEAP32[(($__err)>>2)]=$320;
 label=142;break;
 case 80: 
 var $322=(($292+24)|0);
 var $323=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$286,$292,$322,$20,$__err,0);
 var $324=$323;
 var $325=$292;
 var $326=((($324)-($325))|0);
 var $327=($323|0)==($292|0);
 if($327){label=81;break;}else{label=83;break;}
 case 81: 
 var $329=HEAP32[(($284)>>2)];
 var $330=($329|0)==12;
 if($330){label=82;break;}else{label=83;break;}
 case 82: 
 HEAP32[(($284)>>2)]=0;
 label=142;break;
 case 83: 
 var $333=($326|0)==12;
 if($333){label=84;break;}else{label=142;break;}
 case 84: 
 var $335=HEAP32[(($284)>>2)];
 var $336=($335|0)<12;
 if($336){label=85;break;}else{label=142;break;}
 case 85: 
 var $338=((($335)+(12))|0);
 HEAP32[(($284)>>2)]=$338;
 label=142;break;
 case 86: 
 var $340=(($__b)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=(($__e)|0);
 var $343=HEAP32[(($342)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$341,$343,$__iob,$__err,$__tm,4968,5012);
 var $344=(($5)|0);
 var $345=HEAP32[(($344)>>2)];
 HEAP32[(($340)>>2)]=$345;
 label=142;break;
 case 87: 
 var $347=(($__b)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=(($__e)|0);
 var $350=HEAP32[(($349)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$348,$350,$__iob,$__err,$__tm,4944,4964);
 var $351=(($6)|0);
 var $352=HEAP32[(($351)>>2)];
 HEAP32[(($347)>>2)]=$352;
 label=142;break;
 case 88: 
 var $354=(($__e)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$355,$__err,$20,2);
 var $357=HEAP32[(($__err)>>2)];
 var $358=$357&4;
 var $359=($358|0)==0;
 var $360=($356|0)<61;
 var $or_cond_i49=$359&$360;
 if($or_cond_i49){label=89;break;}else{label=90;break;}
 case 89: 
 var $362=(($__tm)|0);
 HEAP32[(($362)>>2)]=$356;
 label=142;break;
 case 90: 
 var $364=$357|4;
 HEAP32[(($__err)>>2)]=$364;
 label=142;break;
 case 91: 
 var $366=(($__b)|0);
 var $367=HEAP32[(($366)>>2)];
 var $368=(($__e)|0);
 var $369=HEAP32[(($368)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($7,$this,$367,$369,$__iob,$__err,$__tm,4912,4944);
 var $370=(($7)|0);
 var $371=HEAP32[(($370)>>2)];
 HEAP32[(($366)>>2)]=$371;
 label=142;break;
 case 92: 
 var $373=(($__e)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$374,$__err,$20,1);
 var $376=HEAP32[(($__err)>>2)];
 var $377=$376&4;
 var $378=($377|0)==0;
 var $379=($375|0)<7;
 var $or_cond_i52=$378&$379;
 if($or_cond_i52){label=93;break;}else{label=94;break;}
 case 93: 
 var $381=(($__tm+24)|0);
 HEAP32[(($381)>>2)]=$375;
 label=142;break;
 case 94: 
 var $383=$376|4;
 HEAP32[(($__err)>>2)]=$383;
 label=142;break;
 case 95: 
 var $385=$this;
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386+20)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=(($__b)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(($8)|0);
 HEAP32[(($391)>>2)]=$390;
 var $392=(($__e)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=(($9)|0);
 HEAP32[(($394)>>2)]=$393;
 FUNCTION_TABLE[$388]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=143;break;
 case 96: 
 var $396=(($this+8)|0);
 var $397=$396;
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398+24)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=FUNCTION_TABLE[$400]($396);
 var $402=(($__b)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=(($__e)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=$401;
 var $407=HEAP8[(($406)>>0)];
 var $408=$407&1;
 var $409=(($408<<24)>>24)==0;
 if($409){label=98;break;}else{label=97;break;}
 case 97: 
 var $411=(($401+8)|0);
 var $412=HEAP32[(($411)>>2)];
 var $413=(($401+4)|0);
 var $414=HEAP32[(($413)>>2)];
 var $420=$414;var $419=$412;label=99;break;
 case 98: 
 var $416=(($401+4)|0);
 var $417=($407&255);
 var $418=$417>>>1;
 var $420=$418;var $419=$416;label=99;break;
 case 99: 
 var $419;
 var $420;
 var $421=(($419+($420<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($10,$this,$403,$405,$__iob,$__err,$__tm,$419,$421);
 var $422=(($10)|0);
 var $423=HEAP32[(($422)>>2)];
 HEAP32[(($402)>>2)]=$423;
 label=142;break;
 case 100: 
 var $425=(($__tm+20)|0);
 var $426=(($__e)|0);
 var $427=HEAP32[(($426)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($425,$__b,$427,$__err,$20);
 label=142;break;
 case 101: 
 var $429=(($__e)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$430,$__err,$20,4);
 var $432=HEAP32[(($__err)>>2)];
 var $433=$432&4;
 var $434=($433|0)==0;
 if($434){label=102;break;}else{label=142;break;}
 case 102: 
 var $436=(($__tm+20)|0);
 var $437=((($431)-(1900))|0);
 HEAP32[(($436)>>2)]=$437;
 label=142;break;
 case 103: 
 var $439=(($__e)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($__b)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=($442|0)==0;
 if($443){var $460=1;label=110;break;}else{label=104;break;}
 case 104: 
 var $445=(($442+12)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=(($442+16)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=($446|0)==($448|0);
 if($449){label=105;break;}else{label=106;break;}
 case 105: 
 var $451=$442;
 var $452=HEAP32[(($451)>>2)];
 var $453=(($452+36)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=FUNCTION_TABLE[$454]($442);
 var $_0_i_i_i_i_i=$455;label=107;break;
 case 106: 
 var $457=HEAP32[(($446)>>2)];
 var $_0_i_i_i_i_i=$457;label=107;break;
 case 107: 
 var $_0_i_i_i_i_i;
 var $458=($_0_i_i_i_i_i|0)==-1;
 if($458){label=109;break;}else{label=108;break;}
 case 108: 
 var $_pre_i_i_i_i=HEAP32[(($441)>>2)];
 var $phitmp_i_i_i_i=($_pre_i_i_i_i|0)==0;
 var $460=$phitmp_i_i_i_i;label=110;break;
 case 109: 
 HEAP32[(($441)>>2)]=0;
 var $460=1;label=110;break;
 case 110: 
 var $460;
 var $461=($440|0)==0;
 if($461){label=115;break;}else{label=111;break;}
 case 111: 
 var $463=(($440+12)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(($440+16)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=($464|0)==($466|0);
 if($467){label=112;break;}else{label=113;break;}
 case 112: 
 var $469=$440;
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+36)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=FUNCTION_TABLE[$472]($440);
 var $_0_i_i1_i_i_i=$473;label=114;break;
 case 113: 
 var $475=HEAP32[(($464)>>2)];
 var $_0_i_i1_i_i_i=$475;label=114;break;
 case 114: 
 var $_0_i_i1_i_i_i;
 var $476=($_0_i_i1_i_i_i|0)==-1;
 if($476){label=115;break;}else{label=116;break;}
 case 115: 
 if($460){label=117;break;}else{var $_pre_i3_i_i915_i=0;label=118;break;}
 case 116: 
 if($460){var $_pre_i3_i_i915_i=$440;label=118;break;}else{label=117;break;}
 case 117: 
 var $478=HEAP32[(($__err)>>2)];
 var $479=$478|6;
 HEAP32[(($__err)>>2)]=$479;
 label=142;break;
 case 118: 
 var $_pre_i3_i_i915_i;
 var $481=HEAP32[(($441)>>2)];
 var $482=(($481+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=(($481+16)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($483|0)==($485|0);
 if($486){label=119;break;}else{label=120;break;}
 case 119: 
 var $488=$481;
 var $489=HEAP32[(($488)>>2)];
 var $490=(($489+36)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=FUNCTION_TABLE[$491]($481);
 var $_0_i_i_i=$492;label=121;break;
 case 120: 
 var $494=HEAP32[(($483)>>2)];
 var $_0_i_i_i=$494;label=121;break;
 case 121: 
 var $_0_i_i_i;
 var $495=$19;
 var $496=HEAP32[(($495)>>2)];
 var $497=(($496+52)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=FUNCTION_TABLE[$498]($20,$_0_i_i_i,0);
 var $500=(($499<<24)>>24)==37;
 if($500){label=123;break;}else{label=122;break;}
 case 122: 
 var $502=HEAP32[(($__err)>>2)];
 var $503=$502|4;
 HEAP32[(($__err)>>2)]=$503;
 label=142;break;
 case 123: 
 var $505=HEAP32[(($441)>>2)];
 var $506=(($505+12)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(($505+16)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=($507|0)==($509|0);
 if($510){label=124;break;}else{label=125;break;}
 case 124: 
 var $512=$505;
 var $513=HEAP32[(($512)>>2)];
 var $514=(($513+40)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=FUNCTION_TABLE[$515]($505);
 var $_pre_i=HEAP32[(($441)>>2)];
 var $519=$_pre_i;label=126;break;
 case 125: 
 var $518=(($507+4)|0);
 HEAP32[(($506)>>2)]=$518;
 var $519=$505;label=126;break;
 case 126: 
 var $519;
 var $520=($519|0)==0;
 if($520){var $537=1;label=133;break;}else{label=127;break;}
 case 127: 
 var $522=(($519+12)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=(($519+16)|0);
 var $525=HEAP32[(($524)>>2)];
 var $526=($523|0)==($525|0);
 if($526){label=128;break;}else{label=129;break;}
 case 128: 
 var $528=$519;
 var $529=HEAP32[(($528)>>2)];
 var $530=(($529+36)|0);
 var $531=HEAP32[(($530)>>2)];
 var $532=FUNCTION_TABLE[$531]($519);
 var $_0_i_i_i_i1_i=$532;label=130;break;
 case 129: 
 var $534=HEAP32[(($523)>>2)];
 var $_0_i_i_i_i1_i=$534;label=130;break;
 case 130: 
 var $_0_i_i_i_i1_i;
 var $535=($_0_i_i_i_i1_i|0)==-1;
 if($535){label=132;break;}else{label=131;break;}
 case 131: 
 var $_pre_i_i_i3_i=HEAP32[(($441)>>2)];
 var $phitmp_i_i_i4_i=($_pre_i_i_i3_i|0)==0;
 var $537=$phitmp_i_i_i4_i;label=133;break;
 case 132: 
 HEAP32[(($441)>>2)]=0;
 var $537=1;label=133;break;
 case 133: 
 var $537;
 var $538=($_pre_i3_i_i915_i|0)==0;
 if($538){label=138;break;}else{label=134;break;}
 case 134: 
 var $540=(($_pre_i3_i_i915_i+12)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=(($_pre_i3_i_i915_i+16)|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=($541|0)==($543|0);
 if($544){label=135;break;}else{label=136;break;}
 case 135: 
 var $546=$_pre_i3_i_i915_i;
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+36)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=FUNCTION_TABLE[$549]($_pre_i3_i_i915_i);
 var $_0_i_i1_i_i7_i=$550;label=137;break;
 case 136: 
 var $552=HEAP32[(($541)>>2)];
 var $_0_i_i1_i_i7_i=$552;label=137;break;
 case 137: 
 var $_0_i_i1_i_i7_i;
 var $553=($_0_i_i1_i_i7_i|0)==-1;
 if($553){label=138;break;}else{label=139;break;}
 case 138: 
 if($537){label=140;break;}else{label=142;break;}
 case 139: 
 if($537){label=142;break;}else{label=140;break;}
 case 140: 
 var $555=HEAP32[(($__err)>>2)];
 var $556=$555|2;
 HEAP32[(($__err)>>2)]=$556;
 label=142;break;
 case 141: 
 var $558=HEAP32[(($__err)>>2)];
 var $559=$558|4;
 HEAP32[(($__err)>>2)]=$559;
 label=142;break;
 case 142: 
 var $560=(($__b)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($agg_result)|0);
 HEAP32[(($562)>>2)]=$561;
 label=143;break;
 case 143: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 return;
}


function __ZNSt3__110__time_putD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $5=($2|0)==($3|0);
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 return;
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(104);
 var $3=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $4=(($__nar+100)|0);
 HEAP32[(($__ne)>>2)]=$4;
 var $5=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($5,$3,$__ne,$__tm,$__fmt,$__mod);
 var $6=HEAP32[(($__ne)>>2)];
 var $7=(($__s)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($3|0)==($6|0);
 if($9){var $30=$8;label=7;break;}else{var $_01_i_i=$3;var $10=$8;label=2;break;}
 case 2: 
 var $10;
 var $_01_i_i;
 var $11=HEAP8[(($_01_i_i)>>0)];
 var $12=($10|0)==0;
 if($12){var $27=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $14=(($10+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($10+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($15|0)==($17|0);
 if($18){label=5;break;}else{label=4;break;}
 case 4: 
 var $19=(($15+1)|0);
 HEAP32[(($14)>>2)]=$19;
 HEAP8[(($15)>>0)]=$11;
 var $27=$10;label=6;break;
 case 5: 
 var $20=$10;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+52)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($11&255);
 var $25=FUNCTION_TABLE[$23]($10,$24);
 var $26=($25|0)==-1;
 var $__i=($26?0:$10);
 var $27=$__i;label=6;break;
 case 6: 
 var $27;
 var $28=(($_01_i_i+1)|0);
 var $29=($28|0)==($6|0);
 if($29){var $30=$27;label=7;break;}else{var $_01_i_i=$28;var $10=$27;label=2;break;}
 case 7: 
 var $30;
 var $31=(($agg_result)|0);
 HEAP32[(($31)>>2)]=$30;
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt=sp;
 var $1=(($fmt)|0);
 HEAP8[(($1)>>0)]=37;
 var $2=(($fmt+1)|0);
 HEAP8[(($2)>>0)]=$__fmt;
 var $3=(($fmt+2)|0);
 HEAP8[(($3)>>0)]=$__mod;
 var $4=(($fmt+3)|0);
 HEAP8[(($4)>>0)]=0;
 var $5=(($__mod<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[(($2)>>0)]=$__mod;
 HEAP8[(($3)>>0)]=$__fmt;
 label=3;break;
 case 3: 
 var $8=HEAP32[(($__ne)>>2)];
 var $9=$8;
 var $10=$__nb;
 var $11=((($9)-($10))|0);
 var $12=(($this)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_strftime_l($__nb,$11,$1,$__tm,$13);
 var $15=(($__nb+$14)|0);
 HEAP32[(($__ne)>>2)]=$15;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 var $2=$this;
 _free($2);
 return;
}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__110__time_putD2Ev($1);
 return;
}


function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar_i=sp;
 var $__ne_i=(sp)+(104);
 var $mb_i=(sp)+(112);
 var $__nb_i=(sp)+(120);
 var $__nar=(sp)+(128);
 var $3=$__nar;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $4=(($__nar)|0);
 var $5=(($this+8)|0);
 var $6=$__ne_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$mb_i;
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $8=$__nb_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i=$mb_i;
 var $9=(($__nar_i)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $10=(($__nar_i+100)|0);
 HEAP32[(($__ne_i)>>2)]=$10;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($5,$9,$__ne_i,$__tm,$__fmt,$__mod);
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $st$6$0=(($mb_i)|0);
 HEAP32[(($st$6$0)>>2)]=$$etemp$5$0;
 var $st$7$1=(($mb_i+4)|0);
 HEAP32[(($st$7$1)>>2)]=$$etemp$5$1;
 HEAP32[(($__nb_i)>>2)]=$9;
 var $11=(($5)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=_uselocale($12);
 var $14=_mbsrtowcs($4,$__nb_i,100,$tmpcast_i);
 var $15=($13|0)==0;
 if($15){label=4;break;}else{label=2;break;}
 case 2: 
 var $17=(function() { try { __THREW__ = 0; return _uselocale($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $19$0 = ___cxa_find_matching_catch(0); var $19$1 = tempRet0;
 var $20=$19$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 4: 
 var $21=($14|0)==-1;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNSt3__121__throw_runtime_errorEPKc(2520);
 throw "Reached an unreachable!";
 case 6: 
 var $23=(($__nar+($14<<2))|0);
 var $$etemp$8$0=100;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $24=(($__s)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($14|0)==0;
 if($26){var $48=$25;label=13;break;}else{var $_01_i_i=$4;var $27=$25;label=7;break;}
 case 7: 
 var $27;
 var $_01_i_i;
 var $28=HEAP32[(($_01_i_i)>>2)];
 var $29=($27|0)==0;
 if($29){var $45=0;label=12;break;}else{label=8;break;}
 case 8: 
 var $31=(($27+24)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($27+28)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$27;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+52)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($27,$28);
 var $_0_i_i_i_i=$41;label=11;break;
 case 10: 
 var $43=(($32+4)|0);
 HEAP32[(($31)>>2)]=$43;
 HEAP32[(($32)>>2)]=$28;
 var $_0_i_i_i_i=$28;label=11;break;
 case 11: 
 var $_0_i_i_i_i;
 var $44=($_0_i_i_i_i|0)==-1;
 var $__i=($44?0:$27);
 var $45=$__i;label=12;break;
 case 12: 
 var $45;
 var $46=(($_01_i_i+4)|0);
 var $47=($46|0)==($23|0);
 if($47){var $48=$45;label=13;break;}else{var $_01_i_i=$46;var $27=$45;label=7;break;}
 case 13: 
 var $48;
 var $49=(($agg_result)|0);
 HEAP32[(($49)>>2)]=$48;
 var $$etemp$12$0=400;
 var $$etemp$12$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[(($3)>>0)]=45;
 var $4=(($2+2)|0);
 HEAP8[(($4)>>0)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[(($3)>>0)]=45;
 var $4=(($2+2)|0);
 HEAP8[(($4)>>0)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[(($1)>>0)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[(($1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))>>0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__wbuf=sp;
 var $__wb=(sp)+(104);
 var $__wn=(sp)+(112);
 var $__neg=(sp)+(120);
 var $__atoms=(sp)+(128);
 var $__nbuf=(sp)+(144);
 var $1=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=420;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx=(($6+8)|0);
 var $12=$_idx;
 var $_idx_val=HEAP32[(($12)>>2)];
 var $_idx5=(($6+12)|0);
 var $13=$_idx5;
 var $_idx5_val=HEAP32[(($13)>>2)];
 var $14=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx5_val,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $15=$14;
 HEAP8[(($__neg)>>0)]=0;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$17,$__intl,$7,$19,$__err,$__neg,$15,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 if($20){label=5;break;}else{label=24;break;}
 case 5: 
 var $23=(($__atoms)|0);
 var $24=$14;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($15,4896,4906,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $29=(($__nbuf)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $30=HEAP32[(($__wn)>>2)];
 var $31=HEAP32[(($2)>>2)];
 var $32=$30;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=($34|0)>98;
 if($35){label=7;break;}else{var $__nc_0=$29;var $54=0;label=13;break;}
 case 7: 
 var $36=((($34)+(2))|0);
 var $37=_malloc($36);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{var $__nc_0=$37;var $54=$37;label=13;break;}
 case 8: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $42$0 = ___cxa_find_matching_catch(); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=$42$1;
 var $_0=$43;var $_01=$44;label=45;break;
 case 11: 
 var $46$0 = ___cxa_find_matching_catch(); var $46$1 = tempRet0;
 var $47=$46$0;
 var $48=$46$1;
 var $_0=$47;var $_01=$48;label=45;break;
 case 12: 
 var $50$0 = ___cxa_find_matching_catch(); var $50$1 = tempRet0;
 var $51=$50$0;
 var $52=$50$1;
 _free($54);
 var $_0=$51;var $_01=$52;label=45;break;
 case 13: 
 var $54;
 var $__nc_0;
 var $55=HEAP8[(($__neg)>>0)];
 var $56=(($55<<24)>>24)==0;
 if($56){var $__nc_1=$__nc_0;label=15;break;}else{label=14;break;}
 case 14: 
 var $58=(($__nc_0+1)|0);
 HEAP8[(($__nc_0)>>0)]=45;
 var $__nc_1=$58;label=15;break;
 case 15: 
 var $__nc_1;
 var $60=($31>>>0)<($30>>>0);
 if($60){label=16;break;}else{var $__nc_2_lcssa=$__nc_1;label=21;break;}
 case 16: 
 var $61=(($__atoms+10)|0);
 var $62=$__atoms;
 var $__nc_27=$__nc_1;var $__w_08=$31;label=17;break;
 case 17: 
 var $__w_08;
 var $__nc_27;
 var $64=HEAP8[(($__w_08)>>0)];
 var $_01_i=$23;label=19;break;
 case 18: 
 var $66=($70|0)==($61|0);
 if($66){var $_0_lcssa_i=$61;label=20;break;}else{var $_01_i=$70;label=19;break;}
 case 19: 
 var $_01_i;
 var $68=HEAP8[(($_01_i)>>0)];
 var $69=(($68<<24)>>24)==(($64<<24)>>24);
 var $70=(($_01_i+1)|0);
 if($69){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $71=$_0_lcssa_i;
 var $72=((($71)-($62))|0);
 var $73=((4896+$72)|0);
 var $74=HEAP8[(($73)>>0)];
 HEAP8[(($__nc_27)>>0)]=$74;
 var $75=(($__w_08+1)|0);
 var $76=(($__nc_27+1)|0);
 var $77=HEAP32[(($__wn)>>2)];
 var $78=($75>>>0)<($77>>>0);
 if($78){var $__nc_27=$76;var $__w_08=$75;label=17;break;}else{var $__nc_2_lcssa=$76;label=21;break;}
 case 21: 
 var $__nc_2_lcssa;
 HEAP8[(($__nc_2_lcssa)>>0)]=0;
 var $79=_sscanf($29,1832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $80=($79|0)==1;
 if($80){label=23;break;}else{label=22;break;}
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=12;break; }
 case 23: 
 _free($54);
 label=24;break;
 case 24: 
 var $83=(($__b)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($84|0)==0;
 if($85){var $99=0;label=30;break;}else{label=25;break;}
 case 25: 
 var $87=(($84+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($84+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($88|0)==($90|0);
 if($91){label=26;break;}else{var $99=$84;label=30;break;}
 case 26: 
 var $92=$84;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+36)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=11;break; }
 case 27: 
 var $97=($96|0)==-1;
 if($97){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre_i_i_i=HEAP32[(($83)>>2)];
 var $99=$_pre_i_i_i;label=30;break;
 case 29: 
 HEAP32[(($83)>>2)]=0;
 var $99=0;label=30;break;
 case 30: 
 var $99;
 var $100=($99|0)==0;
 var $101=HEAP32[(($16)>>2)];
 var $102=($101|0)==0;
 if($102){label=36;break;}else{label=31;break;}
 case 31: 
 var $104=(($101+12)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(($101+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($105|0)==($107|0);
 if($108){label=33;break;}else{label=32;break;}
 case 32: 
 if($100){label=39;break;}else{label=38;break;}
 case 33: 
 var $109=$101;
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+36)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=11;break; }
 case 34: 
 var $114=($113|0)==-1;
 if($114){label=35;break;}else{label=37;break;}
 case 35: 
 HEAP32[(($16)>>2)]=0;
 label=36;break;
 case 36: 
 if($100){label=38;break;}else{label=39;break;}
 case 37: 
 if($100){label=39;break;}else{label=38;break;}
 case 38: 
 var $117=HEAP32[(($__err)>>2)];
 var $118=$117|2;
 HEAP32[(($__err)>>2)]=$118;
 label=39;break;
 case 39: 
 var $120=HEAP32[(($83)>>2)];
 var $121=(($agg_result)|0);
 HEAP32[(($121)>>2)]=$120;
 var $122=(($6+4)|0);
 var $123=$122;
 var $124=(tempValue=HEAP32[(($123)>>2)],HEAP32[(($123)>>2)]=tempValue+-1,tempValue);
 var $125=($124|0)==0;
 if($125){label=40;break;}else{label=41;break;}
 case 40: 
 var $127=$6;
 var $128=$6;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+8)|0);
 var $131=HEAP32[(($130)>>2)];
 FUNCTION_TABLE[$131]($127);
 label=41;break;
 case 41: 
 var $132=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $133=($132|0)==0;
 if($133){label=44;break;}else{label=42;break;}
 case 42: 
 var $135=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=43;break; }
 case 43: 
 var $137$0 = ___cxa_find_matching_catch(0); var $137$1 = tempRet0;
 var $138=$137$0;
 ___clang_call_terminate($138);
 throw "Reached an unreachable!";
 case 44: 
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 STACKTOP=sp;return;
 case 45: 
 var $_01;
 var $_0;
 var $140=(($6+4)|0);
 var $141=$140;
 var $142=(tempValue=HEAP32[(($141)>>2)],HEAP32[(($141)>>2)]=tempValue+-1,tempValue);
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=47;break;}
 case 46: 
 var $145=$6;
 var $146=$6;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+8)|0);
 var $149=HEAP32[(($148)>>2)];
 FUNCTION_TABLE[$149]($145);
 label=47;break;
 case 47: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $150=($_pre|0)==0;
 if($150){label=50;break;}else{label=48;break;}
 case 48: 
 var $_pre17=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre17]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $153$0 = ___cxa_find_matching_catch(0); var $153$1 = tempRet0;
 var $154=$153$0;
 ___clang_call_terminate($154);
 throw "Reached an unreachable!";
 case 50: 
 var $155$0=$_0;
 var $155$1=0;
 var $156$0=$155$0;
 var $156$1=$_01;
 ___resumeException($156$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(24);
 var $4=(sp)+(40);
 var $5=(sp)+(56);
 var $6=(sp)+(72);
 var $7=(sp)+(80);
 var $8=(sp)+(96);
 var $9=(sp)+(112);
 var $10=(sp)+(128);
 var $11=(sp)+(144);
 var $__gbuf=(sp)+(152);
 var $__gb=(sp)+(552);
 var $__gn=(sp)+(560);
 var $__ge=(sp)+(568);
 var $__pat=(sp)+(576);
 var $__grp=(sp)+(584);
 var $__sym=(sp)+(600);
 var $__psn=(sp)+(616);
 var $__nsn=(sp)+(632);
 var $__spaces=(sp)+(648);
 var $__et=(sp)+(664);
 HEAP32[(($11)>>2)]=$__we;
 var $12=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $13=(($__gbuf)|0);
 var $14=(($__gb)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=(($__gb+4)|0);
 HEAP32[(($15)>>2)]=420;
 HEAP32[(($__gn)>>2)]=$13;
 var $16=(($__gbuf+400)|0);
 HEAP32[(($__ge)>>2)]=$16;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i13=$__sym;
 HEAP32[(($this2_i_i_i13)>>2)]=0; HEAP32[((($this2_i_i_i13)+(4))>>2)]=0; HEAP32[((($this2_i_i_i13)+(8))>>2)]=0;
 var $this2_i_i_i14=$__psn;
 HEAP32[(($this2_i_i_i14)>>2)]=0; HEAP32[((($this2_i_i_i14)+(4))>>2)]=0; HEAP32[((($this2_i_i_i14)+(8))>>2)]=0;
 var $this2_i_i_i16=$__nsn;
 HEAP32[(($this2_i_i_i16)>>2)]=0; HEAP32[((($this2_i_i_i16)+(4))>>2)]=0; HEAP32[((($this2_i_i_i16)+(8))>>2)]=0;
 var $this2_i_i_i19=$__spaces;
 HEAP32[(($this2_i_i_i19)>>2)]=0; HEAP32[((($this2_i_i_i19)+(4))>>2)]=0; HEAP32[((($this2_i_i_i19)+(8))>>2)]=0;
 var $17=$1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $18=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $19=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $20=$4;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $21=$5;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $22=$6;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $23=$7;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $24=$8;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $25=$9;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $26=$10;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 if($__intl){label=2;break;}else{label=32;break;}
 case 2: 
 var $tmpcast1_i=$1;
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=83;break; }
 case 3: 
 var $_idx33=(($__loc_0_0_val+8)|0);
 var $_idx33_val=HEAP32[(($_idx33)>>2)];
 var $_idx34=(($__loc_0_0_val+12)|0);
 var $_idx34_val=HEAP32[(($_idx34)>>2)];
 var $29=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx33_val,$_idx34_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=83;break; }
 case 4: 
 var $30=$29;
 var $31=$29;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+44)|0);
 var $34=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($tmpcast1_i,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=83;break; }
 case 5: 
 var $35=HEAP32[(($1)>>2)];
 HEAP32[(($__pat)>>2)]=$35;
 var $36=$29;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+32)|0);
 var $39=HEAP32[(($38)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($2,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=83;break; }
 case 6: 
 var $40=HEAP8[(($this2_i_i_i16)>>0)];
 var $41=$40&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=8;break;}else{label=7;break;}
 case 7: 
 var $44=(($__nsn+8)|0);
 var $45=HEAP32[(($44)>>2)];
 HEAP8[(($45)>>0)]=0;
 var $46=(($__nsn+4)|0);
 HEAP32[(($46)>>2)]=0;
 label=9;break;
 case 8: 
 var $48=$__nsn;
 var $49=(($48+1)|0);
 HEAP8[(($49)>>0)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=9;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(0); var $51$1 = tempRet0;
 var $52=$51$0;
 ___clang_call_terminate($52);
 throw "Reached an unreachable!";
 case 11: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $_pre3=HEAP32[(($36)>>2)];
 var $_phi_trans_insert=(($_pre3+28)|0);
 var $_pre4=HEAP32[(($_phi_trans_insert)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre4]($3,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=83;break; }
 case 12: 
 var $53=HEAP8[(($this2_i_i_i14)>>0)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=(($__psn+8)|0);
 var $58=HEAP32[(($57)>>2)];
 HEAP8[(($58)>>0)]=0;
 var $59=(($__psn+4)|0);
 HEAP32[(($59)>>2)]=0;
 label=15;break;
 case 14: 
 var $61=$__psn;
 var $62=(($61+1)|0);
 HEAP8[(($62)>>0)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $64$0 = ___cxa_find_matching_catch(0); var $64$1 = tempRet0;
 var $65=$64$0;
 ___clang_call_terminate($65);
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $_phi_trans_insert5=$29;
 var $_pre6=HEAP32[(($_phi_trans_insert5)>>2)];
 var $_phi_trans_insert7=(($_pre6+12)|0);
 var $_pre8=HEAP32[(($_phi_trans_insert7)>>2)];
 var $66=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre8]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=83;break; }
 case 18: 
 var $67=HEAP32[(($_phi_trans_insert5)>>2)];
 var $68=(($67+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=83;break; }
 case 19: 
 var $71=HEAP32[(($36)>>2)];
 var $72=(($71+20)|0);
 var $73=HEAP32[(($72)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($4,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=83;break; }
 case 20: 
 var $74=HEAP8[(($this2_i_i_i)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=22;break;}else{label=21;break;}
 case 21: 
 var $78=(($__grp+8)|0);
 var $79=HEAP32[(($78)>>2)];
 HEAP8[(($79)>>0)]=0;
 var $80=(($__grp+4)|0);
 HEAP32[(($80)>>2)]=0;
 label=23;break;
 case 22: 
 var $82=$__grp;
 var $83=(($82+1)|0);
 HEAP8[(($83)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $85$0 = ___cxa_find_matching_catch(0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $_pre9=HEAP32[(($36)>>2)];
 var $_phi_trans_insert10=(($_pre9+24)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre11]($5,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=83;break; }
 case 26: 
 var $87=HEAP8[(($this2_i_i_i13)>>0)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=28;break;}else{label=27;break;}
 case 27: 
 var $91=(($__sym+8)|0);
 var $92=HEAP32[(($91)>>2)];
 HEAP8[(($92)>>0)]=0;
 var $93=(($__sym+4)|0);
 HEAP32[(($93)>>2)]=0;
 label=29;break;
 case 28: 
 var $95=$__sym;
 var $96=(($95+1)|0);
 HEAP8[(($96)>>0)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=29;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=30;break; }
 case 30: 
 var $98$0 = ___cxa_find_matching_catch(0); var $98$1 = tempRet0;
 var $99=$98$0;
 ___clang_call_terminate($99);
 throw "Reached an unreachable!";
 case 31: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $_phi_trans_insert12=$29;
 var $_pre13=HEAP32[(($_phi_trans_insert12)>>2)];
 var $_phi_trans_insert14=(($_pre13+36)|0);
 var $_pre15=HEAP32[(($_phi_trans_insert14)>>2)];
 var $100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre15]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$100;var $__ts_0=$70;var $__dp_0=$66;label=62;break; } else { label=83;break; }
 case 32: 
 var $tmpcast_i=$6;
 var $102=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=83;break; }
 case 33: 
 var $_idx=(($__loc_0_0_val+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx32=(($__loc_0_0_val+12)|0);
 var $_idx32_val=HEAP32[(($_idx32)>>2)];
 var $103=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx32_val,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=83;break; }
 case 34: 
 var $104=$103;
 var $105=$103;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($tmpcast_i,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=83;break; }
 case 35: 
 var $109=HEAP32[(($6)>>2)];
 HEAP32[(($__pat)>>2)]=$109;
 var $110=$103;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+32)|0);
 var $113=HEAP32[(($112)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($7,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=83;break; }
 case 36: 
 var $114=HEAP8[(($this2_i_i_i16)>>0)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=38;break;}else{label=37;break;}
 case 37: 
 var $118=(($__nsn+8)|0);
 var $119=HEAP32[(($118)>>2)];
 HEAP8[(($119)>>0)]=0;
 var $120=(($__nsn+4)|0);
 HEAP32[(($120)>>2)]=0;
 label=39;break;
 case 38: 
 var $122=$__nsn;
 var $123=(($122+1)|0);
 HEAP8[(($123)>>0)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=39;break;
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $125$0 = ___cxa_find_matching_catch(0); var $125$1 = tempRet0;
 var $126=$125$0;
 ___clang_call_terminate($126);
 throw "Reached an unreachable!";
 case 41: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $_pre21=HEAP32[(($110)>>2)];
 var $_phi_trans_insert22=(($_pre21+28)|0);
 var $_pre23=HEAP32[(($_phi_trans_insert22)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre23]($8,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=83;break; }
 case 42: 
 var $127=HEAP8[(($this2_i_i_i14)>>0)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=44;break;}else{label=43;break;}
 case 43: 
 var $131=(($__psn+8)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP8[(($132)>>0)]=0;
 var $133=(($__psn+4)|0);
 HEAP32[(($133)>>2)]=0;
 label=45;break;
 case 44: 
 var $135=$__psn;
 var $136=(($135+1)|0);
 HEAP8[(($136)>>0)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=45;break;
 case 45: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=46;break; }
 case 46: 
 var $138$0 = ___cxa_find_matching_catch(0); var $138$1 = tempRet0;
 var $139=$138$0;
 ___clang_call_terminate($139);
 throw "Reached an unreachable!";
 case 47: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 HEAP32[(($24)>>2)]=0; HEAP32[((($24)+(4))>>2)]=0; HEAP32[((($24)+(8))>>2)]=0;
 var $_phi_trans_insert24=$103;
 var $_pre25=HEAP32[(($_phi_trans_insert24)>>2)];
 var $_phi_trans_insert26=(($_pre25+12)|0);
 var $_pre27=HEAP32[(($_phi_trans_insert26)>>2)];
 var $140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre27]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=83;break; }
 case 48: 
 var $141=HEAP32[(($_phi_trans_insert24)>>2)];
 var $142=(($141+16)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=83;break; }
 case 49: 
 var $145=HEAP32[(($110)>>2)];
 var $146=(($145+20)|0);
 var $147=HEAP32[(($146)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($9,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=83;break; }
 case 50: 
 var $148=HEAP8[(($this2_i_i_i)>>0)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=52;break;}else{label=51;break;}
 case 51: 
 var $152=(($__grp+8)|0);
 var $153=HEAP32[(($152)>>2)];
 HEAP8[(($153)>>0)]=0;
 var $154=(($__grp+4)|0);
 HEAP32[(($154)>>2)]=0;
 label=53;break;
 case 52: 
 var $156=$__grp;
 var $157=(($156+1)|0);
 HEAP8[(($157)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $159$0 = ___cxa_find_matching_catch(0); var $159$1 = tempRet0;
 var $160=$159$0;
 ___clang_call_terminate($160);
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0; HEAP32[((($25)+(8))>>2)]=0;
 var $_pre28=HEAP32[(($110)>>2)];
 var $_phi_trans_insert29=(($_pre28+24)|0);
 var $_pre30=HEAP32[(($_phi_trans_insert29)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre30]($10,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=83;break; }
 case 56: 
 var $161=HEAP8[(($this2_i_i_i13)>>0)];
 var $162=$161&1;
 var $163=(($162<<24)>>24)==0;
 if($163){label=58;break;}else{label=57;break;}
 case 57: 
 var $165=(($__sym+8)|0);
 var $166=HEAP32[(($165)>>2)];
 HEAP8[(($166)>>0)]=0;
 var $167=(($__sym+4)|0);
 HEAP32[(($167)>>2)]=0;
 label=59;break;
 case 58: 
 var $169=$__sym;
 var $170=(($169+1)|0);
 HEAP8[(($170)>>0)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=59;break;
 case 59: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=60;break; }
 case 60: 
 var $172$0 = ___cxa_find_matching_catch(0); var $172$1 = tempRet0;
 var $173=$172$0;
 ___clang_call_terminate($173);
 throw "Reached an unreachable!";
 case 61: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
 HEAP32[(($26)>>2)]=0; HEAP32[((($26)+(4))>>2)]=0; HEAP32[((($26)+(8))>>2)]=0;
 var $_phi_trans_insert31=$103;
 var $_pre32=HEAP32[(($_phi_trans_insert31)>>2)];
 var $_phi_trans_insert33=(($_pre32+36)|0);
 var $_pre34=HEAP32[(($_phi_trans_insert33)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre34]($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$174;var $__ts_0=$144;var $__dp_0=$140;label=62;break; } else { label=83;break; }
 case 62: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $176=(($__wb)|0);
 var $177=HEAP32[(($176)>>2)];
 HEAP32[(($__wn)>>2)]=$177;
 var $178=(($__b)|0);
 var $179=$__pat;
 var $180=(($__ct+8)|0);
 var $181=$__nsn;
 var $182=(($181+1)|0);
 var $183=(($__nsn+4)|0);
 var $184=(($__nsn+8)|0);
 var $185=$__psn;
 var $186=(($185+1)|0);
 var $187=(($__psn+4)|0);
 var $188=(($__psn+8)|0);
 var $189=$__flags&512;
 var $190=($189|0)!=0;
 var $191=$__sym;
 var $192=(($191+1)|0);
 var $193=(($__sym+8)|0);
 var $194=(($__sym+4)|0);
 var $195=$__spaces;
 var $196=(($195+1)|0);
 var $197=(($__spaces+8)|0);
 var $198=(($__spaces+4)|0);
 var $199=(($179+3)|0);
 var $200=(($__grp+4)|0);
 var $__p_0241=0;var $__trailing_sign_0243=0;var $202=$13;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=63;break;
 case 63: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $202;
 var $__trailing_sign_0243;
 var $__p_0241;
 var $203=HEAP32[(($178)>>2)];
 var $204=($203|0)==0;
 if($204){var $218=0;label=69;break;}else{label=64;break;}
 case 64: 
 var $206=(($203+12)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(($203+16)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($207|0)==($209|0);
 if($210){label=65;break;}else{var $218=$203;label=69;break;}
 case 65: 
 var $211=$203;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=82;break; }
 case 66: 
 var $216=($215|0)==-1;
 if($216){label=68;break;}else{label=67;break;}
 case 67: 
 var $_pre_i_i_i23=HEAP32[(($178)>>2)];
 var $218=$_pre_i_i_i23;label=69;break;
 case 68: 
 HEAP32[(($178)>>2)]=0;
 var $218=0;label=69;break;
 case 69: 
 var $218;
 var $219=($218|0)==0;
 var $220=($__e_sroa_0_0|0)==0;
 if($220){label=74;break;}else{label=70;break;}
 case 70: 
 var $222=(($__e_sroa_0_0+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($__e_sroa_0_0+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($223|0)==($225|0);
 if($226){label=72;break;}else{label=71;break;}
 case 71: 
 if($219){var $__e_sroa_0_2=$__e_sroa_0_0;label=76;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_0;label=352;break;}
 case 72: 
 var $227=$__e_sroa_0_0;
 var $228=HEAP32[(($227)>>2)];
 var $229=(($228+36)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$230]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=82;break; }
 case 73: 
 var $232=($231|0)==-1;
 if($232){label=74;break;}else{label=75;break;}
 case 74: 
 if($219){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=0;label=352;break;}else{var $__e_sroa_0_2=0;label=76;break;}
 case 75: 
 if($219){var $__e_sroa_0_2=$__e_sroa_0_0;label=76;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_0;label=352;break;}
 case 76: 
 var $__e_sroa_0_2;
 var $235=(($179+$__p_0241)|0);
 var $236=HEAP8[(($235)>>0)];
 var $237=(($236<<24)>>24);
 switch(($237|0)){case 0:{ label=111;break;}case 3:{ label=136;break;}case 2:{ label=205;break;}case 4:{ var $__ng_0=0;var $780=$__e_sroa_0_2;var $779=$202;var $_pre_i2_i_i150=$__e_sroa_0_2;var $__e_sroa_0_10=$__e_sroa_0_2;label=257;break;}case 1:{ label=98;break;}default:{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}}break;
 case 77: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=84;break;
 case 78: 
 var $lpad_loopexit212$0 = ___cxa_find_matching_catch(); var $lpad_loopexit212$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit212$1;var $lpad_phi$0=$lpad_loopexit212$0;label=84;break;
 case 79: 
 var $lpad_loopexit217$0 = ___cxa_find_matching_catch(); var $lpad_loopexit217$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit217$1;var $lpad_phi$0=$lpad_loopexit217$0;label=84;break;
 case 80: 
 var $lpad_loopexit219$0 = ___cxa_find_matching_catch(); var $lpad_loopexit219$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit219$1;var $lpad_phi$0=$lpad_loopexit219$0;label=84;break;
 case 81: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(); var $lpad_loopexit225$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit225$1;var $lpad_phi$0=$lpad_loopexit225$0;label=84;break;
 case 82: 
 var $lpad_loopexit227$0 = ___cxa_find_matching_catch(); var $lpad_loopexit227$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit227$1;var $lpad_phi$0=$lpad_loopexit227$0;label=84;break;
 case 83: 
 var $lpad_nonloopexit228$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit228$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit228$1;var $lpad_phi$0=$lpad_nonloopexit228$0;label=84;break;
 case 84: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $238=HEAP8[(($this2_i_i_i19)>>0)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=86;break;}else{label=85;break;}
 case 85: 
 var $242=(($__spaces+8)|0);
 var $243=HEAP32[(($242)>>2)];
 _free($243);
 label=86;break;
 case 86: 
 var $244=HEAP8[(($this2_i_i_i16)>>0)];
 var $245=$244&1;
 var $246=(($245<<24)>>24)==0;
 if($246){label=88;break;}else{label=87;break;}
 case 87: 
 var $248=(($__nsn+8)|0);
 var $249=HEAP32[(($248)>>2)];
 _free($249);
 label=88;break;
 case 88: 
 var $250=HEAP8[(($this2_i_i_i14)>>0)];
 var $251=$250&1;
 var $252=(($251<<24)>>24)==0;
 if($252){label=90;break;}else{label=89;break;}
 case 89: 
 var $254=(($__psn+8)|0);
 var $255=HEAP32[(($254)>>2)];
 _free($255);
 label=90;break;
 case 90: 
 var $256=HEAP8[(($this2_i_i_i13)>>0)];
 var $257=$256&1;
 var $258=(($257<<24)>>24)==0;
 if($258){label=92;break;}else{label=91;break;}
 case 91: 
 var $260=(($__sym+8)|0);
 var $261=HEAP32[(($260)>>2)];
 _free($261);
 label=92;break;
 case 92: 
 var $262=HEAP8[(($this2_i_i_i)>>0)];
 var $263=$262&1;
 var $264=(($263<<24)>>24)==0;
 if($264){label=94;break;}else{label=93;break;}
 case 93: 
 var $266=(($__grp+8)|0);
 var $267=HEAP32[(($266)>>2)];
 _free($267);
 label=94;break;
 case 94: 
 var $268=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $269=($268|0)==0;
 if($269){label=97;break;}else{label=95;break;}
 case 95: 
 var $271=HEAP32[(($15)>>2)];
 var $272=$268;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$271]($272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=96;break; }
 case 96: 
 var $274$0 = ___cxa_find_matching_catch(0); var $274$1 = tempRet0;
 var $275=$274$0;
 ___clang_call_terminate($275);
 throw "Reached an unreachable!";
 case 97: 
 ___resumeException($lpad_phi$0)
 case 98: 
 var $cond=($__p_0241|0)==3;
 if($cond){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_2;label=352;break;}else{label=99;break;}
 case 99: 
 var $278=HEAP32[(($178)>>2)];
 var $279=(($278+12)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=(($278+16)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($280|0)==($282|0);
 if($283){label=100;break;}else{label=102;break;}
 case 100: 
 var $285=$278;
 var $286=HEAP32[(($285)>>2)];
 var $287=(($286+36)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$288]($278) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=82;break; }
 case 101: 
 var $extract_t_i33=(($289)&255);
 var $_0_i_off0_i34=$extract_t_i33;label=103;break;
 case 102: 
 var $291=HEAP8[(($280)>>0)];
 var $_0_i_off0_i34=$291;label=103;break;
 case 103: 
 var $_0_i_off0_i34;
 var $isascii1_i=(($_0_i_off0_i34<<24)>>24)>-1;
 if($isascii1_i){label=104;break;}else{label=110;break;}
 case 104: 
 var $292=(($_0_i_off0_i34<<24)>>24);
 var $293=HEAP32[(($180)>>2)];
 var $294=(($293+($292<<1))|0);
 var $295=HEAP16[(($294)>>1)];
 var $296=$295&8192;
 var $297=(($296<<16)>>16)==0;
 if($297){label=110;break;}else{label=105;break;}
 case 105: 
 var $299=HEAP32[(($178)>>2)];
 var $300=(($299+12)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($299+16)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($301|0)==($303|0);
 if($304){label=106;break;}else{label=108;break;}
 case 106: 
 var $306=$299;
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307+40)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=82;break; }
 case 107: 
 var $extract_t_i37=(($310)&255);
 var $_0_i_off0_i38=$extract_t_i37;label=109;break;
 case 108: 
 var $312=(($301+1)|0);
 HEAP32[(($300)>>2)]=$312;
 var $313=HEAP8[(($301)>>0)];
 var $_0_i_off0_i38=$313;label=109;break;
 case 109: 
 var $_0_i_off0_i38;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=111;break; } else { label=82;break; }
 case 110: 
 var $314=HEAP32[(($__err)>>2)];
 var $315=$314|4;
 HEAP32[(($__err)>>2)]=$315;
 var $_0=0;label=385;break;
 case 111: 
 var $317=($__p_0241|0)==3;
 if($317){var $__trailing_sign_0_lcssa=$__trailing_sign_0243;var $1068=$202;var $1067=$__e_sroa_0_2;label=352;break;}else{var $318=$__e_sroa_0_2;var $_pre_i2_i_i45=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=112;break;}
 case 112: 
 var $__e_sroa_0_3;
 var $_pre_i2_i_i45;
 var $318;
 var $319=HEAP32[(($178)>>2)];
 var $320=($319|0)==0;
 if($320){var $334=0;label=118;break;}else{label=113;break;}
 case 113: 
 var $322=(($319+12)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=(($319+16)|0);
 var $325=HEAP32[(($324)>>2)];
 var $326=($323|0)==($325|0);
 if($326){label=114;break;}else{var $334=$319;label=118;break;}
 case 114: 
 var $327=$319;
 var $328=HEAP32[(($327)>>2)];
 var $329=(($328+36)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$330]($319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=81;break; }
 case 115: 
 var $332=($331|0)==-1;
 if($332){label=117;break;}else{label=116;break;}
 case 116: 
 var $_pre_i_i_i41=HEAP32[(($178)>>2)];
 var $334=$_pre_i_i_i41;label=118;break;
 case 117: 
 HEAP32[(($178)>>2)]=0;
 var $334=0;label=118;break;
 case 118: 
 var $334;
 var $335=($334|0)==0;
 var $336=($318|0)==0;
 if($336){var $_pre_i2_i_i45249=$_pre_i2_i_i45;var $__e_sroa_0_4=$__e_sroa_0_3;label=123;break;}else{label=119;break;}
 case 119: 
 var $338=(($318+12)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($318+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($339|0)==($341|0);
 if($342){label=121;break;}else{label=120;break;}
 case 120: 
 if($335){var $352=$318;var $_pre_i2_i_i45251=$_pre_i2_i_i45;var $__e_sroa_0_5=$__e_sroa_0_3;label=125;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=351;break;}
 case 121: 
 var $343=$318;
 var $344=HEAP32[(($343)>>2)];
 var $345=(($344+36)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$346]($318) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=122;break; } else { label=81;break; }
 case 122: 
 var $348=($347|0)==-1;
 if($348){var $_pre_i2_i_i45249=0;var $__e_sroa_0_4=0;label=123;break;}else{label=124;break;}
 case 123: 
 var $__e_sroa_0_4;
 var $_pre_i2_i_i45249;
 if($335){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45249;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=351;break;}else{var $352=0;var $_pre_i2_i_i45251=$_pre_i2_i_i45249;var $__e_sroa_0_5=$__e_sroa_0_4;label=125;break;}
 case 124: 
 var $350=($_pre_i2_i_i45|0)==0;
 var $tmp_i_i47=$335^$350;
 if($tmp_i_i47){var $352=$_pre_i2_i_i45;var $_pre_i2_i_i45251=$_pre_i2_i_i45;var $__e_sroa_0_5=$__e_sroa_0_3;label=125;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=351;break;}
 case 125: 
 var $__e_sroa_0_5;
 var $_pre_i2_i_i45251;
 var $352;
 var $353=HEAP32[(($178)>>2)];
 var $354=(($353+12)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($353+16)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=($355|0)==($357|0);
 if($358){label=126;break;}else{label=128;break;}
 case 126: 
 var $360=$353;
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361+36)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$363]($353) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=81;break; }
 case 127: 
 var $extract_t_i51=(($364)&255);
 var $_0_i_off0_i52=$extract_t_i51;label=129;break;
 case 128: 
 var $366=HEAP8[(($355)>>0)];
 var $_0_i_off0_i52=$366;label=129;break;
 case 129: 
 var $_0_i_off0_i52;
 var $isascii1_i55=(($_0_i_off0_i52<<24)>>24)>-1;
 if($isascii1_i55){label=130;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45251;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=351;break;}
 case 130: 
 var $367=(($_0_i_off0_i52<<24)>>24);
 var $368=HEAP32[(($180)>>2)];
 var $369=(($368+($367<<1))|0);
 var $370=HEAP16[(($369)>>1)];
 var $371=$370&8192;
 var $372=(($371<<16)>>16)==0;
 if($372){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$_pre_i2_i_i45251;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=351;break;}else{label=131;break;}
 case 131: 
 var $374=HEAP32[(($178)>>2)];
 var $375=(($374+12)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=(($374+16)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=($376|0)==($378|0);
 if($379){label=132;break;}else{label=134;break;}
 case 132: 
 var $381=$374;
 var $382=HEAP32[(($381)>>2)];
 var $383=(($382+40)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$384]($374) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=133;break; } else { label=81;break; }
 case 133: 
 var $extract_t_i57=(($385)&255);
 var $_0_i_off0_i59=$extract_t_i57;label=135;break;
 case 134: 
 var $387=(($376+1)|0);
 HEAP32[(($375)>>2)]=$387;
 var $388=HEAP8[(($376)>>0)];
 var $_0_i_off0_i59=$388;label=135;break;
 case 135: 
 var $_0_i_off0_i59;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$_0_i_off0_i59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $318=$352;var $_pre_i2_i_i45=$_pre_i2_i_i45251;var $__e_sroa_0_3=$__e_sroa_0_5;label=112;break; } else { label=81;break; }
 case 136: 
 var $390=HEAP8[(($this2_i_i_i14)>>0)];
 var $391=$390&1;
 var $392=(($391<<24)>>24)==0;
 if($392){label=138;break;}else{label=137;break;}
 case 137: 
 var $394=HEAP32[(($187)>>2)];
 var $398=$394;label=139;break;
 case 138: 
 var $396=($390&255);
 var $397=$396>>>1;
 var $398=$397;label=139;break;
 case 139: 
 var $398;
 var $399=HEAP8[(($this2_i_i_i16)>>0)];
 var $400=$399&1;
 var $401=(($400<<24)>>24)==0;
 if($401){label=141;break;}else{label=140;break;}
 case 140: 
 var $403=HEAP32[(($183)>>2)];
 var $407=$403;label=142;break;
 case 141: 
 var $405=($399&255);
 var $406=$405>>>1;
 var $407=$406;label=142;break;
 case 142: 
 var $407;
 var $408=(((-$407))|0);
 var $409=($398|0)==($408|0);
 if($409){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}else{label=143;break;}
 case 143: 
 if($392){label=145;break;}else{label=144;break;}
 case 144: 
 var $412=HEAP32[(($187)>>2)];
 var $416=$412;label=146;break;
 case 145: 
 var $414=($390&255);
 var $415=$414>>>1;
 var $416=$415;label=146;break;
 case 146: 
 var $416;
 var $417=($416|0)==0;
 if($417){label=151;break;}else{label=147;break;}
 case 147: 
 if($401){label=149;break;}else{label=148;break;}
 case 148: 
 var $420=HEAP32[(($183)>>2)];
 var $424=$420;label=150;break;
 case 149: 
 var $422=($399&255);
 var $423=$422>>>1;
 var $424=$423;label=150;break;
 case 150: 
 var $424;
 var $425=($424|0)==0;
 if($425){label=151;break;}else{label=180;break;}
 case 151: 
 if($392){label=153;break;}else{label=152;break;}
 case 152: 
 var $428=HEAP32[(($187)>>2)];
 var $432=$428;label=154;break;
 case 153: 
 var $430=($390&255);
 var $431=$430>>>1;
 var $432=$431;label=154;break;
 case 154: 
 var $432;
 var $433=($432|0)==0;
 var $434=HEAP32[(($178)>>2)];
 var $435=(($434+12)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=(($434+16)|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=($436|0)==($438|0);
 if($433){label=168;break;}else{label=155;break;}
 case 155: 
 if($439){label=156;break;}else{label=158;break;}
 case 156: 
 var $442=$434;
 var $443=HEAP32[(($442)>>2)];
 var $444=(($443+36)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$445]($434) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=157;break; } else { label=82;break; }
 case 157: 
 var $extract_t_i90=(($446)&255);
 var $_pre252=HEAP8[(($this2_i_i_i14)>>0)];
 var $_0_i_off0_i91=$extract_t_i90;var $449=$_pre252;label=159;break;
 case 158: 
 var $448=HEAP8[(($436)>>0)];
 var $_0_i_off0_i91=$448;var $449=$390;label=159;break;
 case 159: 
 var $449;
 var $_0_i_off0_i91;
 var $450=$449&1;
 var $451=(($450<<24)>>24)==0;
 var $452=HEAP32[(($188)>>2)];
 var $_=($451?$186:$452);
 var $453=HEAP8[(($_)>>0)];
 var $454=(($_0_i_off0_i91<<24)>>24)==(($453<<24)>>24);
 if($454){label=160;break;}else{label=167;break;}
 case 160: 
 var $456=HEAP32[(($178)>>2)];
 var $457=(($456+12)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=(($456+16)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($458|0)==($460|0);
 if($461){label=161;break;}else{label=162;break;}
 case 161: 
 var $463=$456;
 var $464=HEAP32[(($463)>>2)];
 var $465=(($464+40)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$466]($456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=82;break; }
 case 162: 
 var $469=(($458+1)|0);
 HEAP32[(($457)>>2)]=$469;
 label=163;break;
 case 163: 
 var $470=HEAP8[(($this2_i_i_i14)>>0)];
 var $471=$470&1;
 var $472=(($471<<24)>>24)==0;
 if($472){label=165;break;}else{label=164;break;}
 case 164: 
 var $474=HEAP32[(($187)>>2)];
 var $478=$474;label=166;break;
 case 165: 
 var $476=($470&255);
 var $477=$476>>>1;
 var $478=$477;label=166;break;
 case 166: 
 var $478;
 var $479=($478>>>0)>1;
 var $__psn___trailing_sign_0=($479?$__psn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 167: 
 HEAP8[(($__neg)>>0)]=1;
 var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 168: 
 if($439){label=169;break;}else{label=171;break;}
 case 169: 
 var $483=$434;
 var $484=HEAP32[(($483)>>2)];
 var $485=(($484+36)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$486]($434) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=82;break; }
 case 170: 
 var $extract_t_i112=(($487)&255);
 var $_pre=HEAP8[(($this2_i_i_i16)>>0)];
 var $_0_i_off0_i113=$extract_t_i112;var $490=$_pre;label=172;break;
 case 171: 
 var $489=HEAP8[(($436)>>0)];
 var $_0_i_off0_i113=$489;var $490=$399;label=172;break;
 case 172: 
 var $490;
 var $_0_i_off0_i113;
 var $491=$490&1;
 var $492=(($491<<24)>>24)==0;
 var $493=HEAP32[(($184)>>2)];
 var $_277=($492?$182:$493);
 var $494=HEAP8[(($_277)>>0)];
 var $495=(($_0_i_off0_i113<<24)>>24)==(($494<<24)>>24);
 if($495){label=173;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}
 case 173: 
 var $497=HEAP32[(($178)>>2)];
 var $498=(($497+12)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=(($497+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($499|0)==($501|0);
 if($502){label=174;break;}else{label=175;break;}
 case 174: 
 var $504=$497;
 var $505=HEAP32[(($504)>>2)];
 var $506=(($505+40)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$507]($497) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=176;break; } else { label=82;break; }
 case 175: 
 var $510=(($499+1)|0);
 HEAP32[(($498)>>2)]=$510;
 label=176;break;
 case 176: 
 HEAP8[(($__neg)>>0)]=1;
 var $511=HEAP8[(($this2_i_i_i16)>>0)];
 var $512=$511&1;
 var $513=(($512<<24)>>24)==0;
 if($513){label=178;break;}else{label=177;break;}
 case 177: 
 var $515=HEAP32[(($183)>>2)];
 var $519=$515;label=179;break;
 case 178: 
 var $517=($511&255);
 var $518=$517>>>1;
 var $519=$518;label=179;break;
 case 179: 
 var $519;
 var $520=($519>>>0)>1;
 var $__nsn___trailing_sign_0=($520?$__nsn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 180: 
 var $522=HEAP32[(($178)>>2)];
 var $523=(($522+12)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(($522+16)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($524|0)==($526|0);
 if($527){label=181;break;}else{label=183;break;}
 case 181: 
 var $529=$522;
 var $530=HEAP32[(($529)>>2)];
 var $531=(($530+36)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$532]($522) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { label=82;break; }
 case 182: 
 var $extract_t_i120=(($533)&255);
 var $_pre253=HEAP8[(($this2_i_i_i14)>>0)];
 var $_pre16=HEAP32[(($178)>>2)];
 var $_phi_trans_insert17=(($_pre16+12)|0);
 var $_pre18=HEAP32[(($_phi_trans_insert17)>>2)];
 var $_phi_trans_insert19=(($_pre16+16)|0);
 var $_pre20=HEAP32[(($_phi_trans_insert19)>>2)];
 var $_0_i_off0_i121=$extract_t_i120;var $539=$_pre253;var $538=$_pre16;var $537=$_pre18;var $536=$_pre20;label=184;break;
 case 183: 
 var $535=HEAP8[(($524)>>0)];
 var $_0_i_off0_i121=$535;var $539=$390;var $538=$522;var $537=$524;var $536=$526;label=184;break;
 case 184: 
 var $536;
 var $537;
 var $538;
 var $539;
 var $_0_i_off0_i121;
 var $540=$539&1;
 var $541=(($540<<24)>>24)==0;
 var $542=HEAP32[(($188)>>2)];
 var $_278=($541?$186:$542);
 var $543=HEAP8[(($_278)>>0)];
 var $544=(($_0_i_off0_i121<<24)>>24)==(($543<<24)>>24);
 var $545=(($538+12)|0);
 var $546=($537|0)==($536|0);
 if($544){label=185;break;}else{label=192;break;}
 case 185: 
 if($546){label=186;break;}else{label=187;break;}
 case 186: 
 var $549=$538;
 var $550=HEAP32[(($549)>>2)];
 var $551=(($550+40)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$552]($538) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { label=82;break; }
 case 187: 
 var $555=(($537+1)|0);
 HEAP32[(($545)>>2)]=$555;
 label=188;break;
 case 188: 
 var $556=HEAP8[(($this2_i_i_i14)>>0)];
 var $557=$556&1;
 var $558=(($557<<24)>>24)==0;
 if($558){label=190;break;}else{label=189;break;}
 case 189: 
 var $560=HEAP32[(($187)>>2)];
 var $564=$560;label=191;break;
 case 190: 
 var $562=($556&255);
 var $563=$562>>>1;
 var $564=$563;label=191;break;
 case 191: 
 var $564;
 var $565=($564>>>0)>1;
 var $__psn___trailing_sign_09=($565?$__psn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__psn___trailing_sign_09;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 192: 
 if($546){label=193;break;}else{label=195;break;}
 case 193: 
 var $568=$538;
 var $569=HEAP32[(($568)>>2)];
 var $570=(($569+36)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$571]($538) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=82;break; }
 case 194: 
 var $extract_t_i130=(($572)&255);
 var $_0_i_off0_i131=$extract_t_i130;label=196;break;
 case 195: 
 var $574=HEAP8[(($537)>>0)];
 var $_0_i_off0_i131=$574;label=196;break;
 case 196: 
 var $_0_i_off0_i131;
 var $575=HEAP8[(($this2_i_i_i16)>>0)];
 var $576=$575&1;
 var $577=(($576<<24)>>24)==0;
 var $578=HEAP32[(($184)>>2)];
 var $_279=($577?$182:$578);
 var $579=HEAP8[(($_279)>>0)];
 var $580=(($_0_i_off0_i131<<24)>>24)==(($579<<24)>>24);
 if($580){label=197;break;}else{label=204;break;}
 case 197: 
 var $582=HEAP32[(($178)>>2)];
 var $583=(($582+12)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($582+16)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($584|0)==($586|0);
 if($587){label=198;break;}else{label=199;break;}
 case 198: 
 var $589=$582;
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+40)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$592]($582) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=200;break; } else { label=82;break; }
 case 199: 
 var $595=(($584+1)|0);
 HEAP32[(($583)>>2)]=$595;
 label=200;break;
 case 200: 
 HEAP8[(($__neg)>>0)]=1;
 var $596=HEAP8[(($this2_i_i_i16)>>0)];
 var $597=$596&1;
 var $598=(($597<<24)>>24)==0;
 if($598){label=202;break;}else{label=201;break;}
 case 201: 
 var $600=HEAP32[(($183)>>2)];
 var $604=$600;label=203;break;
 case 202: 
 var $602=($596&255);
 var $603=$602>>>1;
 var $604=$603;label=203;break;
 case 203: 
 var $604;
 var $605=($604>>>0)>1;
 var $__nsn___trailing_sign_010=($605?$__nsn:$__trailing_sign_0243);
 var $__trailing_sign_1=$__nsn___trailing_sign_010;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;
 case 204: 
 var $607=HEAP32[(($__err)>>2)];
 var $608=$607|4;
 HEAP32[(($__err)>>2)]=$608;
 var $_0=0;label=385;break;
 case 205: 
 var $610=($__trailing_sign_0243|0)!=0;
 var $611=($__p_0241>>>0)<2;
 var $or_cond=$610|$611;
 if($or_cond){label=209;break;}else{label=206;break;}
 case 206: 
 var $613=($__p_0241|0)==2;
 if($613){label=207;break;}else{var $618=0;label=208;break;}
 case 207: 
 var $615=HEAP8[(($199)>>0)];
 var $616=(($615<<24)>>24)!=0;
 var $618=$616;label=208;break;
 case 208: 
 var $618;
 var $brmerge=$190|$618;
 if($brmerge){label=209;break;}else{var $__trailing_sign_1=0;var $1064=$202;var $1063=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=351;break;}
 case 209: 
 var $619=HEAP8[(($this2_i_i_i13)>>0)];
 var $620=$619&1;
 var $621=(($620<<24)>>24)==0;
 var $622=HEAP32[(($193)>>2)];
 var $_280=($621?$192:$622);
 var $623=($__p_0241|0)==0;
 if($623){var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{label=210;break;}
 case 210: 
 var $625=((($__p_0241)-(1))|0);
 var $626=(($179+$625)|0);
 var $627=HEAP8[(($626)>>0)];
 var $switch=($627&255)<2;
 if($switch){label=211;break;}else{var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}
 case 211: 
 var $628=($619&255);
 var $629=$628>>>1;
 var $630=HEAP32[(($194)>>2)];
 var $_282=($621?$629:$630);
 var $631=(($_280+$_282)|0);
 var $632=$_280;label=212;break;
 case 212: 
 var $632;
 var $633=($632|0)==($631|0);
 if($633){label=215;break;}else{label=213;break;}
 case 213: 
 var $635=HEAP8[(($632)>>0)];
 var $isascii1_i174=(($635<<24)>>24)>-1;
 if($isascii1_i174){label=214;break;}else{label=215;break;}
 case 214: 
 var $636=(($635<<24)>>24);
 var $637=HEAP32[(($180)>>2)];
 var $638=(($637+($636<<1))|0);
 var $639=HEAP16[(($638)>>1)];
 var $640=$639&8192;
 var $641=(($640<<16)>>16)==0;
 var $642=(($632+1)|0);
 if($641){label=215;break;}else{var $632=$642;label=212;break;}
 case 215: 
 var $643=$632;
 var $644=$_280;
 var $645=((($643)-($644))|0);
 var $646=HEAP8[(($this2_i_i_i19)>>0)];
 var $647=$646&1;
 var $648=(($647<<24)>>24)==0;
 if($648){label=217;break;}else{label=216;break;}
 case 216: 
 var $650=HEAP32[(($198)>>2)];
 var $654=$650;label=218;break;
 case 217: 
 var $652=($646&255);
 var $653=$652>>>1;
 var $654=$653;label=218;break;
 case 218: 
 var $654;
 var $655=($645>>>0)>($654>>>0);
 if($655){var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{label=219;break;}
 case 219: 
 if($648){label=221;break;}else{label=220;break;}
 case 220: 
 var $658=HEAP32[(($197)>>2)];
 var $659=HEAP32[(($198)>>2)];
 var $_sum=((($659)-($645))|0);
 var $660=(($658+$_sum)|0);
 var $667=$659;var $666=$658;var $665=$660;label=222;break;
 case 221: 
 var $662=($646&255);
 var $663=$662>>>1;
 var $_sum268=((($663)-($645))|0);
 var $664=(($195+1+$_sum268)|0);
 var $667=$663;var $666=$196;var $665=$664;label=222;break;
 case 222: 
 var $665;
 var $666;
 var $667;
 var $668=(($666+$667)|0);
 var $669=($665|0)==($668|0);
 if($669){var $681=$632;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{var $671=$665;var $670=$_280;label=223;break;}
 case 223: 
 var $670;
 var $671;
 var $672=HEAP8[(($671)>>0)];
 var $673=HEAP8[(($670)>>0)];
 var $674=(($672<<24)>>24)==(($673<<24)>>24);
 if($674){label=224;break;}else{var $681=$_280;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}
 case 224: 
 var $676=(($671+1)|0);
 var $677=(($670+1)|0);
 var $678=($676|0)==($668|0);
 if($678){var $681=$632;var $680=$619;var $679=$__e_sroa_0_2;var $_pre_i2_i_i168=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=225;break;}else{var $671=$676;var $670=$677;label=223;break;}
 case 225: 
 var $__e_sroa_0_6;
 var $_pre_i2_i_i168;
 var $679;
 var $680;
 var $681;
 var $682=$680&1;
 var $683=(($682<<24)>>24)==0;
 if($683){label=227;break;}else{label=226;break;}
 case 226: 
 var $685=HEAP32[(($193)>>2)];
 var $686=HEAP32[(($194)>>2)];
 var $691=$686;var $690=$685;label=228;break;
 case 227: 
 var $688=($680&255);
 var $689=$688>>>1;
 var $691=$689;var $690=$192;label=228;break;
 case 228: 
 var $690;
 var $691;
 var $692=(($690+$691)|0);
 var $693=($681|0)==($692|0);
 if($693){var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}else{label=229;break;}
 case 229: 
 var $695=HEAP32[(($178)>>2)];
 var $696=($695|0)==0;
 if($696){var $710=0;label=235;break;}else{label=230;break;}
 case 230: 
 var $698=(($695+12)|0);
 var $699=HEAP32[(($698)>>2)];
 var $700=(($695+16)|0);
 var $701=HEAP32[(($700)>>2)];
 var $702=($699|0)==($701|0);
 if($702){label=231;break;}else{var $710=$695;label=235;break;}
 case 231: 
 var $703=$695;
 var $704=HEAP32[(($703)>>2)];
 var $705=(($704+36)|0);
 var $706=HEAP32[(($705)>>2)];
 var $707=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$706]($695) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=232;break; } else { label=80;break; }
 case 232: 
 var $708=($707|0)==-1;
 if($708){label=234;break;}else{label=233;break;}
 case 233: 
 var $_pre_i_i_i164=HEAP32[(($178)>>2)];
 var $710=$_pre_i_i_i164;label=235;break;
 case 234: 
 HEAP32[(($178)>>2)]=0;
 var $710=0;label=235;break;
 case 235: 
 var $710;
 var $711=($710|0)==0;
 var $712=($679|0)==0;
 if($712){var $_pre_i2_i_i168256=$_pre_i2_i_i168;var $__e_sroa_0_7=$__e_sroa_0_6;label=240;break;}else{label=236;break;}
 case 236: 
 var $714=(($679+12)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($679+16)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=($715|0)==($717|0);
 if($718){label=238;break;}else{label=237;break;}
 case 237: 
 if($711){var $728=$679;var $_pre_i2_i_i168255=$_pre_i2_i_i168;var $__e_sroa_0_8=$__e_sroa_0_6;label=242;break;}else{var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}
 case 238: 
 var $719=$679;
 var $720=HEAP32[(($719)>>2)];
 var $721=(($720+36)|0);
 var $722=HEAP32[(($721)>>2)];
 var $723=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$722]($679) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=239;break; } else { label=80;break; }
 case 239: 
 var $724=($723|0)==-1;
 if($724){var $_pre_i2_i_i168256=0;var $__e_sroa_0_7=0;label=240;break;}else{label=241;break;}
 case 240: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i168256;
 if($711){var $761=$_pre_i2_i_i168256;var $__e_sroa_0_9=$__e_sroa_0_7;label=251;break;}else{var $728=0;var $_pre_i2_i_i168255=$_pre_i2_i_i168256;var $__e_sroa_0_8=$__e_sroa_0_7;label=242;break;}
 case 241: 
 var $726=($_pre_i2_i_i168|0)==0;
 var $tmp_i_i170=$711^$726;
 if($tmp_i_i170){var $728=$_pre_i2_i_i168;var $_pre_i2_i_i168255=$_pre_i2_i_i168;var $__e_sroa_0_8=$__e_sroa_0_6;label=242;break;}else{var $761=$_pre_i2_i_i168;var $__e_sroa_0_9=$__e_sroa_0_6;label=251;break;}
 case 242: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i168255;
 var $728;
 var $729=HEAP32[(($178)>>2)];
 var $730=(($729+12)|0);
 var $731=HEAP32[(($730)>>2)];
 var $732=(($729+16)|0);
 var $733=HEAP32[(($732)>>2)];
 var $734=($731|0)==($733|0);
 if($734){label=243;break;}else{label=245;break;}
 case 243: 
 var $736=$729;
 var $737=HEAP32[(($736)>>2)];
 var $738=(($737+36)|0);
 var $739=HEAP32[(($738)>>2)];
 var $740=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$739]($729) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=244;break; } else { label=80;break; }
 case 244: 
 var $extract_t_i159=(($740)&255);
 var $_0_i_off0_i160=$extract_t_i159;label=246;break;
 case 245: 
 var $742=HEAP8[(($731)>>0)];
 var $_0_i_off0_i160=$742;label=246;break;
 case 246: 
 var $_0_i_off0_i160;
 var $743=HEAP8[(($681)>>0)];
 var $744=(($_0_i_off0_i160<<24)>>24)==(($743<<24)>>24);
 if($744){label=247;break;}else{var $761=$_pre_i2_i_i168255;var $__e_sroa_0_9=$__e_sroa_0_8;label=251;break;}
 case 247: 
 var $746=HEAP32[(($178)>>2)];
 var $747=(($746+12)|0);
 var $748=HEAP32[(($747)>>2)];
 var $749=(($746+16)|0);
 var $750=HEAP32[(($749)>>2)];
 var $751=($748|0)==($750|0);
 if($751){label=248;break;}else{label=249;break;}
 case 248: 
 var $753=$746;
 var $754=HEAP32[(($753)>>2)];
 var $755=(($754+40)|0);
 var $756=HEAP32[(($755)>>2)];
 var $757=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$756]($746) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=80;break; }
 case 249: 
 var $759=(($748+1)|0);
 HEAP32[(($747)>>2)]=$759;
 label=250;break;
 case 250: 
 var $760=(($681+1)|0);
 var $_pre254=HEAP8[(($this2_i_i_i13)>>0)];
 var $681=$760;var $680=$_pre254;var $679=$728;var $_pre_i2_i_i168=$_pre_i2_i_i168255;var $__e_sroa_0_6=$__e_sroa_0_8;label=225;break;
 case 251: 
 var $__e_sroa_0_9;
 var $761;
 if($190){label=252;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$761;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=351;break;}
 case 252: 
 var $763=HEAP8[(($this2_i_i_i13)>>0)];
 var $764=$763&1;
 var $765=(($764<<24)>>24)==0;
 if($765){label=254;break;}else{label=253;break;}
 case 253: 
 var $767=HEAP32[(($193)>>2)];
 var $768=HEAP32[(($194)>>2)];
 var $773=$768;var $772=$767;label=255;break;
 case 254: 
 var $770=($763&255);
 var $771=$770>>>1;
 var $773=$771;var $772=$192;label=255;break;
 case 255: 
 var $772;
 var $773;
 var $774=(($772+$773)|0);
 var $775=($681|0)==($774|0);
 if($775){var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$202;var $1063=$761;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=351;break;}else{label=256;break;}
 case 256: 
 var $777=HEAP32[(($__err)>>2)];
 var $778=$777|4;
 HEAP32[(($__err)>>2)]=$778;
 var $_0=0;label=385;break;
 case 257: 
 var $__e_sroa_0_10;
 var $_pre_i2_i_i150;
 var $779;
 var $780;
 var $__ng_0;
 var $781=HEAP32[(($178)>>2)];
 var $782=($781|0)==0;
 if($782){var $796=0;label=263;break;}else{label=258;break;}
 case 258: 
 var $784=(($781+12)|0);
 var $785=HEAP32[(($784)>>2)];
 var $786=(($781+16)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=($785|0)==($787|0);
 if($788){label=259;break;}else{var $796=$781;label=263;break;}
 case 259: 
 var $789=$781;
 var $790=HEAP32[(($789)>>2)];
 var $791=(($790+36)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$792]($781) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=78;break; }
 case 260: 
 var $794=($793|0)==-1;
 if($794){label=262;break;}else{label=261;break;}
 case 261: 
 var $_pre_i_i_i146=HEAP32[(($178)>>2)];
 var $796=$_pre_i_i_i146;label=263;break;
 case 262: 
 HEAP32[(($178)>>2)]=0;
 var $796=0;label=263;break;
 case 263: 
 var $796;
 var $797=($796|0)==0;
 var $798=($780|0)==0;
 if($798){var $811=$_pre_i2_i_i150;var $__e_sroa_0_11=$__e_sroa_0_10;label=268;break;}else{label=264;break;}
 case 264: 
 var $800=(($780+12)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($780+16)|0);
 var $803=HEAP32[(($802)>>2)];
 var $804=($801|0)==($803|0);
 if($804){label=266;break;}else{label=265;break;}
 case 265: 
 if($797){var $816=$780;var $815=$_pre_i2_i_i150;var $__e_sroa_0_12=$__e_sroa_0_10;label=270;break;}else{var $_pre_i2_i_i106=$_pre_i2_i_i150;var $__e_sroa_0_13=$__e_sroa_0_10;label=291;break;}
 case 266: 
 var $805=$780;
 var $806=HEAP32[(($805)>>2)];
 var $807=(($806+36)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$808]($780) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=267;break; } else { label=78;break; }
 case 267: 
 var $810=($809|0)==-1;
 if($810){var $811=0;var $__e_sroa_0_11=0;label=268;break;}else{label=269;break;}
 case 268: 
 var $__e_sroa_0_11;
 var $811;
 if($797){var $_pre_i2_i_i106=$811;var $__e_sroa_0_13=$__e_sroa_0_11;label=291;break;}else{var $816=0;var $815=$811;var $__e_sroa_0_12=$__e_sroa_0_11;label=270;break;}
 case 269: 
 var $813=($_pre_i2_i_i150|0)==0;
 var $tmp_i_i152=$797^$813;
 if($tmp_i_i152){var $816=$_pre_i2_i_i150;var $815=$_pre_i2_i_i150;var $__e_sroa_0_12=$__e_sroa_0_10;label=270;break;}else{var $_pre_i2_i_i106=$_pre_i2_i_i150;var $__e_sroa_0_13=$__e_sroa_0_10;label=291;break;}
 case 270: 
 var $__e_sroa_0_12;
 var $815;
 var $816;
 var $817=HEAP32[(($178)>>2)];
 var $818=(($817+12)|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=(($817+16)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=($819|0)==($821|0);
 if($822){label=271;break;}else{label=273;break;}
 case 271: 
 var $824=$817;
 var $825=HEAP32[(($824)>>2)];
 var $826=(($825+36)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$827]($817) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=272;break; } else { label=78;break; }
 case 272: 
 var $extract_t_i141=(($828)&255);
 var $_0_i_off0_i142=$extract_t_i141;label=274;break;
 case 273: 
 var $830=HEAP8[(($819)>>0)];
 var $_0_i_off0_i142=$830;label=274;break;
 case 274: 
 var $_0_i_off0_i142;
 var $isascii1_i139=(($_0_i_off0_i142<<24)>>24)>-1;
 if($isascii1_i139){label=275;break;}else{label=280;break;}
 case 275: 
 var $831=(($_0_i_off0_i142<<24)>>24);
 var $832=HEAP32[(($180)>>2)];
 var $833=(($832+($831<<1))|0);
 var $834=HEAP16[(($833)>>1)];
 var $835=$834&2048;
 var $836=(($835<<16)>>16)==0;
 if($836){label=280;break;}else{label=276;break;}
 case 276: 
 var $838=HEAP32[(($__wn)>>2)];
 var $839=HEAP32[(($11)>>2)];
 var $840=($838|0)==($839|0);
 if($840){label=277;break;}else{var $843=$838;label=279;break;}
 case 277: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=78;break; }
 case 278: 
 var $_pre263=HEAP32[(($__wn)>>2)];
 var $843=$_pre263;label=279;break;
 case 279: 
 var $843;
 var $844=(($843+1)|0);
 HEAP32[(($__wn)>>2)]=$844;
 HEAP8[(($843)>>0)]=$_0_i_off0_i142;
 var $845=((($__ng_0)+(1))|0);
 var $__ng_1=$845;var $866=$779;label=288;break;
 case 280: 
 var $846=HEAP8[(($this2_i_i_i)>>0)];
 var $847=$846&1;
 var $848=(($847<<24)>>24)==0;
 if($848){label=282;break;}else{label=281;break;}
 case 281: 
 var $850=HEAP32[(($200)>>2)];
 var $854=$850;label=283;break;
 case 282: 
 var $852=($846&255);
 var $853=$852>>>1;
 var $854=$853;label=283;break;
 case 283: 
 var $854;
 var $855=($854|0)!=0;
 var $856=($__ng_0|0)!=0;
 var $or_cond6=$855&$856;
 var $857=(($_0_i_off0_i142<<24)>>24)==(($__ts_0<<24)>>24);
 var $or_cond12=$or_cond6&$857;
 if($or_cond12){label=284;break;}else{var $_pre_i2_i_i106=$815;var $__e_sroa_0_13=$__e_sroa_0_12;label=291;break;}
 case 284: 
 var $859=HEAP32[(($__ge)>>2)];
 var $860=($779|0)==($859|0);
 if($860){label=285;break;}else{var $863=$779;label=287;break;}
 case 285: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=286;break; } else { label=78;break; }
 case 286: 
 var $_pre265=HEAP32[(($__gn)>>2)];
 var $863=$_pre265;label=287;break;
 case 287: 
 var $863;
 var $864=(($863+4)|0);
 HEAP32[(($__gn)>>2)]=$864;
 HEAP32[(($863)>>2)]=$__ng_0;
 var $__ng_1=0;var $866=$864;label=288;break;
 case 288: 
 var $866;
 var $__ng_1;
 var $867=HEAP32[(($178)>>2)];
 var $868=(($867+12)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(($867+16)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=($869|0)==($871|0);
 if($872){label=289;break;}else{label=290;break;}
 case 289: 
 var $874=$867;
 var $875=HEAP32[(($874)>>2)];
 var $876=(($875+40)|0);
 var $877=HEAP32[(($876)>>2)];
 var $878=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$877]($867) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $780=$816;var $779=$866;var $_pre_i2_i_i150=$815;var $__e_sroa_0_10=$__e_sroa_0_12;label=257;break; } else { label=78;break; }
 case 290: 
 var $880=(($869+1)|0);
 HEAP32[(($868)>>2)]=$880;
 var $__ng_0=$__ng_1;var $780=$816;var $779=$866;var $_pre_i2_i_i150=$815;var $__e_sroa_0_10=$__e_sroa_0_12;label=257;break;
 case 291: 
 var $__e_sroa_0_13;
 var $_pre_i2_i_i106;
 var $882=HEAP32[(($14)>>2)];
 var $883=($882|0)!=($779|0);
 var $884=($__ng_0|0)!=0;
 var $or_cond8=$883&$884;
 if($or_cond8){label=292;break;}else{var $893=$779;label=296;break;}
 case 292: 
 var $886=HEAP32[(($__ge)>>2)];
 var $887=($779|0)==($886|0);
 if($887){label=293;break;}else{var $890=$779;label=295;break;}
 case 293: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=82;break; }
 case 294: 
 var $_pre259=HEAP32[(($__gn)>>2)];
 var $890=$_pre259;label=295;break;
 case 295: 
 var $890;
 var $891=(($890+4)|0);
 HEAP32[(($__gn)>>2)]=$891;
 HEAP32[(($890)>>2)]=$__ng_0;
 var $893=$891;label=296;break;
 case 296: 
 var $893;
 var $894=($__fd_0|0)>0;
 if($894){label=297;break;}else{var $1056=$_pre_i2_i_i106;var $__fd_1=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=349;break;}
 case 297: 
 var $896=HEAP32[(($178)>>2)];
 var $897=($896|0)==0;
 if($897){var $911=0;label=303;break;}else{label=298;break;}
 case 298: 
 var $899=(($896+12)|0);
 var $900=HEAP32[(($899)>>2)];
 var $901=(($896+16)|0);
 var $902=HEAP32[(($901)>>2)];
 var $903=($900|0)==($902|0);
 if($903){label=299;break;}else{var $911=$896;label=303;break;}
 case 299: 
 var $904=$896;
 var $905=HEAP32[(($904)>>2)];
 var $906=(($905+36)|0);
 var $907=HEAP32[(($906)>>2)];
 var $908=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$907]($896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=300;break; } else { label=82;break; }
 case 300: 
 var $909=($908|0)==-1;
 if($909){label=302;break;}else{label=301;break;}
 case 301: 
 var $_pre_i_i_i102=HEAP32[(($178)>>2)];
 var $911=$_pre_i_i_i102;label=303;break;
 case 302: 
 HEAP32[(($178)>>2)]=0;
 var $911=0;label=303;break;
 case 303: 
 var $911;
 var $912=($911|0)==0;
 var $913=($_pre_i2_i_i106|0)==0;
 if($913){var $__e_sroa_0_14=$__e_sroa_0_13;label=308;break;}else{label=304;break;}
 case 304: 
 var $915=(($_pre_i2_i_i106+12)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=(($_pre_i2_i_i106+16)|0);
 var $918=HEAP32[(($917)>>2)];
 var $919=($916|0)==($918|0);
 if($919){label=306;break;}else{label=305;break;}
 case 305: 
 if($912){var $927=$_pre_i2_i_i106;var $__e_sroa_0_15=$__e_sroa_0_13;label=310;break;}else{label=315;break;}
 case 306: 
 var $920=$_pre_i2_i_i106;
 var $921=HEAP32[(($920)>>2)];
 var $922=(($921+36)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($_pre_i2_i_i106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=307;break; } else { label=82;break; }
 case 307: 
 var $925=($924|0)==-1;
 if($925){var $__e_sroa_0_14=0;label=308;break;}else{label=309;break;}
 case 308: 
 var $__e_sroa_0_14;
 if($912){label=315;break;}else{var $927=0;var $__e_sroa_0_15=$__e_sroa_0_14;label=310;break;}
 case 309: 
 if($912){var $927=$_pre_i2_i_i106;var $__e_sroa_0_15=$__e_sroa_0_13;label=310;break;}else{label=315;break;}
 case 310: 
 var $__e_sroa_0_15;
 var $927;
 var $928=HEAP32[(($178)>>2)];
 var $929=(($928+12)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=(($928+16)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($930|0)==($932|0);
 if($933){label=311;break;}else{label=313;break;}
 case 311: 
 var $935=$928;
 var $936=HEAP32[(($935)>>2)];
 var $937=(($936+36)|0);
 var $938=HEAP32[(($937)>>2)];
 var $939=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$938]($928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=82;break; }
 case 312: 
 var $extract_t_i94=(($939)&255);
 var $_0_i_off0_i95=$extract_t_i94;label=314;break;
 case 313: 
 var $941=HEAP8[(($930)>>0)];
 var $_0_i_off0_i95=$941;label=314;break;
 case 314: 
 var $_0_i_off0_i95;
 var $942=(($_0_i_off0_i95<<24)>>24)==(($__dp_0<<24)>>24);
 if($942){label=316;break;}else{label=315;break;}
 case 315: 
 var $944=HEAP32[(($__err)>>2)];
 var $945=$944|4;
 HEAP32[(($__err)>>2)]=$945;
 var $_0=0;label=385;break;
 case 316: 
 var $947=HEAP32[(($178)>>2)];
 var $948=(($947+12)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=(($947+16)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=($949|0)==($951|0);
 if($952){label=317;break;}else{label=318;break;}
 case 317: 
 var $954=$947;
 var $955=HEAP32[(($954)>>2)];
 var $956=(($955+40)|0);
 var $957=HEAP32[(($956)>>2)];
 var $958=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$957]($947) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $962=$927;var $961=$__fd_0;var $_pre_i2_i_i80=$927;var $__e_sroa_0_16=$__e_sroa_0_15;label=319;break; } else { label=82;break; }
 case 318: 
 var $960=(($949+1)|0);
 HEAP32[(($948)>>2)]=$960;
 var $962=$927;var $961=$__fd_0;var $_pre_i2_i_i80=$927;var $__e_sroa_0_16=$__e_sroa_0_15;label=319;break;
 case 319: 
 var $__e_sroa_0_16;
 var $_pre_i2_i_i80;
 var $961;
 var $962;
 var $963=HEAP32[(($178)>>2)];
 var $964=($963|0)==0;
 if($964){var $978=0;label=325;break;}else{label=320;break;}
 case 320: 
 var $966=(($963+12)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=(($963+16)|0);
 var $969=HEAP32[(($968)>>2)];
 var $970=($967|0)==($969|0);
 if($970){label=321;break;}else{var $978=$963;label=325;break;}
 case 321: 
 var $971=$963;
 var $972=HEAP32[(($971)>>2)];
 var $973=(($972+36)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$974]($963) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=322;break; } else { label=79;break; }
 case 322: 
 var $976=($975|0)==-1;
 if($976){label=324;break;}else{label=323;break;}
 case 323: 
 var $_pre_i_i_i76=HEAP32[(($178)>>2)];
 var $978=$_pre_i_i_i76;label=325;break;
 case 324: 
 HEAP32[(($178)>>2)]=0;
 var $978=0;label=325;break;
 case 325: 
 var $978;
 var $979=($978|0)==0;
 var $980=($962|0)==0;
 if($980){var $_pre_i2_i_i80261_ph=$_pre_i2_i_i80;var $__e_sroa_0_17=$__e_sroa_0_16;label=330;break;}else{label=326;break;}
 case 326: 
 var $982=(($962+12)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=(($962+16)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=($983|0)==($985|0);
 if($986){label=328;break;}else{label=327;break;}
 case 327: 
 if($979){var $_pre_i2_i_i80261272=$_pre_i2_i_i80;var $995=$962;var $__e_sroa_0_18=$__e_sroa_0_16;label=332;break;}else{label=338;break;}
 case 328: 
 var $987=$962;
 var $988=HEAP32[(($987)>>2)];
 var $989=(($988+36)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$990]($962) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=329;break; } else { label=79;break; }
 case 329: 
 var $992=($991|0)==-1;
 if($992){var $_pre_i2_i_i80261_ph=0;var $__e_sroa_0_17=0;label=330;break;}else{label=331;break;}
 case 330: 
 var $__e_sroa_0_17;
 var $_pre_i2_i_i80261_ph;
 if($979){label=338;break;}else{var $_pre_i2_i_i80261272=$_pre_i2_i_i80261_ph;var $995=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=332;break;}
 case 331: 
 var $993=($_pre_i2_i_i80|0)==0;
 var $tmp_i_i82=$979^$993;
 if($tmp_i_i82){var $_pre_i2_i_i80261272=$_pre_i2_i_i80;var $995=$_pre_i2_i_i80;var $__e_sroa_0_18=$__e_sroa_0_16;label=332;break;}else{label=338;break;}
 case 332: 
 var $__e_sroa_0_18;
 var $995;
 var $_pre_i2_i_i80261272;
 var $996=HEAP32[(($178)>>2)];
 var $997=(($996+12)|0);
 var $998=HEAP32[(($997)>>2)];
 var $999=(($996+16)|0);
 var $1000=HEAP32[(($999)>>2)];
 var $1001=($998|0)==($1000|0);
 if($1001){label=333;break;}else{label=335;break;}
 case 333: 
 var $1003=$996;
 var $1004=HEAP32[(($1003)>>2)];
 var $1005=(($1004+36)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1006]($996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=79;break; }
 case 334: 
 var $extract_t_i70=(($1007)&255);
 var $_0_i_off0_i71=$extract_t_i70;label=336;break;
 case 335: 
 var $1009=HEAP8[(($998)>>0)];
 var $_0_i_off0_i71=$1009;label=336;break;
 case 336: 
 var $_0_i_off0_i71;
 var $isascii1_i68=(($_0_i_off0_i71<<24)>>24)>-1;
 if($isascii1_i68){label=337;break;}else{label=338;break;}
 case 337: 
 var $1010=(($_0_i_off0_i71<<24)>>24);
 var $1011=HEAP32[(($180)>>2)];
 var $1012=(($1011+($1010<<1))|0);
 var $1013=HEAP16[(($1012)>>1)];
 var $1014=$1013&2048;
 var $1015=(($1014<<16)>>16)==0;
 if($1015){label=338;break;}else{label=339;break;}
 case 338: 
 var $1016=HEAP32[(($__err)>>2)];
 var $1017=$1016|4;
 HEAP32[(($__err)>>2)]=$1017;
 var $_0=0;label=385;break;
 case 339: 
 var $1019=HEAP32[(($__wn)>>2)];
 var $1020=HEAP32[(($11)>>2)];
 var $1021=($1019|0)==($1020|0);
 if($1021){label=340;break;}else{label=341;break;}
 case 340: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=341;break; } else { label=79;break; }
 case 341: 
 var $1024=HEAP32[(($178)>>2)];
 var $1025=(($1024+12)|0);
 var $1026=HEAP32[(($1025)>>2)];
 var $1027=(($1024+16)|0);
 var $1028=HEAP32[(($1027)>>2)];
 var $1029=($1026|0)==($1028|0);
 if($1029){label=342;break;}else{label=344;break;}
 case 342: 
 var $1031=$1024;
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=(($1032+36)|0);
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1034]($1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=79;break; }
 case 343: 
 var $extract_t_i62=(($1035)&255);
 var $_0_i_off0_i63=$extract_t_i62;label=345;break;
 case 344: 
 var $1037=HEAP8[(($1026)>>0)];
 var $_0_i_off0_i63=$1037;label=345;break;
 case 345: 
 var $_0_i_off0_i63;
 var $1038=HEAP32[(($__wn)>>2)];
 var $1039=(($1038+1)|0);
 HEAP32[(($__wn)>>2)]=$1039;
 HEAP8[(($1038)>>0)]=$_0_i_off0_i63;
 var $1040=((($961)-(1))|0);
 var $1041=HEAP32[(($178)>>2)];
 var $1042=(($1041+12)|0);
 var $1043=HEAP32[(($1042)>>2)];
 var $1044=(($1041+16)|0);
 var $1045=HEAP32[(($1044)>>2)];
 var $1046=($1043|0)==($1045|0);
 if($1046){label=346;break;}else{label=348;break;}
 case 346: 
 var $1048=$1041;
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=(($1049+40)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1051]($1041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=347;break; } else { label=79;break; }
 case 347: 
 var $1053=($1040|0)>0;
 if($1053){var $962=$995;var $961=$1040;var $_pre_i2_i_i80=$_pre_i2_i_i80261272;var $__e_sroa_0_16=$__e_sroa_0_18;label=319;break;}else{var $1056=$_pre_i2_i_i80261272;var $__fd_1=$1040;var $__e_sroa_0_19=$__e_sroa_0_18;label=349;break;}
 case 348: 
 var $1055=(($1043+1)|0);
 HEAP32[(($1042)>>2)]=$1055;
 label=347;break;
 case 349: 
 var $__e_sroa_0_19;
 var $__fd_1;
 var $1056;
 var $1057=HEAP32[(($__wn)>>2)];
 var $1058=HEAP32[(($176)>>2)];
 var $1059=($1057|0)==($1058|0);
 if($1059){label=350;break;}else{var $__trailing_sign_1=$__trailing_sign_0243;var $1064=$893;var $1063=$1056;var $__fd_2=$__fd_1;var $__e_sroa_0_20=$__e_sroa_0_19;label=351;break;}
 case 350: 
 var $1061=HEAP32[(($__err)>>2)];
 var $1062=$1061|4;
 HEAP32[(($__err)>>2)]=$1062;
 var $_0=0;label=385;break;
 case 351: 
 var $__e_sroa_0_20;
 var $__fd_2;
 var $1063;
 var $1064;
 var $__trailing_sign_1;
 var $1065=((($__p_0241)+(1))|0);
 var $1066=($1065>>>0)<4;
 if($1066){var $__p_0241=$1065;var $__trailing_sign_0243=$__trailing_sign_1;var $202=$1064;var $__fd_0=$__fd_2;var $__e_sroa_0_0=$__e_sroa_0_20;label=63;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $1068=$1064;var $1067=$1063;label=352;break;}
 case 352: 
 var $1067;
 var $1068;
 var $__trailing_sign_0_lcssa;
 var $1069=($__trailing_sign_0_lcssa|0)==0;
 if($1069){label=382;break;}else{label=353;break;}
 case 353: 
 var $1070=$__trailing_sign_0_lcssa;
 var $1071=$__trailing_sign_0_lcssa;
 var $1072=(($1071+1)|0);
 var $1073=(($__trailing_sign_0_lcssa+8)|0);
 var $1074=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;var $1075=$1067;var $_pre_i2_i_i=$1067;label=354;break;
 case 354: 
 var $_pre_i2_i_i;
 var $1075;
 var $__i_0;
 var $1076=HEAP8[(($1070)>>0)];
 var $1077=$1076&1;
 var $1078=(($1077<<24)>>24)==0;
 if($1078){label=356;break;}else{label=355;break;}
 case 355: 
 var $1080=HEAP32[(($1074)>>2)];
 var $1084=$1080;label=357;break;
 case 356: 
 var $1082=($1076&255);
 var $1083=$1082>>>1;
 var $1084=$1083;label=357;break;
 case 357: 
 var $1084;
 var $1085=($__i_0>>>0)<($1084>>>0);
 if($1085){label=358;break;}else{label=382;break;}
 case 358: 
 var $1087=HEAP32[(($178)>>2)];
 var $1088=($1087|0)==0;
 if($1088){var $1102=0;label=364;break;}else{label=359;break;}
 case 359: 
 var $1090=(($1087+12)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=(($1087+16)|0);
 var $1093=HEAP32[(($1092)>>2)];
 var $1094=($1091|0)==($1093|0);
 if($1094){label=360;break;}else{var $1102=$1087;label=364;break;}
 case 360: 
 var $1095=$1087;
 var $1096=HEAP32[(($1095)>>2)];
 var $1097=(($1096+36)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1098]($1087) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=361;break; } else { label=77;break; }
 case 361: 
 var $1100=($1099|0)==-1;
 if($1100){label=363;break;}else{label=362;break;}
 case 362: 
 var $_pre_i_i_i=HEAP32[(($178)>>2)];
 var $1102=$_pre_i_i_i;label=364;break;
 case 363: 
 HEAP32[(($178)>>2)]=0;
 var $1102=0;label=364;break;
 case 364: 
 var $1102;
 var $1103=($1102|0)==0;
 var $1104=($1075|0)==0;
 if($1104){var $_pre_i2_i_i267_ph=$_pre_i2_i_i;label=369;break;}else{label=365;break;}
 case 365: 
 var $1106=(($1075+12)|0);
 var $1107=HEAP32[(($1106)>>2)];
 var $1108=(($1075+16)|0);
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1107|0)==($1109|0);
 if($1110){label=367;break;}else{label=366;break;}
 case 366: 
 if($1103){var $_pre_i2_i_i267275=$_pre_i2_i_i;var $1119=$1075;label=371;break;}else{label=378;break;}
 case 367: 
 var $1111=$1075;
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=(($1112+36)|0);
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1114]($1075) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=368;break; } else { label=77;break; }
 case 368: 
 var $1116=($1115|0)==-1;
 if($1116){var $_pre_i2_i_i267_ph=0;label=369;break;}else{label=370;break;}
 case 369: 
 var $_pre_i2_i_i267_ph;
 if($1103){label=378;break;}else{var $_pre_i2_i_i267275=$_pre_i2_i_i267_ph;var $1119=0;label=371;break;}
 case 370: 
 var $1117=($_pre_i2_i_i|0)==0;
 var $tmp_i_i=$1103^$1117;
 if($tmp_i_i){var $_pre_i2_i_i267275=$_pre_i2_i_i;var $1119=$_pre_i2_i_i;label=371;break;}else{label=378;break;}
 case 371: 
 var $1119;
 var $_pre_i2_i_i267275;
 var $1120=HEAP32[(($178)>>2)];
 var $1121=(($1120+12)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=(($1120+16)|0);
 var $1124=HEAP32[(($1123)>>2)];
 var $1125=($1122|0)==($1124|0);
 if($1125){label=372;break;}else{label=374;break;}
 case 372: 
 var $1127=$1120;
 var $1128=HEAP32[(($1127)>>2)];
 var $1129=(($1128+36)|0);
 var $1130=HEAP32[(($1129)>>2)];
 var $1131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1130]($1120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=373;break; } else { label=77;break; }
 case 373: 
 var $extract_t_i=(($1131)&255);
 var $_0_i_off0_i=$extract_t_i;label=375;break;
 case 374: 
 var $1133=HEAP8[(($1122)>>0)];
 var $_0_i_off0_i=$1133;label=375;break;
 case 375: 
 var $_0_i_off0_i;
 var $1134=HEAP8[(($1070)>>0)];
 var $1135=$1134&1;
 var $1136=(($1135<<24)>>24)==0;
 if($1136){var $1139=$1072;label=377;break;}else{label=376;break;}
 case 376: 
 var $1138=HEAP32[(($1073)>>2)];
 var $1139=$1138;label=377;break;
 case 377: 
 var $1139;
 var $1140=(($1139+$__i_0)|0);
 var $1141=HEAP8[(($1140)>>0)];
 var $1142=(($_0_i_off0_i<<24)>>24)==(($1141<<24)>>24);
 if($1142){label=379;break;}else{label=378;break;}
 case 378: 
 var $1144=HEAP32[(($__err)>>2)];
 var $1145=$1144|4;
 HEAP32[(($__err)>>2)]=$1145;
 var $_0=0;label=385;break;
 case 379: 
 var $1147=((($__i_0)+(1))|0);
 var $1148=HEAP32[(($178)>>2)];
 var $1149=(($1148+12)|0);
 var $1150=HEAP32[(($1149)>>2)];
 var $1151=(($1148+16)|0);
 var $1152=HEAP32[(($1151)>>2)];
 var $1153=($1150|0)==($1152|0);
 if($1153){label=380;break;}else{label=381;break;}
 case 380: 
 var $1155=$1148;
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=(($1156+40)|0);
 var $1158=HEAP32[(($1157)>>2)];
 var $1159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1158]($1148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1147;var $1075=$1119;var $_pre_i2_i_i=$_pre_i2_i_i267275;label=354;break; } else { label=77;break; }
 case 381: 
 var $1161=(($1150+1)|0);
 HEAP32[(($1149)>>2)]=$1161;
 var $__i_0=$1147;var $1075=$1119;var $_pre_i2_i_i=$_pre_i2_i_i267275;label=354;break;
 case 382: 
 var $1162=HEAP32[(($14)>>2)];
 var $1163=($1162|0)==($1068|0);
 if($1163){var $_0=1;label=385;break;}else{label=383;break;}
 case 383: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1162,$1068,$__et);
 var $1165=HEAP32[(($__et)>>2)];
 var $1166=($1165|0)==0;
 if($1166){var $_0=1;label=385;break;}else{label=384;break;}
 case 384: 
 var $1168=HEAP32[(($__err)>>2)];
 var $1169=$1168|4;
 HEAP32[(($__err)>>2)]=$1169;
 var $_0=0;label=385;break;
 case 385: 
 var $_0;
 var $1171=HEAP8[(($this2_i_i_i19)>>0)];
 var $1172=$1171&1;
 var $1173=(($1172<<24)>>24)==0;
 if($1173){label=387;break;}else{label=386;break;}
 case 386: 
 var $1175=HEAP32[(($197)>>2)];
 _free($1175);
 label=387;break;
 case 387: 
 var $1176=HEAP8[(($this2_i_i_i16)>>0)];
 var $1177=$1176&1;
 var $1178=(($1177<<24)>>24)==0;
 if($1178){label=389;break;}else{label=388;break;}
 case 388: 
 var $1180=HEAP32[(($184)>>2)];
 _free($1180);
 label=389;break;
 case 389: 
 var $1181=HEAP8[(($this2_i_i_i14)>>0)];
 var $1182=$1181&1;
 var $1183=(($1182<<24)>>24)==0;
 if($1183){label=391;break;}else{label=390;break;}
 case 390: 
 var $1185=HEAP32[(($188)>>2)];
 _free($1185);
 label=391;break;
 case 391: 
 var $1186=HEAP8[(($this2_i_i_i13)>>0)];
 var $1187=$1186&1;
 var $1188=(($1187<<24)>>24)==0;
 if($1188){label=393;break;}else{label=392;break;}
 case 392: 
 var $1190=HEAP32[(($193)>>2)];
 _free($1190);
 label=393;break;
 case 393: 
 var $1191=HEAP8[(($this2_i_i_i)>>0)];
 var $1192=$1191&1;
 var $1193=(($1192<<24)>>24)==0;
 if($1193){label=395;break;}else{label=394;break;}
 case 394: 
 var $1195=(($__grp+8)|0);
 var $1196=HEAP32[(($1195)>>2)];
 _free($1196);
 label=395;break;
 case 395: 
 var $1197=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $1198=($1197|0)==0;
 if($1198){label=398;break;}else{label=396;break;}
 case 396: 
 var $1200=HEAP32[(($15)>>2)];
 var $1201=$1197;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1200]($1201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=398;break; } else { label=397;break; }
 case 397: 
 var $1203$0 = ___cxa_find_matching_catch(0); var $1203$1 = tempRet0;
 var $1204=$1203$0;
 ___clang_call_terminate($1204);
 throw "Reached an unreachable!";
 case 398: 
 var $$etemp$21$0=400;
 var $$etemp$21$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=5304;
 var $2=(($0+4)|0);
 var $3=_strlen($msg);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, $msg, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 ___cxa_throw($0,12400,(192));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__wbuf=sp;
 var $__wb=(sp)+(104);
 var $__wn=(sp)+(112);
 var $__neg=(sp)+(120);
 var $1=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=420;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=51;break; }
 case 2: 
 var $_idx=(($6+8)|0);
 var $12=$_idx;
 var $_idx_val=HEAP32[(($12)>>2)];
 var $_idx5=(($6+12)|0);
 var $13=$_idx5;
 var $_idx5_val=HEAP32[(($13)>>2)];
 var $14=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx5_val,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=51;break; }
 case 3: 
 var $15=$14;
 HEAP8[(($__neg)>>0)]=0;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($__iob+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$17,$__intl,$7,$19,$__err,$__neg,$15,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=51;break; }
 case 4: 
 if($20){label=5;break;}else{label=30;break;}
 case 5: 
 var $23=$__v;
 var $24=HEAP8[(($23)>>0)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $28=(($__v+8)|0);
 var $29=HEAP32[(($28)>>2)];
 HEAP8[(($29)>>0)]=0;
 var $30=(($__v+4)|0);
 HEAP32[(($30)>>2)]=0;
 label=8;break;
 case 7: 
 var $32=$__v;
 var $33=(($32+1)|0);
 HEAP8[(($33)>>0)]=0;
 HEAP8[(($23)>>0)]=0;
 label=8;break;
 case 8: 
 var $34=HEAP8[(($__neg)>>0)];
 var $35=(($34<<24)>>24)==0;
 var $_pre9=$14;
 if($35){label=11;break;}else{label=9;break;}
 case 9: 
 var $37=HEAP32[(($_pre9)>>2)];
 var $38=(($37+28)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($15,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=51;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=51;break; }
 case 11: 
 var $41=HEAP32[(($_pre9)>>2)];
 var $42=(($41+28)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($15,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=51;break; }
 case 12: 
 var $45=HEAP32[(($2)>>2)];
 var $46=HEAP32[(($__wn)>>2)];
 var $47=((($46)-(1))|0);
 var $48=($45>>>0)<($47>>>0);
 if($48){var $__w_05=$45;label=14;break;}else{var $__w_0_lcssa=$45;label=15;break;}
 case 13: 
 var $50=($53>>>0)<($47>>>0);
 if($50){var $__w_05=$53;label=14;break;}else{var $__w_0_lcssa=$53;label=15;break;}
 case 14: 
 var $__w_05;
 var $51=HEAP8[(($__w_05)>>0)];
 var $52=(($51<<24)>>24)==(($44<<24)>>24);
 var $53=(($__w_05+1)|0);
 if($52){label=13;break;}else{var $__w_0_lcssa=$__w_05;label=15;break;}
 case 15: 
 var $__w_0_lcssa;
 var $54=$__w_0_lcssa;
 var $55=HEAP8[(($23)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $58=($55&255);
 var $59=$58>>>1;
 var $69=10;var $68=$55;var $67=$59;label=18;break;
 case 17: 
 var $61=(($__v+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__v)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&-2;
 var $phitmp_i_i=((($65)-(1))|0);
 var $66=(($64)&255);
 var $69=$phitmp_i_i;var $68=$66;var $67=$62;label=18;break;
 case 18: 
 var $67;
 var $68;
 var $69;
 var $70=$46;
 var $71=((($70)-($54))|0);
 var $72=($46|0)==($__w_0_lcssa|0);
 if($72){label=30;break;}else{label=19;break;}
 case 19: 
 var $74=((($69)-($67))|0);
 var $75=($74>>>0)<($71>>>0);
 if($75){label=20;break;}else{var $80=$68;label=22;break;}
 case 20: 
 var $77=((($67)+($71))|0);
 var $78=((($77)-($69))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v,$69,$78,$67,$67,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=51;break; }
 case 21: 
 var $_pre_i=HEAP8[(($23)>>0)];
 var $80=$_pre_i;label=22;break;
 case 22: 
 var $80;
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=24;break;}else{label=23;break;}
 case 23: 
 var $84=(($__v+8)|0);
 var $85=HEAP32[(($84)>>2)];
 var $89=$85;label=25;break;
 case 24: 
 var $87=$__v;
 var $88=(($87+1)|0);
 var $89=$88;label=25;break;
 case 25: 
 var $89;
 var $90=(($89+$67)|0);
 var $91=((($67)-($54))|0);
 var $scevgep_i=(($46+$91)|0);
 var $scevgep3_i=$scevgep_i;
 var $_01_i=$__w_0_lcssa;var $__p_02_i=$90;label=26;break;
 case 26: 
 var $__p_02_i;
 var $_01_i;
 var $93=HEAP8[(($_01_i)>>0)];
 HEAP8[(($__p_02_i)>>0)]=$93;
 var $94=(($__p_02_i+1)|0);
 var $95=(($_01_i+1)|0);
 var $96=($95|0)==($46|0);
 if($96){label=27;break;}else{var $_01_i=$95;var $__p_02_i=$94;label=26;break;}
 case 27: 
 var $scevgep4_i=(($89+$scevgep3_i)|0);
 HEAP8[(($scevgep4_i)>>0)]=0;
 var $98=((($67)+($71))|0);
 var $99=HEAP8[(($23)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=29;break;}else{label=28;break;}
 case 28: 
 var $103=(($__v+4)|0);
 HEAP32[(($103)>>2)]=$98;
 label=30;break;
 case 29: 
 var $105=$98<<1;
 var $106=(($105)&255);
 HEAP8[(($23)>>0)]=$106;
 label=30;break;
 case 30: 
 var $107=(($__b)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){var $123=0;label=36;break;}else{label=31;break;}
 case 31: 
 var $111=(($108+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($108+16)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=($112|0)==($114|0);
 if($115){label=32;break;}else{var $123=$108;label=36;break;}
 case 32: 
 var $116=$108;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=51;break; }
 case 33: 
 var $121=($120|0)==-1;
 if($121){label=35;break;}else{label=34;break;}
 case 34: 
 var $_pre_i_i_i=HEAP32[(($107)>>2)];
 var $123=$_pre_i_i_i;label=36;break;
 case 35: 
 HEAP32[(($107)>>2)]=0;
 var $123=0;label=36;break;
 case 36: 
 var $123;
 var $124=($123|0)==0;
 var $125=($17|0)==0;
 if($125){label=42;break;}else{label=37;break;}
 case 37: 
 var $127=(($17+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($17+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=39;break;}else{label=38;break;}
 case 38: 
 if($124){label=45;break;}else{label=44;break;}
 case 39: 
 var $132=$17;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$135]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=51;break; }
 case 40: 
 var $137=($136|0)==-1;
 if($137){label=41;break;}else{label=43;break;}
 case 41: 
 HEAP32[(($16)>>2)]=0;
 label=42;break;
 case 42: 
 if($124){label=44;break;}else{label=45;break;}
 case 43: 
 if($124){label=45;break;}else{label=44;break;}
 case 44: 
 var $140=HEAP32[(($__err)>>2)];
 var $141=$140|2;
 HEAP32[(($__err)>>2)]=$141;
 label=45;break;
 case 45: 
 var $143=HEAP32[(($107)>>2)];
 var $144=(($agg_result)|0);
 HEAP32[(($144)>>2)]=$143;
 var $145=(($6+4)|0);
 var $146=$145;
 var $147=(tempValue=HEAP32[(($146)>>2)],HEAP32[(($146)>>2)]=tempValue+-1,tempValue);
 var $148=($147|0)==0;
 if($148){label=46;break;}else{label=47;break;}
 case 46: 
 var $150=$6;
 var $151=$6;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+8)|0);
 var $154=HEAP32[(($153)>>2)];
 FUNCTION_TABLE[$154]($150);
 label=47;break;
 case 47: 
 var $155=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $156=($155|0)==0;
 if($156){label=50;break;}else{label=48;break;}
 case 48: 
 var $158=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $160$0 = ___cxa_find_matching_catch(0); var $160$1 = tempRet0;
 var $161=$160$0;
 ___clang_call_terminate($161);
 throw "Reached an unreachable!";
 case 50: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 51: 
 var $163$0 = ___cxa_find_matching_catch(); var $163$1 = tempRet0;
 var $164=(($6+4)|0);
 var $165=$164;
 var $166=(tempValue=HEAP32[(($165)>>2)],HEAP32[(($165)>>2)]=tempValue+-1,tempValue);
 var $167=($166|0)==0;
 if($167){label=52;break;}else{label=53;break;}
 case 52: 
 var $169=$6;
 var $170=$6;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+8)|0);
 var $173=HEAP32[(($172)>>2)];
 FUNCTION_TABLE[$173]($169);
 label=53;break;
 case 53: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $174=($_pre|0)==0;
 if($174){label=56;break;}else{label=54;break;}
 case 54: 
 var $176=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=55;break; }
 case 55: 
 var $178$0 = ___cxa_find_matching_catch(0); var $178$1 = tempRet0;
 var $179=$178$0;
 ___clang_call_terminate($179);
 throw "Reached an unreachable!";
 case 56: 
 ___resumeException($163$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__grouping+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11|0)==0;
 if($12){label=21;break;}else{label=5;break;}
 case 5: 
 var $14=($__g|0)==($__g_end|0);
 if($14){var $23=$2;label=9;break;}else{label=6;break;}
 case 6: 
 var $15=((($__g_end)-(4))|0);
 var $16=($15>>>0)>($__g>>>0);
 if($16){var $_012_i_i=$__g;var $17=$15;label=7;break;}else{var $23=$2;label=9;break;}
 case 7: 
 var $17;
 var $_012_i_i;
 var $18=HEAP32[(($_012_i_i)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($_012_i_i+4)|0);
 var $21=((($17)-(4))|0);
 var $22=($20>>>0)<($21>>>0);
 if($22){var $_012_i_i=$20;var $17=$21;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[(($1)>>0)];
 var $23=$_pre;label=9;break;
 case 9: 
 var $23;
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $27=(($__grouping+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($__grouping+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $37=$30;var $36=$28;label=12;break;
 case 11: 
 var $32=$__grouping;
 var $33=(($32+1)|0);
 var $34=($23&255);
 var $35=$34>>>1;
 var $37=$35;var $36=$33;label=12;break;
 case 12: 
 var $36;
 var $37;
 var $38=((($__g_end)-(4))|0);
 var $39=($38>>>0)>($__g>>>0);
 var $40=HEAP8[(($36)>>0)];
 var $_not9=(($40<<24)>>24)<1;
 var $41=(($40<<24)>>24)==127;
 var $or_cond210=$_not9|$41;
 if($39){label=13;break;}else{var $_lcssa6=$40;var $or_cond2_lcssa=$or_cond210;label=18;break;}
 case 13: 
 var $42=(($36+$37)|0);
 var $43=$42;
 var $__ig_011=$36;var $__r_012=$__g;var $45=$40;var $or_cond213=$or_cond210;label=14;break;
 case 14: 
 var $or_cond213;
 var $45;
 var $__r_012;
 var $__ig_011;
 if($or_cond213){label=17;break;}else{label=15;break;}
 case 15: 
 var $47=(($45<<24)>>24);
 var $48=HEAP32[(($__r_012)>>2)];
 var $49=($47|0)==($48|0);
 if($49){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 17: 
 var $52=$__ig_011;
 var $53=((($43)-($52))|0);
 var $54=($53|0)>1;
 var $55=(($__ig_011+1)|0);
 var $___ig_0=($54?$55:$__ig_011);
 var $56=(($__r_012+4)|0);
 var $57=($56>>>0)<($38>>>0);
 var $58=HEAP8[(($___ig_0)>>0)];
 var $_not=(($58<<24)>>24)<1;
 var $59=(($58<<24)>>24)==127;
 var $or_cond2=$_not|$59;
 if($57){var $__ig_011=$___ig_0;var $__r_012=$56;var $45=$58;var $or_cond213=$or_cond2;label=14;break;}else{var $_lcssa6=$58;var $or_cond2_lcssa=$or_cond2;label=18;break;}
 case 18: 
 var $or_cond2_lcssa;
 var $_lcssa6;
 if($or_cond2_lcssa){label=21;break;}else{label=19;break;}
 case 19: 
 var $61=(($_lcssa6<<24)>>24);
 var $62=HEAP32[(($38)>>2)];
 var $63=((($62)-(1))|0);
 var $64=($63>>>0)<($61>>>0);
 if($64){label=21;break;}else{label=20;break;}
 case 20: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+568)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__wbuf=sp;
 var $__wb=(sp)+(400);
 var $__wn=(sp)+(408);
 var $__neg=(sp)+(416);
 var $__atoms=(sp)+(424);
 var $__nbuf=(sp)+(464);
 var $1=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=420;
 var $5=(($__wbuf+400)|0);
 var $6=(($__iob+28)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 var $11=(tempValue=HEAP32[(($10)>>2)],HEAP32[(($10)>>2)]=tempValue+1,tempValue);
 var $12=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $_idx=(($7+8)|0);
 var $13=$_idx;
 var $_idx_val=HEAP32[(($13)>>2)];
 var $_idx4=(($7+12)|0);
 var $14=$_idx4;
 var $_idx4_val=HEAP32[(($14)>>2)];
 var $15=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx4_val,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $16=$15;
 HEAP8[(($__neg)>>0)]=0;
 var $17=(($__e)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__iob+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$18,$__intl,$8,$20,$__err,$__neg,$16,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 if($21){label=5;break;}else{label=24;break;}
 case 5: 
 var $24=$__atoms;
 var $$etemp$1$0=40;
 var $$etemp$1$1=0;

 var $25=(($__atoms)|0);
 var $26=$15;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+48)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($16,4880,4890,$25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $31=(($__nbuf)|0);
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 var $32=HEAP32[(($__wn)>>2)];
 var $33=HEAP32[(($3)>>2)];
 var $34=$32;
 var $35=$33;
 var $36=((($34)-($35))|0);
 var $37=($36|0)>392;
 if($37){label=7;break;}else{var $__nc_0=$31;var $57=0;label=13;break;}
 case 7: 
 var $38=$36>>2;
 var $39=((($38)+(2))|0);
 var $40=_malloc($39);
 var $41=($40|0)==0;
 if($41){label=8;break;}else{var $__nc_0=$40;var $57=$40;label=13;break;}
 case 8: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($43,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $45$0 = ___cxa_find_matching_catch(); var $45$1 = tempRet0;
 var $46=$45$0;
 var $47=$45$1;
 var $_0=$46;var $_01=$47;label=46;break;
 case 11: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $_0=$50;var $_01=$51;label=46;break;
 case 12: 
 var $53$0 = ___cxa_find_matching_catch(); var $53$1 = tempRet0;
 var $54=$53$0;
 var $55=$53$1;
 _free($57);
 var $_0=$54;var $_01=$55;label=46;break;
 case 13: 
 var $57;
 var $__nc_0;
 var $58=HEAP8[(($__neg)>>0)];
 var $59=(($58<<24)>>24)==0;
 if($59){var $__nc_1=$__nc_0;label=15;break;}else{label=14;break;}
 case 14: 
 var $61=(($__nc_0+1)|0);
 HEAP8[(($__nc_0)>>0)]=45;
 var $__nc_1=$61;label=15;break;
 case 15: 
 var $__nc_1;
 var $63=($33>>>0)<($32>>>0);
 if($63){label=16;break;}else{var $__nc_2_lcssa=$__nc_1;label=21;break;}
 case 16: 
 var $64=(($__atoms+40)|0);
 var $65=$__atoms;
 var $__nc_26=$__nc_1;var $__w_07=$33;label=17;break;
 case 17: 
 var $__w_07;
 var $__nc_26;
 var $67=HEAP32[(($__w_07)>>2)];
 var $_01_i=$25;label=19;break;
 case 18: 
 var $69=($73|0)==($64|0);
 if($69){var $_0_lcssa_i=$64;label=20;break;}else{var $_01_i=$73;label=19;break;}
 case 19: 
 var $_01_i;
 var $71=HEAP32[(($_01_i)>>2)];
 var $72=($71|0)==($67|0);
 var $73=(($_01_i+4)|0);
 if($72){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $74=$_0_lcssa_i;
 var $75=((($74)-($65))|0);
 var $76=$75>>2;
 var $77=((4880+$76)|0);
 var $78=HEAP8[(($77)>>0)];
 HEAP8[(($__nc_26)>>0)]=$78;
 var $79=(($__w_07+4)|0);
 var $80=(($__nc_26+1)|0);
 var $81=HEAP32[(($__wn)>>2)];
 var $82=($79>>>0)<($81>>>0);
 if($82){var $__nc_26=$80;var $__w_07=$79;label=17;break;}else{var $__nc_2_lcssa=$80;label=21;break;}
 case 21: 
 var $__nc_2_lcssa;
 HEAP8[(($__nc_2_lcssa)>>0)]=0;
 var $83=_sscanf($31,1832,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $84=($83|0)==1;
 if($84){label=23;break;}else{label=22;break;}
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(1512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=12;break; }
 case 23: 
 _free($57);
 label=24;break;
 case 24: 
 var $87=(($__b)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){var $106=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $91=(($88+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($88+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=($92|0)==($94|0);
 if($95){label=26;break;}else{label=27;break;}
 case 26: 
 var $97=$88;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+36)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]($88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$101;label=28;break; } else { label=11;break; }
 case 27: 
 var $103=HEAP32[(($92)>>2)];
 var $_0_i_i_i_i=$103;label=28;break;
 case 28: 
 var $_0_i_i_i_i;
 var $104=($_0_i_i_i_i|0)==-1;
 if($104){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre_i_i_i=HEAP32[(($87)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $106=$phitmp_i_i_i;label=31;break;
 case 30: 
 HEAP32[(($87)>>2)]=0;
 var $106=1;label=31;break;
 case 31: 
 var $106;
 var $107=HEAP32[(($17)>>2)];
 var $108=($107|0)==0;
 if($108){label=37;break;}else{label=32;break;}
 case 32: 
 var $110=(($107+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($107+16)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($111|0)==($113|0);
 if($114){label=33;break;}else{label=34;break;}
 case 33: 
 var $116=$107;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$120;label=35;break; } else { label=11;break; }
 case 34: 
 var $122=HEAP32[(($111)>>2)];
 var $_0_i_i1_i_i=$122;label=35;break;
 case 35: 
 var $_0_i_i1_i_i;
 var $123=($_0_i_i1_i_i|0)==-1;
 if($123){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($17)>>2)]=0;
 label=37;break;
 case 37: 
 if($106){label=39;break;}else{label=40;break;}
 case 38: 
 if($106){label=40;break;}else{label=39;break;}
 case 39: 
 var $126=HEAP32[(($__err)>>2)];
 var $127=$126|2;
 HEAP32[(($__err)>>2)]=$127;
 label=40;break;
 case 40: 
 var $129=HEAP32[(($87)>>2)];
 var $130=(($agg_result)|0);
 HEAP32[(($130)>>2)]=$129;
 var $131=(($7+4)|0);
 var $132=$131;
 var $133=(tempValue=HEAP32[(($132)>>2)],HEAP32[(($132)>>2)]=tempValue+-1,tempValue);
 var $134=($133|0)==0;
 if($134){label=41;break;}else{label=42;break;}
 case 41: 
 var $136=$7;
 var $137=$7;
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138+8)|0);
 var $140=HEAP32[(($139)>>2)];
 FUNCTION_TABLE[$140]($136);
 label=42;break;
 case 42: 
 var $141=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $142=($141|0)==0;
 if($142){label=45;break;}else{label=43;break;}
 case 43: 
 var $144=HEAP32[(($4)>>2)];
 var $145=$141;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]($145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=44;break; }
 case 44: 
 var $147$0 = ___cxa_find_matching_catch(0); var $147$1 = tempRet0;
 var $148=$147$0;
 ___clang_call_terminate($148);
 throw "Reached an unreachable!";
 case 45: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 46: 
 var $_01;
 var $_0;
 var $150=(($7+4)|0);
 var $151=$150;
 var $152=(tempValue=HEAP32[(($151)>>2)],HEAP32[(($151)>>2)]=tempValue+-1,tempValue);
 var $153=($152|0)==0;
 if($153){label=47;break;}else{label=48;break;}
 case 47: 
 var $155=$7;
 var $156=$7;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+8)|0);
 var $159=HEAP32[(($158)>>2)];
 FUNCTION_TABLE[$159]($155);
 label=48;break;
 case 48: 
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $160=($_pre|0)==0;
 if($160){label=51;break;}else{label=49;break;}
 case 49: 
 var $_pre15=HEAP32[(($4)>>2)];
 var $162=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre15]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $164$0 = ___cxa_find_matching_catch(0); var $164$1 = tempRet0;
 var $165=$164$0;
 ___clang_call_terminate($165);
 throw "Reached an unreachable!";
 case 51: 
 var $166$0=$_0;
 var $166$1=0;
 var $167$0=$166$0;
 var $167$1=$_01;
 ___resumeException($167$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(24);
 var $4=(sp)+(40);
 var $5=(sp)+(56);
 var $6=(sp)+(72);
 var $7=(sp)+(80);
 var $8=(sp)+(96);
 var $9=(sp)+(112);
 var $10=(sp)+(128);
 var $11=(sp)+(144);
 var $__gbuf=(sp)+(152);
 var $__gb=(sp)+(552);
 var $__gn=(sp)+(560);
 var $__ge=(sp)+(568);
 var $__pat=(sp)+(576);
 var $__grp=(sp)+(584);
 var $__sym=(sp)+(600);
 var $__psn=(sp)+(616);
 var $__nsn=(sp)+(632);
 var $__spaces=(sp)+(648);
 var $__et=(sp)+(664);
 HEAP32[(($11)>>2)]=$__we;
 var $12=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $13=(($__gbuf)|0);
 var $14=(($__gb)|0);
 HEAP32[(($14)>>2)]=$13;
 var $15=(($__gb+4)|0);
 HEAP32[(($15)>>2)]=420;
 HEAP32[(($__gn)>>2)]=$13;
 var $16=(($__gbuf+400)|0);
 HEAP32[(($__ge)>>2)]=$16;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i13=$__sym;
 HEAP32[(($this2_i_i_i13)>>2)]=0; HEAP32[((($this2_i_i_i13)+(4))>>2)]=0; HEAP32[((($this2_i_i_i13)+(8))>>2)]=0;
 var $this2_i_i_i14=$__psn;
 HEAP32[(($this2_i_i_i14)>>2)]=0; HEAP32[((($this2_i_i_i14)+(4))>>2)]=0; HEAP32[((($this2_i_i_i14)+(8))>>2)]=0;
 var $this2_i_i_i16=$__nsn;
 HEAP32[(($this2_i_i_i16)>>2)]=0; HEAP32[((($this2_i_i_i16)+(4))>>2)]=0; HEAP32[((($this2_i_i_i16)+(8))>>2)]=0;
 var $this2_i_i_i19=$__spaces;
 HEAP32[(($this2_i_i_i19)>>2)]=0; HEAP32[((($this2_i_i_i19)+(4))>>2)]=0; HEAP32[((($this2_i_i_i19)+(8))>>2)]=0;
 var $17=$1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $18=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $19=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $20=$4;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $21=$5;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $22=$6;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $23=$7;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $24=$8;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $25=$9;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $26=$10;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 if($__intl){label=2;break;}else{label=32;break;}
 case 2: 
 var $tmpcast1_i=$1;
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=85;break; }
 case 3: 
 var $_idx29=(($__loc_0_0_val+8)|0);
 var $_idx29_val=HEAP32[(($_idx29)>>2)];
 var $_idx30=(($__loc_0_0_val+12)|0);
 var $_idx30_val=HEAP32[(($_idx30)>>2)];
 var $29=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx29_val,$_idx30_val,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=85;break; }
 case 4: 
 var $30=$29;
 var $31=$29;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+44)|0);
 var $34=HEAP32[(($33)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($tmpcast1_i,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=85;break; }
 case 5: 
 var $35=HEAP32[(($1)>>2)];
 HEAP32[(($__pat)>>2)]=$35;
 var $36=$29;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+32)|0);
 var $39=HEAP32[(($38)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($2,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=85;break; }
 case 6: 
 var $40=HEAP8[(($this2_i_i_i16)>>0)];
 var $41=$40&1;
 var $42=(($41<<24)>>24)==0;
 if($42){label=8;break;}else{label=7;break;}
 case 7: 
 var $44=(($__nsn+8)|0);
 var $45=HEAP32[(($44)>>2)];
 HEAP32[(($45)>>2)]=0;
 var $46=(($__nsn+4)|0);
 HEAP32[(($46)>>2)]=0;
 label=9;break;
 case 8: 
 var $48=(($__nsn+4)|0);
 HEAP32[(($48)>>2)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=9;break;
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $50$0 = ___cxa_find_matching_catch(0); var $50$1 = tempRet0;
 var $51=$50$0;
 ___clang_call_terminate($51);
 throw "Reached an unreachable!";
 case 11: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $_pre4=HEAP32[(($36)>>2)];
 var $_phi_trans_insert=(($_pre4+28)|0);
 var $_pre5=HEAP32[(($_phi_trans_insert)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre5]($3,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=85;break; }
 case 12: 
 var $52=HEAP8[(($this2_i_i_i14)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=14;break;}else{label=13;break;}
 case 13: 
 var $56=(($__psn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($57)>>2)]=0;
 var $58=(($__psn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=15;break;
 case 14: 
 var $60=(($__psn+4)|0);
 HEAP32[(($60)>>2)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $62$0 = ___cxa_find_matching_catch(0); var $62$1 = tempRet0;
 var $63=$62$0;
 ___clang_call_terminate($63);
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $_phi_trans_insert6=$29;
 var $_pre7=HEAP32[(($_phi_trans_insert6)>>2)];
 var $_phi_trans_insert8=(($_pre7+12)|0);
 var $_pre9=HEAP32[(($_phi_trans_insert8)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre9]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=85;break; }
 case 18: 
 var $65=HEAP32[(($_phi_trans_insert6)>>2)];
 var $66=(($65+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=85;break; }
 case 19: 
 var $69=$29;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+20)|0);
 var $72=HEAP32[(($71)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($4,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=85;break; }
 case 20: 
 var $73=HEAP8[(($this2_i_i_i)>>0)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=22;break;}else{label=21;break;}
 case 21: 
 var $77=(($__grp+8)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP8[(($78)>>0)]=0;
 var $79=(($__grp+4)|0);
 HEAP32[(($79)>>2)]=0;
 label=23;break;
 case 22: 
 var $81=$__grp;
 var $82=(($81+1)|0);
 HEAP8[(($82)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $84$0 = ___cxa_find_matching_catch(0); var $84$1 = tempRet0;
 var $85=$84$0;
 ___clang_call_terminate($85);
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $_pre10=HEAP32[(($36)>>2)];
 var $_phi_trans_insert11=(($_pre10+24)|0);
 var $_pre12=HEAP32[(($_phi_trans_insert11)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre12]($5,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=85;break; }
 case 26: 
 var $86=HEAP8[(($this2_i_i_i13)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=28;break;}else{label=27;break;}
 case 27: 
 var $90=(($__sym+8)|0);
 var $91=HEAP32[(($90)>>2)];
 HEAP32[(($91)>>2)]=0;
 var $92=(($__sym+4)|0);
 HEAP32[(($92)>>2)]=0;
 label=29;break;
 case 28: 
 var $94=(($__sym+4)|0);
 HEAP32[(($94)>>2)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=29;break;
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=30;break; }
 case 30: 
 var $96$0 = ___cxa_find_matching_catch(0); var $96$1 = tempRet0;
 var $97=$96$0;
 ___clang_call_terminate($97);
 throw "Reached an unreachable!";
 case 31: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $_pre13=HEAP32[(($_phi_trans_insert6)>>2)];
 var $_phi_trans_insert14=(($_pre13+36)|0);
 var $_pre15=HEAP32[(($_phi_trans_insert14)>>2)];
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre15]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$98;var $__ts_0=$68;var $__dp_0=$64;label=62;break; } else { label=85;break; }
 case 32: 
 var $tmpcast_i=$6;
 var $100=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=85;break; }
 case 33: 
 var $_idx=(($__loc_0_0_val+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx28=(($__loc_0_0_val+12)|0);
 var $_idx28_val=HEAP32[(($_idx28)>>2)];
 var $101=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx28_val,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=85;break; }
 case 34: 
 var $102=$101;
 var $103=$101;
 var $104=HEAP32[(($103)>>2)];
 var $105=(($104+44)|0);
 var $106=HEAP32[(($105)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($tmpcast_i,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=85;break; }
 case 35: 
 var $107=HEAP32[(($6)>>2)];
 HEAP32[(($__pat)>>2)]=$107;
 var $108=$101;
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+32)|0);
 var $111=HEAP32[(($110)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]($7,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=85;break; }
 case 36: 
 var $112=HEAP8[(($this2_i_i_i16)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=38;break;}else{label=37;break;}
 case 37: 
 var $116=(($__nsn+8)|0);
 var $117=HEAP32[(($116)>>2)];
 HEAP32[(($117)>>2)]=0;
 var $118=(($__nsn+4)|0);
 HEAP32[(($118)>>2)]=0;
 label=39;break;
 case 38: 
 var $120=(($__nsn+4)|0);
 HEAP32[(($120)>>2)]=0;
 HEAP8[(($this2_i_i_i16)>>0)]=0;
 label=39;break;
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $122$0 = ___cxa_find_matching_catch(0); var $122$1 = tempRet0;
 var $123=$122$0;
 ___clang_call_terminate($123);
 throw "Reached an unreachable!";
 case 41: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i16)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($this2_i_i_i16)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($this2_i_i_i16)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $_pre21=HEAP32[(($108)>>2)];
 var $_phi_trans_insert22=(($_pre21+28)|0);
 var $_pre23=HEAP32[(($_phi_trans_insert22)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre23]($8,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=85;break; }
 case 42: 
 var $124=HEAP8[(($this2_i_i_i14)>>0)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=44;break;}else{label=43;break;}
 case 43: 
 var $128=(($__psn+8)|0);
 var $129=HEAP32[(($128)>>2)];
 HEAP32[(($129)>>2)]=0;
 var $130=(($__psn+4)|0);
 HEAP32[(($130)>>2)]=0;
 label=45;break;
 case 44: 
 var $132=(($__psn+4)|0);
 HEAP32[(($132)>>2)]=0;
 HEAP8[(($this2_i_i_i14)>>0)]=0;
 label=45;break;
 case 45: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=46;break; }
 case 46: 
 var $134$0 = ___cxa_find_matching_catch(0); var $134$1 = tempRet0;
 var $135=$134$0;
 ___clang_call_terminate($135);
 throw "Reached an unreachable!";
 case 47: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i14)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($this2_i_i_i14)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($this2_i_i_i14)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 HEAP32[(($24)>>2)]=0; HEAP32[((($24)+(4))>>2)]=0; HEAP32[((($24)+(8))>>2)]=0;
 var $_phi_trans_insert24=$101;
 var $_pre25=HEAP32[(($_phi_trans_insert24)>>2)];
 var $_phi_trans_insert26=(($_pre25+12)|0);
 var $_pre27=HEAP32[(($_phi_trans_insert26)>>2)];
 var $136=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre27]($102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=85;break; }
 case 48: 
 var $137=HEAP32[(($_phi_trans_insert24)>>2)];
 var $138=(($137+16)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$139]($102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=85;break; }
 case 49: 
 var $141=$101;
 var $142=HEAP32[(($141)>>2)];
 var $143=(($142+20)|0);
 var $144=HEAP32[(($143)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]($9,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=85;break; }
 case 50: 
 var $145=HEAP8[(($this2_i_i_i)>>0)];
 var $146=$145&1;
 var $147=(($146<<24)>>24)==0;
 if($147){label=52;break;}else{label=51;break;}
 case 51: 
 var $149=(($__grp+8)|0);
 var $150=HEAP32[(($149)>>2)];
 HEAP8[(($150)>>0)]=0;
 var $151=(($__grp+4)|0);
 HEAP32[(($151)>>2)]=0;
 label=53;break;
 case 52: 
 var $153=$__grp;
 var $154=(($153+1)|0);
 HEAP8[(($154)>>0)]=0;
 HEAP8[(($this2_i_i_i)>>0)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $156$0 = ___cxa_find_matching_catch(0); var $156$1 = tempRet0;
 var $157=$156$0;
 ___clang_call_terminate($157);
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0; HEAP32[((($25)+(8))>>2)]=0;
 var $_pre28=HEAP32[(($108)>>2)];
 var $_phi_trans_insert29=(($_pre28+24)|0);
 var $_pre30=HEAP32[(($_phi_trans_insert29)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre30]($10,$102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=85;break; }
 case 56: 
 var $158=HEAP8[(($this2_i_i_i13)>>0)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=58;break;}else{label=57;break;}
 case 57: 
 var $162=(($__sym+8)|0);
 var $163=HEAP32[(($162)>>2)];
 HEAP32[(($163)>>2)]=0;
 var $164=(($__sym+4)|0);
 HEAP32[(($164)>>2)]=0;
 label=59;break;
 case 58: 
 var $166=(($__sym+4)|0);
 HEAP32[(($166)>>2)]=0;
 HEAP8[(($this2_i_i_i13)>>0)]=0;
 label=59;break;
 case 59: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=60;break; }
 case 60: 
 var $168$0 = ___cxa_find_matching_catch(0); var $168$1 = tempRet0;
 var $169=$168$0;
 ___clang_call_terminate($169);
 throw "Reached an unreachable!";
 case 61: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i13)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($this2_i_i_i13)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($this2_i_i_i13)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
 HEAP32[(($26)>>2)]=0; HEAP32[((($26)+(4))>>2)]=0; HEAP32[((($26)+(8))>>2)]=0;
 var $_pre31=HEAP32[(($_phi_trans_insert24)>>2)];
 var $_phi_trans_insert32=(($_pre31+36)|0);
 var $_pre33=HEAP32[(($_phi_trans_insert32)>>2)];
 var $170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre33]($102) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$170;var $__ts_0=$140;var $__dp_0=$136;label=62;break; } else { label=85;break; }
 case 62: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $172=(($__wb)|0);
 var $173=HEAP32[(($172)>>2)];
 HEAP32[(($__wn)>>2)]=$173;
 var $174=(($__b)|0);
 var $175=$__pat;
 var $176=$__ct;
 var $177=(($__nsn+4)|0);
 var $178=(($__nsn+8)|0);
 var $179=(($__psn+4)|0);
 var $180=(($__psn+8)|0);
 var $181=$__flags&512;
 var $182=($181|0)!=0;
 var $183=(($__sym+4)|0);
 var $184=(($__sym+8)|0);
 var $185=(($__spaces+4)|0);
 var $186=(($__spaces+8)|0);
 var $187=(($175+3)|0);
 var $188=(($__grp+4)|0);
 var $__p_0250=0;var $__trailing_sign_0252=0;var $190=$13;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=63;break;
 case 63: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $190;
 var $__trailing_sign_0252;
 var $__p_0250;
 var $191=HEAP32[(($174)>>2)];
 var $192=($191|0)==0;
 if($192){var $209=1;label=70;break;}else{label=64;break;}
 case 64: 
 var $194=(($191+12)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($191+16)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($195|0)==($197|0);
 if($198){label=65;break;}else{label=66;break;}
 case 65: 
 var $200=$191;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+36)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i22=$204;label=67;break; } else { label=84;break; }
 case 66: 
 var $206=HEAP32[(($195)>>2)];
 var $_0_i_i_i_i22=$206;label=67;break;
 case 67: 
 var $_0_i_i_i_i22;
 var $207=($_0_i_i_i_i22|0)==-1;
 if($207){label=69;break;}else{label=68;break;}
 case 68: 
 var $_pre_i_i_i24=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i25=($_pre_i_i_i24|0)==0;
 var $209=$phitmp_i_i_i25;label=70;break;
 case 69: 
 HEAP32[(($174)>>2)]=0;
 var $209=1;label=70;break;
 case 70: 
 var $209;
 var $210=($__e_sroa_0_0|0)==0;
 if($210){label=75;break;}else{label=71;break;}
 case 71: 
 var $212=(($__e_sroa_0_0+12)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=(($__e_sroa_0_0+16)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=($213|0)==($215|0);
 if($216){label=72;break;}else{label=73;break;}
 case 72: 
 var $218=$__e_sroa_0_0;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+36)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$221]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i28=$222;label=74;break; } else { label=84;break; }
 case 73: 
 var $224=HEAP32[(($213)>>2)];
 var $_0_i_i1_i_i28=$224;label=74;break;
 case 74: 
 var $_0_i_i1_i_i28;
 var $225=($_0_i_i1_i_i28|0)==-1;
 if($225){label=75;break;}else{label=76;break;}
 case 75: 
 if($209){var $__trailing_sign_0_lcssa=$__trailing_sign_0252;var $1093=$190;var $1092=0;label=353;break;}else{var $__e_sroa_0_2=0;label=77;break;}
 case 76: 
 if($209){var $__e_sroa_0_2=$__e_sroa_0_0;label=77;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_0252;var $1093=$190;var $1092=$__e_sroa_0_0;label=353;break;}
 case 77: 
 var $__e_sroa_0_2;
 var $228=(($175+$__p_0250)|0);
 var $229=HEAP8[(($228)>>0)];
 var $230=(($229<<24)>>24);
 switch(($230|0)){case 1:{ label=100;break;}case 0:{ label=111;break;}case 3:{ label=135;break;}case 2:{ label=203;break;}case 4:{ var $__ng_0=0;var $793=$__e_sroa_0_2;var $792=$190;var $_pre_i3_i_i157=$__e_sroa_0_2;var $__e_sroa_0_10=$__e_sroa_0_2;label=259;break;}default:{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;}}break;
 case 78: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=86;break;
 case 79: 
 var $lpad_loopexit217$0 = ___cxa_find_matching_catch(); var $lpad_loopexit217$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit217$1;var $lpad_phi$0=$lpad_loopexit217$0;label=86;break;
 case 80: 
 var $lpad_loopexit222$0 = ___cxa_find_matching_catch(); var $lpad_loopexit222$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit222$1;var $lpad_phi$0=$lpad_loopexit222$0;label=86;break;
 case 81: 
 var $lpad_loopexit224$0 = ___cxa_find_matching_catch(); var $lpad_loopexit224$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit224$1;var $lpad_phi$0=$lpad_loopexit224$0;label=86;break;
 case 82: 
 var $lpad_loopexit228$0 = ___cxa_find_matching_catch(); var $lpad_loopexit228$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit228$1;var $lpad_phi$0=$lpad_loopexit228$0;label=86;break;
 case 83: 
 var $lpad_loopexit233$0 = ___cxa_find_matching_catch(); var $lpad_loopexit233$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit233$1;var $lpad_phi$0=$lpad_loopexit233$0;label=86;break;
 case 84: 
 var $lpad_loopexit236$0 = ___cxa_find_matching_catch(); var $lpad_loopexit236$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit236$1;var $lpad_phi$0=$lpad_loopexit236$0;label=86;break;
 case 85: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=86;break;
 case 86: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $231=HEAP8[(($this2_i_i_i19)>>0)];
 var $232=$231&1;
 var $233=(($232<<24)>>24)==0;
 if($233){label=88;break;}else{label=87;break;}
 case 87: 
 var $235=(($__spaces+8)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=$236;
 _free($237);
 label=88;break;
 case 88: 
 var $238=HEAP8[(($this2_i_i_i16)>>0)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=90;break;}else{label=89;break;}
 case 89: 
 var $242=(($__nsn+8)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=$243;
 _free($244);
 label=90;break;
 case 90: 
 var $245=HEAP8[(($this2_i_i_i14)>>0)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=92;break;}else{label=91;break;}
 case 91: 
 var $249=(($__psn+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=$250;
 _free($251);
 label=92;break;
 case 92: 
 var $252=HEAP8[(($this2_i_i_i13)>>0)];
 var $253=$252&1;
 var $254=(($253<<24)>>24)==0;
 if($254){label=94;break;}else{label=93;break;}
 case 93: 
 var $256=(($__sym+8)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=$257;
 _free($258);
 label=94;break;
 case 94: 
 var $259=HEAP8[(($this2_i_i_i)>>0)];
 var $260=$259&1;
 var $261=(($260<<24)>>24)==0;
 if($261){label=96;break;}else{label=95;break;}
 case 95: 
 var $263=(($__grp+8)|0);
 var $264=HEAP32[(($263)>>2)];
 _free($264);
 label=96;break;
 case 96: 
 var $265=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $266=($265|0)==0;
 if($266){label=99;break;}else{label=97;break;}
 case 97: 
 var $268=HEAP32[(($15)>>2)];
 var $269=$265;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$268]($269) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=98;break; }
 case 98: 
 var $271$0 = ___cxa_find_matching_catch(0); var $271$1 = tempRet0;
 var $272=$271$0;
 ___clang_call_terminate($272);
 throw "Reached an unreachable!";
 case 99: 
 ___resumeException($lpad_phi$0)
 case 100: 
 var $cond=($__p_0250|0)==3;
 if($cond){var $__trailing_sign_0_lcssa=$__trailing_sign_0252;var $1093=$190;var $1092=$__e_sroa_0_2;label=353;break;}else{label=101;break;}
 case 101: 
 var $275=HEAP32[(($174)>>2)];
 var $276=(($275+12)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=(($275+16)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($277|0)==($279|0);
 if($280){label=102;break;}else{label=103;break;}
 case 102: 
 var $282=$275;
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+36)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($275) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i37=$286;label=104;break; } else { label=84;break; }
 case 103: 
 var $288=HEAP32[(($277)>>2)];
 var $_0_i_i37=$288;label=104;break;
 case 104: 
 var $_0_i_i37;
 var $289=HEAP32[(($176)>>2)];
 var $290=(($289+12)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$291]($__ct,8192,$_0_i_i37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=84;break; }
 case 105: 
 if($292){label=106;break;}else{label=110;break;}
 case 106: 
 var $294=HEAP32[(($174)>>2)];
 var $295=(($294+12)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=(($294+16)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=($296|0)==($298|0);
 if($299){label=107;break;}else{label=108;break;}
 case 107: 
 var $301=$294;
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+40)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$304]($294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i41=$305;label=109;break; } else { label=84;break; }
 case 108: 
 var $307=(($296+4)|0);
 HEAP32[(($295)>>2)]=$307;
 var $308=HEAP32[(($296)>>2)];
 var $_0_i_i41=$308;label=109;break;
 case 109: 
 var $_0_i_i41;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=111;break; } else { label=84;break; }
 case 110: 
 var $310=HEAP32[(($__err)>>2)];
 var $311=$310|4;
 HEAP32[(($__err)>>2)]=$311;
 var $_0=0;label=386;break;
 case 111: 
 var $313=($__p_0250|0)==3;
 if($313){var $__trailing_sign_0_lcssa=$__trailing_sign_0252;var $1093=$190;var $1092=$__e_sroa_0_2;label=353;break;}else{var $314=$__e_sroa_0_2;var $_pre_i3_i_i51=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=112;break;}
 case 112: 
 var $__e_sroa_0_3;
 var $_pre_i3_i_i51;
 var $314;
 var $315=HEAP32[(($174)>>2)];
 var $316=($315|0)==0;
 if($316){var $333=1;label=119;break;}else{label=113;break;}
 case 113: 
 var $318=(($315+12)|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($315+16)|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=($319|0)==($321|0);
 if($322){label=114;break;}else{label=115;break;}
 case 114: 
 var $324=$315;
 var $325=HEAP32[(($324)>>2)];
 var $326=(($325+36)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$327]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i43=$328;label=116;break; } else { label=83;break; }
 case 115: 
 var $330=HEAP32[(($319)>>2)];
 var $_0_i_i_i_i43=$330;label=116;break;
 case 116: 
 var $_0_i_i_i_i43;
 var $331=($_0_i_i_i_i43|0)==-1;
 if($331){label=118;break;}else{label=117;break;}
 case 117: 
 var $_pre_i_i_i45=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i46=($_pre_i_i_i45|0)==0;
 var $333=$phitmp_i_i_i46;label=119;break;
 case 118: 
 HEAP32[(($174)>>2)]=0;
 var $333=1;label=119;break;
 case 119: 
 var $333;
 var $334=($314|0)==0;
 if($334){var $_pre_i3_i_i51260=$_pre_i3_i_i51;var $__e_sroa_0_4=$__e_sroa_0_3;label=124;break;}else{label=120;break;}
 case 120: 
 var $336=(($314+12)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=(($314+16)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=($337|0)==($339|0);
 if($340){label=121;break;}else{label=122;break;}
 case 121: 
 var $342=$314;
 var $343=HEAP32[(($342)>>2)];
 var $344=(($343+36)|0);
 var $345=HEAP32[(($344)>>2)];
 var $346=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$345]($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i49=$346;label=123;break; } else { label=83;break; }
 case 122: 
 var $348=HEAP32[(($337)>>2)];
 var $_0_i_i1_i_i49=$348;label=123;break;
 case 123: 
 var $_0_i_i1_i_i49;
 var $349=($_0_i_i1_i_i49|0)==-1;
 if($349){var $_pre_i3_i_i51260=0;var $__e_sroa_0_4=0;label=124;break;}else{label=125;break;}
 case 124: 
 var $__e_sroa_0_4;
 var $_pre_i3_i_i51260;
 if($333){var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$_pre_i3_i_i51260;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=352;break;}else{var $352=0;var $_pre_i3_i_i51262=$_pre_i3_i_i51260;var $__e_sroa_0_5=$__e_sroa_0_4;label=126;break;}
 case 125: 
 var $phitmp_i4_i_i52=($_pre_i3_i_i51|0)==0;
 var $tmp_i_i54=$333^$phitmp_i4_i_i52;
 if($tmp_i_i54){var $352=$_pre_i3_i_i51;var $_pre_i3_i_i51262=$_pre_i3_i_i51;var $__e_sroa_0_5=$__e_sroa_0_3;label=126;break;}else{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$_pre_i3_i_i51;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=352;break;}
 case 126: 
 var $__e_sroa_0_5;
 var $_pre_i3_i_i51262;
 var $352;
 var $353=HEAP32[(($174)>>2)];
 var $354=(($353+12)|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=(($353+16)|0);
 var $357=HEAP32[(($356)>>2)];
 var $358=($355|0)==($357|0);
 if($358){label=127;break;}else{label=128;break;}
 case 127: 
 var $360=$353;
 var $361=HEAP32[(($360)>>2)];
 var $362=(($361+36)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$363]($353) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i58=$364;label=129;break; } else { label=83;break; }
 case 128: 
 var $366=HEAP32[(($355)>>2)];
 var $_0_i_i58=$366;label=129;break;
 case 129: 
 var $_0_i_i58;
 var $367=HEAP32[(($176)>>2)];
 var $368=(($367+12)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$369]($__ct,8192,$_0_i_i58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { label=83;break; }
 case 130: 
 if($370){label=131;break;}else{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$_pre_i3_i_i51262;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=352;break;}
 case 131: 
 var $372=HEAP32[(($174)>>2)];
 var $373=(($372+12)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($372+16)|0);
 var $376=HEAP32[(($375)>>2)];
 var $377=($374|0)==($376|0);
 if($377){label=132;break;}else{label=133;break;}
 case 132: 
 var $379=$372;
 var $380=HEAP32[(($379)>>2)];
 var $381=(($380+40)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$382]($372) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i64=$383;label=134;break; } else { label=83;break; }
 case 133: 
 var $385=(($374+4)|0);
 HEAP32[(($373)>>2)]=$385;
 var $386=HEAP32[(($374)>>2)];
 var $_0_i_i64=$386;label=134;break;
 case 134: 
 var $_0_i_i64;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$_0_i_i64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $314=$352;var $_pre_i3_i_i51=$_pre_i3_i_i51262;var $__e_sroa_0_3=$__e_sroa_0_5;label=112;break; } else { label=83;break; }
 case 135: 
 var $388=HEAP8[(($this2_i_i_i14)>>0)];
 var $389=$388&1;
 var $390=(($389<<24)>>24)==0;
 if($390){label=137;break;}else{label=136;break;}
 case 136: 
 var $392=HEAP32[(($179)>>2)];
 var $396=$392;label=138;break;
 case 137: 
 var $394=($388&255);
 var $395=$394>>>1;
 var $396=$395;label=138;break;
 case 138: 
 var $396;
 var $397=HEAP8[(($this2_i_i_i16)>>0)];
 var $398=$397&1;
 var $399=(($398<<24)>>24)==0;
 if($399){label=140;break;}else{label=139;break;}
 case 139: 
 var $401=HEAP32[(($177)>>2)];
 var $405=$401;label=141;break;
 case 140: 
 var $403=($397&255);
 var $404=$403>>>1;
 var $405=$404;label=141;break;
 case 141: 
 var $405;
 var $406=(((-$405))|0);
 var $407=($396|0)==($406|0);
 if($407){var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;}else{label=142;break;}
 case 142: 
 if($390){label=144;break;}else{label=143;break;}
 case 143: 
 var $410=HEAP32[(($179)>>2)];
 var $414=$410;label=145;break;
 case 144: 
 var $412=($388&255);
 var $413=$412>>>1;
 var $414=$413;label=145;break;
 case 145: 
 var $414;
 var $415=($414|0)==0;
 if($415){label=150;break;}else{label=146;break;}
 case 146: 
 if($399){label=148;break;}else{label=147;break;}
 case 147: 
 var $418=HEAP32[(($177)>>2)];
 var $422=$418;label=149;break;
 case 148: 
 var $420=($397&255);
 var $421=$420>>>1;
 var $422=$421;label=149;break;
 case 149: 
 var $422;
 var $423=($422|0)==0;
 if($423){label=150;break;}else{label=179;break;}
 case 150: 
 if($390){label=152;break;}else{label=151;break;}
 case 151: 
 var $426=HEAP32[(($179)>>2)];
 var $430=$426;label=153;break;
 case 152: 
 var $428=($388&255);
 var $429=$428>>>1;
 var $430=$429;label=153;break;
 case 153: 
 var $430;
 var $431=($430|0)==0;
 var $432=HEAP32[(($174)>>2)];
 var $433=(($432+12)|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=(($432+16)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=($434|0)==($436|0);
 if($431){label=167;break;}else{label=154;break;}
 case 154: 
 if($437){label=155;break;}else{label=157;break;}
 case 155: 
 var $440=$432;
 var $441=HEAP32[(($440)>>2)];
 var $442=(($441+36)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$443]($432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=84;break; }
 case 156: 
 var $_pre263=HEAP8[(($this2_i_i_i14)>>0)];
 var $_0_i_i80=$444;var $447=$_pre263;label=158;break;
 case 157: 
 var $446=HEAP32[(($434)>>2)];
 var $_0_i_i80=$446;var $447=$388;label=158;break;
 case 158: 
 var $447;
 var $_0_i_i80;
 var $448=$447&1;
 var $449=(($448<<24)>>24)==0;
 var $450=HEAP32[(($180)>>2)];
 var $_=($449?$179:$450);
 var $451=HEAP32[(($_)>>2)];
 var $452=($_0_i_i80|0)==($451|0);
 if($452){label=159;break;}else{label=166;break;}
 case 159: 
 var $454=HEAP32[(($174)>>2)];
 var $455=(($454+12)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($454+16)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($456|0)==($458|0);
 if($459){label=160;break;}else{label=161;break;}
 case 160: 
 var $461=$454;
 var $462=HEAP32[(($461)>>2)];
 var $463=(($462+40)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$464]($454) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=162;break; } else { label=84;break; }
 case 161: 
 var $467=(($456+4)|0);
 HEAP32[(($455)>>2)]=$467;
 label=162;break;
 case 162: 
 var $468=HEAP8[(($this2_i_i_i14)>>0)];
 var $469=$468&1;
 var $470=(($469<<24)>>24)==0;
 if($470){label=164;break;}else{label=163;break;}
 case 163: 
 var $472=HEAP32[(($179)>>2)];
 var $476=$472;label=165;break;
 case 164: 
 var $474=($468&255);
 var $475=$474>>>1;
 var $476=$475;label=165;break;
 case 165: 
 var $476;
 var $477=($476>>>0)>1;
 var $__psn___trailing_sign_0=($477?$__psn:$__trailing_sign_0252);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;
 case 166: 
 HEAP8[(($__neg)>>0)]=1;
 var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;
 case 167: 
 if($437){label=168;break;}else{label=170;break;}
 case 168: 
 var $481=$432;
 var $482=HEAP32[(($481)>>2)];
 var $483=(($482+36)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$484]($432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=169;break; } else { label=84;break; }
 case 169: 
 var $_pre=HEAP8[(($this2_i_i_i16)>>0)];
 var $_0_i_i101=$485;var $488=$_pre;label=171;break;
 case 170: 
 var $487=HEAP32[(($434)>>2)];
 var $_0_i_i101=$487;var $488=$397;label=171;break;
 case 171: 
 var $488;
 var $_0_i_i101;
 var $489=$488&1;
 var $490=(($489<<24)>>24)==0;
 var $491=HEAP32[(($178)>>2)];
 var $_288=($490?$177:$491);
 var $492=HEAP32[(($_288)>>2)];
 var $493=($_0_i_i101|0)==($492|0);
 if($493){label=172;break;}else{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;}
 case 172: 
 var $495=HEAP32[(($174)>>2)];
 var $496=(($495+12)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=(($495+16)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($497|0)==($499|0);
 if($500){label=173;break;}else{label=174;break;}
 case 173: 
 var $502=$495;
 var $503=HEAP32[(($502)>>2)];
 var $504=(($503+40)|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$505]($495) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=84;break; }
 case 174: 
 var $508=(($497+4)|0);
 HEAP32[(($496)>>2)]=$508;
 label=175;break;
 case 175: 
 HEAP8[(($__neg)>>0)]=1;
 var $509=HEAP8[(($this2_i_i_i16)>>0)];
 var $510=$509&1;
 var $511=(($510<<24)>>24)==0;
 if($511){label=177;break;}else{label=176;break;}
 case 176: 
 var $513=HEAP32[(($177)>>2)];
 var $517=$513;label=178;break;
 case 177: 
 var $515=($509&255);
 var $516=$515>>>1;
 var $517=$516;label=178;break;
 case 178: 
 var $517;
 var $518=($517>>>0)>1;
 var $__nsn___trailing_sign_0=($518?$__nsn:$__trailing_sign_0252);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;
 case 179: 
 var $520=HEAP32[(($174)>>2)];
 var $521=(($520+12)|0);
 var $522=HEAP32[(($521)>>2)];
 var $523=(($520+16)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=($522|0)==($524|0);
 if($525){label=180;break;}else{label=182;break;}
 case 180: 
 var $527=$520;
 var $528=HEAP32[(($527)>>2)];
 var $529=(($528+36)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$530]($520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=181;break; } else { label=84;break; }
 case 181: 
 var $_pre264=HEAP8[(($this2_i_i_i14)>>0)];
 var $_pre16=HEAP32[(($174)>>2)];
 var $_phi_trans_insert17=(($_pre16+12)|0);
 var $_pre18=HEAP32[(($_phi_trans_insert17)>>2)];
 var $_phi_trans_insert19=(($_pre16+16)|0);
 var $_pre20=HEAP32[(($_phi_trans_insert19)>>2)];
 var $_0_i_i113=$531;var $537=$_pre264;var $536=$_pre16;var $535=$_pre18;var $534=$_pre20;label=183;break;
 case 182: 
 var $533=HEAP32[(($522)>>2)];
 var $_0_i_i113=$533;var $537=$388;var $536=$520;var $535=$522;var $534=$524;label=183;break;
 case 183: 
 var $534;
 var $535;
 var $536;
 var $537;
 var $_0_i_i113;
 var $538=$537&1;
 var $539=(($538<<24)>>24)==0;
 var $540=HEAP32[(($180)>>2)];
 var $_289=($539?$179:$540);
 var $541=HEAP32[(($_289)>>2)];
 var $542=($_0_i_i113|0)==($541|0);
 var $543=(($536+12)|0);
 var $544=($535|0)==($534|0);
 if($542){label=184;break;}else{label=191;break;}
 case 184: 
 if($544){label=185;break;}else{label=186;break;}
 case 185: 
 var $547=$536;
 var $548=HEAP32[(($547)>>2)];
 var $549=(($548+40)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$550]($536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=84;break; }
 case 186: 
 var $553=(($535+4)|0);
 HEAP32[(($543)>>2)]=$553;
 label=187;break;
 case 187: 
 var $554=HEAP8[(($this2_i_i_i14)>>0)];
 var $555=$554&1;
 var $556=(($555<<24)>>24)==0;
 if($556){label=189;break;}else{label=188;break;}
 case 188: 
 var $558=HEAP32[(($179)>>2)];
 var $562=$558;label=190;break;
 case 189: 
 var $560=($554&255);
 var $561=$560>>>1;
 var $562=$561;label=190;break;
 case 190: 
 var $562;
 var $563=($562>>>0)>1;
 var $__psn___trailing_sign_09=($563?$__psn:$__trailing_sign_0252);
 var $__trailing_sign_1=$__psn___trailing_sign_09;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;
 case 191: 
 if($544){label=192;break;}else{label=193;break;}
 case 192: 
 var $566=$536;
 var $567=HEAP32[(($566)>>2)];
 var $568=(($567+36)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$569]($536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i135=$570;label=194;break; } else { label=84;break; }
 case 193: 
 var $572=HEAP32[(($535)>>2)];
 var $_0_i_i135=$572;label=194;break;
 case 194: 
 var $_0_i_i135;
 var $573=HEAP8[(($this2_i_i_i16)>>0)];
 var $574=$573&1;
 var $575=(($574<<24)>>24)==0;
 var $576=HEAP32[(($178)>>2)];
 var $_290=($575?$177:$576);
 var $577=HEAP32[(($_290)>>2)];
 var $578=($_0_i_i135|0)==($577|0);
 if($578){label=195;break;}else{label=202;break;}
 case 195: 
 var $580=HEAP32[(($174)>>2)];
 var $581=(($580+12)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(($580+16)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=($582|0)==($584|0);
 if($585){label=196;break;}else{label=197;break;}
 case 196: 
 var $587=$580;
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+40)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$590]($580) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=198;break; } else { label=84;break; }
 case 197: 
 var $593=(($582+4)|0);
 HEAP32[(($581)>>2)]=$593;
 label=198;break;
 case 198: 
 HEAP8[(($__neg)>>0)]=1;
 var $594=HEAP8[(($this2_i_i_i16)>>0)];
 var $595=$594&1;
 var $596=(($595<<24)>>24)==0;
 if($596){label=200;break;}else{label=199;break;}
 case 199: 
 var $598=HEAP32[(($177)>>2)];
 var $602=$598;label=201;break;
 case 200: 
 var $600=($594&255);
 var $601=$600>>>1;
 var $602=$601;label=201;break;
 case 201: 
 var $602;
 var $603=($602>>>0)>1;
 var $__nsn___trailing_sign_010=($603?$__nsn:$__trailing_sign_0252);
 var $__trailing_sign_1=$__nsn___trailing_sign_010;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;
 case 202: 
 var $605=HEAP32[(($__err)>>2)];
 var $606=$605|4;
 HEAP32[(($__err)>>2)]=$606;
 var $_0=0;label=386;break;
 case 203: 
 var $608=($__trailing_sign_0252|0)!=0;
 var $609=($__p_0250>>>0)<2;
 var $or_cond=$608|$609;
 if($or_cond){label=207;break;}else{label=204;break;}
 case 204: 
 var $611=($__p_0250|0)==2;
 if($611){label=205;break;}else{var $616=0;label=206;break;}
 case 205: 
 var $613=HEAP8[(($187)>>0)];
 var $614=(($613<<24)>>24)!=0;
 var $616=$614;label=206;break;
 case 206: 
 var $616;
 var $brmerge=$182|$616;
 if($brmerge){label=207;break;}else{var $__trailing_sign_1=0;var $1089=$190;var $1088=$__e_sroa_0_2;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=352;break;}
 case 207: 
 var $617=HEAP8[(($this2_i_i_i13)>>0)];
 var $618=$617&1;
 var $619=(($618<<24)>>24)==0;
 var $620=HEAP32[(($184)>>2)];
 var $_291=($619?$183:$620);
 var $621=($__p_0250|0)==0;
 if($621){var $690=$_291;var $689=$617;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}else{label=208;break;}
 case 208: 
 var $623=((($__p_0250)-(1))|0);
 var $624=(($175+$623)|0);
 var $625=HEAP8[(($624)>>0)];
 var $switch=($625&255)<2;
 if($switch){var $627=$_291;var $626=$617;label=209;break;}else{var $690=$_291;var $689=$617;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}
 case 209: 
 var $626;
 var $627;
 var $628=$626&1;
 var $629=(($628<<24)>>24)==0;
 if($629){label=211;break;}else{label=210;break;}
 case 210: 
 var $631=HEAP32[(($184)>>2)];
 var $632=HEAP32[(($183)>>2)];
 var $637=$632;var $636=$631;label=212;break;
 case 211: 
 var $634=($626&255);
 var $635=$634>>>1;
 var $637=$635;var $636=$183;label=212;break;
 case 212: 
 var $636;
 var $637;
 var $638=(($636+($637<<2))|0);
 var $639=($627|0)==($638|0);
 if($639){var $647=$626;label=217;break;}else{label=213;break;}
 case 213: 
 var $641=HEAP32[(($627)>>2)];
 var $642=HEAP32[(($176)>>2)];
 var $643=(($642+12)|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$644]($__ct,8192,$641) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=214;break; } else { label=81;break; }
 case 214: 
 if($645){label=216;break;}else{label=215;break;}
 case 215: 
 var $_pre266=HEAP8[(($this2_i_i_i13)>>0)];
 var $647=$_pre266;label=217;break;
 case 216: 
 var $646=(($627+4)|0);
 var $_pre265=HEAP8[(($this2_i_i_i13)>>0)];
 var $627=$646;var $626=$_pre265;label=209;break;
 case 217: 
 var $647;
 var $648=$647&1;
 var $649=(($648<<24)>>24)==0;
 var $650=HEAP32[(($184)>>2)];
 var $_292=($649?$183:$650);
 var $651=$627;
 var $652=$_292;
 var $653=((($651)-($652))|0);
 var $654=$653>>2;
 var $655=HEAP8[(($this2_i_i_i19)>>0)];
 var $656=$655&1;
 var $657=(($656<<24)>>24)==0;
 if($657){label=219;break;}else{label=218;break;}
 case 218: 
 var $659=HEAP32[(($185)>>2)];
 var $663=$659;label=220;break;
 case 219: 
 var $661=($655&255);
 var $662=$661>>>1;
 var $663=$662;label=220;break;
 case 220: 
 var $663;
 var $664=($654>>>0)>($663>>>0);
 if($664){var $690=$_292;var $689=$647;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}else{label=221;break;}
 case 221: 
 if($657){label=223;break;}else{label=222;break;}
 case 222: 
 var $667=HEAP32[(($186)>>2)];
 var $668=HEAP32[(($185)>>2)];
 var $_sum=((($668)-($654))|0);
 var $669=(($667+($_sum<<2))|0);
 var $676=$668;var $675=$667;var $674=$669;label=224;break;
 case 223: 
 var $671=($655&255);
 var $672=$671>>>1;
 var $_sum280=((($672)-($654))|0);
 var $673=(($185+($_sum280<<2))|0);
 var $676=$672;var $675=$185;var $674=$673;label=224;break;
 case 224: 
 var $674;
 var $675;
 var $676;
 var $677=(($675+($676<<2))|0);
 var $678=($674|0)==($677|0);
 if($678){var $690=$627;var $689=$647;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}else{var $680=$674;var $679=$_292;label=225;break;}
 case 225: 
 var $679;
 var $680;
 var $681=HEAP32[(($680)>>2)];
 var $682=HEAP32[(($679)>>2)];
 var $683=($681|0)==($682|0);
 if($683){label=226;break;}else{var $690=$_292;var $689=$647;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}
 case 226: 
 var $685=(($680+4)|0);
 var $686=(($679+4)|0);
 var $687=($685|0)==($677|0);
 if($687){var $690=$627;var $689=$647;var $688=$__e_sroa_0_2;var $_pre_i3_i_i182=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=227;break;}else{var $680=$685;var $679=$686;label=225;break;}
 case 227: 
 var $__e_sroa_0_6;
 var $_pre_i3_i_i182;
 var $688;
 var $689;
 var $690;
 var $691=$689&1;
 var $692=(($691<<24)>>24)==0;
 if($692){label=229;break;}else{label=228;break;}
 case 228: 
 var $694=HEAP32[(($184)>>2)];
 var $695=HEAP32[(($183)>>2)];
 var $700=$695;var $699=$694;label=230;break;
 case 229: 
 var $697=($689&255);
 var $698=$697>>>1;
 var $700=$698;var $699=$183;label=230;break;
 case 230: 
 var $699;
 var $700;
 var $701=(($699+($700<<2))|0);
 var $702=($690|0)==($701|0);
 if($702){var $774=$_pre_i3_i_i182;var $__e_sroa_0_9=$__e_sroa_0_6;label=253;break;}else{label=231;break;}
 case 231: 
 var $704=HEAP32[(($174)>>2)];
 var $705=($704|0)==0;
 if($705){var $722=1;label=238;break;}else{label=232;break;}
 case 232: 
 var $707=(($704+12)|0);
 var $708=HEAP32[(($707)>>2)];
 var $709=(($704+16)|0);
 var $710=HEAP32[(($709)>>2)];
 var $711=($708|0)==($710|0);
 if($711){label=233;break;}else{label=234;break;}
 case 233: 
 var $713=$704;
 var $714=HEAP32[(($713)>>2)];
 var $715=(($714+36)|0);
 var $716=HEAP32[(($715)>>2)];
 var $717=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$716]($704) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i174=$717;label=235;break; } else { label=82;break; }
 case 234: 
 var $719=HEAP32[(($708)>>2)];
 var $_0_i_i_i_i174=$719;label=235;break;
 case 235: 
 var $_0_i_i_i_i174;
 var $720=($_0_i_i_i_i174|0)==-1;
 if($720){label=237;break;}else{label=236;break;}
 case 236: 
 var $_pre_i_i_i176=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i177=($_pre_i_i_i176|0)==0;
 var $722=$phitmp_i_i_i177;label=238;break;
 case 237: 
 HEAP32[(($174)>>2)]=0;
 var $722=1;label=238;break;
 case 238: 
 var $722;
 var $723=($688|0)==0;
 if($723){var $_pre_i3_i_i182269=$_pre_i3_i_i182;var $__e_sroa_0_7=$__e_sroa_0_6;label=243;break;}else{label=239;break;}
 case 239: 
 var $725=(($688+12)|0);
 var $726=HEAP32[(($725)>>2)];
 var $727=(($688+16)|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=($726|0)==($728|0);
 if($729){label=240;break;}else{label=241;break;}
 case 240: 
 var $731=$688;
 var $732=HEAP32[(($731)>>2)];
 var $733=(($732+36)|0);
 var $734=HEAP32[(($733)>>2)];
 var $735=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$734]($688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i180=$735;label=242;break; } else { label=82;break; }
 case 241: 
 var $737=HEAP32[(($726)>>2)];
 var $_0_i_i1_i_i180=$737;label=242;break;
 case 242: 
 var $_0_i_i1_i_i180;
 var $738=($_0_i_i1_i_i180|0)==-1;
 if($738){var $_pre_i3_i_i182269=0;var $__e_sroa_0_7=0;label=243;break;}else{label=244;break;}
 case 243: 
 var $__e_sroa_0_7;
 var $_pre_i3_i_i182269;
 if($722){var $774=$_pre_i3_i_i182269;var $__e_sroa_0_9=$__e_sroa_0_7;label=253;break;}else{var $741=0;var $_pre_i3_i_i182268=$_pre_i3_i_i182269;var $__e_sroa_0_8=$__e_sroa_0_7;label=245;break;}
 case 244: 
 var $phitmp_i4_i_i183=($_pre_i3_i_i182|0)==0;
 var $tmp_i_i185=$722^$phitmp_i4_i_i183;
 if($tmp_i_i185){var $741=$_pre_i3_i_i182;var $_pre_i3_i_i182268=$_pre_i3_i_i182;var $__e_sroa_0_8=$__e_sroa_0_6;label=245;break;}else{var $774=$_pre_i3_i_i182;var $__e_sroa_0_9=$__e_sroa_0_6;label=253;break;}
 case 245: 
 var $__e_sroa_0_8;
 var $_pre_i3_i_i182268;
 var $741;
 var $742=HEAP32[(($174)>>2)];
 var $743=(($742+12)|0);
 var $744=HEAP32[(($743)>>2)];
 var $745=(($742+16)|0);
 var $746=HEAP32[(($745)>>2)];
 var $747=($744|0)==($746|0);
 if($747){label=246;break;}else{label=247;break;}
 case 246: 
 var $749=$742;
 var $750=HEAP32[(($749)>>2)];
 var $751=(($750+36)|0);
 var $752=HEAP32[(($751)>>2)];
 var $753=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$752]($742) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i170=$753;label=248;break; } else { label=82;break; }
 case 247: 
 var $755=HEAP32[(($744)>>2)];
 var $_0_i_i170=$755;label=248;break;
 case 248: 
 var $_0_i_i170;
 var $756=HEAP32[(($690)>>2)];
 var $757=($_0_i_i170|0)==($756|0);
 if($757){label=249;break;}else{var $774=$_pre_i3_i_i182268;var $__e_sroa_0_9=$__e_sroa_0_8;label=253;break;}
 case 249: 
 var $759=HEAP32[(($174)>>2)];
 var $760=(($759+12)|0);
 var $761=HEAP32[(($760)>>2)];
 var $762=(($759+16)|0);
 var $763=HEAP32[(($762)>>2)];
 var $764=($761|0)==($763|0);
 if($764){label=250;break;}else{label=251;break;}
 case 250: 
 var $766=$759;
 var $767=HEAP32[(($766)>>2)];
 var $768=(($767+40)|0);
 var $769=HEAP32[(($768)>>2)];
 var $770=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$769]($759) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=82;break; }
 case 251: 
 var $772=(($761+4)|0);
 HEAP32[(($760)>>2)]=$772;
 label=252;break;
 case 252: 
 var $773=(($690+4)|0);
 var $_pre267=HEAP8[(($this2_i_i_i13)>>0)];
 var $690=$773;var $689=$_pre267;var $688=$741;var $_pre_i3_i_i182=$_pre_i3_i_i182268;var $__e_sroa_0_6=$__e_sroa_0_8;label=227;break;
 case 253: 
 var $__e_sroa_0_9;
 var $774;
 if($182){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$774;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=352;break;}
 case 254: 
 var $776=HEAP8[(($this2_i_i_i13)>>0)];
 var $777=$776&1;
 var $778=(($777<<24)>>24)==0;
 if($778){label=256;break;}else{label=255;break;}
 case 255: 
 var $780=HEAP32[(($184)>>2)];
 var $781=HEAP32[(($183)>>2)];
 var $786=$781;var $785=$780;label=257;break;
 case 256: 
 var $783=($776&255);
 var $784=$783>>>1;
 var $786=$784;var $785=$183;label=257;break;
 case 257: 
 var $785;
 var $786;
 var $787=(($785+($786<<2))|0);
 var $788=($690|0)==($787|0);
 if($788){var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$190;var $1088=$774;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=352;break;}else{label=258;break;}
 case 258: 
 var $790=HEAP32[(($__err)>>2)];
 var $791=$790|4;
 HEAP32[(($__err)>>2)]=$791;
 var $_0=0;label=386;break;
 case 259: 
 var $__e_sroa_0_10;
 var $_pre_i3_i_i157;
 var $792;
 var $793;
 var $__ng_0;
 var $794=HEAP32[(($174)>>2)];
 var $795=($794|0)==0;
 if($795){var $812=1;label=266;break;}else{label=260;break;}
 case 260: 
 var $797=(($794+12)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=(($794+16)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=($798|0)==($800|0);
 if($801){label=261;break;}else{label=262;break;}
 case 261: 
 var $803=$794;
 var $804=HEAP32[(($803)>>2)];
 var $805=(($804+36)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$806]($794) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i149=$807;label=263;break; } else { label=79;break; }
 case 262: 
 var $809=HEAP32[(($798)>>2)];
 var $_0_i_i_i_i149=$809;label=263;break;
 case 263: 
 var $_0_i_i_i_i149;
 var $810=($_0_i_i_i_i149|0)==-1;
 if($810){label=265;break;}else{label=264;break;}
 case 264: 
 var $_pre_i_i_i151=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i152=($_pre_i_i_i151|0)==0;
 var $812=$phitmp_i_i_i152;label=266;break;
 case 265: 
 HEAP32[(($174)>>2)]=0;
 var $812=1;label=266;break;
 case 266: 
 var $812;
 var $813=($793|0)==0;
 if($813){var $829=$_pre_i3_i_i157;var $__e_sroa_0_11=$__e_sroa_0_10;label=271;break;}else{label=267;break;}
 case 267: 
 var $815=(($793+12)|0);
 var $816=HEAP32[(($815)>>2)];
 var $817=(($793+16)|0);
 var $818=HEAP32[(($817)>>2)];
 var $819=($816|0)==($818|0);
 if($819){label=268;break;}else{label=269;break;}
 case 268: 
 var $821=$793;
 var $822=HEAP32[(($821)>>2)];
 var $823=(($822+36)|0);
 var $824=HEAP32[(($823)>>2)];
 var $825=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$824]($793) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i155=$825;label=270;break; } else { label=79;break; }
 case 269: 
 var $827=HEAP32[(($816)>>2)];
 var $_0_i_i1_i_i155=$827;label=270;break;
 case 270: 
 var $_0_i_i1_i_i155;
 var $828=($_0_i_i1_i_i155|0)==-1;
 if($828){var $829=0;var $__e_sroa_0_11=0;label=271;break;}else{label=272;break;}
 case 271: 
 var $__e_sroa_0_11;
 var $829;
 if($812){var $_pre_i3_i_i125=$829;var $__e_sroa_0_13=$__e_sroa_0_11;label=293;break;}else{var $833=0;var $832=$829;var $__e_sroa_0_12=$__e_sroa_0_11;label=273;break;}
 case 272: 
 var $phitmp_i4_i_i158=($_pre_i3_i_i157|0)==0;
 var $tmp_i_i160=$812^$phitmp_i4_i_i158;
 if($tmp_i_i160){var $833=$_pre_i3_i_i157;var $832=$_pre_i3_i_i157;var $__e_sroa_0_12=$__e_sroa_0_10;label=273;break;}else{var $_pre_i3_i_i125=$_pre_i3_i_i157;var $__e_sroa_0_13=$__e_sroa_0_10;label=293;break;}
 case 273: 
 var $__e_sroa_0_12;
 var $832;
 var $833;
 var $834=HEAP32[(($174)>>2)];
 var $835=(($834+12)|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=(($834+16)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=($836|0)==($838|0);
 if($839){label=274;break;}else{label=275;break;}
 case 274: 
 var $841=$834;
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+36)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$844]($834) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i146=$845;label=276;break; } else { label=79;break; }
 case 275: 
 var $847=HEAP32[(($836)>>2)];
 var $_0_i_i146=$847;label=276;break;
 case 276: 
 var $_0_i_i146;
 var $848=HEAP32[(($176)>>2)];
 var $849=(($848+12)|0);
 var $850=HEAP32[(($849)>>2)];
 var $851=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$850]($__ct,2048,$_0_i_i146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=277;break; } else { label=79;break; }
 case 277: 
 if($851){label=278;break;}else{label=282;break;}
 case 278: 
 var $853=HEAP32[(($__wn)>>2)];
 var $854=HEAP32[(($11)>>2)];
 var $855=($853|0)==($854|0);
 if($855){label=279;break;}else{var $858=$853;label=281;break;}
 case 279: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=280;break; } else { label=79;break; }
 case 280: 
 var $_pre275=HEAP32[(($__wn)>>2)];
 var $858=$_pre275;label=281;break;
 case 281: 
 var $858;
 var $859=(($858+4)|0);
 HEAP32[(($__wn)>>2)]=$859;
 HEAP32[(($858)>>2)]=$_0_i_i146;
 var $860=((($__ng_0)+(1))|0);
 var $__ng_1=$860;var $882=$792;label=290;break;
 case 282: 
 var $862=HEAP8[(($this2_i_i_i)>>0)];
 var $863=$862&1;
 var $864=(($863<<24)>>24)==0;
 if($864){label=284;break;}else{label=283;break;}
 case 283: 
 var $866=HEAP32[(($188)>>2)];
 var $870=$866;label=285;break;
 case 284: 
 var $868=($862&255);
 var $869=$868>>>1;
 var $870=$869;label=285;break;
 case 285: 
 var $870;
 var $871=($870|0)!=0;
 var $872=($__ng_0|0)!=0;
 var $or_cond6=$871&$872;
 var $873=($_0_i_i146|0)==($__ts_0|0);
 var $or_cond12=$or_cond6&$873;
 if($or_cond12){label=286;break;}else{var $_pre_i3_i_i125=$832;var $__e_sroa_0_13=$__e_sroa_0_12;label=293;break;}
 case 286: 
 var $875=HEAP32[(($__ge)>>2)];
 var $876=($792|0)==($875|0);
 if($876){label=287;break;}else{var $879=$792;label=289;break;}
 case 287: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=288;break; } else { label=79;break; }
 case 288: 
 var $_pre277=HEAP32[(($__gn)>>2)];
 var $879=$_pre277;label=289;break;
 case 289: 
 var $879;
 var $880=(($879+4)|0);
 HEAP32[(($__gn)>>2)]=$880;
 HEAP32[(($879)>>2)]=$__ng_0;
 var $__ng_1=0;var $882=$880;label=290;break;
 case 290: 
 var $882;
 var $__ng_1;
 var $883=HEAP32[(($174)>>2)];
 var $884=(($883+12)|0);
 var $885=HEAP32[(($884)>>2)];
 var $886=(($883+16)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=($885|0)==($887|0);
 if($888){label=291;break;}else{label=292;break;}
 case 291: 
 var $890=$883;
 var $891=HEAP32[(($890)>>2)];
 var $892=(($891+40)|0);
 var $893=HEAP32[(($892)>>2)];
 var $894=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$893]($883) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $793=$833;var $792=$882;var $_pre_i3_i_i157=$832;var $__e_sroa_0_10=$__e_sroa_0_12;label=259;break; } else { label=79;break; }
 case 292: 
 var $896=(($885+4)|0);
 HEAP32[(($884)>>2)]=$896;
 var $__ng_0=$__ng_1;var $793=$833;var $792=$882;var $_pre_i3_i_i157=$832;var $__e_sroa_0_10=$__e_sroa_0_12;label=259;break;
 case 293: 
 var $__e_sroa_0_13;
 var $_pre_i3_i_i125;
 var $898=HEAP32[(($14)>>2)];
 var $899=($898|0)!=($792|0);
 var $900=($__ng_0|0)!=0;
 var $or_cond8=$899&$900;
 if($or_cond8){label=294;break;}else{var $909=$792;label=298;break;}
 case 294: 
 var $902=HEAP32[(($__ge)>>2)];
 var $903=($792|0)==($902|0);
 if($903){label=295;break;}else{var $906=$792;label=297;break;}
 case 295: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=84;break; }
 case 296: 
 var $_pre271=HEAP32[(($__gn)>>2)];
 var $906=$_pre271;label=297;break;
 case 297: 
 var $906;
 var $907=(($906+4)|0);
 HEAP32[(($__gn)>>2)]=$907;
 HEAP32[(($906)>>2)]=$__ng_0;
 var $909=$907;label=298;break;
 case 298: 
 var $909;
 var $910=($__fd_0|0)>0;
 if($910){label=299;break;}else{var $1081=$_pre_i3_i_i125;var $__fd_1=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=350;break;}
 case 299: 
 var $912=HEAP32[(($174)>>2)];
 var $913=($912|0)==0;
 if($913){var $930=1;label=306;break;}else{label=300;break;}
 case 300: 
 var $915=(($912+12)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=(($912+16)|0);
 var $918=HEAP32[(($917)>>2)];
 var $919=($916|0)==($918|0);
 if($919){label=301;break;}else{label=302;break;}
 case 301: 
 var $921=$912;
 var $922=HEAP32[(($921)>>2)];
 var $923=(($922+36)|0);
 var $924=HEAP32[(($923)>>2)];
 var $925=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$924]($912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i117=$925;label=303;break; } else { label=84;break; }
 case 302: 
 var $927=HEAP32[(($916)>>2)];
 var $_0_i_i_i_i117=$927;label=303;break;
 case 303: 
 var $_0_i_i_i_i117;
 var $928=($_0_i_i_i_i117|0)==-1;
 if($928){label=305;break;}else{label=304;break;}
 case 304: 
 var $_pre_i_i_i119=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i120=($_pre_i_i_i119|0)==0;
 var $930=$phitmp_i_i_i120;label=306;break;
 case 305: 
 HEAP32[(($174)>>2)]=0;
 var $930=1;label=306;break;
 case 306: 
 var $930;
 var $931=($_pre_i3_i_i125|0)==0;
 if($931){var $__e_sroa_0_14=$__e_sroa_0_13;label=311;break;}else{label=307;break;}
 case 307: 
 var $933=(($_pre_i3_i_i125+12)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($_pre_i3_i_i125+16)|0);
 var $936=HEAP32[(($935)>>2)];
 var $937=($934|0)==($936|0);
 if($937){label=308;break;}else{label=309;break;}
 case 308: 
 var $939=$_pre_i3_i_i125;
 var $940=HEAP32[(($939)>>2)];
 var $941=(($940+36)|0);
 var $942=HEAP32[(($941)>>2)];
 var $943=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$942]($_pre_i3_i_i125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i123=$943;label=310;break; } else { label=84;break; }
 case 309: 
 var $945=HEAP32[(($934)>>2)];
 var $_0_i_i1_i_i123=$945;label=310;break;
 case 310: 
 var $_0_i_i1_i_i123;
 var $946=($_0_i_i1_i_i123|0)==-1;
 if($946){var $__e_sroa_0_14=0;label=311;break;}else{label=312;break;}
 case 311: 
 var $__e_sroa_0_14;
 if($930){label=317;break;}else{var $948=0;var $__e_sroa_0_15=$__e_sroa_0_14;label=313;break;}
 case 312: 
 if($930){var $948=$_pre_i3_i_i125;var $__e_sroa_0_15=$__e_sroa_0_13;label=313;break;}else{label=317;break;}
 case 313: 
 var $__e_sroa_0_15;
 var $948;
 var $949=HEAP32[(($174)>>2)];
 var $950=(($949+12)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=(($949+16)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=($951|0)==($953|0);
 if($954){label=314;break;}else{label=315;break;}
 case 314: 
 var $956=$949;
 var $957=HEAP32[(($956)>>2)];
 var $958=(($957+36)|0);
 var $959=HEAP32[(($958)>>2)];
 var $960=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$959]($949) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i110=$960;label=316;break; } else { label=84;break; }
 case 315: 
 var $962=HEAP32[(($951)>>2)];
 var $_0_i_i110=$962;label=316;break;
 case 316: 
 var $_0_i_i110;
 var $963=($_0_i_i110|0)==($__dp_0|0);
 if($963){label=318;break;}else{label=317;break;}
 case 317: 
 var $965=HEAP32[(($__err)>>2)];
 var $966=$965|4;
 HEAP32[(($__err)>>2)]=$966;
 var $_0=0;label=386;break;
 case 318: 
 var $968=HEAP32[(($174)>>2)];
 var $969=(($968+12)|0);
 var $970=HEAP32[(($969)>>2)];
 var $971=(($968+16)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=($970|0)==($972|0);
 if($973){label=319;break;}else{label=320;break;}
 case 319: 
 var $975=$968;
 var $976=HEAP32[(($975)>>2)];
 var $977=(($976+40)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$978]($968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $983=$948;var $982=$__fd_0;var $_pre_i3_i_i91=$948;var $__e_sroa_0_16=$__e_sroa_0_15;label=321;break; } else { label=84;break; }
 case 320: 
 var $981=(($970+4)|0);
 HEAP32[(($969)>>2)]=$981;
 var $983=$948;var $982=$__fd_0;var $_pre_i3_i_i91=$948;var $__e_sroa_0_16=$__e_sroa_0_15;label=321;break;
 case 321: 
 var $__e_sroa_0_16;
 var $_pre_i3_i_i91;
 var $982;
 var $983;
 var $984=HEAP32[(($174)>>2)];
 var $985=($984|0)==0;
 if($985){var $1002=1;label=328;break;}else{label=322;break;}
 case 322: 
 var $987=(($984+12)|0);
 var $988=HEAP32[(($987)>>2)];
 var $989=(($984+16)|0);
 var $990=HEAP32[(($989)>>2)];
 var $991=($988|0)==($990|0);
 if($991){label=323;break;}else{label=324;break;}
 case 323: 
 var $993=$984;
 var $994=HEAP32[(($993)>>2)];
 var $995=(($994+36)|0);
 var $996=HEAP32[(($995)>>2)];
 var $997=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$996]($984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i83=$997;label=325;break; } else { label=80;break; }
 case 324: 
 var $999=HEAP32[(($988)>>2)];
 var $_0_i_i_i_i83=$999;label=325;break;
 case 325: 
 var $_0_i_i_i_i83;
 var $1000=($_0_i_i_i_i83|0)==-1;
 if($1000){label=327;break;}else{label=326;break;}
 case 326: 
 var $_pre_i_i_i85=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i86=($_pre_i_i_i85|0)==0;
 var $1002=$phitmp_i_i_i86;label=328;break;
 case 327: 
 HEAP32[(($174)>>2)]=0;
 var $1002=1;label=328;break;
 case 328: 
 var $1002;
 var $1003=($983|0)==0;
 if($1003){var $_pre_i3_i_i91273_ph=$_pre_i3_i_i91;var $__e_sroa_0_17=$__e_sroa_0_16;label=333;break;}else{label=329;break;}
 case 329: 
 var $1005=(($983+12)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=(($983+16)|0);
 var $1008=HEAP32[(($1007)>>2)];
 var $1009=($1006|0)==($1008|0);
 if($1009){label=330;break;}else{label=331;break;}
 case 330: 
 var $1011=$983;
 var $1012=HEAP32[(($1011)>>2)];
 var $1013=(($1012+36)|0);
 var $1014=HEAP32[(($1013)>>2)];
 var $1015=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1014]($983) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i89=$1015;label=332;break; } else { label=80;break; }
 case 331: 
 var $1017=HEAP32[(($1006)>>2)];
 var $_0_i_i1_i_i89=$1017;label=332;break;
 case 332: 
 var $_0_i_i1_i_i89;
 var $1018=($_0_i_i1_i_i89|0)==-1;
 if($1018){var $_pre_i3_i_i91273_ph=0;var $__e_sroa_0_17=0;label=333;break;}else{label=334;break;}
 case 333: 
 var $__e_sroa_0_17;
 var $_pre_i3_i_i91273_ph;
 if($1002){label=340;break;}else{var $_pre_i3_i_i91273284=$_pre_i3_i_i91273_ph;var $1021=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=335;break;}
 case 334: 
 var $phitmp_i4_i_i92=($_pre_i3_i_i91|0)==0;
 var $tmp_i_i94=$1002^$phitmp_i4_i_i92;
 if($tmp_i_i94){var $_pre_i3_i_i91273284=$_pre_i3_i_i91;var $1021=$_pre_i3_i_i91;var $__e_sroa_0_18=$__e_sroa_0_16;label=335;break;}else{label=340;break;}
 case 335: 
 var $__e_sroa_0_18;
 var $1021;
 var $_pre_i3_i_i91273284;
 var $1022=HEAP32[(($174)>>2)];
 var $1023=(($1022+12)|0);
 var $1024=HEAP32[(($1023)>>2)];
 var $1025=(($1022+16)|0);
 var $1026=HEAP32[(($1025)>>2)];
 var $1027=($1024|0)==($1026|0);
 if($1027){label=336;break;}else{label=337;break;}
 case 336: 
 var $1029=$1022;
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=(($1030+36)|0);
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1032]($1022) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i77=$1033;label=338;break; } else { label=80;break; }
 case 337: 
 var $1035=HEAP32[(($1024)>>2)];
 var $_0_i_i77=$1035;label=338;break;
 case 338: 
 var $_0_i_i77;
 var $1036=HEAP32[(($176)>>2)];
 var $1037=(($1036+12)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1038]($__ct,2048,$_0_i_i77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=339;break; } else { label=80;break; }
 case 339: 
 if($1039){label=341;break;}else{label=340;break;}
 case 340: 
 var $1041=HEAP32[(($__err)>>2)];
 var $1042=$1041|4;
 HEAP32[(($__err)>>2)]=$1042;
 var $_0=0;label=386;break;
 case 341: 
 var $1044=HEAP32[(($__wn)>>2)];
 var $1045=HEAP32[(($11)>>2)];
 var $1046=($1044|0)==($1045|0);
 if($1046){label=342;break;}else{label=343;break;}
 case 342: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=80;break; }
 case 343: 
 var $1049=HEAP32[(($174)>>2)];
 var $1050=(($1049+12)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=(($1049+16)|0);
 var $1053=HEAP32[(($1052)>>2)];
 var $1054=($1051|0)==($1053|0);
 if($1054){label=344;break;}else{label=345;break;}
 case 344: 
 var $1056=$1049;
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=(($1057+36)|0);
 var $1059=HEAP32[(($1058)>>2)];
 var $1060=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1059]($1049) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i69=$1060;label=346;break; } else { label=80;break; }
 case 345: 
 var $1062=HEAP32[(($1051)>>2)];
 var $_0_i_i69=$1062;label=346;break;
 case 346: 
 var $_0_i_i69;
 var $1063=HEAP32[(($__wn)>>2)];
 var $1064=(($1063+4)|0);
 HEAP32[(($__wn)>>2)]=$1064;
 HEAP32[(($1063)>>2)]=$_0_i_i69;
 var $1065=((($982)-(1))|0);
 var $1066=HEAP32[(($174)>>2)];
 var $1067=(($1066+12)|0);
 var $1068=HEAP32[(($1067)>>2)];
 var $1069=(($1066+16)|0);
 var $1070=HEAP32[(($1069)>>2)];
 var $1071=($1068|0)==($1070|0);
 if($1071){label=347;break;}else{label=349;break;}
 case 347: 
 var $1073=$1066;
 var $1074=HEAP32[(($1073)>>2)];
 var $1075=(($1074+40)|0);
 var $1076=HEAP32[(($1075)>>2)];
 var $1077=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1076]($1066) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=348;break; } else { label=80;break; }
 case 348: 
 var $1078=($1065|0)>0;
 if($1078){var $983=$1021;var $982=$1065;var $_pre_i3_i_i91=$_pre_i3_i_i91273284;var $__e_sroa_0_16=$__e_sroa_0_18;label=321;break;}else{var $1081=$_pre_i3_i_i91273284;var $__fd_1=$1065;var $__e_sroa_0_19=$__e_sroa_0_18;label=350;break;}
 case 349: 
 var $1080=(($1068+4)|0);
 HEAP32[(($1067)>>2)]=$1080;
 label=348;break;
 case 350: 
 var $__e_sroa_0_19;
 var $__fd_1;
 var $1081;
 var $1082=HEAP32[(($__wn)>>2)];
 var $1083=HEAP32[(($172)>>2)];
 var $1084=($1082|0)==($1083|0);
 if($1084){label=351;break;}else{var $__trailing_sign_1=$__trailing_sign_0252;var $1089=$909;var $1088=$1081;var $__fd_2=$__fd_1;var $__e_sroa_0_20=$__e_sroa_0_19;label=352;break;}
 case 351: 
 var $1086=HEAP32[(($__err)>>2)];
 var $1087=$1086|4;
 HEAP32[(($__err)>>2)]=$1087;
 var $_0=0;label=386;break;
 case 352: 
 var $__e_sroa_0_20;
 var $__fd_2;
 var $1088;
 var $1089;
 var $__trailing_sign_1;
 var $1090=((($__p_0250)+(1))|0);
 var $1091=($1090>>>0)<4;
 if($1091){var $__p_0250=$1090;var $__trailing_sign_0252=$__trailing_sign_1;var $190=$1089;var $__fd_0=$__fd_2;var $__e_sroa_0_0=$__e_sroa_0_20;label=63;break;}else{var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $1093=$1089;var $1092=$1088;label=353;break;}
 case 353: 
 var $1092;
 var $1093;
 var $__trailing_sign_0_lcssa;
 var $1094=($__trailing_sign_0_lcssa|0)==0;
 if($1094){label=383;break;}else{label=354;break;}
 case 354: 
 var $1095=$__trailing_sign_0_lcssa;
 var $1096=(($__trailing_sign_0_lcssa+4)|0);
 var $1097=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;var $1098=$1092;var $_pre_i3_i_i=$1092;label=355;break;
 case 355: 
 var $_pre_i3_i_i;
 var $1098;
 var $__i_0;
 var $1099=HEAP8[(($1095)>>0)];
 var $1100=$1099&1;
 var $1101=(($1100<<24)>>24)==0;
 if($1101){label=357;break;}else{label=356;break;}
 case 356: 
 var $1103=HEAP32[(($1096)>>2)];
 var $1107=$1103;label=358;break;
 case 357: 
 var $1105=($1099&255);
 var $1106=$1105>>>1;
 var $1107=$1106;label=358;break;
 case 358: 
 var $1107;
 var $1108=($__i_0>>>0)<($1107>>>0);
 if($1108){label=359;break;}else{label=383;break;}
 case 359: 
 var $1110=HEAP32[(($174)>>2)];
 var $1111=($1110|0)==0;
 if($1111){var $1128=1;label=366;break;}else{label=360;break;}
 case 360: 
 var $1113=(($1110+12)|0);
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=(($1110+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1114|0)==($1116|0);
 if($1117){label=361;break;}else{label=362;break;}
 case 361: 
 var $1119=$1110;
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=(($1120+36)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1122]($1110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$1123;label=363;break; } else { label=78;break; }
 case 362: 
 var $1125=HEAP32[(($1114)>>2)];
 var $_0_i_i_i_i=$1125;label=363;break;
 case 363: 
 var $_0_i_i_i_i;
 var $1126=($_0_i_i_i_i|0)==-1;
 if($1126){label=365;break;}else{label=364;break;}
 case 364: 
 var $_pre_i_i_i=HEAP32[(($174)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $1128=$phitmp_i_i_i;label=366;break;
 case 365: 
 HEAP32[(($174)>>2)]=0;
 var $1128=1;label=366;break;
 case 366: 
 var $1128;
 var $1129=($1098|0)==0;
 if($1129){var $_pre_i3_i_i279_ph=$_pre_i3_i_i;label=371;break;}else{label=367;break;}
 case 367: 
 var $1131=(($1098+12)|0);
 var $1132=HEAP32[(($1131)>>2)];
 var $1133=(($1098+16)|0);
 var $1134=HEAP32[(($1133)>>2)];
 var $1135=($1132|0)==($1134|0);
 if($1135){label=368;break;}else{label=369;break;}
 case 368: 
 var $1137=$1098;
 var $1138=HEAP32[(($1137)>>2)];
 var $1139=(($1138+36)|0);
 var $1140=HEAP32[(($1139)>>2)];
 var $1141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1140]($1098) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$1141;label=370;break; } else { label=78;break; }
 case 369: 
 var $1143=HEAP32[(($1132)>>2)];
 var $_0_i_i1_i_i=$1143;label=370;break;
 case 370: 
 var $_0_i_i1_i_i;
 var $1144=($_0_i_i1_i_i|0)==-1;
 if($1144){var $_pre_i3_i_i279_ph=0;label=371;break;}else{label=372;break;}
 case 371: 
 var $_pre_i3_i_i279_ph;
 if($1128){label=379;break;}else{var $_pre_i3_i_i279287=$_pre_i3_i_i279_ph;var $1147=0;label=373;break;}
 case 372: 
 var $phitmp_i4_i_i=($_pre_i3_i_i|0)==0;
 var $tmp_i_i=$1128^$phitmp_i4_i_i;
 if($tmp_i_i){var $_pre_i3_i_i279287=$_pre_i3_i_i;var $1147=$_pre_i3_i_i;label=373;break;}else{label=379;break;}
 case 373: 
 var $1147;
 var $_pre_i3_i_i279287;
 var $1148=HEAP32[(($174)>>2)];
 var $1149=(($1148+12)|0);
 var $1150=HEAP32[(($1149)>>2)];
 var $1151=(($1148+16)|0);
 var $1152=HEAP32[(($1151)>>2)];
 var $1153=($1150|0)==($1152|0);
 if($1153){label=374;break;}else{label=375;break;}
 case 374: 
 var $1155=$1148;
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=(($1156+36)|0);
 var $1158=HEAP32[(($1157)>>2)];
 var $1159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1158]($1148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$1159;label=376;break; } else { label=78;break; }
 case 375: 
 var $1161=HEAP32[(($1150)>>2)];
 var $_0_i_i=$1161;label=376;break;
 case 376: 
 var $_0_i_i;
 var $1162=HEAP8[(($1095)>>0)];
 var $1163=$1162&1;
 var $1164=(($1163<<24)>>24)==0;
 if($1164){var $1167=$1096;label=378;break;}else{label=377;break;}
 case 377: 
 var $1166=HEAP32[(($1097)>>2)];
 var $1167=$1166;label=378;break;
 case 378: 
 var $1167;
 var $1168=(($1167+($__i_0<<2))|0);
 var $1169=HEAP32[(($1168)>>2)];
 var $1170=($_0_i_i|0)==($1169|0);
 if($1170){label=380;break;}else{label=379;break;}
 case 379: 
 var $1172=HEAP32[(($__err)>>2)];
 var $1173=$1172|4;
 HEAP32[(($__err)>>2)]=$1173;
 var $_0=0;label=386;break;
 case 380: 
 var $1175=((($__i_0)+(1))|0);
 var $1176=HEAP32[(($174)>>2)];
 var $1177=(($1176+12)|0);
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=(($1176+16)|0);
 var $1180=HEAP32[(($1179)>>2)];
 var $1181=($1178|0)==($1180|0);
 if($1181){label=381;break;}else{label=382;break;}
 case 381: 
 var $1183=$1176;
 var $1184=HEAP32[(($1183)>>2)];
 var $1185=(($1184+40)|0);
 var $1186=HEAP32[(($1185)>>2)];
 var $1187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1186]($1176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1175;var $1098=$1147;var $_pre_i3_i_i=$_pre_i3_i_i279287;label=355;break; } else { label=78;break; }
 case 382: 
 var $1189=(($1178+4)|0);
 HEAP32[(($1177)>>2)]=$1189;
 var $__i_0=$1175;var $1098=$1147;var $_pre_i3_i_i=$_pre_i3_i_i279287;label=355;break;
 case 383: 
 var $1190=HEAP32[(($14)>>2)];
 var $1191=($1190|0)==($1093|0);
 if($1191){var $_0=1;label=386;break;}else{label=384;break;}
 case 384: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$1190,$1093,$__et);
 var $1193=HEAP32[(($__et)>>2)];
 var $1194=($1193|0)==0;
 if($1194){var $_0=1;label=386;break;}else{label=385;break;}
 case 385: 
 var $1196=HEAP32[(($__err)>>2)];
 var $1197=$1196|4;
 HEAP32[(($__err)>>2)]=$1197;
 var $_0=0;label=386;break;
 case 386: 
 var $_0;
 var $1199=HEAP8[(($this2_i_i_i19)>>0)];
 var $1200=$1199&1;
 var $1201=(($1200<<24)>>24)==0;
 if($1201){label=388;break;}else{label=387;break;}
 case 387: 
 var $1203=HEAP32[(($186)>>2)];
 var $1204=$1203;
 _free($1204);
 label=388;break;
 case 388: 
 var $1205=HEAP8[(($this2_i_i_i16)>>0)];
 var $1206=$1205&1;
 var $1207=(($1206<<24)>>24)==0;
 if($1207){label=390;break;}else{label=389;break;}
 case 389: 
 var $1209=HEAP32[(($178)>>2)];
 var $1210=$1209;
 _free($1210);
 label=390;break;
 case 390: 
 var $1211=HEAP8[(($this2_i_i_i14)>>0)];
 var $1212=$1211&1;
 var $1213=(($1212<<24)>>24)==0;
 if($1213){label=392;break;}else{label=391;break;}
 case 391: 
 var $1215=HEAP32[(($180)>>2)];
 var $1216=$1215;
 _free($1216);
 label=392;break;
 case 392: 
 var $1217=HEAP8[(($this2_i_i_i13)>>0)];
 var $1218=$1217&1;
 var $1219=(($1218<<24)>>24)==0;
 if($1219){label=394;break;}else{label=393;break;}
 case 393: 
 var $1221=HEAP32[(($184)>>2)];
 var $1222=$1221;
 _free($1222);
 label=394;break;
 case 394: 
 var $1223=HEAP8[(($this2_i_i_i)>>0)];
 var $1224=$1223&1;
 var $1225=(($1224<<24)>>24)==0;
 if($1225){label=396;break;}else{label=395;break;}
 case 395: 
 var $1227=(($__grp+8)|0);
 var $1228=HEAP32[(($1227)>>2)];
 _free($1228);
 label=396;break;
 case 396: 
 var $1229=HEAP32[(($14)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $1230=($1229|0)==0;
 if($1230){label=399;break;}else{label=397;break;}
 case 397: 
 var $1232=HEAP32[(($15)>>2)];
 var $1233=$1229;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1232]($1233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=399;break; } else { label=398;break; }
 case 398: 
 var $1235$0 = ___cxa_find_matching_catch(0); var $1235$1 = tempRet0;
 var $1236=$1235$0;
 ___clang_call_terminate($1236);
 throw "Reached an unreachable!";
 case 399: 
 var $$etemp$21$0=400;
 var $$etemp$21$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+424)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__wbuf=sp;
 var $__wb=(sp)+(400);
 var $__wn=(sp)+(408);
 var $__neg=(sp)+(416);
 var $1=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=420;
 var $5=(($__wbuf+400)|0);
 var $6=(($__iob+28)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 var $11=(tempValue=HEAP32[(($10)>>2)],HEAP32[(($10)>>2)]=tempValue+1,tempValue);
 var $12=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=54;break; }
 case 2: 
 var $_idx=(($7+8)|0);
 var $13=$_idx;
 var $_idx_val=HEAP32[(($13)>>2)];
 var $_idx4=(($7+12)|0);
 var $14=$_idx4;
 var $_idx4_val=HEAP32[(($14)>>2)];
 var $15=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx4_val,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=54;break; }
 case 3: 
 var $16=$15;
 HEAP8[(($__neg)>>0)]=0;
 var $17=(($__e)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__iob+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$18,$__intl,$8,$20,$__err,$__neg,$16,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=54;break; }
 case 4: 
 if($21){label=5;break;}else{label=32;break;}
 case 5: 
 var $24=$__v;
 var $25=HEAP8[(($24)>>0)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=7;break;}else{label=6;break;}
 case 6: 
 var $29=(($__v+8)|0);
 var $30=HEAP32[(($29)>>2)];
 HEAP32[(($30)>>2)]=0;
 var $31=(($__v+4)|0);
 HEAP32[(($31)>>2)]=0;
 label=8;break;
 case 7: 
 var $33=(($__v+4)|0);
 HEAP32[(($33)>>2)]=0;
 HEAP8[(($24)>>0)]=0;
 label=8;break;
 case 8: 
 var $34=HEAP8[(($__neg)>>0)];
 var $35=(($34<<24)>>24)==0;
 var $_pre9=$15;
 if($35){label=11;break;}else{label=9;break;}
 case 9: 
 var $37=HEAP32[(($_pre9)>>2)];
 var $38=(($37+44)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($16,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=54;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=54;break; }
 case 11: 
 var $41=HEAP32[(($_pre9)>>2)];
 var $42=(($41+44)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($16,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=54;break; }
 case 12: 
 var $45=HEAP32[(($3)>>2)];
 var $46=HEAP32[(($__wn)>>2)];
 var $47=((($46)-(4))|0);
 var $48=($45>>>0)<($47>>>0);
 if($48){var $__w_05=$45;label=14;break;}else{var $__w_0_lcssa=$45;label=15;break;}
 case 13: 
 var $50=($53>>>0)<($47>>>0);
 if($50){var $__w_05=$53;label=14;break;}else{var $__w_0_lcssa=$53;label=15;break;}
 case 14: 
 var $__w_05;
 var $51=HEAP32[(($__w_05)>>2)];
 var $52=($51|0)==($44|0);
 var $53=(($__w_05+4)|0);
 if($52){label=13;break;}else{var $__w_0_lcssa=$__w_05;label=15;break;}
 case 15: 
 var $__w_0_lcssa;
 var $54=$__w_0_lcssa;
 var $55=HEAP8[(($24)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $58=($55&255);
 var $59=$58>>>1;
 var $69=1;var $68=$55;var $67=$59;label=18;break;
 case 17: 
 var $61=(($__v+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__v)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&-2;
 var $phitmp_i_i=((($65)-(1))|0);
 var $66=(($64)&255);
 var $69=$phitmp_i_i;var $68=$66;var $67=$62;label=18;break;
 case 18: 
 var $67;
 var $68;
 var $69;
 var $70=$46;
 var $71=((($70)-($54))|0);
 var $72=$71>>2;
 var $73=($72|0)==0;
 if($73){label=32;break;}else{label=19;break;}
 case 19: 
 var $75=((($69)-($67))|0);
 var $76=($75>>>0)<($72>>>0);
 if($76){label=20;break;}else{var $81=$68;label=22;break;}
 case 20: 
 var $78=((($67)+($72))|0);
 var $79=((($78)-($69))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v,$69,$79,$67,$67,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=54;break; }
 case 21: 
 var $_pre_i=HEAP8[(($24)>>0)];
 var $81=$_pre_i;label=22;break;
 case 22: 
 var $81;
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=24;break;}else{label=23;break;}
 case 23: 
 var $85=(($__v+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $89=$86;label=25;break;
 case 24: 
 var $88=(($__v+4)|0);
 var $89=$88;label=25;break;
 case 25: 
 var $89;
 var $90=(($89+($67<<2))|0);
 var $91=($__w_0_lcssa|0)==($46|0);
 if($91){var $__p_0_lcssa_i=$90;label=29;break;}else{label=26;break;}
 case 26: 
 var $92=$47;
 var $93=((($92)-($54))|0);
 var $94=$93>>>2;
 var $95=((($67)+($94))|0);
 var $96=((($95)+(1))|0);
 var $_01_i=$__w_0_lcssa;var $__p_02_i=$90;label=27;break;
 case 27: 
 var $__p_02_i;
 var $_01_i;
 var $98=HEAP32[(($_01_i)>>2)];
 HEAP32[(($__p_02_i)>>2)]=$98;
 var $99=(($__p_02_i+4)|0);
 var $100=(($_01_i+4)|0);
 var $101=($100|0)==($46|0);
 if($101){label=28;break;}else{var $_01_i=$100;var $__p_02_i=$99;label=27;break;}
 case 28: 
 var $scevgep5_i=(($89+($96<<2))|0);
 var $__p_0_lcssa_i=$scevgep5_i;label=29;break;
 case 29: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 var $103=((($67)+($72))|0);
 var $104=HEAP8[(($24)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=31;break;}else{label=30;break;}
 case 30: 
 var $108=(($__v+4)|0);
 HEAP32[(($108)>>2)]=$103;
 label=32;break;
 case 31: 
 var $110=$103<<1;
 var $111=(($110)&255);
 HEAP8[(($24)>>0)]=$111;
 label=32;break;
 case 32: 
 var $112=(($__b)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)==0;
 if($114){var $131=1;label=39;break;}else{label=33;break;}
 case 33: 
 var $116=(($113+12)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($113+16)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($117|0)==($119|0);
 if($120){label=34;break;}else{label=35;break;}
 case 34: 
 var $122=$113;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+36)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$125]($113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$126;label=36;break; } else { label=54;break; }
 case 35: 
 var $128=HEAP32[(($117)>>2)];
 var $_0_i_i_i_i=$128;label=36;break;
 case 36: 
 var $_0_i_i_i_i;
 var $129=($_0_i_i_i_i|0)==-1;
 if($129){label=38;break;}else{label=37;break;}
 case 37: 
 var $_pre_i_i_i=HEAP32[(($112)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $131=$phitmp_i_i_i;label=39;break;
 case 38: 
 HEAP32[(($112)>>2)]=0;
 var $131=1;label=39;break;
 case 39: 
 var $131;
 var $132=($18|0)==0;
 if($132){label=45;break;}else{label=40;break;}
 case 40: 
 var $134=(($18+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=(($18+16)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($135|0)==($137|0);
 if($138){label=41;break;}else{label=42;break;}
 case 41: 
 var $140=$18;
 var $141=HEAP32[(($140)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$143]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$144;label=43;break; } else { label=54;break; }
 case 42: 
 var $146=HEAP32[(($135)>>2)];
 var $_0_i_i1_i_i=$146;label=43;break;
 case 43: 
 var $_0_i_i1_i_i;
 var $147=($_0_i_i1_i_i|0)==-1;
 if($147){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($17)>>2)]=0;
 label=45;break;
 case 45: 
 if($131){label=47;break;}else{label=48;break;}
 case 46: 
 if($131){label=48;break;}else{label=47;break;}
 case 47: 
 var $150=HEAP32[(($__err)>>2)];
 var $151=$150|2;
 HEAP32[(($__err)>>2)]=$151;
 label=48;break;
 case 48: 
 var $153=HEAP32[(($112)>>2)];
 var $154=(($agg_result)|0);
 HEAP32[(($154)>>2)]=$153;
 var $155=(($7+4)|0);
 var $156=$155;
 var $157=(tempValue=HEAP32[(($156)>>2)],HEAP32[(($156)>>2)]=tempValue+-1,tempValue);
 var $158=($157|0)==0;
 if($158){label=49;break;}else{label=50;break;}
 case 49: 
 var $160=$7;
 var $161=$7;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+8)|0);
 var $164=HEAP32[(($163)>>2)];
 FUNCTION_TABLE[$164]($160);
 label=50;break;
 case 50: 
 var $165=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $166=($165|0)==0;
 if($166){label=53;break;}else{label=51;break;}
 case 51: 
 var $168=HEAP32[(($4)>>2)];
 var $169=$165;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]($169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $171$0 = ___cxa_find_matching_catch(0); var $171$1 = tempRet0;
 var $172=$171$0;
 ___clang_call_terminate($172);
 throw "Reached an unreachable!";
 case 53: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 54: 
 var $174$0 = ___cxa_find_matching_catch(); var $174$1 = tempRet0;
 var $175=(($7+4)|0);
 var $176=$175;
 var $177=(tempValue=HEAP32[(($176)>>2)],HEAP32[(($176)>>2)]=tempValue+-1,tempValue);
 var $178=($177|0)==0;
 if($178){label=55;break;}else{label=56;break;}
 case 55: 
 var $180=$7;
 var $181=$7;
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+8)|0);
 var $184=HEAP32[(($183)>>2)];
 FUNCTION_TABLE[$184]($180);
 label=56;break;
 case 56: 
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $185=($_pre|0)==0;
 if($185){label=59;break;}else{label=57;break;}
 case 57: 
 var $187=HEAP32[(($4)>>2)];
 var $188=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $190$0 = ___cxa_find_matching_catch(0); var $190$1 = tempRet0;
 var $191=$190$0;
 ___clang_call_terminate($191);
 throw "Reached an unreachable!";
 case 59: 
 ___resumeException($174$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__buf=sp;
 var $__bb=(sp)+(104);
 var $__digits=(sp)+(112);
 var $__pat=(sp)+(216);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$1;
 var $2=(($__digits)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $3=_snprintf($1,100,1312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($3>>>0)>99;
 if($4){label=2;break;}else{var $__db_0=$2;var $__n_0=$3;var $27=0;var $26=0;label=11;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { var $16=0;label=7;break; }
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$6,1312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=4;break; } else { var $16=0;label=7;break; }
 case 4: 
 var $10=HEAP32[(($__bb)>>2)];
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=___cxa_allocate_exception(4);
 var $14=$13;
 HEAP32[(($14)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($13,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $16=0;label=7;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $16;
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;
 var $18=$17$0;
 var $19=$17$1;
 var $_2=$18;var $_23=$19;var $197=0;var $196=$16;label=59;break;
 case 8: 
 var $20=_malloc($8);
 var $21=($20|0)==0;
 if($21){label=9;break;}else{var $__db_0=$20;var $__n_0=$8;var $27=$20;var $26=$10;label=11;break;}
 case 9: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 HEAP32[(($24)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $16=$10;label=7;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $26;
 var $27;
 var $__n_0;
 var $__db_0;
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$29;
 var $31=(($29+4)|0);
 var $32=$31;
 var $33=(tempValue=HEAP32[(($32)>>2)],HEAP32[(($32)>>2)]=tempValue+1,tempValue);
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=37;break; }
 case 12: 
 var $_idx=(($29+8)|0);
 var $35=$_idx;
 var $_idx_val=HEAP32[(($35)>>2)];
 var $_idx14=(($29+12)|0);
 var $36=$_idx14;
 var $_idx14_val=HEAP32[(($36)>>2)];
 var $37=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx14_val,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $38=$37;
 var $39=HEAP32[(($__bb)>>2)];
 var $40=(($39+$__n_0)|0);
 var $41=$37;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+32)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($38,$39,$40,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=37;break; }
 case 14: 
 var $46=($__n_0|0)==0;
 if($46){var $51=0;label=16;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP8[(($39)>>0)];
 var $49=(($48<<24)>>24)==45;
 var $51=$49;label=16;break;
 case 16: 
 var $51;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sym;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sn;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$51,$30,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=38;break; }
 case 17: 
 var $53=(($__mbuf)|0);
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 var $54=HEAP32[(($__fd)>>2)];
 var $55=($__n_0|0)>($54|0);
 if($55){label=18;break;}else{label=25;break;}
 case 18: 
 var $57=((($__n_0)-($54))|0);
 var $58=$57<<1;
 var $59=HEAP8[(($this2_i_i_i7)>>0)];
 var $60=$59&1;
 var $61=(($60<<24)>>24)==0;
 if($61){label=20;break;}else{label=19;break;}
 case 19: 
 var $63=(($__sn+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $68=$64;label=21;break;
 case 20: 
 var $66=($59&255);
 var $67=$66>>>1;
 var $68=$67;label=21;break;
 case 21: 
 var $68;
 var $69=HEAP8[(($this2_i_i_i6)>>0)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=23;break;}else{label=22;break;}
 case 22: 
 var $73=(($__sym+4)|0);
 var $74=HEAP32[(($73)>>2)];
 var $78=$74;label=24;break;
 case 23: 
 var $76=($69&255);
 var $77=$76>>>1;
 var $78=$77;label=24;break;
 case 24: 
 var $78;
 var $79=$58|1;
 var $80=((($68)+($79))|0);
 var $81=((($80)+($78))|0);
 var $_pn=$81;label=32;break;
 case 25: 
 var $83=HEAP8[(($this2_i_i_i7)>>0)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=27;break;}else{label=26;break;}
 case 26: 
 var $87=(($__sn+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $92=$88;label=28;break;
 case 27: 
 var $90=($83&255);
 var $91=$90>>>1;
 var $92=$91;label=28;break;
 case 28: 
 var $92;
 var $93=HEAP8[(($this2_i_i_i6)>>0)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=(($__sym+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $102=$98;label=31;break;
 case 30: 
 var $100=($93&255);
 var $101=$100>>>1;
 var $102=$101;label=31;break;
 case 31: 
 var $102;
 var $103=((($92)+(2))|0);
 var $104=((($103)+($102))|0);
 var $_pn=$104;label=32;break;
 case 32: 
 var $_pn;
 var $106=((($_pn)+($54))|0);
 var $107=($106>>>0)>100;
 if($107){label=33;break;}else{var $__mb_0=$53;var $129=0;label=40;break;}
 case 33: 
 var $108=_malloc($106);
 var $109=($108|0)==0;
 if($109){label=34;break;}else{var $__mb_0=$108;var $129=$108;label=40;break;}
 case 34: 
 var $111=___cxa_allocate_exception(4);
 var $112=$111;
 HEAP32[(($112)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($111,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=36;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $113$0 = ___cxa_find_matching_catch(); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $_0=$114;var $_01=$115;label=51;break;
 case 37: 
 var $117$0 = ___cxa_find_matching_catch(); var $117$1 = tempRet0;
 var $118=$117$0;
 var $119=$117$1;
 var $_1=$118;var $_12=$119;label=57;break;
 case 38: 
 var $121$0 = ___cxa_find_matching_catch(); var $121$1 = tempRet0;
 var $122=$121$0;
 var $123=$121$1;
 var $_0=$122;var $_01=$123;label=51;break;
 case 39: 
 var $125$0 = ___cxa_find_matching_catch(); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 _free($129);
 var $_0=$126;var $_01=$127;label=51;break;
 case 40: 
 var $129;
 var $__mb_0;
 var $130=(($__iob+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($__db_0+$__n_0)|0);
 var $133=HEAP8[(($__dp)>>0)];
 var $134=HEAP8[(($__ts)>>0)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$131,$__db_0,$132,$38,$51,$tmpcast,$133,$134,$__grp,$__sym,$__sn,$54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=39;break; }
 case 41: 
 var $136=(($__s)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=HEAP32[(($__mi)>>2)];
 var $139=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$137,$__mb_0,$138,$139,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=39;break; }
 case 42: 
 _free($129);
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $140=HEAP8[(($this2_i_i_i7)>>0)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=44;break;}else{label=43;break;}
 case 43: 
 var $144=(($__sn+8)|0);
 var $145=HEAP32[(($144)>>2)];
 _free($145);
 label=44;break;
 case 44: 
 var $146=HEAP8[(($this2_i_i_i6)>>0)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=46;break;}else{label=45;break;}
 case 45: 
 var $150=(($__sym+8)|0);
 var $151=HEAP32[(($150)>>2)];
 _free($151);
 label=46;break;
 case 46: 
 var $152=HEAP8[(($this2_i_i_i)>>0)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=48;break;}else{label=47;break;}
 case 47: 
 var $156=(($__grp+8)|0);
 var $157=HEAP32[(($156)>>2)];
 _free($157);
 label=48;break;
 case 48: 
 var $158=(($29+4)|0);
 var $159=$158;
 var $160=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $161=($160|0)==0;
 if($161){label=49;break;}else{label=50;break;}
 case 49: 
 var $163=$29;
 var $164=$29;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+8)|0);
 var $167=HEAP32[(($166)>>2)];
 FUNCTION_TABLE[$167]($163);
 label=50;break;
 case 50: 
 _free($27);
 _free($26);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $$etemp$5$0=100;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 51: 
 var $_01;
 var $_0;
 var $168=HEAP8[(($this2_i_i_i7)>>0)];
 var $169=$168&1;
 var $170=(($169<<24)>>24)==0;
 if($170){label=53;break;}else{label=52;break;}
 case 52: 
 var $172=(($__sn+8)|0);
 var $173=HEAP32[(($172)>>2)];
 _free($173);
 label=53;break;
 case 53: 
 var $174=HEAP8[(($this2_i_i_i6)>>0)];
 var $175=$174&1;
 var $176=(($175<<24)>>24)==0;
 if($176){label=55;break;}else{label=54;break;}
 case 54: 
 var $178=(($__sym+8)|0);
 var $179=HEAP32[(($178)>>2)];
 _free($179);
 label=55;break;
 case 55: 
 var $180=HEAP8[(($this2_i_i_i)>>0)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 if($182){var $_1=$_0;var $_12=$_01;label=57;break;}else{label=56;break;}
 case 56: 
 var $184=(($__grp+8)|0);
 var $185=HEAP32[(($184)>>2)];
 _free($185);
 var $_1=$_0;var $_12=$_01;label=57;break;
 case 57: 
 var $_12;
 var $_1;
 var $186=(($29+4)|0);
 var $187=$186;
 var $188=(tempValue=HEAP32[(($187)>>2)],HEAP32[(($187)>>2)]=tempValue+-1,tempValue);
 var $189=($188|0)==0;
 if($189){label=58;break;}else{var $_2=$_1;var $_23=$_12;var $197=$27;var $196=$26;label=59;break;}
 case 58: 
 var $191=$29;
 var $192=$29;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+8)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($191);
 var $_2=$_1;var $_23=$_12;var $197=$27;var $196=$26;label=59;break;
 case 59: 
 var $196;
 var $197;
 var $_23;
 var $_2;
 _free($197);
 _free($196);
 var $198$0=$_2;
 var $198$1=0;
 var $199$0=$198$0;
 var $199$1=$_23;
 ___resumeException($199$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 if($__intl){label=2;break;}else{label=26;break;}
 case 2: 
 var $14=__ZNSt3__16locale2id5__getEv(18352);
 var $_idx9=(($__loc_0_0_val+8)|0);
 var $_idx9_val=HEAP32[(($_idx9)>>2)];
 var $_idx10=(($__loc_0_0_val+12)|0);
 var $_idx10_val=HEAP32[(($_idx10)>>2)];
 var $15=__ZNKSt3__16locale5__imp9use_facetEl($_idx9_val,$_idx10_val,$14);
 var $16=$15;
 var $17=$15;
 var $18=HEAP32[(($17)>>2)];
 if($__neg){label=3;break;}else{label=9;break;}
 case 3: 
 var $20=(($18+44)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($tmpcast3,$16);
 var $22=$__pat;
 var $23=HEAP32[(($1)>>2)];
 tempBigInt=$23;HEAP8[(($22)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(3))>>0)]=tempBigInt&0xff;
 var $24=$15;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($2,$16);
 var $28=$__sn;
 var $29=HEAP8[(($28)>>0)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=5;break;}else{label=4;break;}
 case 4: 
 var $33=(($__sn+8)|0);
 var $34=HEAP32[(($33)>>2)];
 HEAP8[(($34)>>0)]=0;
 var $35=(($__sn+4)|0);
 HEAP32[(($35)>>2)]=0;
 label=6;break;
 case 5: 
 var $37=$__sn;
 var $38=(($37+1)|0);
 HEAP8[(($38)>>0)]=0;
 HEAP8[(($28)>>0)]=0;
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $40$0 = ___cxa_find_matching_catch(0); var $40$1 = tempRet0;
 var $41=$40$0;
 ___clang_call_terminate($41);
 throw "Reached an unreachable!";
 case 8: 
 var $42=$2;
 assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
 HEAP32[(($42)>>2)]=0; HEAP32[((($42)+(4))>>2)]=0; HEAP32[((($42)+(8))>>2)]=0;
 label=15;break;
 case 9: 
 var $44=(($18+40)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($tmpcast2,$16);
 var $46=$__pat;
 var $47=HEAP32[(($3)>>2)];
 tempBigInt=$47;HEAP8[(($46)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($46)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($46)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($46)+(3))>>0)]=tempBigInt&0xff;
 var $48=$15;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+28)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($4,$16);
 var $52=$__sn;
 var $53=HEAP8[(($52)>>0)];
 var $54=$53&1;
 var $55=(($54<<24)>>24)==0;
 if($55){label=11;break;}else{label=10;break;}
 case 10: 
 var $57=(($__sn+8)|0);
 var $58=HEAP32[(($57)>>2)];
 HEAP8[(($58)>>0)]=0;
 var $59=(($__sn+4)|0);
 HEAP32[(($59)>>2)]=0;
 label=12;break;
 case 11: 
 var $61=$__sn;
 var $62=(($61+1)|0);
 HEAP8[(($62)>>0)]=0;
 HEAP8[(($52)>>0)]=0;
 label=12;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $64$0 = ___cxa_find_matching_catch(0); var $64$1 = tempRet0;
 var $65=$64$0;
 ___clang_call_terminate($65);
 throw "Reached an unreachable!";
 case 14: 
 var $66=$4;
 assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
 HEAP32[(($66)>>2)]=0; HEAP32[((($66)+(4))>>2)]=0; HEAP32[((($66)+(8))>>2)]=0;
 label=15;break;
 case 15: 
 var $67=$15;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+12)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=FUNCTION_TABLE[$70]($16);
 HEAP8[(($__dp)>>0)]=$71;
 var $72=HEAP32[(($67)>>2)];
 var $73=(($72+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=FUNCTION_TABLE[$74]($16);
 HEAP8[(($__ts)>>0)]=$75;
 var $76=$15;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+20)|0);
 var $79=HEAP32[(($78)>>2)];
 FUNCTION_TABLE[$79]($5,$16);
 var $80=$__grp;
 var $81=HEAP8[(($80)>>0)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=17;break;}else{label=16;break;}
 case 16: 
 var $85=(($__grp+8)|0);
 var $86=HEAP32[(($85)>>2)];
 HEAP8[(($86)>>0)]=0;
 var $87=(($__grp+4)|0);
 HEAP32[(($87)>>2)]=0;
 label=18;break;
 case 17: 
 var $89=$__grp;
 var $90=(($89+1)|0);
 HEAP8[(($90)>>0)]=0;
 HEAP8[(($80)>>0)]=0;
 label=18;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=19;break; }
 case 19: 
 var $92$0 = ___cxa_find_matching_catch(0); var $92$1 = tempRet0;
 var $93=$92$0;
 ___clang_call_terminate($93);
 throw "Reached an unreachable!";
 case 20: 
 var $94=$5;
 assert(12 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($94)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($94)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($94)+(8))>>2)];
 HEAP32[(($94)>>2)]=0; HEAP32[((($94)+(4))>>2)]=0; HEAP32[((($94)+(8))>>2)]=0;
 var $_pre=HEAP32[(($76)>>2)];
 var $_phi_trans_insert=(($_pre+24)|0);
 var $_pre1=HEAP32[(($_phi_trans_insert)>>2)];
 FUNCTION_TABLE[$_pre1]($6,$16);
 var $95=$__sym;
 var $96=HEAP8[(($95)>>0)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=22;break;}else{label=21;break;}
 case 21: 
 var $100=(($__sym+8)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP8[(($101)>>0)]=0;
 var $102=(($__sym+4)|0);
 HEAP32[(($102)>>2)]=0;
 label=23;break;
 case 22: 
 var $104=$__sym;
 var $105=(($104+1)|0);
 HEAP8[(($105)>>0)]=0;
 HEAP8[(($95)>>0)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $107$0 = ___cxa_find_matching_catch(0); var $107$1 = tempRet0;
 var $108=$107$0;
 ___clang_call_terminate($108);
 throw "Reached an unreachable!";
 case 25: 
 var $109=$6;
 assert(12 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($109)+(8))>>2)];
 HEAP32[(($109)>>2)]=0; HEAP32[((($109)+(4))>>2)]=0; HEAP32[((($109)+(8))>>2)]=0;
 var $_phi_trans_insert2=$15;
 var $_pre3=HEAP32[(($_phi_trans_insert2)>>2)];
 var $_phi_trans_insert4=(($_pre3+36)|0);
 var $_pre5=HEAP32[(($_phi_trans_insert4)>>2)];
 var $110=FUNCTION_TABLE[$_pre5]($16);
 var $storemerge=$110;label=50;break;
 case 26: 
 var $112=__ZNSt3__16locale2id5__getEv(18360);
 var $_idx=(($__loc_0_0_val+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx8=(($__loc_0_0_val+12)|0);
 var $_idx8_val=HEAP32[(($_idx8)>>2)];
 var $113=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx8_val,$112);
 var $114=$113;
 var $115=$113;
 var $116=HEAP32[(($115)>>2)];
 if($__neg){label=27;break;}else{label=33;break;}
 case 27: 
 var $118=(($116+44)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($tmpcast1,$114);
 var $120=$__pat;
 var $121=HEAP32[(($7)>>2)];
 tempBigInt=$121;HEAP8[(($120)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($120)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($120)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($120)+(3))>>0)]=tempBigInt&0xff;
 var $122=$113;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+32)|0);
 var $125=HEAP32[(($124)>>2)];
 FUNCTION_TABLE[$125]($8,$114);
 var $126=$__sn;
 var $127=HEAP8[(($126)>>0)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=29;break;}else{label=28;break;}
 case 28: 
 var $131=(($__sn+8)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP8[(($132)>>0)]=0;
 var $133=(($__sn+4)|0);
 HEAP32[(($133)>>2)]=0;
 label=30;break;
 case 29: 
 var $135=$__sn;
 var $136=(($135+1)|0);
 HEAP8[(($136)>>0)]=0;
 HEAP8[(($126)>>0)]=0;
 label=30;break;
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=31;break; }
 case 31: 
 var $138$0 = ___cxa_find_matching_catch(0); var $138$1 = tempRet0;
 var $139=$138$0;
 ___clang_call_terminate($139);
 throw "Reached an unreachable!";
 case 32: 
 var $140=$8;
 assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($140)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($140)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($140)+(8))>>2)];
 HEAP32[(($140)>>2)]=0; HEAP32[((($140)+(4))>>2)]=0; HEAP32[((($140)+(8))>>2)]=0;
 label=39;break;
 case 33: 
 var $142=(($116+40)|0);
 var $143=HEAP32[(($142)>>2)];
 FUNCTION_TABLE[$143]($tmpcast,$114);
 var $144=$__pat;
 var $145=HEAP32[(($9)>>2)];
 tempBigInt=$145;HEAP8[(($144)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($144)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($144)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($144)+(3))>>0)]=tempBigInt&0xff;
 var $146=$113;
 var $147=HEAP32[(($146)>>2)];
 var $148=(($147+28)|0);
 var $149=HEAP32[(($148)>>2)];
 FUNCTION_TABLE[$149]($10,$114);
 var $150=$__sn;
 var $151=HEAP8[(($150)>>0)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=35;break;}else{label=34;break;}
 case 34: 
 var $155=(($__sn+8)|0);
 var $156=HEAP32[(($155)>>2)];
 HEAP8[(($156)>>0)]=0;
 var $157=(($__sn+4)|0);
 HEAP32[(($157)>>2)]=0;
 label=36;break;
 case 35: 
 var $159=$__sn;
 var $160=(($159+1)|0);
 HEAP8[(($160)>>0)]=0;
 HEAP8[(($150)>>0)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $162$0 = ___cxa_find_matching_catch(0); var $162$1 = tempRet0;
 var $163=$162$0;
 ___clang_call_terminate($163);
 throw "Reached an unreachable!";
 case 38: 
 var $164=$10;
 assert(12 % 1 === 0);HEAP32[(($150)>>2)]=HEAP32[(($164)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($164)+(4))>>2)];HEAP32[((($150)+(8))>>2)]=HEAP32[((($164)+(8))>>2)];
 HEAP32[(($164)>>2)]=0; HEAP32[((($164)+(4))>>2)]=0; HEAP32[((($164)+(8))>>2)]=0;
 label=39;break;
 case 39: 
 var $165=$113;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=FUNCTION_TABLE[$168]($114);
 HEAP8[(($__dp)>>0)]=$169;
 var $170=HEAP32[(($165)>>2)];
 var $171=(($170+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=FUNCTION_TABLE[$172]($114);
 HEAP8[(($__ts)>>0)]=$173;
 var $174=$113;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+20)|0);
 var $177=HEAP32[(($176)>>2)];
 FUNCTION_TABLE[$177]($11,$114);
 var $178=$__grp;
 var $179=HEAP8[(($178)>>0)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=41;break;}else{label=40;break;}
 case 40: 
 var $183=(($__grp+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP8[(($184)>>0)]=0;
 var $185=(($__grp+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=42;break;
 case 41: 
 var $187=$__grp;
 var $188=(($187+1)|0);
 HEAP8[(($188)>>0)]=0;
 HEAP8[(($178)>>0)]=0;
 label=42;break;
 case 42: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=43;break; }
 case 43: 
 var $190$0 = ___cxa_find_matching_catch(0); var $190$1 = tempRet0;
 var $191=$190$0;
 ___clang_call_terminate($191);
 throw "Reached an unreachable!";
 case 44: 
 var $192=$11;
 assert(12 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($192)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($192)+(4))>>2)];HEAP32[((($178)+(8))>>2)]=HEAP32[((($192)+(8))>>2)];
 HEAP32[(($192)>>2)]=0; HEAP32[((($192)+(4))>>2)]=0; HEAP32[((($192)+(8))>>2)]=0;
 var $_pre6=HEAP32[(($174)>>2)];
 var $_phi_trans_insert7=(($_pre6+24)|0);
 var $_pre8=HEAP32[(($_phi_trans_insert7)>>2)];
 FUNCTION_TABLE[$_pre8]($12,$114);
 var $193=$__sym;
 var $194=HEAP8[(($193)>>0)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=46;break;}else{label=45;break;}
 case 45: 
 var $198=(($__sym+8)|0);
 var $199=HEAP32[(($198)>>2)];
 HEAP8[(($199)>>0)]=0;
 var $200=(($__sym+4)|0);
 HEAP32[(($200)>>2)]=0;
 label=47;break;
 case 46: 
 var $202=$__sym;
 var $203=(($202+1)|0);
 HEAP8[(($203)>>0)]=0;
 HEAP8[(($193)>>0)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $205$0 = ___cxa_find_matching_catch(0); var $205$1 = tempRet0;
 var $206=$205$0;
 ___clang_call_terminate($206);
 throw "Reached an unreachable!";
 case 49: 
 var $207=$12;
 assert(12 % 1 === 0);HEAP32[(($193)>>2)]=HEAP32[(($207)>>2)];HEAP32[((($193)+(4))>>2)]=HEAP32[((($207)+(4))>>2)];HEAP32[((($193)+(8))>>2)]=HEAP32[((($207)+(8))>>2)];
 HEAP32[(($207)>>2)]=0; HEAP32[((($207)+(4))>>2)]=0; HEAP32[((($207)+(8))>>2)]=0;
 var $_phi_trans_insert9=$113;
 var $_pre10=HEAP32[(($_phi_trans_insert9)>>2)];
 var $_phi_trans_insert11=(($_pre10+36)|0);
 var $_pre12=HEAP32[(($_phi_trans_insert11)>>2)];
 var $208=FUNCTION_TABLE[$_pre12]($114);
 var $storemerge=$208;label=50;break;
 case 50: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($3+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__flags&512;
 var $9=($8|0)==0;
 var $10=$__sym;
 var $11=(($10+1)|0);
 var $12=(($__sym+8)|0);
 var $13=(($__sym+4)|0);
 var $14=($__fd|0)>0;
 var $15=$__grp;
 var $16=$__grp;
 var $17=(($16+1)|0);
 var $18=(($__grp+8)|0);
 var $19=(($__grp+4)|0);
 var $20=(($__ct+8)|0);
 var $21=(((-$__fd))|0);
 var $__p_054=0;var $_055=$__db;label=2;break;
 case 2: 
 var $_055;
 var $__p_054;
 var $23=(($__pat+$__p_054)|0);
 var $24=HEAP8[(($23)>>0)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=22;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_055;label=60;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_055;label=60;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[(($34)>>0)]=$33;
 var $_2=$_055;label=60;break;
 case 5: 
 var $37=HEAP8[(($2)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=7;break;}else{label=6;break;}
 case 6: 
 var $41=HEAP32[(($6)>>2)];
 var $45=$41;label=8;break;
 case 7: 
 var $43=($37&255);
 var $44=$43>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_055;label=60;break;}else{label=9;break;}
 case 9: 
 if($39){var $50=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $49=HEAP32[(($5)>>2)];
 var $50=$49;label=11;break;
 case 11: 
 var $50;
 var $51=HEAP8[(($50)>>0)];
 var $52=HEAP32[(($__me)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__me)>>2)]=$53;
 HEAP8[(($52)>>0)]=$51;
 var $_2=$_055;label=60;break;
 case 12: 
 var $55=HEAP8[(($7)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=14;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($13)>>2)];
 var $63=$59;label=15;break;
 case 14: 
 var $61=($55&255);
 var $62=$61>>>1;
 var $63=$62;label=15;break;
 case 15: 
 var $63;
 var $64=($63|0)==0;
 var $or_cond3=$64|$9;
 if($or_cond3){var $_2=$_055;label=60;break;}else{label=16;break;}
 case 16: 
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $67=HEAP32[(($12)>>2)];
 var $68=HEAP32[(($13)>>2)];
 var $73=$68;var $72=$67;label=19;break;
 case 18: 
 var $70=($55&255);
 var $71=$70>>>1;
 var $73=$71;var $72=$11;label=19;break;
 case 19: 
 var $72;
 var $73;
 var $74=(($72+$73)|0);
 var $75=HEAP32[(($__me)>>2)];
 var $76=($72|0)==($74|0);
 if($76){var $_0_lcssa_i_i20=$75;label=21;break;}else{var $_01_i_i18=$75;var $77=$72;label=20;break;}
 case 20: 
 var $77;
 var $_01_i_i18;
 var $78=HEAP8[(($77)>>0)];
 HEAP8[(($_01_i_i18)>>0)]=$78;
 var $79=(($77+1)|0);
 var $80=(($_01_i_i18+1)|0);
 var $81=($79|0)==($74|0);
 if($81){var $_0_lcssa_i_i20=$80;label=21;break;}else{var $_01_i_i18=$80;var $77=$79;label=20;break;}
 case 21: 
 var $_0_lcssa_i_i20;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i20;
 var $_2=$_055;label=60;break;
 case 22: 
 var $83=HEAP32[(($__me)>>2)];
 var $84=(($_055+1)|0);
 var $__0=($__neg?$84:$_055);
 var $85=($__0>>>0)<($__de>>>0);
 if($85){var $__d_032=$__0;label=24;break;}else{var $__d_0_lcssa=$__0;label=26;break;}
 case 23: 
 var $87=($95>>>0)<($__de>>>0);
 if($87){var $__d_032=$95;label=24;break;}else{var $__d_0_lcssa=$95;label=26;break;}
 case 24: 
 var $__d_032;
 var $88=HEAP8[(($__d_032)>>0)];
 var $isascii1_i=(($88<<24)>>24)>-1;
 if($isascii1_i){label=25;break;}else{var $__d_0_lcssa=$__d_032;label=26;break;}
 case 25: 
 var $89=(($88<<24)>>24);
 var $90=HEAP32[(($20)>>2)];
 var $91=(($90+($89<<1))|0);
 var $92=HEAP16[(($91)>>1)];
 var $93=$92&2048;
 var $94=(($93<<16)>>16)==0;
 var $95=(($__d_032+1)|0);
 if($94){var $__d_0_lcssa=$__d_032;label=26;break;}else{label=23;break;}
 case 26: 
 var $__d_0_lcssa;
 var $__d_0_lcssa63=$__d_0_lcssa;
 if($14){label=27;break;}else{var $__d_2=$__d_0_lcssa;label=36;break;}
 case 27: 
 var $96=($__d_0_lcssa>>>0)>($__0>>>0);
 if($96){label=28;break;}else{var $__f_0_lcssa76=$__fd;var $__d_1_lcssa78=$__d_0_lcssa;label=32;break;}
 case 28: 
 var $97=$__0;
 var $98=((($97)-($__d_0_lcssa63))|0);
 var $99=($98>>>0)<($21>>>0);
 var $umax=($99?$21:$98);
 var $umax65=$umax;
 var $scevgep66=(($umax65+$__fd)|0);
 var $scevgep6667=$scevgep66;
 var $__d_135=$__d_0_lcssa;var $__f_036=$__fd;var $101=$83;label=29;break;
 case 29: 
 var $101;
 var $__f_036;
 var $__d_135;
 var $102=((($__d_135)-(1))|0);
 var $103=HEAP8[(($102)>>0)];
 var $104=(($101+1)|0);
 HEAP32[(($__me)>>2)]=$104;
 HEAP8[(($101)>>0)]=$103;
 var $105=((($__f_036)-(1))|0);
 var $106=($102>>>0)>($__0>>>0);
 var $107=($105|0)>0;
 var $or_cond=$106&$107;
 if($or_cond){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_135=$102;var $__f_036=$105;var $101=$_pre;label=29;break;
 case 31: 
 var $scevgep68=(($__d_0_lcssa+$umax)|0);
 if($107){var $__f_0_lcssa76=$scevgep6667;var $__d_1_lcssa78=$scevgep68;label=32;break;}else{var $114=0;var $__f_0_lcssa75=$scevgep6667;var $__d_1_lcssa77=$scevgep68;label=33;break;}
 case 32: 
 var $__d_1_lcssa78;
 var $__f_0_lcssa76;
 var $109=HEAP32[(($1)>>2)];
 var $110=(($109+28)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=FUNCTION_TABLE[$111]($__ct,48);
 var $114=$112;var $__f_0_lcssa75=$__f_0_lcssa76;var $__d_1_lcssa77=$__d_1_lcssa78;label=33;break;
 case 33: 
 var $__d_1_lcssa77;
 var $__f_0_lcssa75;
 var $114;
 var $115=($__f_0_lcssa75|0)>0;
 var $116=HEAP32[(($__me)>>2)];
 var $117=(($116+1)|0);
 HEAP32[(($__me)>>2)]=$117;
 if($115){var $__f_142=$__f_0_lcssa75;var $118=$116;label=34;break;}else{var $_lcssa41=$116;label=35;break;}
 case 34: 
 var $118;
 var $__f_142;
 HEAP8[(($118)>>0)]=$114;
 var $119=((($__f_142)-(1))|0);
 var $120=($119|0)>0;
 var $121=HEAP32[(($__me)>>2)];
 var $122=(($121+1)|0);
 HEAP32[(($__me)>>2)]=$122;
 if($120){var $__f_142=$119;var $118=$121;label=34;break;}else{var $_lcssa41=$121;label=35;break;}
 case 35: 
 var $_lcssa41;
 HEAP8[(($_lcssa41)>>0)]=$__dp;
 var $__d_2=$__d_1_lcssa77;label=36;break;
 case 36: 
 var $__d_2;
 var $124=($__d_2|0)==($__0|0);
 if($124){label=37;break;}else{label=38;break;}
 case 37: 
 var $126=HEAP32[(($1)>>2)];
 var $127=(($126+28)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($__ct,48);
 var $130=HEAP32[(($__me)>>2)];
 var $131=(($130+1)|0);
 HEAP32[(($__me)>>2)]=$131;
 HEAP8[(($130)>>0)]=$129;
 label=57;break;
 case 38: 
 var $133=HEAP8[(($15)>>0)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=40;break;}else{label=39;break;}
 case 39: 
 var $137=HEAP32[(($19)>>2)];
 var $141=$137;label=41;break;
 case 40: 
 var $139=($133&255);
 var $140=$139>>>1;
 var $141=$140;label=41;break;
 case 41: 
 var $141;
 var $142=($141|0)==0;
 if($142){var $__d_348=$__d_2;var $__ng_049=0;var $__ig_050=0;var $__gl_051=-1;label=45;break;}else{label=42;break;}
 case 42: 
 if($135){var $146=$17;label=44;break;}else{label=43;break;}
 case 43: 
 var $145=HEAP32[(($18)>>2)];
 var $146=$145;label=44;break;
 case 44: 
 var $146;
 var $147=HEAP8[(($146)>>0)];
 var $148=(($147<<24)>>24);
 var $__d_348=$__d_2;var $__ng_049=0;var $__ig_050=0;var $__gl_051=$148;label=45;break;
 case 45: 
 var $__gl_051;
 var $__ig_050;
 var $__ng_049;
 var $__d_348;
 var $149=($__ng_049|0)==($__gl_051|0);
 if($149){label=46;break;}else{var $__gl_1=$__gl_051;var $__ig_1=$__ig_050;var $__ng_1=$__ng_049;label=56;break;}
 case 46: 
 var $151=HEAP32[(($__me)>>2)];
 var $152=(($151+1)|0);
 HEAP32[(($__me)>>2)]=$152;
 HEAP8[(($151)>>0)]=$__ts;
 var $153=((($__ig_050)+(1))|0);
 var $154=HEAP8[(($15)>>0)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=HEAP32[(($19)>>2)];
 var $162=$158;label=49;break;
 case 48: 
 var $160=($154&255);
 var $161=$160>>>1;
 var $162=$161;label=49;break;
 case 49: 
 var $162;
 var $163=($153>>>0)<($162>>>0);
 if($163){label=50;break;}else{var $__gl_1=$__gl_051;var $__ig_1=$153;var $__ng_1=0;label=56;break;}
 case 50: 
 if($156){var $167=$17;label=52;break;}else{label=51;break;}
 case 51: 
 var $166=HEAP32[(($18)>>2)];
 var $167=$166;label=52;break;
 case 52: 
 var $167;
 var $168=(($167+$153)|0);
 var $169=HEAP8[(($168)>>0)];
 var $170=(($169<<24)>>24)==127;
 if($170){var $__gl_1=-1;var $__ig_1=$153;var $__ng_1=0;label=56;break;}else{label=53;break;}
 case 53: 
 if($156){var $174=$17;label=55;break;}else{label=54;break;}
 case 54: 
 var $173=HEAP32[(($18)>>2)];
 var $174=$173;label=55;break;
 case 55: 
 var $174;
 var $175=(($174+$153)|0);
 var $176=HEAP8[(($175)>>0)];
 var $177=(($176<<24)>>24);
 var $__gl_1=$177;var $__ig_1=$153;var $__ng_1=0;label=56;break;
 case 56: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $179=((($__d_348)-(1))|0);
 var $180=HEAP8[(($179)>>0)];
 var $181=HEAP32[(($__me)>>2)];
 var $182=(($181+1)|0);
 HEAP32[(($__me)>>2)]=$182;
 HEAP8[(($181)>>0)]=$180;
 var $183=((($__ng_1)+(1))|0);
 var $184=($179|0)==($__0|0);
 if($184){label=57;break;}else{var $__d_348=$179;var $__ng_049=$183;var $__ig_050=$__ig_1;var $__gl_051=$__gl_1;label=45;break;}
 case 57: 
 var $185=HEAP32[(($__me)>>2)];
 var $186=($83|0)==($185|0);
 if($186){var $_2=$__0;label=60;break;}else{label=58;break;}
 case 58: 
 var $187=((($185)-(1))|0);
 var $188=($187>>>0)>($83>>>0);
 if($188){var $_012_i_i=$83;var $189=$187;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 59: 
 var $189;
 var $_012_i_i;
 var $190=HEAP8[(($_012_i_i)>>0)];
 var $191=HEAP8[(($189)>>0)];
 HEAP8[(($_012_i_i)>>0)]=$191;
 HEAP8[(($189)>>0)]=$190;
 var $192=(($_012_i_i+1)|0);
 var $193=((($189)-(1))|0);
 var $194=($192>>>0)<($193>>>0);
 if($194){var $_012_i_i=$192;var $189=$193;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 60: 
 var $_2;
 var $195=((($__p_054)+(1))|0);
 var $196=($195>>>0)<4;
 if($196){var $__p_054=$195;var $_055=$_2;label=2;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP8[(($2)>>0)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=63;break;}else{label=62;break;}
 case 62: 
 var $202=HEAP32[(($6)>>2)];
 var $206=$202;label=64;break;
 case 63: 
 var $204=($198&255);
 var $205=$204>>>1;
 var $206=$205;label=64;break;
 case 64: 
 var $206;
 var $207=($206>>>0)>1;
 if($207){label=65;break;}else{label=71;break;}
 case 65: 
 if($200){label=67;break;}else{label=66;break;}
 case 66: 
 var $210=HEAP32[(($5)>>2)];
 var $211=HEAP32[(($6)>>2)];
 var $215=$211;var $_pn=$210;label=68;break;
 case 67: 
 var $213=($198&255);
 var $214=$213>>>1;
 var $215=$214;var $_pn=$4;label=68;break;
 case 68: 
 var $_pn;
 var $215;
 var $216=(($_pn+1)|0);
 var $217=(($_pn+$215)|0);
 var $218=HEAP32[(($__me)>>2)];
 var $219=($216|0)==($217|0);
 if($219){var $_0_lcssa_i_i=$218;label=70;break;}else{var $_01_i_i=$218;var $220=$216;label=69;break;}
 case 69: 
 var $220;
 var $_01_i_i;
 var $221=HEAP8[(($220)>>0)];
 HEAP8[(($_01_i_i)>>0)]=$221;
 var $222=(($220+1)|0);
 var $223=(($_01_i_i+1)|0);
 var $224=($222|0)==($217|0);
 if($224){var $_0_lcssa_i_i=$223;label=70;break;}else{var $_01_i_i=$223;var $220=$222;label=69;break;}
 case 70: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=71;break;
 case 71: 
 var $226=$__flags&176;
 if(($226|0)==32){ label=72;break;}else if(($226|0)==16){ label=74;break;}else{label=73;break;}
 case 72: 
 var $228=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$228;
 label=74;break;
 case 73: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=74;break;
 case 74: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__pat=sp;
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($2+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $8=$_idx;
 var $_idx_val=HEAP32[(($8)>>2)];
 var $_idx10=(($2+12)|0);
 var $9=$_idx10;
 var $_idx10_val=HEAP32[(($9)>>2)];
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx10_val,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=39;break; }
 case 3: 
 var $11=$10;
 var $12=$__digits;
 var $13=HEAP8[(($12)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($__digits+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=6;break;
 case 5: 
 var $20=($13&255);
 var $21=$20>>>1;
 var $22=$21;label=6;break;
 case 6: 
 var $22;
 var $23=($22|0)==0;
 if($23){var $40=0;label=12;break;}else{label=7;break;}
 case 7: 
 if($15){label=9;break;}else{label=8;break;}
 case 8: 
 var $26=(($__digits+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $31=$27;label=10;break;
 case 9: 
 var $29=$__digits;
 var $30=(($29+1)|0);
 var $31=$30;label=10;break;
 case 10: 
 var $31;
 var $32=HEAP8[(($31)>>0)];
 var $33=$10;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+28)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($11,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=39;break; }
 case 11: 
 var $38=(($32<<24)>>24)==(($37<<24)>>24);
 var $40=$38;label=12;break;
 case 12: 
 var $40;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i3=$__sym;
 HEAP32[(($this2_i_i_i3)>>2)]=0; HEAP32[((($this2_i_i_i3)+(4))>>2)]=0; HEAP32[((($this2_i_i_i3)+(8))>>2)]=0;
 var $this2_i_i_i4=$__sn;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$40,$3,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $42=(($__mbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $43=HEAP8[(($12)>>0)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=15;break;}else{label=14;break;}
 case 14: 
 var $47=(($__digits+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $52=$48;label=16;break;
 case 15: 
 var $50=($43&255);
 var $51=$50>>>1;
 var $52=$51;label=16;break;
 case 16: 
 var $52;
 var $53=HEAP32[(($__fd)>>2)];
 var $54=($52|0)>($53|0);
 if($54){label=17;break;}else{label=27;break;}
 case 17: 
 if($45){label=19;break;}else{label=18;break;}
 case 18: 
 var $57=(($__digits+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $62=$58;label=20;break;
 case 19: 
 var $60=($43&255);
 var $61=$60>>>1;
 var $62=$61;label=20;break;
 case 20: 
 var $62;
 var $63=((($62)-($53))|0);
 var $64=$63<<1;
 var $65=HEAP8[(($this2_i_i_i4)>>0)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=22;break;}else{label=21;break;}
 case 21: 
 var $69=(($__sn+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $74=$70;label=23;break;
 case 22: 
 var $72=($65&255);
 var $73=$72>>>1;
 var $74=$73;label=23;break;
 case 23: 
 var $74;
 var $75=HEAP8[(($this2_i_i_i3)>>0)];
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){label=25;break;}else{label=24;break;}
 case 24: 
 var $79=(($__sym+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $84=$80;label=26;break;
 case 25: 
 var $82=($75&255);
 var $83=$82>>>1;
 var $84=$83;label=26;break;
 case 26: 
 var $84;
 var $85=$64|1;
 var $86=((($74)+($85))|0);
 var $87=((($86)+($84))|0);
 var $_pn=$87;label=34;break;
 case 27: 
 var $89=HEAP8[(($this2_i_i_i4)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){label=29;break;}else{label=28;break;}
 case 28: 
 var $93=(($__sn+4)|0);
 var $94=HEAP32[(($93)>>2)];
 var $98=$94;label=30;break;
 case 29: 
 var $96=($89&255);
 var $97=$96>>>1;
 var $98=$97;label=30;break;
 case 30: 
 var $98;
 var $99=HEAP8[(($this2_i_i_i3)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 var $103=(($__sym+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=33;break;
 case 32: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=33;break;
 case 33: 
 var $108;
 var $109=((($98)+(2))|0);
 var $110=((($109)+($108))|0);
 var $_pn=$110;label=34;break;
 case 34: 
 var $_pn;
 var $112=((($_pn)+($53))|0);
 var $113=($112>>>0)>100;
 if($113){label=35;break;}else{var $__mb_0=$42;var $135=0;label=42;break;}
 case 35: 
 var $114=_malloc($112);
 var $115=($114|0)==0;
 if($115){label=36;break;}else{var $__mb_0=$114;var $135=$114;label=42;break;}
 case 36: 
 var $117=___cxa_allocate_exception(4);
 var $118=$117;
 HEAP32[(($118)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($117,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=38;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $119$0 = ___cxa_find_matching_catch(); var $119$1 = tempRet0;
 var $120=$119$0;
 var $121=$119$1;
 var $_0=$120;var $_01=$121;label=56;break;
 case 39: 
 var $123$0 = ___cxa_find_matching_catch(); var $123$1 = tempRet0;
 var $124=$123$0;
 var $125=$123$1;
 var $_1=$124;var $_12=$125;label=62;break;
 case 40: 
 var $127$0 = ___cxa_find_matching_catch(); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $_0=$128;var $_01=$129;label=56;break;
 case 41: 
 var $131$0 = ___cxa_find_matching_catch(); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 _free($135);
 var $_0=$132;var $_01=$133;label=56;break;
 case 42: 
 var $135;
 var $__mb_0;
 var $136=(($__iob+4)|0);
 var $137=HEAP32[(($136)>>2)];
 if($45){label=44;break;}else{label=43;break;}
 case 43: 
 var $139=(($__digits+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=(($__digits+4)|0);
 var $142=HEAP32[(($141)>>2)];
 var $149=$142;var $148=$140;label=45;break;
 case 44: 
 var $144=$__digits;
 var $145=(($144+1)|0);
 var $146=($43&255);
 var $147=$146>>>1;
 var $149=$147;var $148=$145;label=45;break;
 case 45: 
 var $148;
 var $149;
 var $150=(($148+$149)|0);
 var $151=HEAP8[(($__dp)>>0)];
 var $152=HEAP8[(($__ts)>>0)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$137,$148,$150,$11,$40,$tmpcast,$151,$152,$__grp,$__sym,$__sn,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=41;break; }
 case 46: 
 var $154=(($__s)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($__mi)>>2)];
 var $157=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$155,$__mb_0,$156,$157,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=41;break; }
 case 47: 
 _free($135);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $158=HEAP8[(($this2_i_i_i4)>>0)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($__sn+8)|0);
 var $163=HEAP32[(($162)>>2)];
 _free($163);
 label=49;break;
 case 49: 
 var $164=HEAP8[(($this2_i_i_i3)>>0)];
 var $165=$164&1;
 var $166=(($165<<24)>>24)==0;
 if($166){label=51;break;}else{label=50;break;}
 case 50: 
 var $168=(($__sym+8)|0);
 var $169=HEAP32[(($168)>>2)];
 _free($169);
 label=51;break;
 case 51: 
 var $170=HEAP8[(($this2_i_i_i)>>0)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=53;break;}else{label=52;break;}
 case 52: 
 var $174=(($__grp+8)|0);
 var $175=HEAP32[(($174)>>2)];
 _free($175);
 label=53;break;
 case 53: 
 var $176=(($2+4)|0);
 var $177=$176;
 var $178=(tempValue=HEAP32[(($177)>>2)],HEAP32[(($177)>>2)]=tempValue+-1,tempValue);
 var $179=($178|0)==0;
 if($179){label=54;break;}else{label=55;break;}
 case 54: 
 var $181=$2;
 var $182=$2;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+8)|0);
 var $185=HEAP32[(($184)>>2)];
 FUNCTION_TABLE[$185]($181);
 label=55;break;
 case 55: 
 STACKTOP=sp;return;
 case 56: 
 var $_01;
 var $_0;
 var $186=HEAP8[(($this2_i_i_i4)>>0)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=58;break;}else{label=57;break;}
 case 57: 
 var $190=(($__sn+8)|0);
 var $191=HEAP32[(($190)>>2)];
 _free($191);
 label=58;break;
 case 58: 
 var $192=HEAP8[(($this2_i_i_i3)>>0)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=60;break;}else{label=59;break;}
 case 59: 
 var $196=(($__sym+8)|0);
 var $197=HEAP32[(($196)>>2)];
 _free($197);
 label=60;break;
 case 60: 
 var $198=HEAP8[(($this2_i_i_i)>>0)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){var $_1=$_0;var $_12=$_01;label=62;break;}else{label=61;break;}
 case 61: 
 var $202=(($__grp+8)|0);
 var $203=HEAP32[(($202)>>2)];
 _free($203);
 var $_1=$_0;var $_12=$_01;label=62;break;
 case 62: 
 var $_12;
 var $_1;
 var $204=(($2+4)|0);
 var $205=$204;
 var $206=(tempValue=HEAP32[(($205)>>2)],HEAP32[(($205)>>2)]=tempValue+-1,tempValue);
 var $207=($206|0)==0;
 if($207){label=63;break;}else{label=64;break;}
 case 63: 
 var $209=$2;
 var $210=$2;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+8)|0);
 var $213=HEAP32[(($212)>>2)];
 FUNCTION_TABLE[$213]($209);
 label=64;break;
 case 64: 
 var $214$0=$_1;
 var $214$1=0;
 var $215$0=$214$0;
 var $215$1=$_12;
 ___resumeException($215$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__buf=sp;
 var $__bb=(sp)+(104);
 var $__digits=(sp)+(112);
 var $__pat=(sp)+(512);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$1;
 var $2=$__digits;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 var $3=(($__digits)|0);
 var $4=_snprintf($1,100,1312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($4>>>0)>99;
 if($5){label=2;break;}else{var $__db_0=$3;var $__n_0=$4;var $29=0;var $28=0;label=11;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { var $16=0;label=7;break; }
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$7,1312,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=4;break; } else { var $16=0;label=7;break; }
 case 4: 
 var $11=HEAP32[(($__bb)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=___cxa_allocate_exception(4);
 var $15=$14;
 HEAP32[(($15)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($14,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $16=0;label=7;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $16;
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;
 var $18=$17$0;
 var $19=$17$1;
 var $218=$16;var $_2314=$19;var $_215=$18;label=66;break;
 case 8: 
 var $20=$9<<2;
 var $21=_malloc($20);
 var $22=$21;
 var $23=($21|0)==0;
 if($23){label=9;break;}else{var $__db_0=$22;var $__n_0=$9;var $29=$22;var $28=$11;label=11;break;}
 case 9: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 HEAP32[(($26)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $16=$11;label=7;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $28;
 var $29;
 var $__n_0;
 var $__db_0;
 var $30=(($__iob+28)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31;
 var $33=(($31+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+1,tempValue);
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=37;break; }
 case 12: 
 var $_idx=(($31+8)|0);
 var $37=$_idx;
 var $_idx_val=HEAP32[(($37)>>2)];
 var $_idx12=(($31+12)|0);
 var $38=$_idx12;
 var $_idx12_val=HEAP32[(($38)>>2)];
 var $39=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx12_val,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=37;break; }
 case 13: 
 var $40=$39;
 var $41=HEAP32[(($__bb)>>2)];
 var $42=(($41+$__n_0)|0);
 var $43=$39;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+48)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($40,$41,$42,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=37;break; }
 case 14: 
 var $48=($__n_0|0)==0;
 if($48){var $53=0;label=16;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP8[(($41)>>0)];
 var $51=(($50<<24)>>24)==45;
 var $53=$51;label=16;break;
 case 16: 
 var $53;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i4=$__sym;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sn;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$53,$32,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=38;break; }
 case 17: 
 var $55=$__mbuf;
 var $$etemp$2$0=400;
 var $$etemp$2$1=0;

 var $56=(($__mbuf)|0);
 var $57=HEAP32[(($__fd)>>2)];
 var $58=($__n_0|0)>($57|0);
 if($58){label=18;break;}else{label=25;break;}
 case 18: 
 var $60=((($__n_0)-($57))|0);
 var $61=$60<<1;
 var $62=HEAP8[(($this2_i_i_i5)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=20;break;}else{label=19;break;}
 case 19: 
 var $66=(($__sn+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $71=$67;label=21;break;
 case 20: 
 var $69=($62&255);
 var $70=$69>>>1;
 var $71=$70;label=21;break;
 case 21: 
 var $71;
 var $72=HEAP8[(($this2_i_i_i4)>>0)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=23;break;}else{label=22;break;}
 case 22: 
 var $76=(($__sym+4)|0);
 var $77=HEAP32[(($76)>>2)];
 var $81=$77;label=24;break;
 case 23: 
 var $79=($72&255);
 var $80=$79>>>1;
 var $81=$80;label=24;break;
 case 24: 
 var $81;
 var $82=$61|1;
 var $83=((($71)+($82))|0);
 var $84=((($83)+($81))|0);
 var $_pn=$84;label=32;break;
 case 25: 
 var $86=HEAP8[(($this2_i_i_i5)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=27;break;}else{label=26;break;}
 case 26: 
 var $90=(($__sn+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $95=$91;label=28;break;
 case 27: 
 var $93=($86&255);
 var $94=$93>>>1;
 var $95=$94;label=28;break;
 case 28: 
 var $95;
 var $96=HEAP8[(($this2_i_i_i4)>>0)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=30;break;}else{label=29;break;}
 case 29: 
 var $100=(($__sym+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $105=$101;label=31;break;
 case 30: 
 var $103=($96&255);
 var $104=$103>>>1;
 var $105=$104;label=31;break;
 case 31: 
 var $105;
 var $106=((($95)+(2))|0);
 var $107=((($106)+($105))|0);
 var $_pn=$107;label=32;break;
 case 32: 
 var $_pn;
 var $109=((($_pn)+($57))|0);
 var $110=($109>>>0)>100;
 if($110){label=33;break;}else{var $__mb_0=$56;var $137=0;label=41;break;}
 case 33: 
 var $111=$109<<2;
 var $112=_malloc($111);
 var $113=$112;
 var $114=($112|0)==0;
 if($114){label=34;break;}else{var $__mb_0=$113;var $137=$113;label=41;break;}
 case 34: 
 var $116=___cxa_allocate_exception(4);
 var $117=$116;
 HEAP32[(($117)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($116,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=36;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $118$0 = ___cxa_find_matching_catch(); var $118$1 = tempRet0;
 var $119=$118$0;
 var $120=$118$1;
 var $_0=$119;var $_01=$120;label=56;break;
 case 37: 
 var $122$0 = ___cxa_find_matching_catch(); var $122$1 = tempRet0;
 var $123=$122$0;
 var $124=$122$1;
 var $_1=$123;var $_12=$124;label=62;break;
 case 38: 
 var $126$0 = ___cxa_find_matching_catch(); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0=$127;var $_01=$128;label=56;break;
 case 39: 
 var $130$0 = ___cxa_find_matching_catch(); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $133=($137|0)==0;
 if($133){var $_0=$131;var $_01=$132;label=56;break;}else{label=40;break;}
 case 40: 
 var $135=$137;
 _free($135);
 var $_0=$131;var $_01=$132;label=56;break;
 case 41: 
 var $137;
 var $__mb_0;
 var $138=(($__iob+4)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($__db_0+($__n_0<<2))|0);
 var $141=HEAP32[(($__dp)>>2)];
 var $142=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$139,$__db_0,$140,$40,$53,$tmpcast,$141,$142,$__grp,$__sym,$__sn,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=39;break; }
 case 42: 
 var $144=(($__s)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=HEAP32[(($__mi)>>2)];
 var $147=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$145,$__mb_0,$146,$147,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=39;break; }
 case 43: 
 var $149=($137|0)==0;
 if($149){label=45;break;}else{label=44;break;}
 case 44: 
 var $151=$137;
 _free($151);
 label=45;break;
 case 45: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 var $152=HEAP8[(($this2_i_i_i5)>>0)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=47;break;}else{label=46;break;}
 case 46: 
 var $156=(($__sn+8)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$157;
 _free($158);
 label=47;break;
 case 47: 
 var $159=HEAP8[(($this2_i_i_i4)>>0)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)==0;
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($__sym+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=$164;
 _free($165);
 label=49;break;
 case 49: 
 var $166=HEAP8[(($this2_i_i_i)>>0)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=51;break;}else{label=50;break;}
 case 50: 
 var $170=(($__grp+8)|0);
 var $171=HEAP32[(($170)>>2)];
 _free($171);
 label=51;break;
 case 51: 
 var $172=(($31+4)|0);
 var $173=$172;
 var $174=(tempValue=HEAP32[(($173)>>2)],HEAP32[(($173)>>2)]=tempValue+-1,tempValue);
 var $175=($174|0)==0;
 if($175){label=52;break;}else{label=53;break;}
 case 52: 
 var $177=$31;
 var $178=$31;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+8)|0);
 var $181=HEAP32[(($180)>>2)];
 FUNCTION_TABLE[$181]($177);
 label=53;break;
 case 53: 
 var $182=($29|0)==0;
 if($182){label=55;break;}else{label=54;break;}
 case 54: 
 var $184=$29;
 _free($184);
 label=55;break;
 case 55: 
 _free($28);
 var $$etemp$4$0=400;
 var $$etemp$4$1=0;

 var $$etemp$5$0=100;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 56: 
 var $_01;
 var $_0;
 var $185=HEAP8[(($this2_i_i_i5)>>0)];
 var $186=$185&1;
 var $187=(($186<<24)>>24)==0;
 if($187){label=58;break;}else{label=57;break;}
 case 57: 
 var $189=(($__sn+8)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=$190;
 _free($191);
 label=58;break;
 case 58: 
 var $192=HEAP8[(($this2_i_i_i4)>>0)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=60;break;}else{label=59;break;}
 case 59: 
 var $196=(($__sym+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=$197;
 _free($198);
 label=60;break;
 case 60: 
 var $199=HEAP8[(($this2_i_i_i)>>0)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){var $_1=$_0;var $_12=$_01;label=62;break;}else{label=61;break;}
 case 61: 
 var $203=(($__grp+8)|0);
 var $204=HEAP32[(($203)>>2)];
 _free($204);
 var $_1=$_0;var $_12=$_01;label=62;break;
 case 62: 
 var $_12;
 var $_1;
 var $205=(($31+4)|0);
 var $206=$205;
 var $207=(tempValue=HEAP32[(($206)>>2)],HEAP32[(($206)>>2)]=tempValue+-1,tempValue);
 var $208=($207|0)==0;
 if($208){label=63;break;}else{label=64;break;}
 case 63: 
 var $210=$31;
 var $211=$31;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+8)|0);
 var $214=HEAP32[(($213)>>2)];
 FUNCTION_TABLE[$214]($210);
 label=64;break;
 case 64: 
 var $215=($29|0)==0;
 if($215){var $218=$28;var $_2314=$_12;var $_215=$_1;label=66;break;}else{label=65;break;}
 case 65: 
 var $217=$29;
 _free($217);
 var $218=$28;var $_2314=$_12;var $_215=$_1;label=66;break;
 case 66: 
 var $_215;
 var $_2314;
 var $218;
 _free($218);
 var $219$0=$_215;
 var $219$1=0;
 var $220$0=$219$0;
 var $220$1=$_2314;
 ___resumeException($220$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 if($__intl){label=2;break;}else{label=26;break;}
 case 2: 
 var $14=__ZNSt3__16locale2id5__getEv(18336);
 var $_idx8=(($__loc_0_0_val+8)|0);
 var $_idx8_val=HEAP32[(($_idx8)>>2)];
 var $_idx9=(($__loc_0_0_val+12)|0);
 var $_idx9_val=HEAP32[(($_idx9)>>2)];
 var $15=__ZNKSt3__16locale5__imp9use_facetEl($_idx8_val,$_idx9_val,$14);
 var $16=$15;
 var $17=$15;
 var $18=HEAP32[(($17)>>2)];
 if($__neg){label=3;break;}else{label=9;break;}
 case 3: 
 var $20=(($18+44)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($tmpcast3,$16);
 var $22=$__pat;
 var $23=HEAP32[(($1)>>2)];
 tempBigInt=$23;HEAP8[(($22)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($22)+(3))>>0)]=tempBigInt&0xff;
 var $24=$15;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+32)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($2,$16);
 var $28=$__sn;
 var $29=HEAP8[(($28)>>0)];
 var $30=$29&1;
 var $31=(($30<<24)>>24)==0;
 if($31){label=5;break;}else{label=4;break;}
 case 4: 
 var $33=(($__sn+8)|0);
 var $34=HEAP32[(($33)>>2)];
 HEAP32[(($34)>>2)]=0;
 var $35=(($__sn+4)|0);
 HEAP32[(($35)>>2)]=0;
 label=6;break;
 case 5: 
 var $37=(($__sn+4)|0);
 HEAP32[(($37)>>2)]=0;
 HEAP8[(($28)>>0)]=0;
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $39$0 = ___cxa_find_matching_catch(0); var $39$1 = tempRet0;
 var $40=$39$0;
 ___clang_call_terminate($40);
 throw "Reached an unreachable!";
 case 8: 
 var $41=$2;
 assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
 HEAP32[(($41)>>2)]=0; HEAP32[((($41)+(4))>>2)]=0; HEAP32[((($41)+(8))>>2)]=0;
 label=15;break;
 case 9: 
 var $43=(($18+40)|0);
 var $44=HEAP32[(($43)>>2)];
 FUNCTION_TABLE[$44]($tmpcast2,$16);
 var $45=$__pat;
 var $46=HEAP32[(($3)>>2)];
 tempBigInt=$46;HEAP8[(($45)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($45)+(3))>>0)]=tempBigInt&0xff;
 var $47=$15;
 var $48=HEAP32[(($47)>>2)];
 var $49=(($48+28)|0);
 var $50=HEAP32[(($49)>>2)];
 FUNCTION_TABLE[$50]($4,$16);
 var $51=$__sn;
 var $52=HEAP8[(($51)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=11;break;}else{label=10;break;}
 case 10: 
 var $56=(($__sn+8)|0);
 var $57=HEAP32[(($56)>>2)];
 HEAP32[(($57)>>2)]=0;
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 label=12;break;
 case 11: 
 var $60=(($__sn+4)|0);
 HEAP32[(($60)>>2)]=0;
 HEAP8[(($51)>>0)]=0;
 label=12;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=13;break; }
 case 13: 
 var $62$0 = ___cxa_find_matching_catch(0); var $62$1 = tempRet0;
 var $63=$62$0;
 ___clang_call_terminate($63);
 throw "Reached an unreachable!";
 case 14: 
 var $64=$4;
 assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
 HEAP32[(($64)>>2)]=0; HEAP32[((($64)+(4))>>2)]=0; HEAP32[((($64)+(8))>>2)]=0;
 label=15;break;
 case 15: 
 var $65=$15;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($16);
 HEAP32[(($__dp)>>2)]=$69;
 var $70=HEAP32[(($65)>>2)];
 var $71=(($70+16)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($16);
 HEAP32[(($__ts)>>2)]=$73;
 var $74=$15;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+20)|0);
 var $77=HEAP32[(($76)>>2)];
 FUNCTION_TABLE[$77]($5,$16);
 var $78=$__grp;
 var $79=HEAP8[(($78)>>0)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=17;break;}else{label=16;break;}
 case 16: 
 var $83=(($__grp+8)|0);
 var $84=HEAP32[(($83)>>2)];
 HEAP8[(($84)>>0)]=0;
 var $85=(($__grp+4)|0);
 HEAP32[(($85)>>2)]=0;
 label=18;break;
 case 17: 
 var $87=$__grp;
 var $88=(($87+1)|0);
 HEAP8[(($88)>>0)]=0;
 HEAP8[(($78)>>0)]=0;
 label=18;break;
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=19;break; }
 case 19: 
 var $90$0 = ___cxa_find_matching_catch(0); var $90$1 = tempRet0;
 var $91=$90$0;
 ___clang_call_terminate($91);
 throw "Reached an unreachable!";
 case 20: 
 var $92=$5;
 assert(12 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
 HEAP32[(($92)>>2)]=0; HEAP32[((($92)+(4))>>2)]=0; HEAP32[((($92)+(8))>>2)]=0;
 var $_phi_trans_insert=$15;
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert1=(($_pre+24)|0);
 var $_pre2=HEAP32[(($_phi_trans_insert1)>>2)];
 FUNCTION_TABLE[$_pre2]($6,$16);
 var $93=$__sym;
 var $94=HEAP8[(($93)>>0)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=22;break;}else{label=21;break;}
 case 21: 
 var $98=(($__sym+8)|0);
 var $99=HEAP32[(($98)>>2)];
 HEAP32[(($99)>>2)]=0;
 var $100=(($__sym+4)|0);
 HEAP32[(($100)>>2)]=0;
 label=23;break;
 case 22: 
 var $102=(($__sym+4)|0);
 HEAP32[(($102)>>2)]=0;
 HEAP8[(($93)>>0)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $104$0 = ___cxa_find_matching_catch(0); var $104$1 = tempRet0;
 var $105=$104$0;
 ___clang_call_terminate($105);
 throw "Reached an unreachable!";
 case 25: 
 var $106=$6;
 assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($106)+(8))>>2)];
 HEAP32[(($106)>>2)]=0; HEAP32[((($106)+(4))>>2)]=0; HEAP32[((($106)+(8))>>2)]=0;
 var $_pre3=HEAP32[(($65)>>2)];
 var $_phi_trans_insert4=(($_pre3+36)|0);
 var $_pre5=HEAP32[(($_phi_trans_insert4)>>2)];
 var $107=FUNCTION_TABLE[$_pre5]($16);
 var $storemerge=$107;label=50;break;
 case 26: 
 var $109=__ZNSt3__16locale2id5__getEv(18344);
 var $_idx=(($__loc_0_0_val+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx7=(($__loc_0_0_val+12)|0);
 var $_idx7_val=HEAP32[(($_idx7)>>2)];
 var $110=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx7_val,$109);
 var $111=$110;
 var $112=$110;
 var $113=HEAP32[(($112)>>2)];
 if($__neg){label=27;break;}else{label=33;break;}
 case 27: 
 var $115=(($113+44)|0);
 var $116=HEAP32[(($115)>>2)];
 FUNCTION_TABLE[$116]($tmpcast1,$111);
 var $117=$__pat;
 var $118=HEAP32[(($7)>>2)];
 tempBigInt=$118;HEAP8[(($117)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($117)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($117)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($117)+(3))>>0)]=tempBigInt&0xff;
 var $119=$110;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+32)|0);
 var $122=HEAP32[(($121)>>2)];
 FUNCTION_TABLE[$122]($8,$111);
 var $123=$__sn;
 var $124=HEAP8[(($123)>>0)];
 var $125=$124&1;
 var $126=(($125<<24)>>24)==0;
 if($126){label=29;break;}else{label=28;break;}
 case 28: 
 var $128=(($__sn+8)|0);
 var $129=HEAP32[(($128)>>2)];
 HEAP32[(($129)>>2)]=0;
 var $130=(($__sn+4)|0);
 HEAP32[(($130)>>2)]=0;
 label=30;break;
 case 29: 
 var $132=(($__sn+4)|0);
 HEAP32[(($132)>>2)]=0;
 HEAP8[(($123)>>0)]=0;
 label=30;break;
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=31;break; }
 case 31: 
 var $134$0 = ___cxa_find_matching_catch(0); var $134$1 = tempRet0;
 var $135=$134$0;
 ___clang_call_terminate($135);
 throw "Reached an unreachable!";
 case 32: 
 var $136=$8;
 assert(12 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($136)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($136)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($136)+(8))>>2)];
 HEAP32[(($136)>>2)]=0; HEAP32[((($136)+(4))>>2)]=0; HEAP32[((($136)+(8))>>2)]=0;
 label=39;break;
 case 33: 
 var $138=(($113+40)|0);
 var $139=HEAP32[(($138)>>2)];
 FUNCTION_TABLE[$139]($tmpcast,$111);
 var $140=$__pat;
 var $141=HEAP32[(($9)>>2)];
 tempBigInt=$141;HEAP8[(($140)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($140)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($140)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($140)+(3))>>0)]=tempBigInt&0xff;
 var $142=$110;
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+28)|0);
 var $145=HEAP32[(($144)>>2)];
 FUNCTION_TABLE[$145]($10,$111);
 var $146=$__sn;
 var $147=HEAP8[(($146)>>0)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=35;break;}else{label=34;break;}
 case 34: 
 var $151=(($__sn+8)|0);
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($152)>>2)]=0;
 var $153=(($__sn+4)|0);
 HEAP32[(($153)>>2)]=0;
 label=36;break;
 case 35: 
 var $155=(($__sn+4)|0);
 HEAP32[(($155)>>2)]=0;
 HEAP8[(($146)>>0)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $157$0 = ___cxa_find_matching_catch(0); var $157$1 = tempRet0;
 var $158=$157$0;
 ___clang_call_terminate($158);
 throw "Reached an unreachable!";
 case 38: 
 var $159=$10;
 assert(12 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];HEAP32[((($146)+(8))>>2)]=HEAP32[((($159)+(8))>>2)];
 HEAP32[(($159)>>2)]=0; HEAP32[((($159)+(4))>>2)]=0; HEAP32[((($159)+(8))>>2)]=0;
 label=39;break;
 case 39: 
 var $160=$110;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+12)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=FUNCTION_TABLE[$163]($111);
 HEAP32[(($__dp)>>2)]=$164;
 var $165=HEAP32[(($160)>>2)];
 var $166=(($165+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=FUNCTION_TABLE[$167]($111);
 HEAP32[(($__ts)>>2)]=$168;
 var $169=$110;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+20)|0);
 var $172=HEAP32[(($171)>>2)];
 FUNCTION_TABLE[$172]($11,$111);
 var $173=$__grp;
 var $174=HEAP8[(($173)>>0)];
 var $175=$174&1;
 var $176=(($175<<24)>>24)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $178=(($__grp+8)|0);
 var $179=HEAP32[(($178)>>2)];
 HEAP8[(($179)>>0)]=0;
 var $180=(($__grp+4)|0);
 HEAP32[(($180)>>2)]=0;
 label=42;break;
 case 41: 
 var $182=$__grp;
 var $183=(($182+1)|0);
 HEAP8[(($183)>>0)]=0;
 HEAP8[(($173)>>0)]=0;
 label=42;break;
 case 42: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=43;break; }
 case 43: 
 var $185$0 = ___cxa_find_matching_catch(0); var $185$1 = tempRet0;
 var $186=$185$0;
 ___clang_call_terminate($186);
 throw "Reached an unreachable!";
 case 44: 
 var $187=$11;
 assert(12 % 1 === 0);HEAP32[(($173)>>2)]=HEAP32[(($187)>>2)];HEAP32[((($173)+(4))>>2)]=HEAP32[((($187)+(4))>>2)];HEAP32[((($173)+(8))>>2)]=HEAP32[((($187)+(8))>>2)];
 HEAP32[(($187)>>2)]=0; HEAP32[((($187)+(4))>>2)]=0; HEAP32[((($187)+(8))>>2)]=0;
 var $_phi_trans_insert6=$110;
 var $_pre7=HEAP32[(($_phi_trans_insert6)>>2)];
 var $_phi_trans_insert8=(($_pre7+24)|0);
 var $_pre9=HEAP32[(($_phi_trans_insert8)>>2)];
 FUNCTION_TABLE[$_pre9]($12,$111);
 var $188=$__sym;
 var $189=HEAP8[(($188)>>0)];
 var $190=$189&1;
 var $191=(($190<<24)>>24)==0;
 if($191){label=46;break;}else{label=45;break;}
 case 45: 
 var $193=(($__sym+8)|0);
 var $194=HEAP32[(($193)>>2)];
 HEAP32[(($194)>>2)]=0;
 var $195=(($__sym+4)|0);
 HEAP32[(($195)>>2)]=0;
 label=47;break;
 case 46: 
 var $197=(($__sym+4)|0);
 HEAP32[(($197)>>2)]=0;
 HEAP8[(($188)>>0)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $199$0 = ___cxa_find_matching_catch(0); var $199$1 = tempRet0;
 var $200=$199$0;
 ___clang_call_terminate($200);
 throw "Reached an unreachable!";
 case 49: 
 var $201=$12;
 assert(12 % 1 === 0);HEAP32[(($188)>>2)]=HEAP32[(($201)>>2)];HEAP32[((($188)+(4))>>2)]=HEAP32[((($201)+(4))>>2)];HEAP32[((($188)+(8))>>2)]=HEAP32[((($201)+(8))>>2)];
 HEAP32[(($201)>>2)]=0; HEAP32[((($201)+(4))>>2)]=0; HEAP32[((($201)+(8))>>2)]=0;
 var $_pre10=HEAP32[(($160)>>2)];
 var $_phi_trans_insert11=(($_pre10+36)|0);
 var $_pre12=HEAP32[(($_phi_trans_insert11)>>2)];
 var $202=FUNCTION_TABLE[$_pre12]($111);
 var $storemerge=$202;label=50;break;
 case 50: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=($__fd|0)>0;
 var $11=$__grp;
 var $12=$__grp;
 var $13=(($12+1)|0);
 var $14=(($__grp+8)|0);
 var $15=(($__grp+4)|0);
 var $16=$__ct;
 var $__p_059=0;var $_060=$__db;label=2;break;
 case 2: 
 var $_060;
 var $__p_059;
 var $18=(($__pat+$__p_059)|0);
 var $19=HEAP8[(($18)>>0)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_060;label=62;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_060;label=62;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_060;label=62;break;
 case 5: 
 var $32=HEAP8[(($2)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=HEAP32[(($3)>>2)];
 var $40=$36;label=8;break;
 case 7: 
 var $38=($32&255);
 var $39=$38>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_060;label=62;break;}else{label=9;break;}
 case 9: 
 if($34){var $45=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $44=HEAP32[(($4)>>2)];
 var $45=$44;label=11;break;
 case 11: 
 var $45;
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__me)>>2)];
 var $48=(($47+4)|0);
 HEAP32[(($__me)>>2)]=$48;
 HEAP32[(($47)>>2)]=$46;
 var $_2=$_060;label=62;break;
 case 12: 
 var $50=HEAP8[(($5)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=14;break;}else{label=13;break;}
 case 13: 
 var $54=HEAP32[(($8)>>2)];
 var $58=$54;label=15;break;
 case 14: 
 var $56=($50&255);
 var $57=$56>>>1;
 var $58=$57;label=15;break;
 case 15: 
 var $58;
 var $59=($58|0)==0;
 var $or_cond3=$59|$7;
 if($or_cond3){var $_2=$_060;label=62;break;}else{label=16;break;}
 case 16: 
 if($52){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($9)>>2)];
 var $63=HEAP32[(($8)>>2)];
 var $68=$63;var $67=$62;label=19;break;
 case 18: 
 var $65=($50&255);
 var $66=$65>>>1;
 var $68=$66;var $67=$8;label=19;break;
 case 19: 
 var $67;
 var $68;
 var $69=(($67+($68<<2))|0);
 var $70=HEAP32[(($__me)>>2)];
 var $71=($67|0)==($69|0);
 if($71){var $_0_lcssa_i_i22=$70;label=23;break;}else{label=20;break;}
 case 20: 
 var $_promoted4_i_i16=$67;
 var $_sum33=((($68)-(1))|0);
 var $scevgep_i_i17=(($67+($_sum33<<2))|0);
 var $72=$scevgep_i_i17;
 var $73=((($72)-($_promoted4_i_i16))|0);
 var $74=$73>>>2;
 var $_01_i_i19=$70;var $76=$67;label=21;break;
 case 21: 
 var $76;
 var $_01_i_i19;
 var $77=HEAP32[(($76)>>2)];
 HEAP32[(($_01_i_i19)>>2)]=$77;
 var $78=(($76+4)|0);
 var $79=(($_01_i_i19+4)|0);
 var $80=($78|0)==($69|0);
 if($80){label=22;break;}else{var $_01_i_i19=$79;var $76=$78;label=21;break;}
 case 22: 
 var $81=((($74)+(1))|0);
 var $scevgep6_i_i20=(($70+($81<<2))|0);
 var $_0_lcssa_i_i22=$scevgep6_i_i20;label=23;break;
 case 23: 
 var $_0_lcssa_i_i22;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i22;
 var $_2=$_060;label=62;break;
 case 24: 
 var $83=HEAP32[(($__me)>>2)];
 var $84=(($_060+4)|0);
 var $__0=($__neg?$84:$_060);
 var $85=($__0>>>0)<($__de>>>0);
 if($85){var $__d_034=$__0;label=26;break;}else{var $__d_0_lcssa=$__0;label=27;break;}
 case 25: 
 var $87=($93>>>0)<($__de>>>0);
 if($87){var $__d_034=$93;label=26;break;}else{var $__d_0_lcssa=$93;label=27;break;}
 case 26: 
 var $__d_034;
 var $88=HEAP32[(($__d_034)>>2)];
 var $89=HEAP32[(($16)>>2)];
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($__ct,2048,$88);
 var $93=(($__d_034+4)|0);
 if($92){label=25;break;}else{var $__d_0_lcssa=$__d_034;label=27;break;}
 case 27: 
 var $__d_0_lcssa;
 if($10){label=28;break;}else{var $__d_2=$__d_0_lcssa;label=37;break;}
 case 28: 
 var $94=($__d_0_lcssa>>>0)>($__0>>>0);
 if($94){label=29;break;}else{var $__f_0_lcssa77=$__fd;var $__d_1_lcssa79=$__d_0_lcssa;label=33;break;}
 case 29: 
 var $__me_promoted=HEAP32[(($__me)>>2)];
 var $__d_137=$__d_0_lcssa;var $__f_038=$__fd;var $96=$__me_promoted;label=30;break;
 case 30: 
 var $96;
 var $__f_038;
 var $__d_137;
 var $97=((($__d_137)-(4))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($96+4)|0);
 HEAP32[(($96)>>2)]=$98;
 var $100=((($__f_038)-(1))|0);
 var $101=($97>>>0)>($__0>>>0);
 var $102=($100|0)>0;
 var $or_cond=$101&$102;
 if($or_cond){var $__d_137=$97;var $__f_038=$100;var $96=$99;label=30;break;}else{label=31;break;}
 case 31: 
 HEAP32[(($__me)>>2)]=$99;
 if($102){var $__f_0_lcssa77=$100;var $__d_1_lcssa79=$97;label=33;break;}else{label=32;break;}
 case 32: 
 var $104=(($96+8)|0);
 HEAP32[(($__me)>>2)]=$104;
 var $_lcssa45=$99;var $__d_1_lcssa7881=$97;label=36;break;
 case 33: 
 var $__d_1_lcssa79;
 var $__f_0_lcssa77;
 var $105=HEAP32[(($1)>>2)];
 var $106=(($105+44)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=FUNCTION_TABLE[$107]($__ct,48);
 var $109=($__f_0_lcssa77|0)>0;
 var $110=HEAP32[(($__me)>>2)];
 var $111=(($110+4)|0);
 HEAP32[(($__me)>>2)]=$111;
 if($109){var $__f_146=$__f_0_lcssa77;var $113=$110;var $112=$111;label=34;break;}else{var $_lcssa45=$110;var $__d_1_lcssa7881=$__d_1_lcssa79;label=36;break;}
 case 34: 
 var $112;
 var $113;
 var $__f_146;
 HEAP32[(($113)>>2)]=$108;
 var $114=((($__f_146)-(1))|0);
 var $115=($114|0)>0;
 var $116=(($112+4)|0);
 if($115){var $__f_146=$114;var $113=$112;var $112=$116;label=34;break;}else{label=35;break;}
 case 35: 
 var $_sum75=((($__f_0_lcssa77)+(1))|0);
 var $scevgep=(($110+($_sum75<<2))|0);
 var $scevgep71=(($110+($__f_0_lcssa77<<2))|0);
 HEAP32[(($__me)>>2)]=$scevgep;
 var $_lcssa45=$scevgep71;var $__d_1_lcssa7881=$__d_1_lcssa79;label=36;break;
 case 36: 
 var $__d_1_lcssa7881;
 var $_lcssa45;
 HEAP32[(($_lcssa45)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa7881;label=37;break;
 case 37: 
 var $__d_2;
 var $119=($__d_2|0)==($__0|0);
 if($119){label=38;break;}else{label=39;break;}
 case 38: 
 var $121=HEAP32[(($1)>>2)];
 var $122=(($121+44)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($__ct,48);
 var $125=HEAP32[(($__me)>>2)];
 var $126=(($125+4)|0);
 HEAP32[(($__me)>>2)]=$126;
 HEAP32[(($125)>>2)]=$124;
 var $179=$126;label=59;break;
 case 39: 
 var $128=HEAP8[(($11)>>0)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=41;break;}else{label=40;break;}
 case 40: 
 var $132=HEAP32[(($15)>>2)];
 var $136=$132;label=42;break;
 case 41: 
 var $134=($128&255);
 var $135=$134>>>1;
 var $136=$135;label=42;break;
 case 42: 
 var $136;
 var $137=($136|0)==0;
 if($137){var $__gl_057_ph=-1;label=46;break;}else{label=43;break;}
 case 43: 
 if($130){var $141=$13;label=45;break;}else{label=44;break;}
 case 44: 
 var $140=HEAP32[(($14)>>2)];
 var $141=$140;label=45;break;
 case 45: 
 var $141;
 var $142=HEAP8[(($141)>>0)];
 var $143=(($142<<24)>>24);
 var $__gl_057_ph=$143;label=46;break;
 case 46: 
 var $__gl_057_ph;
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_354=$__d_2;var $__ng_055=0;var $__ig_056=0;var $__gl_057=$__gl_057_ph;var $144=$_pre;label=47;break;
 case 47: 
 var $144;
 var $__gl_057;
 var $__ig_056;
 var $__ng_055;
 var $__d_354;
 var $145=($__ng_055|0)==($__gl_057|0);
 if($145){label=48;break;}else{var $__gl_1=$__gl_057;var $__ig_1=$__ig_056;var $__ng_1=$__ng_055;var $173=$144;label=58;break;}
 case 48: 
 var $147=(($144+4)|0);
 HEAP32[(($__me)>>2)]=$147;
 HEAP32[(($144)>>2)]=$__ts;
 var $148=((($__ig_056)+(1))|0);
 var $149=HEAP8[(($11)>>0)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=50;break;}else{label=49;break;}
 case 49: 
 var $153=HEAP32[(($15)>>2)];
 var $157=$153;label=51;break;
 case 50: 
 var $155=($149&255);
 var $156=$155>>>1;
 var $157=$156;label=51;break;
 case 51: 
 var $157;
 var $158=($148>>>0)<($157>>>0);
 if($158){label=52;break;}else{var $__gl_1=$__gl_057;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;}
 case 52: 
 if($151){var $162=$13;label=54;break;}else{label=53;break;}
 case 53: 
 var $161=HEAP32[(($14)>>2)];
 var $162=$161;label=54;break;
 case 54: 
 var $162;
 var $163=(($162+$148)|0);
 var $164=HEAP8[(($163)>>0)];
 var $165=(($164<<24)>>24)==127;
 if($165){var $__gl_1=-1;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;}else{label=55;break;}
 case 55: 
 if($151){var $169=$13;label=57;break;}else{label=56;break;}
 case 56: 
 var $168=HEAP32[(($14)>>2)];
 var $169=$168;label=57;break;
 case 57: 
 var $169;
 var $170=(($169+$148)|0);
 var $171=HEAP8[(($170)>>0)];
 var $172=(($171<<24)>>24);
 var $__gl_1=$172;var $__ig_1=$148;var $__ng_1=0;var $173=$147;label=58;break;
 case 58: 
 var $173;
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $174=((($__d_354)-(4))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($173+4)|0);
 HEAP32[(($__me)>>2)]=$176;
 HEAP32[(($173)>>2)]=$175;
 var $177=((($__ng_1)+(1))|0);
 var $178=($174|0)==($__0|0);
 if($178){var $179=$176;label=59;break;}else{var $__d_354=$174;var $__ng_055=$177;var $__ig_056=$__ig_1;var $__gl_057=$__gl_1;var $144=$176;label=47;break;}
 case 59: 
 var $179;
 var $180=($83|0)==($179|0);
 if($180){var $_2=$__0;label=62;break;}else{label=60;break;}
 case 60: 
 var $181=((($179)-(4))|0);
 var $182=($181>>>0)>($83>>>0);
 if($182){var $_012_i_i=$83;var $183=$181;label=61;break;}else{var $_2=$__0;label=62;break;}
 case 61: 
 var $183;
 var $_012_i_i;
 var $184=HEAP32[(($_012_i_i)>>2)];
 var $185=HEAP32[(($183)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$185;
 HEAP32[(($183)>>2)]=$184;
 var $186=(($_012_i_i+4)|0);
 var $187=((($183)-(4))|0);
 var $188=($186>>>0)<($187>>>0);
 if($188){var $_012_i_i=$186;var $183=$187;label=61;break;}else{var $_2=$__0;label=62;break;}
 case 62: 
 var $_2;
 var $189=((($__p_059)+(1))|0);
 var $190=($189>>>0)<4;
 if($190){var $__p_059=$189;var $_060=$_2;label=2;break;}else{label=63;break;}
 case 63: 
 var $192=HEAP8[(($2)>>0)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=65;break;}else{label=64;break;}
 case 64: 
 var $196=HEAP32[(($3)>>2)];
 var $200=$196;label=66;break;
 case 65: 
 var $198=($192&255);
 var $199=$198>>>1;
 var $200=$199;label=66;break;
 case 66: 
 var $200;
 var $201=($200>>>0)>1;
 if($201){label=67;break;}else{label=75;break;}
 case 67: 
 if($194){label=69;break;}else{label=68;break;}
 case 68: 
 var $204=HEAP32[(($4)>>2)];
 var $205=HEAP32[(($3)>>2)];
 var $209=$205;var $_pn=$204;label=70;break;
 case 69: 
 var $207=($192&255);
 var $208=$207>>>1;
 var $209=$208;var $_pn=$3;label=70;break;
 case 70: 
 var $_pn;
 var $209;
 var $210=(($_pn+4)|0);
 var $211=(($_pn+($209<<2))|0);
 var $212=HEAP32[(($__me)>>2)];
 var $213=($210|0)==($211|0);
 if($213){var $_0_lcssa_i_i=$212;label=74;break;}else{label=71;break;}
 case 71: 
 var $_promoted4_i_i=$210;
 var $_sum=((($209)-(1))|0);
 var $scevgep_i_i=(($_pn+($_sum<<2))|0);
 var $214=$scevgep_i_i;
 var $215=((($214)-($_promoted4_i_i))|0);
 var $216=$215>>>2;
 var $_01_i_i=$212;var $218=$210;label=72;break;
 case 72: 
 var $218;
 var $_01_i_i;
 var $219=HEAP32[(($218)>>2)];
 HEAP32[(($_01_i_i)>>2)]=$219;
 var $220=(($218+4)|0);
 var $221=(($_01_i_i+4)|0);
 var $222=($220|0)==($211|0);
 if($222){label=73;break;}else{var $_01_i_i=$221;var $218=$220;label=72;break;}
 case 73: 
 var $223=((($216)+(1))|0);
 var $scevgep6_i_i=(($212+($223<<2))|0);
 var $_0_lcssa_i_i=$scevgep6_i_i;label=74;break;
 case 74: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=75;break;
 case 75: 
 var $225=$__flags&176;
 if(($225|0)==32){ label=76;break;}else if(($225|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $227=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$227;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__pat=sp;
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($2+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $_idx=(($2+8)|0);
 var $8=$_idx;
 var $_idx_val=HEAP32[(($8)>>2)];
 var $_idx8=(($2+12)|0);
 var $9=$_idx8;
 var $_idx8_val=HEAP32[(($9)>>2)];
 var $10=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx8_val,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=39;break; }
 case 3: 
 var $11=$10;
 var $12=$__digits;
 var $13=HEAP8[(($12)>>0)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($__digits+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $22=$18;label=6;break;
 case 5: 
 var $20=($13&255);
 var $21=$20>>>1;
 var $22=$21;label=6;break;
 case 6: 
 var $22;
 var $23=($22|0)==0;
 if($23){var $39=0;label=12;break;}else{label=7;break;}
 case 7: 
 if($15){label=9;break;}else{label=8;break;}
 case 8: 
 var $26=(($__digits+8)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=10;break;
 case 9: 
 var $29=(($__digits+4)|0);
 var $30=$29;label=10;break;
 case 10: 
 var $30;
 var $31=HEAP32[(($30)>>2)];
 var $32=$10;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($11,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=39;break; }
 case 11: 
 var $37=($31|0)==($36|0);
 var $39=$37;label=12;break;
 case 12: 
 var $39;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i3=$__sym;
 HEAP32[(($this2_i_i_i3)>>2)]=0; HEAP32[((($this2_i_i_i3)+(4))>>2)]=0; HEAP32[((($this2_i_i_i3)+(8))>>2)]=0;
 var $this2_i_i_i4=$__sn;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$39,$3,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $41=$__mbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $42=(($__mbuf)|0);
 var $43=HEAP8[(($12)>>0)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=15;break;}else{label=14;break;}
 case 14: 
 var $47=(($__digits+4)|0);
 var $48=HEAP32[(($47)>>2)];
 var $52=$48;label=16;break;
 case 15: 
 var $50=($43&255);
 var $51=$50>>>1;
 var $52=$51;label=16;break;
 case 16: 
 var $52;
 var $53=HEAP32[(($__fd)>>2)];
 var $54=($52|0)>($53|0);
 if($54){label=17;break;}else{label=27;break;}
 case 17: 
 if($45){label=19;break;}else{label=18;break;}
 case 18: 
 var $57=(($__digits+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $62=$58;label=20;break;
 case 19: 
 var $60=($43&255);
 var $61=$60>>>1;
 var $62=$61;label=20;break;
 case 20: 
 var $62;
 var $63=((($62)-($53))|0);
 var $64=$63<<1;
 var $65=HEAP8[(($this2_i_i_i4)>>0)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=22;break;}else{label=21;break;}
 case 21: 
 var $69=(($__sn+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $74=$70;label=23;break;
 case 22: 
 var $72=($65&255);
 var $73=$72>>>1;
 var $74=$73;label=23;break;
 case 23: 
 var $74;
 var $75=HEAP8[(($this2_i_i_i3)>>0)];
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){label=25;break;}else{label=24;break;}
 case 24: 
 var $79=(($__sym+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $84=$80;label=26;break;
 case 25: 
 var $82=($75&255);
 var $83=$82>>>1;
 var $84=$83;label=26;break;
 case 26: 
 var $84;
 var $85=$64|1;
 var $86=((($74)+($85))|0);
 var $87=((($86)+($84))|0);
 var $_pn=$87;label=34;break;
 case 27: 
 var $89=HEAP8[(($this2_i_i_i4)>>0)];
 var $90=$89&1;
 var $91=(($90<<24)>>24)==0;
 if($91){label=29;break;}else{label=28;break;}
 case 28: 
 var $93=(($__sn+4)|0);
 var $94=HEAP32[(($93)>>2)];
 var $98=$94;label=30;break;
 case 29: 
 var $96=($89&255);
 var $97=$96>>>1;
 var $98=$97;label=30;break;
 case 30: 
 var $98;
 var $99=HEAP8[(($this2_i_i_i3)>>0)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 var $103=(($__sym+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=33;break;
 case 32: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=33;break;
 case 33: 
 var $108;
 var $109=((($98)+(2))|0);
 var $110=((($109)+($108))|0);
 var $_pn=$110;label=34;break;
 case 34: 
 var $_pn;
 var $112=((($_pn)+($53))|0);
 var $113=($112>>>0)>100;
 if($113){label=35;break;}else{var $__mb_0=$42;var $140=0;label=43;break;}
 case 35: 
 var $114=$112<<2;
 var $115=_malloc($114);
 var $116=$115;
 var $117=($115|0)==0;
 if($117){label=36;break;}else{var $__mb_0=$116;var $140=$116;label=43;break;}
 case 36: 
 var $119=___cxa_allocate_exception(4);
 var $120=$119;
 HEAP32[(($120)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($119,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=38;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $121$0 = ___cxa_find_matching_catch(); var $121$1 = tempRet0;
 var $122=$121$0;
 var $123=$121$1;
 var $_0=$122;var $_01=$123;label=59;break;
 case 39: 
 var $125$0 = ___cxa_find_matching_catch(); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $_1=$126;var $_12=$127;label=65;break;
 case 40: 
 var $129$0 = ___cxa_find_matching_catch(); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_01=$131;label=59;break;
 case 41: 
 var $133$0 = ___cxa_find_matching_catch(); var $133$1 = tempRet0;
 var $134=$133$0;
 var $135=$133$1;
 var $136=($140|0)==0;
 if($136){var $_0=$134;var $_01=$135;label=59;break;}else{label=42;break;}
 case 42: 
 var $138=$140;
 _free($138);
 var $_0=$134;var $_01=$135;label=59;break;
 case 43: 
 var $140;
 var $__mb_0;
 var $141=(($__iob+4)|0);
 var $142=HEAP32[(($141)>>2)];
 if($45){label=45;break;}else{label=44;break;}
 case 44: 
 var $144=(($__digits+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($__digits+4)|0);
 var $147=HEAP32[(($146)>>2)];
 var $153=$147;var $152=$145;label=46;break;
 case 45: 
 var $149=(($__digits+4)|0);
 var $150=($43&255);
 var $151=$150>>>1;
 var $153=$151;var $152=$149;label=46;break;
 case 46: 
 var $152;
 var $153;
 var $154=(($152+($153<<2))|0);
 var $155=HEAP32[(($__dp)>>2)];
 var $156=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$142,$152,$154,$11,$39,$tmpcast,$155,$156,$__grp,$__sym,$__sn,$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=41;break; }
 case 47: 
 var $158=(($__s)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=HEAP32[(($__mi)>>2)];
 var $161=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$159,$__mb_0,$160,$161,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=41;break; }
 case 48: 
 var $163=($140|0)==0;
 if($163){label=50;break;}else{label=49;break;}
 case 49: 
 var $165=$140;
 _free($165);
 label=50;break;
 case 50: 
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 var $166=HEAP8[(($this2_i_i_i4)>>0)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($__sn+8)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=$171;
 _free($172);
 label=52;break;
 case 52: 
 var $173=HEAP8[(($this2_i_i_i3)>>0)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=54;break;}else{label=53;break;}
 case 53: 
 var $177=(($__sym+8)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$178;
 _free($179);
 label=54;break;
 case 54: 
 var $180=HEAP8[(($this2_i_i_i)>>0)];
 var $181=$180&1;
 var $182=(($181<<24)>>24)==0;
 if($182){label=56;break;}else{label=55;break;}
 case 55: 
 var $184=(($__grp+8)|0);
 var $185=HEAP32[(($184)>>2)];
 _free($185);
 label=56;break;
 case 56: 
 var $186=(($2+4)|0);
 var $187=$186;
 var $188=(tempValue=HEAP32[(($187)>>2)],HEAP32[(($187)>>2)]=tempValue+-1,tempValue);
 var $189=($188|0)==0;
 if($189){label=57;break;}else{label=58;break;}
 case 57: 
 var $191=$2;
 var $192=$2;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+8)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($191);
 label=58;break;
 case 58: 
 STACKTOP=sp;return;
 case 59: 
 var $_01;
 var $_0;
 var $196=HEAP8[(($this2_i_i_i4)>>0)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=61;break;}else{label=60;break;}
 case 60: 
 var $200=(($__sn+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=$201;
 _free($202);
 label=61;break;
 case 61: 
 var $203=HEAP8[(($this2_i_i_i3)>>0)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=63;break;}else{label=62;break;}
 case 62: 
 var $207=(($__sym+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=$208;
 _free($209);
 label=63;break;
 case 63: 
 var $210=HEAP8[(($this2_i_i_i)>>0)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){var $_1=$_0;var $_12=$_01;label=65;break;}else{label=64;break;}
 case 64: 
 var $214=(($__grp+8)|0);
 var $215=HEAP32[(($214)>>2)];
 _free($215);
 var $_1=$_0;var $_12=$_01;label=65;break;
 case 65: 
 var $_12;
 var $_1;
 var $216=(($2+4)|0);
 var $217=$216;
 var $218=(tempValue=HEAP32[(($217)>>2)],HEAP32[(($217)>>2)]=tempValue+-1,tempValue);
 var $219=($218|0)==0;
 if($219){label=66;break;}else{label=67;break;}
 case 66: 
 var $221=$2;
 var $222=$2;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+8)|0);
 var $225=HEAP32[(($224)>>2)];
 FUNCTION_TABLE[$225]($221);
 label=67;break;
 case 67: 
 var $226$0=$_1;
 var $226$1=0;
 var $227$0=$226$0;
 var $227$1=$_12;
 ___resumeException($227$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=$__dflt;
 var $2=HEAP8[(($1)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__dflt+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($__dflt+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $16=$9;var $15=$7;label=4;break;
 case 3: 
 var $11=$__dflt;
 var $12=(($11+1)|0);
 var $13=($2&255);
 var $14=$13>>>1;
 var $16=$14;var $15=$12;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17=(($15+$16)|0);
 var $18=($15>>>0)<($17>>>0);
 if($18){var $_01_i7=$15;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=($__c|0)==-1;
 var $20=$__c<<1;
 var $21=$20;
 var $22=($19?-1:$21);
 var $34=$22;label=10;break;
 case 6: 
 var $_01_i7;
 var $23=HEAP8[(($_01_i7)>>0)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=12;break; }
 case 7: 
 var $24=(($_01_i7+1)|0);
 var $25=($24>>>0)<($17>>>0);
 if($25){var $_01_i7=$24;label=6;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[(($this2_i_i_i)>>0)];
 var $phitmp=$_pre&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 var $26=($__c|0)==-1;
 var $27=$__c<<1;
 var $28=$27;
 var $29=($26?-1:$28);
 if($phitmp17){var $34=$29;label=10;break;}else{label=9;break;}
 case 9: 
 var $31=(($__ndflt+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $38=$32;var $37=$29;label=11;break;
 case 10: 
 var $34;
 var $35=$__ndflt;
 var $36=(($35+1)|0);
 var $38=$36;var $37=$34;label=11;break;
 case 11: 
 var $37;
 var $38;
 var $39=(function() { try { __THREW__ = 0; return _catgets($37,$__set,$__msgid,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=13;break; }
 case 12: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $41=$lpad_phi$0;
 var $42=$lpad_phi$1;
 var $_01=$41;var $_02=$42;label=23;break;
 case 15: 
 var $this2_i_i_i4=$agg_result;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 var $44=_strlen($39);
 var $45=(($39+$44)|0);
 var $46=($44|0)>0;
 if($46){var $_01_i=$39;label=16;break;}else{label=20;break;}
 case 16: 
 var $_01_i;
 var $47=HEAP8[(($_01_i)>>0)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $48=(($_01_i+1)|0);
 var $49=($48>>>0)<($45>>>0);
 if($49){var $_01_i=$48;label=16;break;}else{label=20;break;}
 case 18: 
 var $51$0 = ___cxa_find_matching_catch(); var $51$1 = tempRet0;
 var $52=$51$0;
 var $53=$51$1;
 var $54=HEAP8[(($this2_i_i_i4)>>0)];
 var $55=$54&1;
 var $56=(($55<<24)>>24)==0;
 if($56){var $_01=$52;var $_02=$53;label=23;break;}else{label=19;break;}
 case 19: 
 var $58=(($agg_result+8)|0);
 var $59=HEAP32[(($58)>>2)];
 _free($59);
 var $_01=$52;var $_02=$53;label=23;break;
 case 20: 
 var $60=HEAP8[(($this2_i_i_i)>>0)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=22;break;}else{label=21;break;}
 case 21: 
 var $64=(($__ndflt+8)|0);
 var $65=HEAP32[(($64)>>2)];
 _free($65);
 label=22;break;
 case 22: 
 STACKTOP=sp;return;
 case 23: 
 var $_02;
 var $_01;
 var $66=HEAP8[(($this2_i_i_i)>>0)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=25;break;}else{label=24;break;}
 case 24: 
 var $70=(($__ndflt+8)|0);
 var $71=HEAP32[(($70)>>2)];
 _free($71);
 label=25;break;
 case 25: 
 var $72$0=$_01;
 var $72$1=0;
 var $73$0=$72$0;
 var $73$1=$_02;
 ___resumeException($73$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[(($2)>>0)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i11=sp;
 var $__buf_i13=(sp)+(8);
 var $__bn_i14=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $3=(($1+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($1)|0);
 HEAP32[(($4)>>2)]=7064;
 var $5=$__dflt;
 var $6=HEAP8[(($5)>>0)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__dflt+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__dflt+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $19=$13;var $18=$11;label=4;break;
 case 3: 
 var $15=(($__dflt+4)|0);
 var $16=($6&255);
 var $17=$16>>>1;
 var $19=$17;var $18=$15;label=4;break;
 case 4: 
 var $18;
 var $19;
 var $20=(($18+($19<<2))|0);
 var $21=$__mb_i11;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $22=(($__buf_i13)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $23=$__bn_i14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $24=$__wn_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i12=$__mb_i11;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($__mb_i11)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($__mb_i11+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 var $25=($18>>>0)<($20>>>0);
 if($25){label=5;break;}else{var $47=1;label=17;break;}
 case 5: 
 var $26=(($1)|0);
 var $27=$1;
 var $28=(($__buf_i13+32)|0);
 var $_05_i16=$18;var $30=7064;label=6;break;
 case 6: 
 var $30;
 var $_05_i16;
 HEAP32[(($__wn_i)>>2)]=$_05_i16;
 var $31=(($30+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($26,$tmpcast_i12,$_05_i16,$20,$__wn_i,$22,$28,$__bn_i14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=23;break; }
 case 7: 
 var $34=($33|0)==2;
 var $35=HEAP32[(($__wn_i)>>2)];
 var $36=($35|0)==($_05_i16|0);
 var $or_cond3_i17=$34|$36;
 if($or_cond3_i17){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=HEAP32[(($__bn_i14)>>2)];
 var $38=($22>>>0)<($37>>>0);
 if($38){var $__p_04_i20=$22;label=11;break;}else{var $45=$35;label=14;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(2520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__p_04_i20;
 var $40=HEAP8[(($__p_04_i20)>>0)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $41=(($__p_04_i20+1)|0);
 var $42=HEAP32[(($__bn_i14)>>2)];
 var $43=($41>>>0)<($42>>>0);
 if($43){var $__p_04_i20=$41;label=11;break;}else{label=13;break;}
 case 13: 
 var $_pre_i21=HEAP32[(($__wn_i)>>2)];
 var $45=$_pre_i21;label=14;break;
 case 14: 
 var $45;
 var $46=($45>>>0)<($20>>>0);
 if($46){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre=HEAP32[(($27)>>2)];
 var $_05_i16=$45;var $30=$_pre;label=6;break;
 case 16: 
 var $_pre2=HEAP8[(($this2_i_i_i)>>0)];
 var $phitmp=$_pre2&1;
 var $phitmp3=(($phitmp<<24)>>24)==0;
 var $47=$phitmp3;label=17;break;
 case 17: 
 var $47;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $48=($__c|0)==-1;
 var $49=$__c<<1;
 var $50=$49;
 var $51=($48?-1:$50);
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=(($__ndflt+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $58=$54;label=20;break;
 case 19: 
 var $56=$__ndflt;
 var $57=(($56+1)|0);
 var $58=$57;label=20;break;
 case 20: 
 var $58;
 var $59=(function() { try { __THREW__ = 0; return _catgets($51,$__set,$__msgid,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=21;break; }
 case 21: 
 var $61$0 = ___cxa_find_matching_catch(); var $61$1 = tempRet0;
 var $62=$61$0;
 var $63=$61$1;
 var $_1=$62;var $_13=$63;label=46;break;
 case 22: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(); var $lpad_loopexit37$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit37$1;var $lpad_phi38$0=$lpad_loopexit37$0;label=25;break;
 case 23: 
 var $lpad_loopexit39$0 = ___cxa_find_matching_catch(); var $lpad_loopexit39$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit39$1;var $lpad_phi38$0=$lpad_loopexit39$0;label=25;break;
 case 24: 
 var $lpad_nonloopexit40$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit40$1 = tempRet0;
 var $lpad_phi38$1=$lpad_nonloopexit40$1;var $lpad_phi38$0=$lpad_nonloopexit40$0;label=25;break;
 case 25: 
 var $lpad_phi38$0;
 var $lpad_phi38$1;
 var $64=$lpad_phi38$0;
 var $65=$lpad_phi38$1;
 var $_1=$64;var $_13=$65;label=46;break;
 case 26: 
 var $this2_i_i_i8=$agg_result;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 var $67=(($2+4)|0);
 HEAP32[(($67)>>2)]=0;
 var $68=(($2)|0);
 HEAP32[(($68)>>2)]=7008;
 var $69=_strlen($59);
 var $70=(($59+$69)|0);
 var $71=$__mb_i;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $72=$__bn_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $73=$__nn_i;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $tmpcast_i=$__mb_i;
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($__mb_i)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($__mb_i+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $74=($69|0)>0;
 if($74){label=27;break;}else{label=38;break;}
 case 27: 
 var $75=$__buf_i;
 var $76=(($2)|0);
 var $77=$2;
 var $78=$70;
 var $79=(($__buf_i)|0);
 var $80=(($__buf_i+128)|0);
 var $_05_i=$59;var $82=7008;label=28;break;
 case 28: 
 var $82;
 var $_05_i;
 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 HEAP32[(($__nn_i)>>2)]=$_05_i;
 var $83=(($82+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$_05_i;
 var $86=((($78)-($85))|0);
 var $87=($86|0)>32;
 var $88=(($_05_i+32)|0);
 var $89=($87?$88:$70);
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$84]($76,$tmpcast_i,$_05_i,$89,$__nn_i,$79,$80,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=42;break; }
 case 29: 
 var $91=($90|0)==2;
 var $92=HEAP32[(($__nn_i)>>2)];
 var $93=($92|0)==($_05_i|0);
 var $or_cond3_i=$91|$93;
 if($or_cond3_i){label=31;break;}else{label=30;break;}
 case 30: 
 var $94=HEAP32[(($__bn_i)>>2)];
 var $95=($79>>>0)<($94>>>0);
 if($95){var $__p_04_i=$79;label=33;break;}else{var $102=$92;label=36;break;}
 case 31: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(2520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=43;break; }
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $__p_04_i;
 var $97=HEAP32[(($__p_04_i)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=41;break; }
 case 34: 
 var $98=(($__p_04_i+4)|0);
 var $99=HEAP32[(($__bn_i)>>2)];
 var $100=($98>>>0)<($99>>>0);
 if($100){var $__p_04_i=$98;label=33;break;}else{label=35;break;}
 case 35: 
 var $_pre9_i=HEAP32[(($__nn_i)>>2)];
 var $102=$_pre9_i;label=36;break;
 case 36: 
 var $102;
 var $$etemp$18$0=128;
 var $$etemp$18$1=0;

 var $103=($102>>>0)<($70>>>0);
 if($103){label=37;break;}else{label=38;break;}
 case 37: 
 var $_pre44=HEAP32[(($77)>>2)];
 var $_05_i=$102;var $82=$_pre44;label=28;break;
 case 38: 
 var $$etemp$19$0=8;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $104=HEAP8[(($this2_i_i_i)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=40;break;}else{label=39;break;}
 case 39: 
 var $108=(($__ndflt+8)|0);
 var $109=HEAP32[(($108)>>2)];
 _free($109);
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=44;break;
 case 42: 
 var $lpad_loopexit31$0 = ___cxa_find_matching_catch(); var $lpad_loopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit31$1;var $lpad_phi$0=$lpad_loopexit31$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit32$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit32$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit32$1;var $lpad_phi$0=$lpad_nonloopexit32$0;label=44;break;
 case 44: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $110=$lpad_phi$0;
 var $111=$lpad_phi$1;
 var $112=HEAP8[(($this2_i_i_i8)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){var $_1=$110;var $_13=$111;label=46;break;}else{label=45;break;}
 case 45: 
 var $116=(($agg_result+8)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 _free($118);
 var $_1=$110;var $_13=$111;label=46;break;
 case 46: 
 var $_13;
 var $_1;
 var $119=HEAP8[(($this2_i_i_i)>>0)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){label=48;break;}else{label=47;break;}
 case 47: 
 var $123=(($__ndflt+8)|0);
 var $124=HEAP32[(($123)>>2)];
 _free($124);
 label=48;break;
 case 48: 
 var $125$0=$_1;
 var $125$1=0;
 var $126$0=$125$0;
 var $126$1=$_13;
 ___resumeException($126$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=___cxa_allocate_exception(8);
 var $1=$0;
 HEAP32[(($1)>>2)]=5400;
 var $2=(($0+4)|0);
 var $3=_strlen(1176);
 var $4=((($3)+(13))|0);
 var $5=(function() { try { __THREW__ = 0; return __Znwj($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $7=$5;
 HEAP32[(($7)>>2)]=$3;
 var $8=(($5+4)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=$3;
 var $10=(($5+8)|0);
 var $11=$10;
 HEAP32[(($11)>>2)]=0;
 var $12=(($5+12)|0);
 var $13=((($3)+(1))|0);
 assert($13 % 1 === 0);(_memcpy($12, 1176, $13)|0);
 var $14=$2;
 HEAP32[(($14)>>2)]=$12;
 HEAP32[(($1)>>2)]=5368;
 ___cxa_throw($0,12432,(260));
 throw "Reached an unreachable!";
 case 3: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;
 ___cxa_free_exception($0);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($refs)-(1))|0);
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=6688;
 var $4=(($this+8)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($4,28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=67;break; }
 case 2: 
 var $5=(($this+144)|0);
 var $6=$5;
 HEAP8[(($6)>>0)]=2;
 var $7=$5;
 var $8=(($7+1)|0);
 HEAP8[(($8)>>0)]=67;
 var $9=(($7+2)|0);
 HEAP8[(($9)>>0)]=0;
 var $10=(($4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($this+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==($11|0);
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 var $__new_last2_i_i_i=$11;
 var $scevgep_i_i_i=((($13)-(4))|0);
 var $15=$scevgep_i_i_i;
 var $16=((($15)-($__new_last2_i_i_i))|0);
 var $17=$16>>>2;
 var $18=$17^-1;
 var $scevgep4_i_i_i=(($13+($18<<2))|0);
 HEAP32[(($12)>>2)]=$scevgep4_i_i_i;
 label=4;break;
 case 4: 
 HEAP32[((16564)>>2)]=0;
 HEAP32[((16560)>>2)]=6392;
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=68;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16560,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=68;break; }
 case 6: 
 HEAP32[((16556)>>2)]=0;
 HEAP32[((16552)>>2)]=6352;
 var $21=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17552) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=68;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16552,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=68;break; }
 case 8: 
 __ZNSt3__15ctypeIcEC2EPKtbj(16776,0,0,1);
 var $22=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=68;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16776,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=68;break; }
 case 10: 
 HEAP32[((16772)>>2)]=0;
 HEAP32[((16768)>>2)]=6720;
 var $23=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=68;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16768,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=68;break; }
 case 12: 
 HEAP32[((16588)>>2)]=0;
 HEAP32[((16584)>>2)]=6488;
 var $24=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=68;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16584,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=68;break; }
 case 14: 
 HEAP32[((16572)>>2)]=0;
 HEAP32[((16568)>>2)]=6432;
 var $25=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $27$0 = ___cxa_find_matching_catch(); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;label=69;break;
 case 16: 
 HEAP32[((16576)>>2)]=$25;
 var $28=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=68;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16568,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=68;break; }
 case 18: 
 HEAP32[((16596)>>2)]=0;
 HEAP32[((16592)>>2)]=6544;
 var $29=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=68;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16592,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=68;break; }
 case 20: 
 HEAP32[((16604)>>2)]=0;
 HEAP32[((16600)>>2)]=6600;
 var $30=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=68;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16600,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=68;break; }
 case 22: 
 HEAP32[((16484)>>2)]=0;
 HEAP32[((16480)>>2)]=5896;
 HEAP8[((16488)>>0)]=46;
 HEAP8[((16489)>>0)]=44;
 HEAP32[((16492)>>2)]=0; HEAP32[((16496)>>2)]=0; HEAP32[((16500)>>2)]=0;
 var $31=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=68;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16480,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=68;break; }
 case 24: 
 HEAP32[((16452)>>2)]=0;
 HEAP32[((16448)>>2)]=5848;
 HEAP32[((16456)>>2)]=46;
 HEAP32[((16460)>>2)]=44;
 HEAP32[((16464)>>2)]=0; HEAP32[((16468)>>2)]=0; HEAP32[((16472)>>2)]=0;
 var $32=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=68;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16448,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=68;break; }
 case 26: 
 HEAP32[((16548)>>2)]=0;
 HEAP32[((16544)>>2)]=6280;
 var $33=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=68;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16544,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=68;break; }
 case 28: 
 HEAP32[((16540)>>2)]=0;
 HEAP32[((16536)>>2)]=6208;
 var $34=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=68;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16536,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=68;break; }
 case 30: 
 HEAP32[((16532)>>2)]=0;
 HEAP32[((16528)>>2)]=6144;
 var $35=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=68;break; }
 case 31: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16528,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=68;break; }
 case 32: 
 HEAP32[((16524)>>2)]=0;
 HEAP32[((16520)>>2)]=6080;
 var $36=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=68;break; }
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16520,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=68;break; }
 case 34: 
 HEAP32[((16820)>>2)]=0;
 HEAP32[((16816)>>2)]=7824;
 var $37=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=68;break; }
 case 35: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16816,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=68;break; }
 case 36: 
 HEAP32[((16812)>>2)]=0;
 HEAP32[((16808)>>2)]=7760;
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=68;break; }
 case 37: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16808,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=68;break; }
 case 38: 
 HEAP32[((16804)>>2)]=0;
 HEAP32[((16800)>>2)]=7696;
 var $39=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=68;break; }
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16800,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=68;break; }
 case 40: 
 HEAP32[((16796)>>2)]=0;
 HEAP32[((16792)>>2)]=7632;
 var $40=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(18336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=68;break; }
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16792,$40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=68;break; }
 case 42: 
 HEAP32[((16380)>>2)]=0;
 HEAP32[((16376)>>2)]=5552;
 var $41=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=68;break; }
 case 43: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16376,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=68;break; }
 case 44: 
 HEAP32[((16372)>>2)]=0;
 HEAP32[((16368)>>2)]=5512;
 var $42=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=68;break; }
 case 45: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16368,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=68;break; }
 case 46: 
 HEAP32[((16364)>>2)]=0;
 HEAP32[((16360)>>2)]=5472;
 var $43=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=68;break; }
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16360,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=68;break; }
 case 48: 
 HEAP32[((16356)>>2)]=0;
 HEAP32[((16352)>>2)]=5432;
 var $44=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=68;break; }
 case 49: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16352,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=68;break; }
 case 50: 
 HEAP32[((16436)>>2)]=0;
 HEAP32[((16432)>>2)]=5752;
 HEAP32[((16440)>>2)]=5800;
 var $45=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=68;break; }
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16432,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=68;break; }
 case 52: 
 HEAP32[((16420)>>2)]=0;
 HEAP32[((16416)>>2)]=5656;
 HEAP32[((16424)>>2)]=5704;
 var $46=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=68;break; }
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16416,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=68;break; }
 case 54: 
 HEAP32[((16404)>>2)]=0;
 HEAP32[((16400)>>2)]=6656;
 var $47=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=55;break; }
 case 55: 
 var $49$0 = ___cxa_find_matching_catch(); var $49$1 = tempRet0;
 var $eh_lpad_body$1=$49$1;var $eh_lpad_body$0=$49$0;label=69;break;
 case 56: 
 HEAP32[((16408)>>2)]=$47;
 HEAP32[((16400)>>2)]=5624;
 var $51=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=68;break; }
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16400,$51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=68;break; }
 case 58: 
 HEAP32[((16388)>>2)]=0;
 HEAP32[((16384)>>2)]=6656;
 var $52=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=59;break; }
 case 59: 
 var $54$0 = ___cxa_find_matching_catch(); var $54$1 = tempRet0;
 var $eh_lpad_body$1=$54$1;var $eh_lpad_body$0=$54$0;label=69;break;
 case 60: 
 HEAP32[((16392)>>2)]=$52;
 HEAP32[((16384)>>2)]=5592;
 var $56=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=68;break; }
 case 61: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16384,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=68;break; }
 case 62: 
 HEAP32[((16516)>>2)]=0;
 HEAP32[((16512)>>2)]=5984;
 var $57=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=68;break; }
 case 63: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16512,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=68;break; }
 case 64: 
 HEAP32[((16508)>>2)]=0;
 HEAP32[((16504)>>2)]=5944;
 var $58=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=68;break; }
 case 65: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,16504,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=68;break; }
 case 66: 
 return;
 case 67: 
 var $60$0 = ___cxa_find_matching_catch(); var $60$1 = tempRet0;
 var $61=$60$0;
 var $62=$60$1;
 var $_1=$62;var $_12=$61;label=72;break;
 case 68: 
 var $64$0 = ___cxa_find_matching_catch(); var $64$1 = tempRet0;
 var $eh_lpad_body$1=$64$1;var $eh_lpad_body$0=$64$0;label=69;break;
 case 69: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $65=$eh_lpad_body$0;
 var $66=$eh_lpad_body$1;
 var $67=HEAP8[(($6)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=71;break;}else{label=70;break;}
 case 70: 
 var $71=(($this+152)|0);
 var $72=HEAP32[(($71)>>2)];
 _free($72);
 label=71;break;
 case 71: 
 var $73=(($4)|0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($73);
 var $_1=$66;var $_12=$65;label=72;break;
 case 72: 
 var $_12;
 var $_1;
 var $75$0=$_12;
 var $75$1=0;
 var $76$0=$75$0;
 var $76$1=$_1;
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale7classicEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18440)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18440);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(16608,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 HEAP32[((16304)>>2)]=16608;
 HEAP32[((16296)>>2)]=16304;

 label=5;break;
 case 5: 
 var $9=HEAP32[((16296)>>2)];
 return $9;
 case 6: 
 var $11$0 = ___cxa_find_matching_catch(); var $11$1 = tempRet0;

 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i_i_sroa_20=sp;
 var $1=(($f)|0);
 var $2=(($f+4)|0);
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $4=(($this+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>($id>>>0);
 if($12){var $106=$7;label=33;break;}else{label=2;break;}
 case 2: 
 var $14=((($id)+(1))|0);
 var $15=($14>>>0)>($11>>>0);
 if($15){label=3;break;}else{label=26;break;}
 case 3: 
 var $17=((($14)-($11))|0);
 var $18=$__v_i_i_sroa_20;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $19=(($this+16)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=((($21)-($8))|0);
 var $23=$22>>2;
 var $24=($23>>>0)<($17>>>0);
 if($24){label=7;break;}else{var $_0_i1_i_i=$17;var $26=$5;label=4;break;}
 case 4: 
 var $26;
 var $_0_i1_i_i;
 var $27=($26|0)==0;
 if($27){var $29=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($26)>>2)]=0;
 var $_pre1_i_i_i=HEAP32[(($4)>>2)];
 var $29=$_pre1_i_i_i;label=6;break;
 case 6: 
 var $29;
 var $30=(($29+4)|0);
 HEAP32[(($4)>>2)]=$30;
 var $31=((($_0_i1_i_i)-(1))|0);
 var $32=($31|0)==0;
 if($32){label=25;break;}else{var $_0_i1_i_i=$31;var $26=$30;label=4;break;}
 case 7: 
 var $34=(($this+24)|0);
 var $35=($14>>>0)>1073741823;
 if($35){label=8;break;}else{label=10;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=29;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $38=((($21)-($9))|0);
 var $39=$38>>2;
 var $40=($39>>>0)<536870911;
 if($40){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP32[(($__v_i_i_sroa_20)>>2)]=0;
 var $_0_i_i_i38=1073741823;label=15;break;
 case 12: 
 var $42=$38>>1;
 var $43=($42>>>0)<($14>>>0);
 var $44=($43?$14:$42);
 HEAP32[(($__v_i_i_sroa_20)>>2)]=0;
 var $45=($44|0)==0;
 if($45){var $56=0;var $_0_i_i_i4=0;label=17;break;}else{label=13;break;}
 case 13: 
 var $47=(($this+136)|0);
 var $48=HEAP8[(($47)>>0)];
 var $_not_i_i_i_i_i=(($48<<24)>>24)==0;
 var $49=($44>>>0)<29;
 var $or_cond_i_i_i_i_i=$_not_i_i_i_i_i&$49;
 if($or_cond_i_i_i_i_i){label=14;break;}else{var $_0_i_i_i38=$44;label=15;break;}
 case 14: 
 HEAP8[(($47)>>0)]=1;
 var $51=$34;
 var $56=$51;var $_0_i_i_i4=$44;label=17;break;
 case 15: 
 var $_0_i_i_i38;
 var $53=$_0_i_i_i38<<2;
 var $54=(function() { try { __THREW__ = 0; return __Znwj($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=29;break; }
 case 16: 
 var $55=$54;
 var $56=$55;var $_0_i_i_i4=$_0_i_i_i38;label=17;break;
 case 17: 
 var $_0_i_i_i4;
 var $56;
 var $57=(($56+($11<<2))|0);
 var $58=(($56+($_0_i_i_i4<<2))|0);
 HEAP32[(($__v_i_i_sroa_20)>>2)]=$58;
 var $_0_i3_i_i=$17;var $__v_i_i_sroa_12_0=$57;label=18;break;
 case 18: 
 var $__v_i_i_sroa_12_0;
 var $_0_i3_i_i;
 var $60=($__v_i_i_sroa_12_0|0)==0;
 if($60){var $62=0;label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__v_i_i_sroa_12_0)>>2)]=0;
 var $62=$__v_i_i_sroa_12_0;label=20;break;
 case 20: 
 var $62;
 var $63=(($62+4)|0);
 var $64=((($_0_i3_i_i)-(1))|0);
 var $65=($64|0)==0;
 if($65){label=21;break;}else{var $_0_i3_i_i=$64;var $__v_i_i_sroa_12_0=$63;label=18;break;}
 case 21: 
 var $66=HEAP32[(($6)>>2)];
 var $67=HEAP32[(($4)>>2)];
 var $68=$67;
 var $69=$66;
 var $70=((($68)-($69))|0);
 var $71=$70>>2;
 var $_sum=((($11)-($71))|0);
 var $72=(($56+($_sum<<2))|0);
 var $73=$72;
 var $74=$66;
 assert($70 % 1 === 0);(_memcpy($73, $74, $70)|0);
 var $75=HEAP32[(($6)>>2)];
 HEAP32[(($6)>>2)]=$72;
 HEAP32[(($4)>>2)]=$63;
 var $76=HEAP32[(($19)>>2)];
 var $77=HEAP32[(($__v_i_i_sroa_20)>>2)];
 HEAP32[(($19)>>2)]=$77;
 HEAP32[(($__v_i_i_sroa_20)>>2)]=$76;
 var $78=($75|0)==0;
 if($78){label=25;break;}else{label=22;break;}
 case 22: 
 var $80=$34;
 var $81=($80|0)==($75|0);
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=(($this+136)|0);
 HEAP8[(($83)>>0)]=0;
 label=25;break;
 case 24: 
 var $85=$75;
 _free($85);
 label=25;break;
 case 25: 
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $_pre_pre=HEAP32[(($6)>>2)];
 var $106=$_pre_pre;label=33;break;
 case 26: 
 var $87=($14>>>0)<($11>>>0);
 if($87){label=27;break;}else{var $106=$7;label=33;break;}
 case 27: 
 var $89=(($7+($14<<2))|0);
 var $90=($5|0)==($89|0);
 if($90){var $106=$7;label=33;break;}else{label=28;break;}
 case 28: 
 var $__new_last2_i_i_i=$89;
 var $scevgep_i_i_i=((($5)-(4))|0);
 var $91=$scevgep_i_i_i;
 var $92=((($91)-($__new_last2_i_i_i))|0);
 var $93=$92>>>2;
 var $94=$93^-1;
 var $scevgep4_i_i_i=(($5+($94<<2))|0);
 HEAP32[(($4)>>2)]=$scevgep4_i_i_i;
 var $106=$7;label=33;break;
 case 29: 
 var $96$0 = ___cxa_find_matching_catch(); var $96$1 = tempRet0;
 var $97=($f|0)==0;
 if($97){label=32;break;}else{label=30;break;}
 case 30: 
 var $99=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+-1,tempValue);
 var $100=($99|0)==0;
 if($100){label=31;break;}else{label=32;break;}
 case 31: 
 var $102=$f;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+8)|0);
 var $105=HEAP32[(($104)>>2)];
 FUNCTION_TABLE[$105]($1);
 label=32;break;
 case 32: 
 ___resumeException($96$0)
 case 33: 
 var $106;
 var $107=(($106+($id<<2))|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){var $120=$106;label=37;break;}else{label=34;break;}
 case 34: 
 var $111=(($108+4)|0);
 var $112=(tempValue=HEAP32[(($111)>>2)],HEAP32[(($111)>>2)]=tempValue+-1,tempValue);
 var $113=($112|0)==0;
 if($113){label=35;break;}else{label=36;break;}
 case 35: 
 var $115=(($108)|0);
 var $116=$108;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+8)|0);
 var $119=HEAP32[(($118)>>2)];
 FUNCTION_TABLE[$119]($115);
 label=36;break;
 case 36: 
 var $_pre2=HEAP32[(($6)>>2)];
 var $120=$_pre2;label=37;break;
 case 37: 
 var $120;
 var $121=(($120+($id<<2))|0);
 HEAP32[(($121)>>2)]=$f;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;


 __ZNSt3__16locale5__impD2Ev($this);
 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6688;
 var $2=(($this+8)|0);
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($4|0)==($6|0);
 if($7){label=7;break;}else{var $i_01=0;var $9=$6;var $8=$4;label=2;break;}
 case 2: 
 var $8;
 var $9;
 var $i_01;
 var $10=(($9+($i_01<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){var $25=$8;var $24=$9;label=6;break;}else{label=3;break;}
 case 3: 
 var $14=(($11+4)|0);
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+-1,tempValue);
 var $16=($15|0)==0;
 if($16){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($11)|0);
 var $19=$11;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 FUNCTION_TABLE[$22]($18);
 label=5;break;
 case 5: 
 var $_pre=HEAP32[(($3)>>2)];
 var $_pre2=HEAP32[(($5)>>2)];
 var $25=$_pre;var $24=$_pre2;label=6;break;
 case 6: 
 var $24;
 var $25;
 var $26=((($i_01)+(1))|0);
 var $27=$25;
 var $28=$24;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($26>>>0)<($30>>>0);
 if($31){var $i_01=$26;var $9=$24;var $8=$25;label=2;break;}else{label=7;break;}
 case 7: 
 var $32=(($this+144)|0);
 var $33=$32;
 var $34=HEAP8[(($33)>>0)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=9;break;}else{label=8;break;}
 case 8: 
 var $38=(($this+152)|0);
 var $39=HEAP32[(($38)>>2)];
 _free($39);
 label=9;break;
 case 9: 
 var $40=(($2)|0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($40);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16locale5__imp9use_facetEl($this_0_1_0_0_val,$this_0_1_0_1_val,$id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this_0_1_0_1_val;
 var $2=$this_0_1_0_0_val;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>($id>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=(($this_0_1_0_0_val+($id<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=___cxa_allocate_exception(4);
 var $10=$9;
 HEAP32[(($10)>>2)]=5240;
 ___cxa_throw($9,12368,(520));
 throw "Reached an unreachable!";
 case 4: 
 return $7;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18432)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18432);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return __ZNSt3__16locale7classicEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 HEAP32[((16312)>>2)]=$9;
 var $10=(($9+4)|0);
 var $11=(tempValue=HEAP32[(($10)>>2)],HEAP32[(($10)>>2)]=tempValue+1,tempValue);

 label=5;break;
 case 5: 
 var $12=(($this)|0);
 var $13=HEAP32[((16312)>>2)];
 HEAP32[(($12)>>2)]=$13;
 var $14=(($13+4)|0);
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 return;
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(0); var $16$1 = tempRet0;

 var $17=$16$0;
 ___clang_call_terminate($17);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id5__getEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==-1;
 if($3){label=18;break;}else{label=2;break;}
 case 2: 
 var $5;
 var $6=HEAP32[(($1)>>2)];
 var $7=($6|0)==1;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $8=_pthread_cond_wait(17328,17304);
 var $9=HEAP32[(($1)>>2)];
 var $10=($9|0)==1;
 if($10){label=3;break;}else{label=4;break;}
 case 4: 
 var $11=HEAP32[(($1)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=14;break;}
 case 5: 
 HEAP32[(($1)>>2)]=1;
 var $14=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 __ZNSt3__16locale2id6__initEv($this);
 var $15=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(17304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($1)>>2)]=-1;
 var $17=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $19=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(17328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=9;break; }
 case 9: 
 var $21$0 = ___cxa_find_matching_catch(0); var $21$1 = tempRet0;
 var $22=$21$0;
 var $23=___cxa_begin_catch($22);
 var $24=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(17304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($1)>>2)]=0;
 var $26=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(17304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $28=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(17328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=13;break; }
 case 13: 
 var $31$0 = ___cxa_find_matching_catch(); var $31$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 14: 
 var $33;
 label=18;break;
 case 15: 
 ___resumeException($31$0)
 case 16: 
 var $36$0 = ___cxa_find_matching_catch(0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $39=(($this+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)-(1))|0);
 return $41;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id6__initEv($this){
 var label=0;


 var $1=(tempValue=HEAP32[((17600)>>2)],HEAP32[((17600)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $12=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<1))|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$8&$m;
 var $10=(($9<<16)>>16)!=0;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=9;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $2=$scevgep;
 var $3=((($2)-($low5))|0);
 var $4=$3>>>2;
 var $5=((($4)+(1))|0);
 var $_012=$low;var $_03=$vec;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $7=HEAP32[(($_012)>>2)];
 var $isascii=($7>>>0)<128;
 if($isascii){label=4;break;}else{var $_off0=0;label=7;break;}
 case 4: 
 var $9=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 6: 
 var $13=HEAP32[(($9)>>2)];
 var $14=(($13+($7<<1))|0);
 var $15=HEAP16[(($14)>>1)];
 var $_off0=$15;label=7;break;
 case 7: 
 var $_off0;
 HEAP16[(($_03)>>1)]=$_off0;
 var $17=(($_012+4)|0);
 var $18=(($_03+2)|0);
 var $19=($17|0)==($high|0);
 if($19){label=8;break;}else{var $_012=$17;var $_03=$18;label=3;break;}
 case 8: 
 var $scevgep7=(($low+($5<<2))|0);
 var $_01_lcssa=$scevgep7;label=9;break;
 case 9: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_01=$low;label=2;break;}
 case 2: 
 var $_01;
 var $2=HEAP32[(($_01)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=$10&$m;
 var $12=(($11<<16)>>16)==0;
 if($12){label=6;break;}else{var $_0_lcssa=$_01;label=7;break;}
 case 6: 
 var $14=(($_01+4)|0);
 var $15=($14|0)==($high|0);
 if($15){var $_0_lcssa=$high;label=7;break;}else{var $_01=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_01=$low;label=3;break;}
 case 2: 
 var $3=($15|0)==($high|0);
 if($3){var $_0_lcssa=$high;label=7;break;}else{var $_01=$15;label=3;break;}
 case 3: 
 var $_01;
 var $4=HEAP32[(($_01)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_01;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 6: 
 var $10=HEAP32[(($6)>>2)];
 var $11=(($10+($4<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=$12&$m;
 var $14=(($13<<16)>>16)==0;
 var $15=(($_01+4)|0);
 if($14){var $_0_lcssa=$_01;label=7;break;}else{label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=9;break;}else{label=2;break;}
 case 2: 
 var $low3=$low;
 var $scevgep=((($high)-(4))|0);
 var $2=$scevgep;
 var $3=((($2)-($low3))|0);
 var $4=$3>>>2;
 var $5=((($4)+(1))|0);
 var $_01=$low;label=3;break;
 case 3: 
 var $_01;
 var $7=HEAP32[(($_01)>>2)];
 var $isascii=($7>>>0)<128;
 if($isascii){label=4;break;}else{var $17=$7;label=7;break;}
 case 4: 
 var $9=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 6: 
 var $13=HEAP32[(($9)>>2)];
 var $14=(($13+($7<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $17=$15;label=7;break;
 case 7: 
 var $17;
 HEAP32[(($_01)>>2)]=$17;
 var $18=(($_01+4)|0);
 var $19=($18|0)==($high|0);
 if($19){label=8;break;}else{var $_01=$18;label=3;break;}
 case 8: 
 var $scevgep5=(($low+($5<<2))|0);
 var $_0_lcssa=$scevgep5;label=9;break;
 case 9: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=9;break;}else{label=2;break;}
 case 2: 
 var $low3=$low;
 var $scevgep=((($high)-(4))|0);
 var $2=$scevgep;
 var $3=((($2)-($low3))|0);
 var $4=$3>>>2;
 var $5=((($4)+(1))|0);
 var $_01=$low;label=3;break;
 case 3: 
 var $_01;
 var $7=HEAP32[(($_01)>>2)];
 var $isascii=($7>>>0)<128;
 if($isascii){label=4;break;}else{var $17=$7;label=7;break;}
 case 4: 
 var $9=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 6: 
 var $13=HEAP32[(($9)>>2)];
 var $14=(($13+($7<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $17=$15;label=7;break;
 case 7: 
 var $17;
 HEAP32[(($_01)>>2)]=$17;
 var $18=(($_01+4)|0);
 var $19=($18|0)==($high|0);
 if($19){label=8;break;}else{var $_01=$18;label=3;break;}
 case 8: 
 var $scevgep5=(($low+($5<<2))|0);
 var $_0_lcssa=$scevgep5;label=9;break;
 case 9: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;


 var $1=(($c<<24)>>24);
 return $1;
}


function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[(($_012)>>0)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_03)>>2)]=$3;
 var $4=(($_012+1)|0);
 var $5=(($_03+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_01_lcssa=$high;label=3;break;}else{var $_012=$4;var $_03=$5;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;


 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}


function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $2=$scevgep;
 var $3=((($2)-($low5))|0);
 var $4=$3>>>2;
 var $5=((($4)+(1))|0);
 var $_012=$low;var $_03=$dest;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $7=HEAP32[(($_012)>>2)];
 var $isascii=($7>>>0)<128;
 var $8=(($7)&255);
 var $_dfault=($isascii?$8:$dfault);
 HEAP8[(($_03)>>0)]=$_dfault;
 var $9=(($_012+4)|0);
 var $10=(($_03+1)|0);
 var $11=($9|0)==($high|0);
 if($11){label=4;break;}else{var $_012=$9;var $_03=$10;label=3;break;}
 case 4: 
 var $scevgep7=(($low+($5<<2))|0);
 var $_01_lcssa=$scevgep7;label=5;break;
 case 5: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($refs)-(1))|0);
 var $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($this)|0);
 HEAP32[(($3)>>2)]=6800;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=$tab;
 var $5=(($this+12)|0);
 var $6=($del&1);
 HEAP8[(($5)>>0)]=$6;
 var $7=($tab|0)==0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $11$0 = ___cxa_find_matching_catch(0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 4: 
 var $13=HEAP32[(($9)>>2)];
 HEAP32[(($4)>>2)]=$13;
 label=5;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6800;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[(($6)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 _free($10);
 label=4;break;
 case 4: 
 var $11=$this;
 _free($11);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6800;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[(($6)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP8[(($_02)>>0)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[(($_02)>>0)]=$14;
 var $15=(($_02+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=(($c<<24)>>24);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP8[(($_02)>>0)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[(($_02)>>0)]=$14;
 var $15=(($_02+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;


 return $c;
}


function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[(($_012)>>0)];
 HEAP8[(($_03)>>0)]=$2;
 var $3=(($_012+1)|0);
 var $4=(($_03+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_012=$3;var $_03=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;


 var $isascii1=(($c<<24)>>24)>-1;
 var $c_dfault=($isascii1?$c:$dfault);
 return $c_dfault;
}


function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_013=$low;var $_04=$dest;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP8[(($_013)>>0)];
 var $isascii2=(($2<<24)>>24)>-1;
 var $_dfault=($isascii2?$2:$dfault);
 HEAP8[(($_04)>>0)]=$_dfault;
 var $3=(($_013+1)|0);
 var $4=(($_04+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_013=$3;var $_04=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;


 var $2=$end;
 var $3=$frm;
 var $4=((($2)-($3))|0);
 var $5=($4>>>0)<($mx>>>0);
 var $6=($5?$4:$mx);
 return $6;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 1;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;


 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=$this;
 _free($1);
 return;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i=sp;
 var $ws_i=(sp)+(256);
 var $tmp=(sp)+(264);
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_054=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $125=$frm;label=46;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_054=$6;label=4;break;}
 case 4: 
 var $fend_054;
 var $4=HEAP32[(($fend_054)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_054+4)|0);
 if($5){var $fend_0_lcssa=$fend_054;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 if($7){var $125=$frm;label=46;break;}else{label=6;break;}
 case 6: 
 var $8=$to_end;
 var $9=(($this+8)|0);
 var $10=(($tmp)|0);
 var $11=$ws_i;
 var $12=(($buf_i)|0);
 var $_0247=$to;var $_0148=$frm;var $fend_149=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_149;
 var $_0148;
 var $_0247;
 var $14=$fend_149;
 var $15=$_0148;
 var $16=((($14)-($15))|0);
 var $17=$16>>2;
 var $18=$_0247;
 var $19=((($8)-($18))|0);
 var $20=HEAP32[(($9)>>2)];
 var $21=_uselocale($20);
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 var $22=HEAP32[(($frm_nxt)>>2)];
 HEAP32[(($ws_i)>>2)]=$22;
 var $23=($_0247|0)!=0;
 var $n__i=($23?$19:256);
 var $dst__i=($23?$_0247:$12);
 var $24=($22|0)!=0;
 var $25=($n__i|0)!=0;
 var $or_cond27_i=$24&$25;
 if($or_cond27_i){var $_01428_i=$n__i;var $cnt_029_i=0;var $s_030_i=$dst__i;var $_031_i=$17;var $26=$22;label=8;break;}else{var $_014_lcssa_i=$n__i;var $cnt_0_lcssa_i=0;var $s_0_lcssa_i=$dst__i;var $_0_lcssa_i=$17;var $42=$22;label=13;break;}
 case 8: 
 var $26;
 var $_031_i;
 var $s_030_i;
 var $cnt_029_i;
 var $_01428_i;
 var $27=($_031_i>>>0)>=($_01428_i>>>0);
 var $28=($_031_i>>>0)>32;
 var $or_cond13_i=$27|$28;
 if($or_cond13_i){label=9;break;}else{var $_014_lcssa_i=$_01428_i;var $cnt_0_lcssa_i=$cnt_029_i;var $s_0_lcssa_i=$s_030_i;var $_0_lcssa_i=$_031_i;var $42=$26;label=13;break;}
 case 9: 
 var $_014__0_i=($27?$_01428_i:$_031_i);
 var $29=((($_031_i)-($_014__0_i))|0);
 var $30=_wcsrtombs($s_030_i,$ws_i,$_014__0_i);
 var $31=($30|0)==-1;
 if($31){var $cnt_3_i=-1;label=18;break;}else{label=10;break;}
 case 10: 
 var $33=($s_030_i|0)==($12|0);
 if($33){var $s_1_i=$12;var $_115_i=$_01428_i;label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($s_030_i+$30)|0);
 var $36=((($_01428_i)-($30))|0);
 var $s_1_i=$35;var $_115_i=$36;label=12;break;
 case 12: 
 var $_115_i;
 var $s_1_i;
 var $38=((($30)+($cnt_029_i))|0);
 var $39=HEAP32[(($ws_i)>>2)];
 var $40=($39|0)!=0;
 var $41=($_115_i|0)!=0;
 var $or_cond_i=$40&$41;
 if($or_cond_i){var $_01428_i=$_115_i;var $cnt_029_i=$38;var $s_030_i=$s_1_i;var $_031_i=$29;var $26=$39;label=8;break;}else{var $_014_lcssa_i=$_115_i;var $cnt_0_lcssa_i=$38;var $s_0_lcssa_i=$s_1_i;var $_0_lcssa_i=$29;var $42=$39;label=13;break;}
 case 13: 
 var $42;
 var $_0_lcssa_i;
 var $s_0_lcssa_i;
 var $cnt_0_lcssa_i;
 var $_014_lcssa_i;
 var $43=($42|0)!=0;
 var $44=($_014_lcssa_i|0)!=0;
 var $or_cond5_i=$43&$44;
 var $45=($_0_lcssa_i|0)!=0;
 var $or_cond8_i=$or_cond5_i&$45;
 if($or_cond8_i){var $_2_i=$_0_lcssa_i;var $s_2_i=$s_0_lcssa_i;var $cnt_2_i=$cnt_0_lcssa_i;var $_3_i=$_014_lcssa_i;var $46=$42;label=14;break;}else{var $cnt_3_i=$cnt_0_lcssa_i;label=18;break;}
 case 14: 
 var $46;
 var $_3_i;
 var $cnt_2_i;
 var $s_2_i;
 var $_2_i;
 var $47=HEAP32[(($46)>>2)];
 var $48=_wcrtomb($s_2_i,$47);
 var $49=((($48)+(1))|0);
 var $50=($49>>>0)<2;
 if($50){label=15;break;}else{label=17;break;}
 case 15: 
 var $52=($48|0)==0;
 if($52){label=16;break;}else{var $cnt_3_i=-1;label=18;break;}
 case 16: 
 HEAP32[(($ws_i)>>2)]=0;
 var $cnt_3_i=$cnt_2_i;label=18;break;
 case 17: 
 var $55=(($46+4)|0);
 HEAP32[(($ws_i)>>2)]=$55;
 var $56=((($_2_i)-(1))|0);
 var $57=(($s_2_i+$48)|0);
 var $58=((($_3_i)-($48))|0);
 var $59=((($cnt_2_i)+(1))|0);
 var $_old4_i=($_3_i|0)!=($48|0);
 var $_old7_i=($56|0)!=0;
 var $or_cond10_i=$_old4_i&$_old7_i;
 if($or_cond10_i){var $_2_i=$56;var $s_2_i=$57;var $cnt_2_i=$59;var $_3_i=$58;var $46=$55;label=14;break;}else{var $cnt_3_i=$59;label=18;break;}
 case 18: 
 var $cnt_3_i;
 if($23){label=19;break;}else{label=20;break;}
 case 19: 
 var $61=HEAP32[(($ws_i)>>2)];
 HEAP32[(($frm_nxt)>>2)]=$61;
 label=20;break;
 case 20: 
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $63=($21|0)==0;
 if($63){label=23;break;}else{label=21;break;}
 case 21: 
 var $65=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $67$0 = ___cxa_find_matching_catch(0); var $67$1 = tempRet0;
 var $68=$67$0;
 ___clang_call_terminate($68);
 throw "Reached an unreachable!";
 case 23: 
 if(($cnt_3_i|0)==-1){ label=24;break;}else if(($cnt_3_i|0)==0){ var $_0=1;label=47;break;}else{label=31;break;}
 case 24: 
 HEAP32[(($to_nxt)>>2)]=$_0247;
 var $70=HEAP32[(($frm_nxt)>>2)];
 var $71=($_0148|0)==($70|0);
 if($71){var $_1_lcssa=$_0148;label=30;break;}else{var $_19=$_0148;var $72=$_0247;label=25;break;}
 case 25: 
 var $72;
 var $_19;
 var $73=HEAP32[(($_19)>>2)];
 var $74=HEAP32[(($9)>>2)];
 var $75=_uselocale($74);
 var $76=_wcrtomb($72,$73);
 var $77=($75|0)==0;
 if($77){label=28;break;}else{label=26;break;}
 case 26: 
 var $79=(function() { try { __THREW__ = 0; return _uselocale($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=27;break; }
 case 27: 
 var $81$0 = ___cxa_find_matching_catch(0); var $81$1 = tempRet0;
 var $82=$81$0;
 ___clang_call_terminate($82);
 throw "Reached an unreachable!";
 case 28: 
 var $83=($76|0)==-1;
 if($83){var $_1_lcssa=$_19;label=30;break;}else{label=29;break;}
 case 29: 
 var $85=HEAP32[(($to_nxt)>>2)];
 var $86=(($85+$76)|0);
 HEAP32[(($to_nxt)>>2)]=$86;
 var $87=(($_19+4)|0);
 var $88=HEAP32[(($frm_nxt)>>2)];
 var $89=($87|0)==($88|0);
 if($89){var $_1_lcssa=$87;label=30;break;}else{var $_19=$87;var $72=$86;label=25;break;}
 case 30: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=47;break;
 case 31: 
 var $91=HEAP32[(($to_nxt)>>2)];
 var $92=(($91+$cnt_3_i)|0);
 HEAP32[(($to_nxt)>>2)]=$92;
 var $93=($92|0)==($to_end|0);
 if($93){label=45;break;}else{label=32;break;}
 case 32: 
 var $95=($fend_149|0)==($frm_end|0);
 if($95){label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre98=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $122=$_pre98;var $121=$92;label=44;break;
 case 34: 
 var $97=HEAP32[(($9)>>2)];
 var $98=_uselocale($97);
 HEAP8[(($10)>>0)]=0;
 var $99=($98|0)==0;
 if($99){label=37;break;}else{label=35;break;}
 case 35: 
 var $101=(function() { try { __THREW__ = 0; return _uselocale($98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=36;break; }
 case 36: 
 var $103$0 = ___cxa_find_matching_catch(0); var $103$1 = tempRet0;
 var $104=$103$0;
 ___clang_call_terminate($104);
 throw "Reached an unreachable!";
 case 37: 
 var $105=HEAP32[(($to_nxt)>>2)];
 var $106=($105|0)==($to_end|0);
 if($106){var $_0=1;label=47;break;}else{var $n_011=0;var $p_012=$10;var $108=$105;var $107=0;label=38;break;}
 case 38: 
 var $107;
 var $108;
 var $p_012;
 var $n_011;
 var $109=(($108+1)|0);
 HEAP32[(($to_nxt)>>2)]=$109;
 HEAP8[(($108)>>0)]=$107;
 var $110=($n_011|0)==0;
 if($110){label=40;break;}else{label=39;break;}
 case 39: 
 var $111=(($p_012+1)|0);
 var $_pre101=HEAP32[(($to_nxt)>>2)];
 var $phitmp=((($n_011)-(1))|0);
 var $_pre2=HEAP8[(($111)>>0)];
 var $n_011=$phitmp;var $p_012=$111;var $108=$_pre101;var $107=$_pre2;label=38;break;
 case 40: 
 var $112=HEAP32[(($frm_nxt)>>2)];
 var $113=(($112+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$113;
 var $114=($113|0)==($frm_end|0);
 if($114){var $fend_2_lcssa=$frm_end;label=43;break;}else{var $fend_215=$113;label=42;break;}
 case 41: 
 var $116=($119|0)==($frm_end|0);
 if($116){var $fend_2_lcssa=$frm_end;label=43;break;}else{var $fend_215=$119;label=42;break;}
 case 42: 
 var $fend_215;
 var $117=HEAP32[(($fend_215)>>2)];
 var $118=($117|0)==0;
 var $119=(($fend_215+4)|0);
 if($118){var $fend_2_lcssa=$fend_215;label=43;break;}else{label=41;break;}
 case 43: 
 var $fend_2_lcssa;
 var $_pre99=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $122=$113;var $121=$_pre99;label=44;break;
 case 44: 
 var $121;
 var $122;
 var $fend_3;
 var $123=($122|0)==($frm_end|0);
 var $124=($121|0)==($to_end|0);
 var $or_cond=$123|$124;
 if($or_cond){var $125=$122;label=46;break;}else{var $_0247=$121;var $_0148=$122;var $fend_149=$fend_3;label=7;break;}
 case 45: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $125=$_pre;label=46;break;
 case 46: 
 var $125;
 var $not_=($125|0)!=($frm_end|0);
 var $126=($not_&1);
 var $_0=$126;label=47;break;
 case 47: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf_i=sp;
 var $s_i=(sp)+(1024);
 var $save_state=(sp)+(1032);
 var $tmpcast=$save_state;
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_061=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $129=$frm;label=48;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_061=$6;label=4;break;}
 case 4: 
 var $fend_061;
 var $4=HEAP8[(($fend_061)>>0)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_061+1)|0);
 if($5){var $fend_0_lcssa=$fend_061;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 if($7){var $129=$frm;label=48;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $11=$s_i;
 var $12=$wbuf_i;
 var $13=(($wbuf_i)|0);
 var $14=(($st)|0);
 var $_0254=$to;var $_0155=$frm;var $fend_156=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_156;
 var $_0155;
 var $_0254;
 var $ld$0$0=(($8)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $17=$fend_156;
 var $18=$_0155;
 var $19=((($17)-($18))|0);
 var $20=$_0254;
 var $21=((($9)-($20))|0);
 var $22=$21>>2;
 var $23=HEAP32[(($10)>>2)];
 var $24=_uselocale($23);
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $$etemp$5$0=1024;
 var $$etemp$5$1=0;

 var $25=HEAP32[(($frm_nxt)>>2)];
 HEAP32[(($s_i)>>2)]=$25;
 var $26=($_0254|0)!=0;
 var $wn__i=($26?$22:256);
 var $wcs__i=($26?$_0254:$13);
 var $27=($25|0)!=0;
 var $28=($wn__i|0)!=0;
 var $or_cond27_i=$27&$28;
 if($or_cond27_i){var $_01428_i=$wn__i;var $cnt_029_i=0;var $ws_030_i=$wcs__i;var $_031_i=$19;var $29=$25;label=8;break;}else{var $_014_lcssa_i=$wn__i;var $cnt_0_lcssa_i=0;var $ws_0_lcssa_i=$wcs__i;var $_0_lcssa_i=$19;var $46=$25;label=13;break;}
 case 8: 
 var $29;
 var $_031_i;
 var $ws_030_i;
 var $cnt_029_i;
 var $_01428_i;
 var $30=$_031_i>>>2;
 var $31=($30>>>0)>=($_01428_i>>>0);
 var $32=($_031_i>>>0)>131;
 var $or_cond13_i=$31|$32;
 if($or_cond13_i){label=9;break;}else{var $_014_lcssa_i=$_01428_i;var $cnt_0_lcssa_i=$cnt_029_i;var $ws_0_lcssa_i=$ws_030_i;var $_0_lcssa_i=$_031_i;var $46=$29;label=13;break;}
 case 9: 
 var $_014__i=($31?$_01428_i:$30);
 var $33=((($_031_i)-($_014__i))|0);
 var $34=_mbsrtowcs($ws_030_i,$s_i,$_014__i,$st);
 var $35=($34|0)==-1;
 if($35){var $cnt_3_i=-1;label=19;break;}else{label=10;break;}
 case 10: 
 var $37=($ws_030_i|0)==($13|0);
 if($37){var $ws_1_i=$13;var $_115_i=$_01428_i;label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($ws_030_i+($34<<2))|0);
 var $40=((($_01428_i)-($34))|0);
 var $ws_1_i=$39;var $_115_i=$40;label=12;break;
 case 12: 
 var $_115_i;
 var $ws_1_i;
 var $42=((($34)+($cnt_029_i))|0);
 var $43=HEAP32[(($s_i)>>2)];
 var $44=($43|0)!=0;
 var $45=($_115_i|0)!=0;
 var $or_cond_i=$44&$45;
 if($or_cond_i){var $_01428_i=$_115_i;var $cnt_029_i=$42;var $ws_030_i=$ws_1_i;var $_031_i=$33;var $29=$43;label=8;break;}else{var $_014_lcssa_i=$_115_i;var $cnt_0_lcssa_i=$42;var $ws_0_lcssa_i=$ws_1_i;var $_0_lcssa_i=$33;var $46=$43;label=13;break;}
 case 13: 
 var $46;
 var $_0_lcssa_i;
 var $ws_0_lcssa_i;
 var $cnt_0_lcssa_i;
 var $_014_lcssa_i;
 var $47=($46|0)!=0;
 var $48=($_014_lcssa_i|0)!=0;
 var $or_cond5_i=$47&$48;
 var $49=($_0_lcssa_i|0)!=0;
 var $or_cond8_i=$or_cond5_i&$49;
 if($or_cond8_i){var $_2_i=$_0_lcssa_i;var $ws_2_i=$ws_0_lcssa_i;var $cnt_2_i=$cnt_0_lcssa_i;var $_3_i=$_014_lcssa_i;var $50=$46;label=14;break;}else{var $cnt_3_i=$cnt_0_lcssa_i;label=19;break;}
 case 14: 
 var $50;
 var $_3_i;
 var $cnt_2_i;
 var $ws_2_i;
 var $_2_i;
 var $51=_mbrtowc($ws_2_i,$50,$_2_i,$st);
 var $52=((($51)+(2))|0);
 var $53=($52>>>0)<3;
 if($53){label=15;break;}else{label=18;break;}
 case 15: 
 if(($51|0)==0){ label=16;break;}else if(($51|0)==-1){ var $cnt_3_i=-1;label=19;break;}else{label=17;break;}
 case 16: 
 HEAP32[(($s_i)>>2)]=0;
 var $cnt_3_i=$cnt_2_i;label=19;break;
 case 17: 
 HEAP32[(($14)>>2)]=0;
 var $cnt_3_i=$cnt_2_i;label=19;break;
 case 18: 
 var $58=(($50+$51)|0);
 HEAP32[(($s_i)>>2)]=$58;
 var $59=((($_2_i)-($51))|0);
 var $60=(($ws_2_i+4)|0);
 var $61=((($_3_i)-(1))|0);
 var $62=((($cnt_2_i)+(1))|0);
 var $_old4_i=($61|0)!=0;
 var $_old7_i=($_2_i|0)!=($51|0);
 var $or_cond10_i=$_old4_i&$_old7_i;
 if($or_cond10_i){var $_2_i=$59;var $ws_2_i=$60;var $cnt_2_i=$62;var $_3_i=$61;var $50=$58;label=14;break;}else{var $cnt_3_i=$62;label=19;break;}
 case 19: 
 var $cnt_3_i;
 if($26){label=20;break;}else{label=21;break;}
 case 20: 
 var $64=HEAP32[(($s_i)>>2)];
 HEAP32[(($frm_nxt)>>2)]=$64;
 label=21;break;
 case 21: 
 var $$etemp$6$0=1024;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $66=($24|0)==0;
 if($66){label=24;break;}else{label=22;break;}
 case 22: 
 var $68=(function() { try { __THREW__ = 0; return _uselocale($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $70$0 = ___cxa_find_matching_catch(0); var $70$1 = tempRet0;
 var $71=$70$0;
 ___clang_call_terminate($71);
 throw "Reached an unreachable!";
 case 24: 
 if(($cnt_3_i|0)==-1){ label=25;break;}else if(($cnt_3_i|0)==0){ var $_0=2;label=49;break;}else{label=36;break;}
 case 25: 
 HEAP32[(($to_nxt)>>2)]=$_0254;
 var $72=HEAP32[(($frm_nxt)>>2)];
 var $73=($_0155|0)==($72|0);
 if($73){var $_1_lcssa=$_0155;label=35;break;}else{var $storemerge14=$_0254;var $_115=$_0155;label=26;break;}
 case 26: 
 var $_115;
 var $storemerge14;
 var $74=$_115;
 var $75=((($17)-($74))|0);
 var $76=HEAP32[(($10)>>2)];
 var $77=_uselocale($76);
 var $78=_mbrtowc($storemerge14,$_115,$75,$tmpcast);
 var $79=($77|0)==0;
 if($79){label=29;break;}else{label=27;break;}
 case 27: 
 var $81=(function() { try { __THREW__ = 0; return _uselocale($77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=28;break; }
 case 28: 
 var $83$0 = ___cxa_find_matching_catch(0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 29: 
 if(($78|0)==0){ label=30;break;}else if(($78|0)==-1){ label=31;break;}else if(($78|0)==-2){ label=32;break;}else{label=33;break;}
 case 30: 
 var $86=(($_115+1)|0);
 var $_2=$86;label=34;break;
 case 31: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=2;label=49;break;
 case 32: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=1;label=49;break;
 case 33: 
 var $90=(($_115+$78)|0);
 var $_2=$90;label=34;break;
 case 34: 
 var $_2;
 var $92=HEAP32[(($to_nxt)>>2)];
 var $93=(($92+4)|0);
 HEAP32[(($to_nxt)>>2)]=$93;
 var $94=HEAP32[(($frm_nxt)>>2)];
 var $95=($_2|0)==($94|0);
 if($95){var $_1_lcssa=$_2;label=35;break;}else{var $storemerge14=$93;var $_115=$_2;label=26;break;}
 case 35: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_3=($_1_lcssa|0)!=($frm_end|0);
 var $96=($not_3&1);
 var $_0=$96;label=49;break;
 case 36: 
 var $98=HEAP32[(($to_nxt)>>2)];
 var $99=(($98+($cnt_3_i<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$99;
 var $100=($99|0)==($to_end|0);
 if($100){label=47;break;}else{label=37;break;}
 case 37: 
 var $102=($fend_156|0)==($frm_end|0);
 var $_pre114=HEAP32[(($frm_nxt)>>2)];
 if($102){var $fend_3=$frm_end;var $126=$_pre114;var $125=$99;label=46;break;}else{label=38;break;}
 case 38: 
 var $104=HEAP32[(($10)>>2)];
 var $105=_uselocale($104);
 var $106=_mbrtowc($99,$_pre114,1,$st);
 var $107=($105|0)==0;
 if($107){label=41;break;}else{label=39;break;}
 case 39: 
 var $109=(function() { try { __THREW__ = 0; return _uselocale($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=40;break; }
 case 40: 
 var $111$0 = ___cxa_find_matching_catch(0); var $111$1 = tempRet0;
 var $112=$111$0;
 ___clang_call_terminate($112);
 throw "Reached an unreachable!";
 case 41: 
 var $113=($106|0)==0;
 if($113){label=42;break;}else{var $_0=2;label=49;break;}
 case 42: 
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+4)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 var $117=HEAP32[(($frm_nxt)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$118;
 var $119=($118|0)==($frm_end|0);
 if($119){var $fend_2_lcssa=$frm_end;label=45;break;}else{var $fend_216=$118;label=44;break;}
 case 43: 
 var $121=($124|0)==($frm_end|0);
 if($121){var $fend_2_lcssa=$frm_end;label=45;break;}else{var $fend_216=$124;label=44;break;}
 case 44: 
 var $fend_216;
 var $122=HEAP8[(($fend_216)>>0)];
 var $123=(($122<<24)>>24)==0;
 var $124=(($fend_216+1)|0);
 if($123){var $fend_2_lcssa=$fend_216;label=45;break;}else{label=43;break;}
 case 45: 
 var $fend_2_lcssa;
 var $_pre115=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $126=$118;var $125=$_pre115;label=46;break;
 case 46: 
 var $125;
 var $126;
 var $fend_3;
 var $127=($126|0)==($frm_end|0);
 var $128=($125|0)==($to_end|0);
 var $or_cond=$127|$128;
 if($or_cond){var $129=$126;label=48;break;}else{var $_0254=$125;var $_0155=$126;var $fend_156=$fend_3;label=7;break;}
 case 47: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $129=$_pre;label=48;break;
 case 48: 
 var $129;
 var $not_=($129|0)!=($frm_end|0);
 var $130=($not_&1);
 var $_0=$130;label=49;break;
 case 49: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_uselocale($2);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 4: 
 return 0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=3;break;}
 case 3: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $8$0 = ___cxa_find_matching_catch(0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 5: 
 var $10=HEAP32[(($1)>>2)];
 var $11=($10|0)==0;
 if($11){var $_0=1;label=10;break;}else{label=6;break;}
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _uselocale($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 var $14=($13|0)==0;
 if($14){var $_0=0;label=10;break;}else{label=8;break;}
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=10;break; } else { label=9;break; }
 case 9: 
 var $18$0 = ___cxa_find_matching_catch(0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 10: 
 var $_0;
 return $_0;
 case 11: 
 var $20$0 = ___cxa_find_matching_catch(0); var $20$1 = tempRet0;
 var $21=$20$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond5=$1|$2;
 if($or_cond5){var $nbytes_0_lcssa=0;label=10;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $5=($st|0)!=0;
 var $6=($5?$st:14304);
 var $_016=$frm;var $nbytes_07=0;var $nwchar_t_08=0;label=3;break;
 case 3: 
 var $nwchar_t_08;
 var $nbytes_07;
 var $_016;
 var $8=$_016;
 var $9=((($3)-($8))|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=_uselocale($10);
 var $12=_mbrtowc(0,$_016,$9,$6);
 var $13=($11|0)==0;
 if($13){label=6;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(0); var $17$1 = tempRet0;
 var $18=$17$0;
 ___clang_call_terminate($18);
 throw "Reached an unreachable!";
 case 6: 
 if(($12|0)==-1|($12|0)==-2){ var $nbytes_0_lcssa=$nbytes_07;label=10;break;}else if(($12|0)==0){ label=7;break;}else{label=8;break;}
 case 7: 
 var $20=(($_016+1)|0);
 var $_pn=1;var $_1=$20;label=9;break;
 case 8: 
 var $22=(($_016+$12)|0);
 var $_pn=$12;var $_1=$22;label=9;break;
 case 9: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_07))|0);
 var $24=((($nwchar_t_08)+(1))|0);
 var $25=($24>>>0)>=($mx>>>0);
 var $26=($_1|0)==($frm_end|0);
 var $or_cond=$25|$26;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=10;break;}else{var $_016=$_1;var $nbytes_07=$nbytes_1;var $nwchar_t_08=$24;label=3;break;}
 case 10: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $12=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $12=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $12;
 return $12;
 case 7: 
 var $14$0 = ___cxa_find_matching_catch(0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$frm_end;
 var $3=($frm>>>0)<($frm_end>>>0);
 if($3){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=22;break;}
 case 2: 
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=HEAP16[(($_frm_nxt_0)>>1)];
 var $7=($6&65535);
 var $8=($6&65535)<128;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=$_to_nxt_0;
 var $11=((($4)-($10))|0);
 var $12=($11|0)<1;
 if($12){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=5;break;}
 case 5: 
 var $14=(($6)&255);
 var $15=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$14;
 var $_to_nxt_1=$15;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 6: 
 var $17=($6&65535)<2048;
 if($17){label=7;break;}else{label=9;break;}
 case 7: 
 var $19=$_to_nxt_0;
 var $20=((($4)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=8;break;}
 case 8: 
 var $23=$7>>>6;
 var $24=$23|192;
 var $25=(($24)&255);
 var $26=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$25;
 var $27=$7&63;
 var $28=$27|128;
 var $29=(($28)&255);
 var $30=(($_to_nxt_0+2)|0);
 HEAP8[(($26)>>0)]=$29;
 var $_to_nxt_1=$30;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 9: 
 var $32=($6&65535)<55296;
 if($32){label=10;break;}else{label=12;break;}
 case 10: 
 var $34=$_to_nxt_0;
 var $35=((($4)-($34))|0);
 var $36=($35|0)<3;
 if($36){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=11;break;}
 case 11: 
 var $38=$7>>>12;
 var $39=$38|224;
 var $40=(($39)&255);
 var $41=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$40;
 var $42=$7>>>6;
 var $43=$42&63;
 var $44=$43|128;
 var $45=(($44)&255);
 var $46=(($_to_nxt_0+2)|0);
 HEAP8[(($41)>>0)]=$45;
 var $47=$7&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($_to_nxt_0+3)|0);
 HEAP8[(($46)>>0)]=$49;
 var $_to_nxt_1=$50;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 12: 
 var $52=($6&65535)<56320;
 if($52){label=13;break;}else{label=18;break;}
 case 13: 
 var $54=$_frm_nxt_0;
 var $55=((($2)-($54))|0);
 var $56=($55|0)<4;
 if($56){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=14;break;}
 case 14: 
 var $58=(($_frm_nxt_0+2)|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=($59&65535);
 var $61=$60&64512;
 var $62=($61|0)==56320;
 if($62){label=15;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}
 case 15: 
 var $64=$_to_nxt_0;
 var $65=((($4)-($64))|0);
 var $66=($65|0)<4;
 if($66){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=16;break;}
 case 16: 
 var $68=$7&960;
 var $69=$68<<10;
 var $70=((($69)+(65536))|0);
 var $71=($70>>>0)>1114111;
 if($71){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=17;break;}
 case 17: 
 var $73=$68>>>6;
 var $74=((($73)+(1))|0);
 var $75=$74>>>2;
 var $76=$75|240;
 var $77=(($76)&255);
 var $78=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$77;
 var $79=$74<<4;
 var $80=$79&48;
 var $81=$7>>>2;
 var $82=$81&15;
 var $83=$82|$80;
 var $84=$83|128;
 var $85=(($84)&255);
 var $86=(($_to_nxt_0+2)|0);
 HEAP8[(($78)>>0)]=$85;
 var $87=$7<<4;
 var $88=$87&48;
 var $89=$60>>>6;
 var $90=$89&15;
 var $91=$88|$90;
 var $92=$91|128;
 var $93=(($92)&255);
 var $94=(($_to_nxt_0+3)|0);
 HEAP8[(($86)>>0)]=$93;
 var $95=$60&63;
 var $96=$95|128;
 var $97=(($96)&255);
 var $98=(($_to_nxt_0+4)|0);
 HEAP8[(($94)>>0)]=$97;
 var $_to_nxt_1=$98;var $_frm_nxt_1=$58;label=21;break;
 case 18: 
 var $100=($6&65535)<57344;
 if($100){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=19;break;}
 case 19: 
 var $102=$_to_nxt_0;
 var $103=((($4)-($102))|0);
 var $104=($103|0)<3;
 if($104){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=20;break;}
 case 20: 
 var $106=$7>>>12;
 var $107=$106|224;
 var $108=(($107)&255);
 var $109=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$108;
 var $110=$7>>>6;
 var $111=$110&63;
 var $112=$111|128;
 var $113=(($112)&255);
 var $114=(($_to_nxt_0+2)|0);
 HEAP8[(($109)>>0)]=$113;
 var $115=$7&63;
 var $116=$115|128;
 var $117=(($116)&255);
 var $118=(($_to_nxt_0+3)|0);
 HEAP8[(($114)>>0)]=$117;
 var $_to_nxt_1=$118;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 21: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $120=(($_frm_nxt_1+2)|0);
 var $121=($120>>>0)<($frm_end>>>0);
 if($121){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$120;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_2=$120;label=22;break;}
 case 22: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $_0_i;
 var $122=$_frm_nxt_2;
 var $123=$frm;
 var $124=((($122)-($123))|0);
 var $125=$124>>1;
 var $126=(($frm+($125<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$126;
 var $127=$_to_nxt_2;
 var $128=$to;
 var $129=((($127)-($128))|0);
 var $130=(($to+$129)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=31;break;}
 case 2: 
 var $3=$frm_end;
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=($_to_nxt_0>>>0)<($to_end>>>0);
 if($6){label=4;break;}else{var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=31;break;}
 case 4: 
 var $8=HEAP8[(($_frm_nxt_0)>>0)];
 var $9=($8&255);
 var $10=(($8<<24)>>24)>-1;
 if($10){label=5;break;}else{label=6;break;}
 case 5: 
 var $12=($8&255);
 HEAP16[(($_to_nxt_0)>>1)]=$12;
 var $13=(($_frm_nxt_0+1)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$13;label=30;break;
 case 6: 
 var $15=($8&255)<194;
 if($15){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=7;break;}
 case 7: 
 var $17=($8&255)<224;
 if($17){label=8;break;}else{label=11;break;}
 case 8: 
 var $19=$_frm_nxt_0;
 var $20=((($3)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=9;break;}
 case 9: 
 var $23=(($_frm_nxt_0+1)|0);
 var $24=HEAP8[(($23)>>0)];
 var $25=($24&255);
 var $26=$25&192;
 var $27=($26|0)==128;
 if($27){label=10;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 10: 
 var $29=$9<<6;
 var $30=$25&63;
 var $31=$29&1984;
 var $32=$30|$31;
 var $33=(($32)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$33;
 var $34=(($_frm_nxt_0+2)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$34;label=30;break;
 case 11: 
 var $36=($8&255)<240;
 if($36){label=12;break;}else{label=19;break;}
 case 12: 
 var $38=$_frm_nxt_0;
 var $39=((($3)-($38))|0);
 var $40=($39|0)<3;
 if($40){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=13;break;}
 case 13: 
 var $42=(($_frm_nxt_0+1)|0);
 var $43=HEAP8[(($42)>>0)];
 var $44=(($_frm_nxt_0+2)|0);
 var $45=HEAP8[(($44)>>0)];
 if(($9|0)==224){ label=14;break;}else if(($9|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $47=$43&-32;
 var $48=(($47<<24)>>24)==-96;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 15: 
 var $50=$43&-32;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 16: 
 var $53=$43&-64;
 var $54=(($53<<24)>>24)==-128;
 if($54){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 17: 
 var $56=($45&255);
 var $57=$56&192;
 var $58=($57|0)==128;
 if($58){label=18;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 18: 
 var $60=$9<<12;
 var $61=($43&255);
 var $62=$61<<6;
 var $63=$62&4032;
 var $64=$63|$60;
 var $65=$56&63;
 var $66=$64|$65;
 var $67=(($66)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$67;
 var $68=(($_frm_nxt_0+3)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$68;label=30;break;
 case 19: 
 var $70=($8&255)<245;
 if($70){label=20;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 20: 
 var $72=$_frm_nxt_0;
 var $73=((($3)-($72))|0);
 var $74=($73|0)<4;
 if($74){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=21;break;}
 case 21: 
 var $76=(($_frm_nxt_0+1)|0);
 var $77=HEAP8[(($76)>>0)];
 var $78=(($_frm_nxt_0+2)|0);
 var $79=HEAP8[(($78)>>0)];
 var $80=(($_frm_nxt_0+3)|0);
 var $81=HEAP8[(($80)>>0)];
 if(($9|0)==240){ label=22;break;}else if(($9|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($77)+(112))&255);
 var $83=($_off_i&255)<48;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 23: 
 var $85=$77&-16;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 24: 
 var $88=$77&-64;
 var $89=(($88<<24)>>24)==-128;
 if($89){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 25: 
 var $91=($79&255);
 var $92=$91&192;
 var $93=($92|0)==128;
 if($93){label=26;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 26: 
 var $95=($81&255);
 var $96=$95&192;
 var $97=($96|0)==128;
 if($97){label=27;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 27: 
 var $99=$_to_nxt_0;
 var $100=((($4)-($99))|0);
 var $101=($100|0)<4;
 if($101){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=28;break;}
 case 28: 
 var $103=$9&7;
 var $104=$103<<18;
 var $105=($77&255);
 var $106=$105<<12;
 var $107=$106&196608;
 var $108=$107|$104;
 var $109=($108>>>0)>1114111;
 if($109){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=29;break;}
 case 29: 
 var $111=$95&63;
 var $112=$91<<6;
 var $113=$103<<2;
 var $114=$105>>>4;
 var $115=$114&3;
 var $116=$115|$113;
 var $117=$116<<6;
 var $118=((($117)+(16320))|0);
 var $119=$105<<2;
 var $120=$119&60;
 var $121=$91>>>4;
 var $122=$121&3;
 var $123=$120|$122;
 var $124=$123|$118;
 var $125=$124|55296;
 var $126=(($125)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$126;
 var $127=$112&960;
 var $128=$111|$127;
 var $129=$128|56320;
 var $130=(($129)&65535);
 var $131=(($_to_nxt_0+2)|0);
 HEAP16[(($131)>>1)]=$130;
 var $132=(($_frm_nxt_0+4)|0);
 var $_to_nxt_1=$131;var $_frm_nxt_1=$132;label=30;break;
 case 30: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $134=(($_to_nxt_1+2)|0);
 var $135=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($135){var $_to_nxt_0=$134;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_2=$134;var $_frm_nxt_2=$_frm_nxt_1;label=31;break;}
 case 31: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $136=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $137=($136&1);
 var $_0_i=$137;var $_to_nxt_3=$_to_nxt_2;var $_frm_nxt_3=$_frm_nxt_2;label=32;break;
 case 32: 
 var $_frm_nxt_3;
 var $_to_nxt_3;
 var $_0_i;
 var $138=$_frm_nxt_3;
 var $139=$frm;
 var $140=((($138)-($139))|0);
 var $141=(($frm+$140)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 var $142=$_to_nxt_3;
 var $143=$to;
 var $144=((($142)-($143))|0);
 var $145=$144>>1;
 var $146=(($to+($145<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$146;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond15_i=$2&$3;
 if($or_cond15_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=34;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar16_t_016_i=0;var $frm_nxt_117_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_117_i;
 var $nchar16_t_016_i;
 var $6=HEAP8[(($frm_nxt_117_i)>>0)];
 var $7=($6&255);
 var $8=(($6<<24)>>24)>-1;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($frm_nxt_117_i+1)|0);
 var $frm_nxt_2_i=$10;var $nchar16_t_1_i=$nchar16_t_016_i;label=33;break;
 case 5: 
 var $12=($6&255)<194;
 if($12){var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}else{label=6;break;}
 case 6: 
 var $14=($6&255)<224;
 if($14){label=7;break;}else{label=10;break;}
 case 7: 
 var $16=$frm_nxt_117_i;
 var $17=((($4)-($16))|0);
 var $18=($17|0)<2;
 if($18){var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}else{label=8;break;}
 case 8: 
 var $20=(($frm_nxt_117_i+1)|0);
 var $21=HEAP8[(($20)>>0)];
 var $22=$21&-64;
 var $23=(($22<<24)>>24)==-128;
 if($23){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}
 case 9: 
 var $25=(($frm_nxt_117_i+2)|0);
 var $frm_nxt_2_i=$25;var $nchar16_t_1_i=$nchar16_t_016_i;label=33;break;
 case 10: 
 var $27=($6&255)<240;
 if($27){label=11;break;}else{label=21;break;}
 case 11: 
 var $29=$frm_nxt_117_i;
 var $30=((($4)-($29))|0);
 var $31=($30|0)<3;
 if($31){var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}else{label=12;break;}
 case 12: 
 var $33=(($frm_nxt_117_i+1)|0);
 var $34=HEAP8[(($33)>>0)];
 var $35=(($frm_nxt_117_i+2)|0);
 var $36=HEAP8[(($35)>>0)];
 if(($7|0)==224){ label=13;break;}else if(($7|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $38=$34&-32;
 var $39=(($38<<24)>>24)==-96;
 if($39){label=19;break;}else{label=14;break;}
 case 14: 
 var $41=$frm;
 var $42=((($29)-($41))|0);
 var $_0_i=$42;label=35;break;
 case 15: 
 var $44=$34&-32;
 var $45=(($44<<24)>>24)==-128;
 if($45){label=19;break;}else{label=16;break;}
 case 16: 
 var $47=$frm;
 var $48=((($29)-($47))|0);
 var $_0_i=$48;label=35;break;
 case 17: 
 var $50=$34&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=$frm;
 var $54=((($29)-($53))|0);
 var $_0_i=$54;label=35;break;
 case 19: 
 var $56=$36&-64;
 var $57=(($56<<24)>>24)==-128;
 if($57){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}
 case 20: 
 var $59=(($frm_nxt_117_i+3)|0);
 var $frm_nxt_2_i=$59;var $nchar16_t_1_i=$nchar16_t_016_i;label=33;break;
 case 21: 
 var $61=($6&255)<245;
 if($61){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}
 case 22: 
 var $63=$frm_nxt_117_i;
 var $64=((($4)-($63))|0);
 var $65=($64|0)<4;
 var $66=((($mx)-($nchar16_t_016_i))|0);
 var $67=($66>>>0)<2;
 var $or_cond2_i=$65|$67;
 if($or_cond2_i){var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}else{label=23;break;}
 case 23: 
 var $69=(($frm_nxt_117_i+1)|0);
 var $70=HEAP8[(($69)>>0)];
 var $71=(($frm_nxt_117_i+2)|0);
 var $72=HEAP8[(($71)>>0)];
 var $73=(($frm_nxt_117_i+3)|0);
 var $74=HEAP8[(($73)>>0)];
 if(($7|0)==240){ label=24;break;}else if(($7|0)==244){ label=26;break;}else{label=28;break;}
 case 24: 
 var $_off_i=((($70)+(112))&255);
 var $76=($_off_i&255)<48;
 if($76){label=30;break;}else{label=25;break;}
 case 25: 
 var $78=$frm;
 var $79=((($63)-($78))|0);
 var $_0_i=$79;label=35;break;
 case 26: 
 var $81=$70&-16;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=30;break;}else{label=27;break;}
 case 27: 
 var $84=$frm;
 var $85=((($63)-($84))|0);
 var $_0_i=$85;label=35;break;
 case 28: 
 var $87=$70&-64;
 var $88=(($87<<24)>>24)==-128;
 if($88){label=30;break;}else{label=29;break;}
 case 29: 
 var $90=$frm;
 var $91=((($63)-($90))|0);
 var $_0_i=$91;label=35;break;
 case 30: 
 var $93=$72&-64;
 var $94=(($93<<24)>>24)==-128;
 var $95=$74&-64;
 var $96=(($95<<24)>>24)==-128;
 var $or_cond=$94&$96;
 if($or_cond){label=31;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}
 case 31: 
 var $98=$7<<18;
 var $99=$98&1835008;
 var $100=($70&255);
 var $101=$100<<12;
 var $102=$101&196608;
 var $103=$102|$99;
 var $104=($103>>>0)>1114111;
 if($104){var $frm_nxt_1_lcssa_i=$frm_nxt_117_i;label=34;break;}else{label=32;break;}
 case 32: 
 var $106=((($nchar16_t_016_i)+(1))|0);
 var $107=(($frm_nxt_117_i+4)|0);
 var $frm_nxt_2_i=$107;var $nchar16_t_1_i=$106;label=33;break;
 case 33: 
 var $nchar16_t_1_i;
 var $frm_nxt_2_i;
 var $109=((($nchar16_t_1_i)+(1))|0);
 var $110=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $111=($109>>>0)<($mx>>>0);
 var $or_cond_i=$110&$111;
 if($or_cond_i){var $nchar16_t_016_i=$109;var $frm_nxt_117_i=$frm_nxt_2_i;label=3;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=34;break;}
 case 34: 
 var $frm_nxt_1_lcssa_i;
 var $112=$frm_nxt_1_lcssa_i;
 var $113=$frm;
 var $114=((($112)-($113))|0);
 var $_0_i=$114;label=35;break;
 case 35: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_1=$frm;label=16;break;}
 case 2: 
 var $3=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=HEAP32[(($_frm_nxt_0)>>2)];
 var $6=$5&-2048;
 var $7=($6|0)==55296;
 var $8=($5>>>0)>1114111;
 var $or_cond_i=$7|$8;
 if($or_cond_i){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=4;break;}
 case 4: 
 var $10=($5>>>0)<128;
 if($10){label=5;break;}else{label=7;break;}
 case 5: 
 var $12=$_to_nxt_0;
 var $13=((($3)-($12))|0);
 var $14=($13|0)<1;
 if($14){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=6;break;}
 case 6: 
 var $16=(($5)&255);
 var $17=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$16;
 var $_to_nxt_1=$17;label=15;break;
 case 7: 
 var $19=($5>>>0)<2048;
 if($19){label=8;break;}else{label=10;break;}
 case 8: 
 var $21=$_to_nxt_0;
 var $22=((($3)-($21))|0);
 var $23=($22|0)<2;
 if($23){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=9;break;}
 case 9: 
 var $25=$5>>>6;
 var $26=$25|192;
 var $27=(($26)&255);
 var $28=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$27;
 var $29=$5&63;
 var $30=$29|128;
 var $31=(($30)&255);
 var $32=(($_to_nxt_0+2)|0);
 HEAP8[(($28)>>0)]=$31;
 var $_to_nxt_1=$32;label=15;break;
 case 10: 
 var $34=($5>>>0)<65536;
 var $35=$_to_nxt_0;
 var $36=((($3)-($35))|0);
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=($36|0)<3;
 if($38){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=12;break;}
 case 12: 
 var $40=$5>>>12;
 var $41=$40|224;
 var $42=(($41)&255);
 var $43=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$42;
 var $44=$5>>>6;
 var $45=$44&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=(($_to_nxt_0+2)|0);
 HEAP8[(($43)>>0)]=$47;
 var $49=$5&63;
 var $50=$49|128;
 var $51=(($50)&255);
 var $52=(($_to_nxt_0+3)|0);
 HEAP8[(($48)>>0)]=$51;
 var $_to_nxt_1=$52;label=15;break;
 case 13: 
 var $54=($36|0)<4;
 if($54){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=14;break;}
 case 14: 
 var $56=$5>>>18;
 var $57=$56|240;
 var $58=(($57)&255);
 var $59=(($_to_nxt_0+1)|0);
 HEAP8[(($_to_nxt_0)>>0)]=$58;
 var $60=$5>>>12;
 var $61=$60&63;
 var $62=$61|128;
 var $63=(($62)&255);
 var $64=(($_to_nxt_0+2)|0);
 HEAP8[(($59)>>0)]=$63;
 var $65=$5>>>6;
 var $66=$65&63;
 var $67=$66|128;
 var $68=(($67)&255);
 var $69=(($_to_nxt_0+3)|0);
 HEAP8[(($64)>>0)]=$68;
 var $70=$5&63;
 var $71=$70|128;
 var $72=(($71)&255);
 var $73=(($_to_nxt_0+4)|0);
 HEAP8[(($69)>>0)]=$72;
 var $_to_nxt_1=$73;label=15;break;
 case 15: 
 var $_to_nxt_1;
 var $75=(($_frm_nxt_0+4)|0);
 var $76=($75>>>0)<($frm_end>>>0);
 if($76){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$75;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_1=$75;label=16;break;}
 case 16: 
 var $_frm_nxt_1;
 var $_to_nxt_2;
 var $_0_i;
 var $77=$_frm_nxt_1;
 var $78=$frm;
 var $79=((($77)-($78))|0);
 var $80=$79>>2;
 var $81=(($frm+($80<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$81;
 var $82=$_to_nxt_2;
 var $83=$to;
 var $84=((($82)-($83))|0);
 var $85=(($to+$84)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_1=$to;var $_frm_nxt_2=$frm;label=30;break;}
 case 2: 
 var $3=$frm_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=($_to_nxt_0>>>0)<($to_end>>>0);
 if($5){label=4;break;}else{var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=30;break;}
 case 4: 
 var $7=HEAP8[(($_frm_nxt_0)>>0)];
 var $8=($7&255);
 var $9=(($7<<24)>>24)>-1;
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($_to_nxt_0)>>2)]=$8;
 var $11=(($_frm_nxt_0+1)|0);
 var $_frm_nxt_1=$11;label=29;break;
 case 6: 
 var $13=($7&255)<194;
 if($13){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=7;break;}
 case 7: 
 var $15=($7&255)<224;
 if($15){label=8;break;}else{label=11;break;}
 case 8: 
 var $17=$_frm_nxt_0;
 var $18=((($3)-($17))|0);
 var $19=($18|0)<2;
 if($19){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=9;break;}
 case 9: 
 var $21=(($_frm_nxt_0+1)|0);
 var $22=HEAP8[(($21)>>0)];
 var $23=($22&255);
 var $24=$23&192;
 var $25=($24|0)==128;
 if($25){label=10;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 10: 
 var $27=$8<<6;
 var $28=$23&63;
 var $29=$27&1984;
 var $30=$28|$29;
 HEAP32[(($_to_nxt_0)>>2)]=$30;
 var $31=(($_frm_nxt_0+2)|0);
 var $_frm_nxt_1=$31;label=29;break;
 case 11: 
 var $33=($7&255)<240;
 if($33){label=12;break;}else{label=19;break;}
 case 12: 
 var $35=$_frm_nxt_0;
 var $36=((($3)-($35))|0);
 var $37=($36|0)<3;
 if($37){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=13;break;}
 case 13: 
 var $39=(($_frm_nxt_0+1)|0);
 var $40=HEAP8[(($39)>>0)];
 var $41=(($_frm_nxt_0+2)|0);
 var $42=HEAP8[(($41)>>0)];
 if(($8|0)==224){ label=14;break;}else if(($8|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $44=$40&-32;
 var $45=(($44<<24)>>24)==-96;
 if($45){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 15: 
 var $47=$40&-32;
 var $48=(($47<<24)>>24)==-128;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 16: 
 var $50=$40&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 17: 
 var $53=($42&255);
 var $54=$53&192;
 var $55=($54|0)==128;
 if($55){label=18;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 18: 
 var $57=($40&255);
 var $58=$57<<6;
 var $59=$8<<12;
 var $60=$58&4032;
 var $61=$59&61440;
 var $62=$53&63;
 var $63=$60|$61;
 var $64=$63|$62;
 HEAP32[(($_to_nxt_0)>>2)]=$64;
 var $65=(($_frm_nxt_0+3)|0);
 var $_frm_nxt_1=$65;label=29;break;
 case 19: 
 var $67=($7&255)<245;
 if($67){label=20;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 20: 
 var $69=$_frm_nxt_0;
 var $70=((($3)-($69))|0);
 var $71=($70|0)<4;
 if($71){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=21;break;}
 case 21: 
 var $73=(($_frm_nxt_0+1)|0);
 var $74=HEAP8[(($73)>>0)];
 var $75=(($_frm_nxt_0+2)|0);
 var $76=HEAP8[(($75)>>0)];
 var $77=(($_frm_nxt_0+3)|0);
 var $78=HEAP8[(($77)>>0)];
 if(($8|0)==240){ label=22;break;}else if(($8|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($74)+(112))&255);
 var $80=($_off_i&255)<48;
 if($80){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 23: 
 var $82=$74&-16;
 var $83=(($82<<24)>>24)==-128;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 24: 
 var $85=$74&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 25: 
 var $88=($76&255);
 var $89=$88&192;
 var $90=($89|0)==128;
 if($90){label=26;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 26: 
 var $92=($78&255);
 var $93=$92&192;
 var $94=($93|0)==128;
 if($94){label=27;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 27: 
 var $96=$8<<18;
 var $97=$96&1835008;
 var $98=($74&255);
 var $99=$98<<12;
 var $100=$99&258048;
 var $101=$100|$97;
 var $102=$88<<6;
 var $103=$102&4032;
 var $104=$101|$103;
 var $105=$92&63;
 var $106=$104|$105;
 var $107=($106>>>0)>1114111;
 if($107){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=28;break;}
 case 28: 
 HEAP32[(($_to_nxt_0)>>2)]=$106;
 var $109=(($_frm_nxt_0+4)|0);
 var $_frm_nxt_1=$109;label=29;break;
 case 29: 
 var $_frm_nxt_1;
 var $111=(($_to_nxt_0+4)|0);
 var $112=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($112){var $_to_nxt_0=$111;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_1=$111;var $_frm_nxt_2=$_frm_nxt_1;label=30;break;}
 case 30: 
 var $_frm_nxt_2;
 var $_to_nxt_1;
 var $113=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $114=($113&1);
 var $_0_i=$114;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_3=$_frm_nxt_2;label=31;break;
 case 31: 
 var $_frm_nxt_3;
 var $_to_nxt_2;
 var $_0_i;
 var $115=$_frm_nxt_3;
 var $116=$frm;
 var $117=((($115)-($116))|0);
 var $118=(($frm+$117)|0);
 HEAP32[(($frm_nxt)>>2)]=$118;
 var $119=$_to_nxt_2;
 var $120=$to;
 var $121=((($119)-($120))|0);
 var $122=$121>>2;
 var $123=(($to+($122<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$123;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond13_i=$2&$3;
 if($or_cond13_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=34;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar32_t_014_i=0;var $frm_nxt_115_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_115_i;
 var $nchar32_t_014_i;
 var $6=HEAP8[(($frm_nxt_115_i)>>0)];
 var $7=($6&255);
 var $8=(($6<<24)>>24)>-1;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($frm_nxt_115_i+1)|0);
 var $frm_nxt_2_i=$10;label=33;break;
 case 5: 
 var $12=($6&255)<194;
 if($12){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}else{label=6;break;}
 case 6: 
 var $14=($6&255)<224;
 if($14){label=7;break;}else{label=10;break;}
 case 7: 
 var $16=$frm_nxt_115_i;
 var $17=((($4)-($16))|0);
 var $18=($17|0)<2;
 if($18){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}else{label=8;break;}
 case 8: 
 var $20=(($frm_nxt_115_i+1)|0);
 var $21=HEAP8[(($20)>>0)];
 var $22=$21&-64;
 var $23=(($22<<24)>>24)==-128;
 if($23){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}
 case 9: 
 var $25=(($frm_nxt_115_i+2)|0);
 var $frm_nxt_2_i=$25;label=33;break;
 case 10: 
 var $27=($6&255)<240;
 if($27){label=11;break;}else{label=21;break;}
 case 11: 
 var $29=$frm_nxt_115_i;
 var $30=((($4)-($29))|0);
 var $31=($30|0)<3;
 if($31){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}else{label=12;break;}
 case 12: 
 var $33=(($frm_nxt_115_i+1)|0);
 var $34=HEAP8[(($33)>>0)];
 var $35=(($frm_nxt_115_i+2)|0);
 var $36=HEAP8[(($35)>>0)];
 if(($7|0)==224){ label=13;break;}else if(($7|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $38=$34&-32;
 var $39=(($38<<24)>>24)==-96;
 if($39){label=19;break;}else{label=14;break;}
 case 14: 
 var $41=$frm;
 var $42=((($29)-($41))|0);
 var $_0_i=$42;label=35;break;
 case 15: 
 var $44=$34&-32;
 var $45=(($44<<24)>>24)==-128;
 if($45){label=19;break;}else{label=16;break;}
 case 16: 
 var $47=$frm;
 var $48=((($29)-($47))|0);
 var $_0_i=$48;label=35;break;
 case 17: 
 var $50=$34&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=$frm;
 var $54=((($29)-($53))|0);
 var $_0_i=$54;label=35;break;
 case 19: 
 var $56=$36&-64;
 var $57=(($56<<24)>>24)==-128;
 if($57){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}
 case 20: 
 var $59=(($frm_nxt_115_i+3)|0);
 var $frm_nxt_2_i=$59;label=33;break;
 case 21: 
 var $61=($6&255)<245;
 if($61){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}
 case 22: 
 var $63=$frm_nxt_115_i;
 var $64=((($4)-($63))|0);
 var $65=($64|0)<4;
 if($65){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}else{label=23;break;}
 case 23: 
 var $67=(($frm_nxt_115_i+1)|0);
 var $68=HEAP8[(($67)>>0)];
 var $69=(($frm_nxt_115_i+2)|0);
 var $70=HEAP8[(($69)>>0)];
 var $71=(($frm_nxt_115_i+3)|0);
 var $72=HEAP8[(($71)>>0)];
 if(($7|0)==240){ label=24;break;}else if(($7|0)==244){ label=26;break;}else{label=28;break;}
 case 24: 
 var $_off_i=((($68)+(112))&255);
 var $74=($_off_i&255)<48;
 if($74){label=30;break;}else{label=25;break;}
 case 25: 
 var $76=$frm;
 var $77=((($63)-($76))|0);
 var $_0_i=$77;label=35;break;
 case 26: 
 var $79=$68&-16;
 var $80=(($79<<24)>>24)==-128;
 if($80){label=30;break;}else{label=27;break;}
 case 27: 
 var $82=$frm;
 var $83=((($63)-($82))|0);
 var $_0_i=$83;label=35;break;
 case 28: 
 var $85=$68&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=30;break;}else{label=29;break;}
 case 29: 
 var $88=$frm;
 var $89=((($63)-($88))|0);
 var $_0_i=$89;label=35;break;
 case 30: 
 var $91=$70&-64;
 var $92=(($91<<24)>>24)==-128;
 var $93=$72&-64;
 var $94=(($93<<24)>>24)==-128;
 var $or_cond=$92&$94;
 if($or_cond){label=31;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}
 case 31: 
 var $96=$7<<18;
 var $97=$96&1835008;
 var $98=($68&255);
 var $99=$98<<12;
 var $100=$99&196608;
 var $101=$100|$97;
 var $102=($101>>>0)>1114111;
 if($102){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=34;break;}else{label=32;break;}
 case 32: 
 var $104=(($frm_nxt_115_i+4)|0);
 var $frm_nxt_2_i=$104;label=33;break;
 case 33: 
 var $frm_nxt_2_i;
 var $106=((($nchar32_t_014_i)+(1))|0);
 var $107=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $108=($106>>>0)<($mx>>>0);
 var $or_cond_i=$107&$108;
 if($or_cond_i){var $nchar32_t_014_i=$106;var $frm_nxt_115_i=$frm_nxt_2_i;label=3;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=34;break;}
 case 34: 
 var $frm_nxt_1_lcssa_i;
 var $109=$frm_nxt_1_lcssa_i;
 var $110=$frm;
 var $111=((($109)-($110))|0);
 var $_0_i=$111;label=35;break;
 case 35: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5896;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[(($3)>>0)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 _free($9);
 label=3;break;
 case 3: 
 var $10=$this;
 _free($10);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5896;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[(($3)>>0)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 _free($9);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5848;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[(($3)>>0)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 _free($9);
 label=3;break;
 case 3: 
 var $10=$this;
 _free($10);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5848;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[(($3)>>0)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 _free($9);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP8[(($1)>>0)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+9)|0);
 var $2=HEAP8[(($1)>>0)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;


 var $1=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$1);
 return;
}


function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=8;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 var $4=$3;
 tempBigInt=1702195828;HEAP8[(($4)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(3))>>0)]=tempBigInt&0xff;
 var $5=(($2+5)|0);
 HEAP8[(($5)>>0)]=0;
 return;
}


function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=3752;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(3752))|0);
 var $7=$6>>2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,3752,$7);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[(($1)>>0)]=10;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 assert(5 % 1 === 0);HEAP8[(($3)>>0)]=HEAP8[((3696)>>0)];HEAP8[((($3)+(1))>>0)]=HEAP8[((3697)>>0)];HEAP8[((($3)+(2))>>0)]=HEAP8[((3698)>>0)];HEAP8[((($3)+(3))>>0)]=HEAP8[((3699)>>0)];HEAP8[((($3)+(4))>>0)]=HEAP8[((3700)>>0)];
 var $4=(($2+6)|0);
 HEAP8[(($4)>>0)]=0;
 return;
}


function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=3576;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(3576))|0);
 var $7=$6>>2;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,3576,$7);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18544)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18544);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18416)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18416);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15840, 0, 168)|0;
 var $12=___cxa_atexit(200,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15840,4320,6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15852,4272,6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15864,4256,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15876,4240,9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15888,4224,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15900,4176,6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15912,4160,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15924,4112,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15936,4096,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15948,4088,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15960,4080,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15972,4072,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15984,4056,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15996,4048,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16920)>>2)]=15840;

 label=21;break;
 case 21: 
 var $15=HEAP32[((16920)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18488)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18488);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18392)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18392);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15096, 0, 168)|0;
 var $12=___cxa_atexit(674,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15096,936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15108,904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15120,4616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15132,4576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15144,4536) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15156,4504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15168,4464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15180,4432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15192,4416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15204,4400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15216,4384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15228,4368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15240,4344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15252,4328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((16832)>>2)]=15096;

 label=21;break;
 case 21: 
 var $15=HEAP32[((16832)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18536)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18536);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18408)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18408);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15552, 0, 288)|0;
 var $12=___cxa_atexit(24,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15552,1280,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15564,1264,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15576,1248,5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15588,1240,5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15600,1232,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15612,1224,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15624,1208,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15636,1200,6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15648,1184,9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15660,1168,7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15672,1136,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15684,1120,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15696,1112,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15708,1104,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15720,1096,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15732,1088,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15744,1232,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15756,1072,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15768,1064,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15780,1056,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15792,1040,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15804,1032,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15816,1016,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(15828,1008,3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16912)>>2)]=15552;

 label=31;break;
 case 31: 
 var $15=HEAP32[((16912)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18480)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18480);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18384)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18384);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(14808, 0, 288)|0;
 var $12=___cxa_atexit(142,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14808,1936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14820,1888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14832,1864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14844,1840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14856,1448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14868,1784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14880,1760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14892,1720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14904,1680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14916,1648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14928,1608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14940,1560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14952,1544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14964,1528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14976,1496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14988,1464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15000,1448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15012,1424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15024,1408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15036,1392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15048,1376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15060,1352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15072,1336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15084,1296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((16824)>>2)]=14808;

 label=31;break;
 case 31: 
 var $15=HEAP32[((16824)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}



function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18552)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18552);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18424)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18424);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16008, 0, 288)|0;
 var $12=___cxa_atexit(148,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(16008,1976,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(16020,1968,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16928)>>2)]=16008;

 label=9;break;
 case 9: 
 var $15=HEAP32[((16928)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18496)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18496);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[((18400)>>0)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(18400);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15264, 0, 288)|0;
 var $12=___cxa_atexit(722,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15264,2064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15276,2024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((16840)>>2)]=15264;

 label=9;break;
 case 9: 
 var $15=HEAP32[((16840)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18560)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18560);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[((16936)>>0)]=16;
 var $$etemp$1=16937;
 var $$etemp$0$0=623865125;
 var $$etemp$0$1=2032480100;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[(($st$2$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[(($st$3$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))>>0)]=tempBigInt&0xff;
 HEAP8[((16945)>>0)]=0;
 var $6=___cxa_atexit((754),16936,___dso_handle);

 label=4;break;
 case 4: 
 return 16936;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18504)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18504);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{var $_0_i=3112;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(3112))|0);
 var $11=$10>>2;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16848,3112,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $12=___cxa_atexit((494),16848,___dso_handle);

 label=6;break;
 case 6: 
 return 16848;
 case 7: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18584)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18584);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[((16984)>>0)]=16;
 var $$etemp$1=16985;
 var $$etemp$0$0=624576549;
 var $$etemp$0$1=1394948685;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[(($st$2$0)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))>>0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[(($st$3$1)>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))>>0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))>>0)]=tempBigInt&0xff;
 HEAP8[((16993)>>0)]=0;
 var $6=___cxa_atexit((754),16984,___dso_handle);

 label=4;break;
 case 4: 
 return 16984;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18528)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18528);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{var $_0_i=3016;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(3016))|0);
 var $11=$10>>2;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16896,3016,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $12=___cxa_atexit((494),16896,___dso_handle);

 label=6;break;
 case 6: 
 return 16896;
 case 7: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18576)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18576);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return __Znwj(32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 HEAP32[((16976)>>2)]=$7;
 HEAP32[((16968)>>2)]=33;
 HEAP32[((16972)>>2)]=20;
 assert(20 % 1 === 0);(_memcpy($7, 2952, 20)|0);
 var $8=(($7+20)|0);
 HEAP8[(($8)>>0)]=0;
 var $9=___cxa_atexit((754),16968,___dso_handle);

 label=5;break;
 case 5: 
 return 16968;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(); var $12$1 = tempRet0;

 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18520)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18520);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{var $_0_i=2816;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2816))|0);
 var $11=$10>>2;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16880,2816,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $12=___cxa_atexit((494),16880,___dso_handle);

 label=6;break;
 case 6: 
 return 16880;
 case 7: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18568)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18568);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 var $7=(function() { try { __THREW__ = 0; return __Znwj(16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 HEAP32[((16960)>>2)]=$7;
 HEAP32[((16952)>>2)]=17;
 HEAP32[((16956)>>2)]=11;
 assert(11 % 1 === 0);(_memcpy($7, 2696, 11)|0);
 var $8=(($7+11)|0);
 HEAP8[(($8)>>0)]=0;
 var $9=___cxa_atexit((754),16952,___dso_handle);

 label=5;break;
 case 5: 
 return 16952;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(); var $12$1 = tempRet0;

 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[((18512)>>0)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=6;break;}
 case 2: 
 var $4=___cxa_guard_acquire(18512);
 var $5=($4|0)==0;
 if($5){label=6;break;}else{var $_0_i=2648;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2648))|0);
 var $11=$10>>2;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16864,2648,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $12=___cxa_atexit((494),16864,___dso_handle);

 label=6;break;
 case 6: 
 return 16864;
 case 7: 
 var $15$0 = ___cxa_find_matching_catch(); var $15$1 = tempRet0;

 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6432;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(function() { try { __THREW__ = 0; return __ZNSt3__16__clocEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 var $6=($3|0)==($4|0);
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a158(){
 var label=0;


 __ZNSt3__18ios_base4InitC2Ev();
 var $1=___cxa_atexit((370),18328,___dso_handle);
 return;
}


function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=(($__loc)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=__ZNSt3__16locale2id5__getEv(17568);
 var $_idx=(($7+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($7+12)|0);
 var $_idx1_val=HEAP32[(($_idx1)>>2)];
 var $9=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx1_val,$8);
 var $10=$9;
 var $11=(($this+36)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+28)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($10);
 var $17=(($this+44)|0);
 var $18=($16&1);
 HEAP8[(($17)>>0)]=$18;
 return;
}


function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=$__s;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $11=HEAP32[(($4)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($_012)>>2)];
 var $15=FUNCTION_TABLE[$13]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+4)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[(($3)>>0)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$__1buf;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+4)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=$pbase_0;
 var $34=HEAP32[(($19)>>2)];
 var $35=_fwrite($33,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($27|0)==1;
 var $39=($27>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($18))|0);
 var $44=HEAP32[(($19)>>2)];
 var $45=_fwrite($13,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17568);
 var $_idx=(($2+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($2+12)|0);
 var $_idx1_val=HEAP32[(($_idx1)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx1_val,$3);
 var $5=$4;
 var $6=(($this+36)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=$4;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=FUNCTION_TABLE[$10]($5);
 var $12=(($this+44)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($6)>>2)];
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($13);
 var $19=(($this+53)|0);
 var $20=($18&1);
 HEAP8[(($19)>>0)]=$20;
 var $21=HEAP32[(($12)>>2)];
 var $22=($21|0)>8;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(968);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[(($2)>>0)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[(($2)>>0)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 HEAP32[(($__ci)>>2)]=$14;
 var $15=(($this+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($this+40)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__ci+4)|0);
 var $20=(($__extbuf)|0);
 var $21=(($__extbuf+8)|0);
 var $22=$16;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=FUNCTION_TABLE[$25]($16,$18,$__ci,$19,$__inxt,$20,$21,$__enxt);
 if(($26|0)==2|($26|0)==1){ var $_01=-1;label=11;break;}else if(($26|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $28=HEAP32[(($12)>>2)];
 var $29=(($28)&255);
 HEAP8[(($20)>>0)]=$29;
 var $30=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$30;
 label=7;break;
 case 7: 
 var $31=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($20>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[(($36)>>0)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($31)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[(($2)>>0)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=(($__loc)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=__ZNSt3__16locale2id5__getEv(17576);
 var $_idx=(($7+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($7+12)|0);
 var $_idx1_val=HEAP32[(($_idx1)>>2)];
 var $9=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx1_val,$8);
 var $10=$9;
 var $11=(($this+36)|0);
 HEAP32[(($11)>>2)]=$10;
 var $12=$9;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+28)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($10);
 var $17=(($this+44)|0);
 var $18=($16&1);
 HEAP8[(($17)>>0)]=$18;
 return;
}


function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=(($this+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fwrite($__s,1,$__n,$8);
 var $_0=$9;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $10=HEAP32[(($4)>>2)];
 var $11=(($10+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=HEAP8[(($_012)>>0)];
 var $14=($13&255);
 var $15=FUNCTION_TABLE[$12]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+1)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[(($__1buf)>>0)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[(($4)>>0)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__1buf,1,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+1)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=HEAP32[(($19)>>2)];
 var $34=_fwrite($pbase_0,1,1,$33);
 var $35=($34|0)==1;
 if($35){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $37=($27|0)==1;
 var $38=($27>>>0)<2;
 if($38){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $40=HEAP32[(($__extbe)>>2)];
 var $41=$40;
 var $42=((($41)-($18))|0);
 var $43=HEAP32[(($19)>>2)];
 var $44=_fwrite($13,1,$42,$43);
 var $45=($44|0)==($42|0);
 if($45){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $47=HEAP32[(($__e)>>2)];
 var $_pbase_0=($37?$47:$pbase_0);
 if($37){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=__ZNSt3__16locale2id5__getEv(17576);
 var $_idx=(($2+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx1=(($2+12)|0);
 var $_idx1_val=HEAP32[(($_idx1)>>2)];
 var $4=__ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx1_val,$3);
 var $5=$4;
 var $6=(($this+36)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=$4;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=FUNCTION_TABLE[$10]($5);
 var $12=(($this+44)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($6)>>2)];
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=FUNCTION_TABLE[$17]($13);
 var $19=(($this+53)|0);
 var $20=($18&1);
 HEAP8[(($19)>>0)]=$20;
 var $21=HEAP32[(($12)>>2)];
 var $22=($21|0)>8;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(968);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[(($2)>>0)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[(($2)>>0)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 var $15=(($14)&255);
 HEAP8[(($__ci)>>0)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+1)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_01=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($12)>>2)];
 var $30=(($29)&255);
 HEAP8[(($21)>>0)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($21>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[(($37)>>0)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($32)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[(($2)>>0)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__124__generic_error_categoryD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__123__system_error_categoryD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7192;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 HEAP32[(($1)>>2)]=7560;
 var $5=(($this+32)|0);
 HEAP32[(($5)>>2)]=$__fp;
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+4)|0);
 var $9=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+1,tempValue);
 var $10=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($7+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx3=(($7+12)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $11=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $12=(($this+36)|0);
 var $13=$11;
 var $14=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+-1,tempValue);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=(($7)|0);
 var $18=$7;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($17);
 label=5;break;
 case 5: 
 HEAP32[(($12)>>2)]=$13;
 var $22=(($this+40)|0);
 HEAP32[(($22)>>2)]=$__st;
 var $23=(($this+44)|0);
 var $24=$11;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+28)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($13);
 var $29=($28&1);
 HEAP8[(($23)>>0)]=$29;
 return;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(); var $31$1 = tempRet0;
 var $32=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+-1,tempValue);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=(($7)|0);
 var $36=$7;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 FUNCTION_TABLE[$39]($35);
 label=8;break;
 case 8: 
 HEAP32[(($1)>>2)]=7192;
 var $40=HEAP32[(($6)>>2)];
 var $41=(($40+4)|0);
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=(($40)|0);
 var $46=$40;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=10;break;
 case 10: 
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7120;
 var $2=(($this+4)|0);
 __ZNSt3__16localeC2Ev($2);
 var $3=(($this+8)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0; HEAP32[((($4)+(12))>>2)]=0; HEAP32[((($4)+(16))>>2)]=0; HEAP32[((($4)+(20))>>2)]=0;
 HEAP32[(($1)>>2)]=7488;
 var $5=(($this+32)|0);
 HEAP32[(($5)>>2)]=$__fp;
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+4)|0);
 var $9=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+1,tempValue);
 var $10=(function() { try { __THREW__ = 0; return __ZNSt3__16locale2id5__getEv(17568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $_idx=(($7+8)|0);
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $_idx3=(($7+12)|0);
 var $_idx3_val=HEAP32[(($_idx3)>>2)];
 var $11=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale5__imp9use_facetEl($_idx_val,$_idx3_val,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $12=(($this+36)|0);
 var $13=$11;
 var $14=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+-1,tempValue);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=(($7)|0);
 var $18=$7;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($17);
 label=5;break;
 case 5: 
 HEAP32[(($12)>>2)]=$13;
 var $22=(($this+40)|0);
 HEAP32[(($22)>>2)]=$__st;
 var $23=(($this+44)|0);
 var $24=$11;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+28)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($13);
 var $29=($28&1);
 HEAP8[(($23)>>0)]=$29;
 return;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(); var $31$1 = tempRet0;
 var $32=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+-1,tempValue);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=(($7)|0);
 var $36=$7;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 FUNCTION_TABLE[$39]($35);
 label=8;break;
 case 8: 
 HEAP32[(($1)>>2)]=7120;
 var $40=HEAP32[(($6)>>2)];
 var $41=(($40+4)|0);
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=(($40)|0);
 var $46=$40;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=10;break;
 case 10: 
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__first;
 var $2=$__last;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$this;
 HEAP8[(($11)>>0)]=$10;
 var $12=$this;
 var $13=(($12+1)|0);
 var $__p_0_ph=$13;label=6;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=__Znwj($15);
 var $17=(($this+8)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=$15|1;
 var $19=(($this)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=(($this+4)|0);
 HEAP32[(($20)>>2)]=$3;
 var $__p_0_ph=$16;label=6;break;
 case 6: 
 var $__p_0_ph;
 var $21=($__first|0)==($__last|0);
 if($21){var $__p_0_lcssa=$__p_0_ph;label=9;break;}else{var $__p_01=$__p_0_ph;var $_02=$__first;label=7;break;}
 case 7: 
 var $_02;
 var $__p_01;
 var $22=HEAP8[(($_02)>>0)];
 HEAP8[(($__p_01)>>0)]=$22;
 var $23=(($_02+1)|0);
 var $24=(($__p_01+1)|0);
 var $25=($23|0)==($__last|0);
 if($25){label=8;break;}else{var $__p_01=$24;var $_02=$23;label=7;break;}
 case 8: 
 var $scevgep4=(($__p_0_ph+$3)|0);
 var $__p_0_lcssa=$scevgep4;label=9;break;
 case 9: 
 var $__p_0_lcssa;
 HEAP8[(($__p_0_lcssa)>>0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__first;
 var $2=$__last;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $8=($4>>>0)<2;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3>>>1;
 var $11=(($10)&255);
 var $12=$this;
 HEAP8[(($12)>>0)]=$11;
 var $13=(($this+4)|0);
 var $__p_0_ph=$13;label=6;break;
 case 5: 
 var $14=((($4)+(4))|0);
 var $15=$14&-4;
 var $16=$15<<2;
 var $17=__Znwj($16);
 var $18=$17;
 var $19=(($this+8)|0);
 HEAP32[(($19)>>2)]=$18;
 var $20=$15|1;
 var $21=(($this)|0);
 HEAP32[(($21)>>2)]=$20;
 var $22=(($this+4)|0);
 HEAP32[(($22)>>2)]=$4;
 var $__p_0_ph=$18;label=6;break;
 case 6: 
 var $__p_0_ph;
 var $23=($__first|0)==($__last|0);
 if($23){var $__p_0_lcssa=$__p_0_ph;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep=((($__last)-(4))|0);
 var $24=$scevgep;
 var $25=((($24)-($1))|0);
 var $26=$25>>>2;
 var $27=((($26)+(1))|0);
 var $__p_01=$__p_0_ph;var $_02=$__first;label=8;break;
 case 8: 
 var $_02;
 var $__p_01;
 var $29=HEAP32[(($_02)>>2)];
 HEAP32[(($__p_01)>>2)]=$29;
 var $30=(($_02+4)|0);
 var $31=(($__p_01+4)|0);
 var $32=($30|0)==($__last|0);
 if($32){label=9;break;}else{var $__p_01=$31;var $_02=$30;label=8;break;}
 case 9: 
 var $scevgep5=(($__p_0_ph+($27<<2))|0);
 var $__p_0_lcssa=$scevgep5;label=10;break;
 case 10: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $17=0;label=13;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $17=$8;label=13;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(); var $13$1 = tempRet0;
 var $16$1=$13$1;var $16$0=$13$0;label=12;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=10;break;
 case 7: 
 var $lpad_loopexit1$0 = ___cxa_find_matching_catch(); var $lpad_loopexit1$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1$1;var $lpad_phi$0=$lpad_loopexit1$0;label=10;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit53$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit53$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit53$1;var $lpad_phi$0=$lpad_nonloopexit53$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($17|0)==0;
 if($14){var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;}else{label=11;break;}
 case 11: 
 _free($17);
 var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;
 case 12: 
 var $16$0;
 var $16$1;
 ___resumeException($16$0)
 case 13: 
 var $17;
 var $__status_0;
 var $18=($__kb|0)==($__ke|0);
 if($18){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=14;break;}else{var $__n_might_match_060=$4;var $__n_does_match_061=0;var $__st_062=$__status_0;var $__ky_063=$__kb;label=15;break;}
 case 14: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $19=(($__b)|0);
 var $20=$__ct;
 var $__indx_0_ph=0;var $__n_does_match_2_ph=$__n_does_match_0_lcssa;var $__n_might_match_2_ph=$__n_might_match_0_lcssa;var $__e_sroa_0_0_ph=$__e_0;label=22;break;
 case 15: 
 var $__ky_063;
 var $__st_062;
 var $__n_does_match_061;
 var $__n_might_match_060;
 var $21=$__ky_063;
 var $22=HEAP8[(($21)>>0)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=17;break;}else{label=16;break;}
 case 16: 
 var $26=(($__ky_063+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $31=$27;label=18;break;
 case 17: 
 var $29=($22&255);
 var $30=$29>>>1;
 var $31=$30;label=18;break;
 case 18: 
 var $31;
 var $32=($31|0)==0;
 if($32){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP8[(($__st_062)>>0)]=1;
 var $__n_does_match_1=$__n_does_match_061;var $__n_might_match_1=$__n_might_match_060;label=21;break;
 case 20: 
 HEAP8[(($__st_062)>>0)]=2;
 var $35=((($__n_might_match_060)-(1))|0);
 var $36=((($__n_does_match_061)+(1))|0);
 var $__n_does_match_1=$36;var $__n_might_match_1=$35;label=21;break;
 case 21: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $38=(($__ky_063+12)|0);
 var $39=(($__st_062+1)|0);
 var $40=($38|0)==($__ke|0);
 if($40){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=14;break;}else{var $__n_might_match_060=$__n_might_match_1;var $__n_does_match_061=$__n_does_match_1;var $__st_062=$39;var $__ky_063=$38;label=15;break;}
 case 22: 
 var $__e_sroa_0_0_ph;
 var $__n_might_match_2_ph;
 var $__n_does_match_2_ph;
 var $__indx_0_ph;
 var $41=($__n_might_match_2_ph|0)!=0;
 var $__indx_0=$__indx_0_ph;var $__e_sroa_0_0=$__e_sroa_0_0_ph;label=23;break;
 case 23: 
 var $__e_sroa_0_0;
 var $__indx_0;
 var $42=HEAP32[(($19)>>2)];
 var $43=($42|0)==0;
 if($43){var $57=0;label=29;break;}else{label=24;break;}
 case 24: 
 var $45=(($42+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($42+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=25;break;}else{var $57=$42;label=29;break;}
 case 25: 
 var $50=$42;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=7;break; }
 case 26: 
 var $55=($54|0)==-1;
 if($55){label=28;break;}else{label=27;break;}
 case 27: 
 var $_pre_i_i_i=HEAP32[(($19)>>2)];
 var $57=$_pre_i_i_i;label=29;break;
 case 28: 
 HEAP32[(($19)>>2)]=0;
 var $57=0;label=29;break;
 case 29: 
 var $57;
 var $58=($57|0)==0;
 var $59=($__e_sroa_0_0|0)==0;
 if($59){var $_pre_i2_i_i17=0;var $__e_sroa_0_1=0;label=33;break;}else{label=30;break;}
 case 30: 
 var $61=(($__e_sroa_0_0+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__e_sroa_0_0+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=31;break;}else{var $_pre_i2_i_i17=$__e_sroa_0_0;var $__e_sroa_0_1=$__e_sroa_0_0;label=33;break;}
 case 31: 
 var $66=$__e_sroa_0_0;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=7;break; }
 case 32: 
 var $71=($70|0)==-1;
 var $___e_sroa_0_0=($71?0:$__e_sroa_0_0);
 var $___e_sroa_0_03=($71?0:$__e_sroa_0_0);
 var $_pre_i2_i_i17=$___e_sroa_0_03;var $__e_sroa_0_1=$___e_sroa_0_0;label=33;break;
 case 33: 
 var $__e_sroa_0_1;
 var $_pre_i2_i_i17;
 var $72=($_pre_i2_i_i17|0)==0;
 var $tmp_i_i=$58^$72;
 var $or_cond=$tmp_i_i&$41;
 var $73=HEAP32[(($19)>>2)];
 if($or_cond){label=34;break;}else{label=67;break;}
 case 34: 
 var $75=(($73+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($73+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76|0)==($78|0);
 if($79){label=35;break;}else{label=37;break;}
 case 35: 
 var $81=$73;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$84]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=7;break; }
 case 36: 
 var $extract_t_i=(($85)&255);
 var $_0_i_off0_i=$extract_t_i;label=38;break;
 case 37: 
 var $87=HEAP8[(($76)>>0)];
 var $_0_i_off0_i=$87;label=38;break;
 case 38: 
 var $_0_i_off0_i;
 if($__case_sensitive){var $__c_0=$_0_i_off0_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $89=HEAP32[(($20)>>2)];
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($__ct,$_0_i_off0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$92;label=40;break; } else { label=7;break; }
 case 40: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($18){var $__indx_0=$_pre;var $__e_sroa_0_0=$__e_sroa_0_1;label=23;break;}else{var $__n_might_match_332=$__n_might_match_2_ph;var $__n_does_match_333=$__n_does_match_2_ph;var $__st_134=$__status_0;var $__consume_0_off036=0;var $__ky1_037=$__kb;label=41;break;}
 case 41: 
 var $__ky1_037;
 var $__consume_0_off036;
 var $__st_134;
 var $__n_does_match_333;
 var $__n_might_match_332;
 var $93=HEAP8[(($__st_134)>>0)];
 var $94=(($93<<24)>>24)==1;
 if($94){label=42;break;}else{var $__consume_1_off0=$__consume_0_off036;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$__n_might_match_332;label=54;break;}
 case 42: 
 var $96=$__ky1_037;
 var $97=HEAP8[(($96)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=44;break;}else{label=43;break;}
 case 43: 
 var $101=(($__ky1_037+8)|0);
 var $102=HEAP32[(($101)>>2)];
 var $106=$102;label=45;break;
 case 44: 
 var $104=$__ky1_037;
 var $105=(($104+1)|0);
 var $106=$105;label=45;break;
 case 45: 
 var $106;
 var $107=(($106+$__indx_0)|0);
 var $108=HEAP8[(($107)>>0)];
 if($__case_sensitive){var $__kc_0=$108;label=47;break;}else{label=46;break;}
 case 46: 
 var $110=HEAP32[(($20)>>2)];
 var $111=(($110+12)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$112]($__ct,$108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__kc_0=$113;label=47;break; } else { label=6;break; }
 case 47: 
 var $__kc_0;
 var $114=(($__c_0<<24)>>24)==(($__kc_0<<24)>>24);
 if($114){label=48;break;}else{label=53;break;}
 case 48: 
 var $116=HEAP8[(($96)>>0)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=50;break;}else{label=49;break;}
 case 49: 
 var $120=(($__ky1_037+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $125=$121;label=51;break;
 case 50: 
 var $123=($116&255);
 var $124=$123>>>1;
 var $125=$124;label=51;break;
 case 51: 
 var $125;
 var $126=($125|0)==($_pre|0);
 if($126){label=52;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$__n_might_match_332;label=54;break;}
 case 52: 
 HEAP8[(($__st_134)>>0)]=2;
 var $128=((($__n_might_match_332)-(1))|0);
 var $129=((($__n_does_match_333)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$129;var $__n_might_match_4=$128;label=54;break;
 case 53: 
 HEAP8[(($__st_134)>>0)]=0;
 var $131=((($__n_might_match_332)-(1))|0);
 var $__consume_1_off0=$__consume_0_off036;var $__n_does_match_4=$__n_does_match_333;var $__n_might_match_4=$131;label=54;break;
 case 54: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $133=(($__ky1_037+12)|0);
 var $134=(($__st_134+1)|0);
 var $135=($133|0)==($__ke|0);
 if($135){label=55;break;}else{var $__n_might_match_332=$__n_might_match_4;var $__n_does_match_333=$__n_does_match_4;var $__st_134=$134;var $__consume_0_off036=$__consume_1_off0;var $__ky1_037=$133;label=41;break;}
 case 55: 
 if($__consume_1_off0){label=56;break;}else{var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_4;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}
 case 56: 
 var $137=HEAP32[(($19)>>2)];
 var $138=(($137+12)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($137+16)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($139|0)==($141|0);
 if($142){label=57;break;}else{label=58;break;}
 case 57: 
 var $144=$137;
 var $145=HEAP32[(($144)>>2)];
 var $146=(($145+40)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=8;break; }
 case 58: 
 var $150=(($139+1)|0);
 HEAP32[(($138)>>2)]=$150;
 label=59;break;
 case 59: 
 var $151=((($__n_does_match_4)+($__n_might_match_4))|0);
 var $_not=($151>>>0)<2;
 if($_not){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_4;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_546=$__n_does_match_4;var $__st_247=$__status_0;var $__ky2_048=$__kb;label=60;break;}
 case 60: 
 var $__ky2_048;
 var $__st_247;
 var $__n_does_match_546;
 var $152=HEAP8[(($__st_247)>>0)];
 var $153=(($152<<24)>>24)==2;
 if($153){label=61;break;}else{var $__n_does_match_6=$__n_does_match_546;label=66;break;}
 case 61: 
 var $155=$__ky2_048;
 var $156=HEAP8[(($155)>>0)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=63;break;}else{label=62;break;}
 case 62: 
 var $160=(($__ky2_048+4)|0);
 var $161=HEAP32[(($160)>>2)];
 var $165=$161;label=64;break;
 case 63: 
 var $163=($156&255);
 var $164=$163>>>1;
 var $165=$164;label=64;break;
 case 64: 
 var $165;
 var $166=($165|0)==($_pre|0);
 if($166){var $__n_does_match_6=$__n_does_match_546;label=66;break;}else{label=65;break;}
 case 65: 
 HEAP8[(($__st_247)>>0)]=0;
 var $168=((($__n_does_match_546)-(1))|0);
 var $__n_does_match_6=$168;label=66;break;
 case 66: 
 var $__n_does_match_6;
 var $170=(($__ky2_048+12)|0);
 var $171=(($__st_247+1)|0);
 var $172=($170|0)==($__ke|0);
 if($172){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_6;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_546=$__n_does_match_6;var $__st_247=$171;var $__ky2_048=$170;label=60;break;}
 case 67: 
 var $174=($73|0)==0;
 if($174){var $188=0;label=73;break;}else{label=68;break;}
 case 68: 
 var $176=(($73+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($73+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=69;break;}else{var $188=$73;label=73;break;}
 case 69: 
 var $181=$73;
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+36)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$184]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=9;break; }
 case 70: 
 var $186=($185|0)==-1;
 if($186){label=72;break;}else{label=71;break;}
 case 71: 
 var $_pre_i_i_i13=HEAP32[(($19)>>2)];
 var $188=$_pre_i_i_i13;label=73;break;
 case 72: 
 HEAP32[(($19)>>2)]=0;
 var $188=0;label=73;break;
 case 73: 
 var $188;
 var $189=($188|0)==0;
 if($72){label=78;break;}else{label=74;break;}
 case 74: 
 var $191=(($_pre_i2_i_i17+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($_pre_i2_i_i17+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($192|0)==($194|0);
 if($195){label=76;break;}else{label=75;break;}
 case 75: 
 if($189){label=81;break;}else{label=80;break;}
 case 76: 
 var $196=$_pre_i2_i_i17;
 var $197=HEAP32[(($196)>>2)];
 var $198=(($197+36)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$199]($_pre_i2_i_i17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=9;break; }
 case 77: 
 var $201=($200|0)==-1;
 if($201){label=78;break;}else{label=79;break;}
 case 78: 
 if($189){label=80;break;}else{label=81;break;}
 case 79: 
 if($189){label=81;break;}else{label=80;break;}
 case 80: 
 var $203=HEAP32[(($__err)>>2)];
 var $204=$203|2;
 HEAP32[(($__err)>>2)]=$204;
 label=81;break;
 case 81: 
 if($18){label=84;break;}else{var $__st_326=$__status_0;var $_027=$__kb;label=82;break;}
 case 82: 
 var $_027;
 var $__st_326;
 var $205=HEAP8[(($__st_326)>>0)];
 var $206=(($205<<24)>>24)==2;
 if($206){var $_025=$_027;label=85;break;}else{label=83;break;}
 case 83: 
 var $208=(($_027+12)|0);
 var $209=(($__st_326+1)|0);
 var $210=($208|0)==($__ke|0);
 if($210){label=84;break;}else{var $__st_326=$209;var $_027=$208;label=82;break;}
 case 84: 
 var $211=HEAP32[(($__err)>>2)];
 var $212=$211|4;
 HEAP32[(($__err)>>2)]=$212;
 var $_025=$__ke;label=85;break;
 case 85: 
 var $_025;
 var $213=($17|0)==0;
 if($213){label=87;break;}else{label=86;break;}
 case 86: 
 _free($17);
 label=87;break;
 case 87: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_025;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,3600,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $17=0;label=13;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $17=$8;label=13;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5208;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,12352,(68)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(); var $13$1 = tempRet0;
 var $16$1=$13$1;var $16$0=$13$0;label=12;break;
 case 6: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=10;break;
 case 7: 
 var $lpad_loopexit1$0 = ___cxa_find_matching_catch(); var $lpad_loopexit1$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1$1;var $lpad_phi$0=$lpad_loopexit1$0;label=10;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit57$0 = ___cxa_find_matching_catch(); var $lpad_nonloopexit57$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit57$1;var $lpad_phi$0=$lpad_nonloopexit57$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($17|0)==0;
 if($14){var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;}else{label=11;break;}
 case 11: 
 _free($17);
 var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;
 case 12: 
 var $16$0;
 var $16$1;
 ___resumeException($16$0)
 case 13: 
 var $17;
 var $__status_0;
 var $18=($__kb|0)==($__ke|0);
 if($18){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=14;break;}else{var $__n_might_match_064=$4;var $__n_does_match_065=0;var $__st_066=$__status_0;var $__ky_067=$__kb;label=15;break;}
 case 14: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $19=(($__b)|0);
 var $20=$__ct;
 var $__indx_0_ph=0;var $__n_does_match_2_ph=$__n_does_match_0_lcssa;var $__n_might_match_2_ph=$__n_might_match_0_lcssa;var $__e_sroa_0_0_ph=$__e_0;label=22;break;
 case 15: 
 var $__ky_067;
 var $__st_066;
 var $__n_does_match_065;
 var $__n_might_match_064;
 var $21=$__ky_067;
 var $22=HEAP8[(($21)>>0)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=17;break;}else{label=16;break;}
 case 16: 
 var $26=(($__ky_067+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $31=$27;label=18;break;
 case 17: 
 var $29=($22&255);
 var $30=$29>>>1;
 var $31=$30;label=18;break;
 case 18: 
 var $31;
 var $32=($31|0)==0;
 if($32){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP8[(($__st_066)>>0)]=1;
 var $__n_does_match_1=$__n_does_match_065;var $__n_might_match_1=$__n_might_match_064;label=21;break;
 case 20: 
 HEAP8[(($__st_066)>>0)]=2;
 var $35=((($__n_might_match_064)-(1))|0);
 var $36=((($__n_does_match_065)+(1))|0);
 var $__n_does_match_1=$36;var $__n_might_match_1=$35;label=21;break;
 case 21: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $38=(($__ky_067+12)|0);
 var $39=(($__st_066+1)|0);
 var $40=($38|0)==($__ke|0);
 if($40){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=14;break;}else{var $__n_might_match_064=$__n_might_match_1;var $__n_does_match_065=$__n_does_match_1;var $__st_066=$39;var $__ky_067=$38;label=15;break;}
 case 22: 
 var $__e_sroa_0_0_ph;
 var $__n_might_match_2_ph;
 var $__n_does_match_2_ph;
 var $__indx_0_ph;
 var $41=($__n_might_match_2_ph|0)!=0;
 var $__indx_0=$__indx_0_ph;var $__e_sroa_0_0=$__e_sroa_0_0_ph;label=23;break;
 case 23: 
 var $__e_sroa_0_0;
 var $__indx_0;
 var $42=HEAP32[(($19)>>2)];
 var $43=($42|0)==0;
 if($43){var $60=1;label=30;break;}else{label=24;break;}
 case 24: 
 var $45=(($42+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($42+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=25;break;}else{label=26;break;}
 case 25: 
 var $51=$42;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$55;label=27;break; } else { label=7;break; }
 case 26: 
 var $57=HEAP32[(($46)>>2)];
 var $_0_i_i_i_i=$57;label=27;break;
 case 27: 
 var $_0_i_i_i_i;
 var $58=($_0_i_i_i_i|0)==-1;
 if($58){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre_i_i_i=HEAP32[(($19)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $60=$phitmp_i_i_i;label=30;break;
 case 29: 
 HEAP32[(($19)>>2)]=0;
 var $60=1;label=30;break;
 case 30: 
 var $60;
 var $61=($__e_sroa_0_0|0)==0;
 if($61){var $77=1;var $_pre_i3_i_i20=0;var $__e_sroa_0_1=0;label=35;break;}else{label=31;break;}
 case 31: 
 var $63=(($__e_sroa_0_0+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($__e_sroa_0_0+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=32;break;}else{label=33;break;}
 case 32: 
 var $69=$__e_sroa_0_0;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$73;label=34;break; } else { label=7;break; }
 case 33: 
 var $75=HEAP32[(($64)>>2)];
 var $_0_i_i1_i_i=$75;label=34;break;
 case 34: 
 var $_0_i_i1_i_i;
 var $76=($_0_i_i1_i_i|0)==-1;
 var $___e_sroa_0_0=($76?0:$__e_sroa_0_0);
 var $___e_sroa_0_03=($76?0:$__e_sroa_0_0);
 var $_=($76?1:0);
 var $77=$_;var $_pre_i3_i_i20=$___e_sroa_0_03;var $__e_sroa_0_1=$___e_sroa_0_0;label=35;break;
 case 35: 
 var $__e_sroa_0_1;
 var $_pre_i3_i_i20;
 var $77;
 var $tmp_i_i=$60^$77;
 var $or_cond=$tmp_i_i&$41;
 var $78=HEAP32[(($19)>>2)];
 if($or_cond){label=36;break;}else{label=68;break;}
 case 36: 
 var $80=(($78+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($78+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=37;break;}else{label=38;break;}
 case 37: 
 var $86=$78;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$90;label=39;break; } else { label=7;break; }
 case 38: 
 var $92=HEAP32[(($81)>>2)];
 var $_0_i_i=$92;label=39;break;
 case 39: 
 var $_0_i_i;
 if($__case_sensitive){var $__c_0=$_0_i_i;label=41;break;}else{label=40;break;}
 case 40: 
 var $94=HEAP32[(($20)>>2)];
 var $95=(($94+28)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=41;break; } else { label=7;break; }
 case 41: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($18){var $__indx_0=$_pre;var $__e_sroa_0_0=$__e_sroa_0_1;label=23;break;}else{var $__n_might_match_336=$__n_might_match_2_ph;var $__n_does_match_337=$__n_does_match_2_ph;var $__st_138=$__status_0;var $__consume_0_off040=0;var $__ky1_041=$__kb;label=42;break;}
 case 42: 
 var $__ky1_041;
 var $__consume_0_off040;
 var $__st_138;
 var $__n_does_match_337;
 var $__n_might_match_336;
 var $98=HEAP8[(($__st_138)>>0)];
 var $99=(($98<<24)>>24)==1;
 if($99){label=43;break;}else{var $__consume_1_off0=$__consume_0_off040;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$__n_might_match_336;label=55;break;}
 case 43: 
 var $101=$__ky1_041;
 var $102=HEAP8[(($101)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=45;break;}else{label=44;break;}
 case 44: 
 var $106=(($__ky1_041+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $110=$107;label=46;break;
 case 45: 
 var $109=(($__ky1_041+4)|0);
 var $110=$109;label=46;break;
 case 46: 
 var $110;
 var $111=(($110+($__indx_0<<2))|0);
 var $112=HEAP32[(($111)>>2)];
 if($__case_sensitive){var $__kc_0=$112;label=48;break;}else{label=47;break;}
 case 47: 
 var $114=HEAP32[(($20)>>2)];
 var $115=(($114+28)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$116]($__ct,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__kc_0=$117;label=48;break; } else { label=6;break; }
 case 48: 
 var $__kc_0;
 var $118=($__c_0|0)==($__kc_0|0);
 if($118){label=49;break;}else{label=54;break;}
 case 49: 
 var $120=HEAP8[(($101)>>0)];
 var $121=$120&1;
 var $122=(($121<<24)>>24)==0;
 if($122){label=51;break;}else{label=50;break;}
 case 50: 
 var $124=(($__ky1_041+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $129=$125;label=52;break;
 case 51: 
 var $127=($120&255);
 var $128=$127>>>1;
 var $129=$128;label=52;break;
 case 52: 
 var $129;
 var $130=($129|0)==($_pre|0);
 if($130){label=53;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$__n_might_match_336;label=55;break;}
 case 53: 
 HEAP8[(($__st_138)>>0)]=2;
 var $132=((($__n_might_match_336)-(1))|0);
 var $133=((($__n_does_match_337)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$133;var $__n_might_match_4=$132;label=55;break;
 case 54: 
 HEAP8[(($__st_138)>>0)]=0;
 var $135=((($__n_might_match_336)-(1))|0);
 var $__consume_1_off0=$__consume_0_off040;var $__n_does_match_4=$__n_does_match_337;var $__n_might_match_4=$135;label=55;break;
 case 55: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $137=(($__ky1_041+12)|0);
 var $138=(($__st_138+1)|0);
 var $139=($137|0)==($__ke|0);
 if($139){label=56;break;}else{var $__n_might_match_336=$__n_might_match_4;var $__n_does_match_337=$__n_does_match_4;var $__st_138=$138;var $__consume_0_off040=$__consume_1_off0;var $__ky1_041=$137;label=42;break;}
 case 56: 
 if($__consume_1_off0){label=57;break;}else{var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_4;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}
 case 57: 
 var $141=HEAP32[(($19)>>2)];
 var $142=(($141+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($141+16)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($143|0)==($145|0);
 if($146){label=58;break;}else{label=59;break;}
 case 58: 
 var $148=$141;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+40)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=8;break; }
 case 59: 
 var $154=(($143+4)|0);
 HEAP32[(($142)>>2)]=$154;
 label=60;break;
 case 60: 
 var $155=((($__n_does_match_4)+($__n_might_match_4))|0);
 var $_not=($155>>>0)<2;
 if($_not){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_4;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_550=$__n_does_match_4;var $__st_251=$__status_0;var $__ky2_052=$__kb;label=61;break;}
 case 61: 
 var $__ky2_052;
 var $__st_251;
 var $__n_does_match_550;
 var $156=HEAP8[(($__st_251)>>0)];
 var $157=(($156<<24)>>24)==2;
 if($157){label=62;break;}else{var $__n_does_match_6=$__n_does_match_550;label=67;break;}
 case 62: 
 var $159=$__ky2_052;
 var $160=HEAP8[(($159)>>0)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){label=64;break;}else{label=63;break;}
 case 63: 
 var $164=(($__ky2_052+4)|0);
 var $165=HEAP32[(($164)>>2)];
 var $169=$165;label=65;break;
 case 64: 
 var $167=($160&255);
 var $168=$167>>>1;
 var $169=$168;label=65;break;
 case 65: 
 var $169;
 var $170=($169|0)==($_pre|0);
 if($170){var $__n_does_match_6=$__n_does_match_550;label=67;break;}else{label=66;break;}
 case 66: 
 HEAP8[(($__st_251)>>0)]=0;
 var $172=((($__n_does_match_550)-(1))|0);
 var $__n_does_match_6=$172;label=67;break;
 case 67: 
 var $__n_does_match_6;
 var $174=(($__ky2_052+12)|0);
 var $175=(($__st_251+1)|0);
 var $176=($174|0)==($__ke|0);
 if($176){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_6;var $__n_might_match_2_ph=$__n_might_match_4;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_550=$__n_does_match_6;var $__st_251=$175;var $__ky2_052=$174;label=61;break;}
 case 68: 
 var $178=($78|0)==0;
 if($178){var $195=1;label=75;break;}else{label=69;break;}
 case 69: 
 var $180=(($78+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($78+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=70;break;}else{label=71;break;}
 case 70: 
 var $186=$78;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i12=$190;label=72;break; } else { label=9;break; }
 case 71: 
 var $192=HEAP32[(($181)>>2)];
 var $_0_i_i_i_i12=$192;label=72;break;
 case 72: 
 var $_0_i_i_i_i12;
 var $193=($_0_i_i_i_i12|0)==-1;
 if($193){label=74;break;}else{label=73;break;}
 case 73: 
 var $_pre_i_i_i14=HEAP32[(($19)>>2)];
 var $phitmp_i_i_i15=($_pre_i_i_i14|0)==0;
 var $195=$phitmp_i_i_i15;label=75;break;
 case 74: 
 HEAP32[(($19)>>2)]=0;
 var $195=1;label=75;break;
 case 75: 
 var $195;
 var $196=($_pre_i3_i_i20|0)==0;
 if($196){label=80;break;}else{label=76;break;}
 case 76: 
 var $198=(($_pre_i3_i_i20+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($_pre_i3_i_i20+16)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($199|0)==($201|0);
 if($202){label=77;break;}else{label=78;break;}
 case 77: 
 var $204=$_pre_i3_i_i20;
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+36)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$207]($_pre_i3_i_i20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i18=$208;label=79;break; } else { label=9;break; }
 case 78: 
 var $210=HEAP32[(($199)>>2)];
 var $_0_i_i1_i_i18=$210;label=79;break;
 case 79: 
 var $_0_i_i1_i_i18;
 var $211=($_0_i_i1_i_i18|0)==-1;
 if($211){label=80;break;}else{label=81;break;}
 case 80: 
 if($195){label=82;break;}else{label=83;break;}
 case 81: 
 if($195){label=83;break;}else{label=82;break;}
 case 82: 
 var $213=HEAP32[(($__err)>>2)];
 var $214=$213|2;
 HEAP32[(($__err)>>2)]=$214;
 label=83;break;
 case 83: 
 if($18){label=86;break;}else{var $__st_330=$__status_0;var $_031=$__kb;label=84;break;}
 case 84: 
 var $_031;
 var $__st_330;
 var $215=HEAP8[(($__st_330)>>0)];
 var $216=(($215<<24)>>24)==2;
 if($216){var $_029=$_031;label=87;break;}else{label=85;break;}
 case 85: 
 var $218=(($_031+12)|0);
 var $219=(($__st_330+1)|0);
 var $220=($218|0)==($__ke|0);
 if($220){label=86;break;}else{var $__st_330=$219;var $_031=$218;label=84;break;}
 case 86: 
 var $221=HEAP32[(($__err)>>2)];
 var $222=$221|4;
 HEAP32[(($__err)>>2)]=$222;
 var $_029=$__ke;label=87;break;
 case 87: 
 var $_029;
 var $223=($17|0)==0;
 if($223){label=89;break;}else{label=88;break;}
 case 88: 
 _free($17);
 label=89;break;
 case 89: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_029;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap2_i=sp;
 var $__va=(sp)+(16);
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=$ap2_i;
 var $$etemp$0$0=16;
 var $$etemp$0$1=0;

 var $5=_malloc(240);
 var $6=($5|0)==0;
 if($6){var $_0_i=-1;label=7;break;}else{label=2;break;}
 case 2: 
 var $8=(($ap2_i)|0);
 _llvm_va_copy($4,$2);
 var $9=_vsnprintf($5,240,$__format,$8);

 var $10=($9>>>0)<240;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $12=((($9)+(1))|0);
 var $13=_realloc($5,$12);
 var $14=($13|0)!=0;
 var $15=($14?$13:$5);
 HEAP32[(($__s)>>2)]=$15;
 var $_0_i=$9;label=7;break;
 case 4: 
 _free($5);
 var $17=($9|0)<0;
 if($17){var $_0_i=-1;label=7;break;}else{label=5;break;}
 case 5: 
 var $19=((($9)+(1))|0);
 var $20=_malloc($19);
 HEAP32[(($__s)>>2)]=$20;
 var $21=($20|0)==0;
 if($21){var $_0_i=-1;label=7;break;}else{label=6;break;}
 case 6: 
 var $23=_vsnprintf($20,$19,$__format,$1);
 var $_0_i=$23;label=7;break;
 case 7: 
 var $_0_i;
 var $$etemp$1$0=16;
 var $$etemp$1$1=0;


 var $25=($3|0)==0;
 if($25){label=10;break;}else{label=8;break;}
 case 8: 
 var $27=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $29$0 = ___cxa_find_matching_catch(0); var $29$1 = tempRet0;
 var $30=$29$0;
 ___clang_call_terminate($30);
 throw "Reached an unreachable!";
 case 10: 
 STACKTOP=sp;return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=23;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=(($__iob+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>($8|0);
 var $12=((($10)-($8))|0);
 var $__ns_0=($11?$12:0);
 var $13=$__op;
 var $14=((($13)-($6))|0);
 var $15=$14>>2;
 var $16=($14|0)>0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$__s_0;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=FUNCTION_TABLE[$21]($__s_0,$__ob,$15);
 var $23=($22|0)==($15|0);
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($agg_result)|0);
 HEAP32[(($25)>>2)]=0;
 label=23;break;
 case 6: 
 var $27=($__ns_0|0)>0;
 if($27){label=7;break;}else{label=19;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $29=$__sp;
 var $30=HEAP8[(($29)>>0)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=9;break;}else{label=8;break;}
 case 8: 
 var $34=(($__sp+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=10;break;
 case 9: 
 var $37=(($__sp+4)|0);
 var $38=$37;label=10;break;
 case 10: 
 var $38;
 var $39=$__s_0;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+48)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($__s_0,$38,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 var $44=($43|0)==($__ns_0|0);
 if($44){label=17;break;}else{label=12;break;}
 case 12: 
 var $45=(($agg_result)|0);
 HEAP32[(($45)>>2)]=0;
 var $46=HEAP8[(($29)>>0)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=23;break;}else{label=13;break;}
 case 13: 
 var $50=(($__sp+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51;
 _free($52);
 label=23;break;
 case 14: 
 var $54$0 = ___cxa_find_matching_catch(); var $54$1 = tempRet0;
 var $55=HEAP8[(($29)>>0)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=16;break;}else{label=15;break;}
 case 15: 
 var $59=(($__sp+8)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=$60;
 _free($61);
 label=16;break;
 case 16: 
 ___resumeException($54$0)
 case 17: 
 var $63=HEAP8[(($29)>>0)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=19;break;}else{label=18;break;}
 case 18: 
 var $67=(($__sp+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 _free($69);
 label=19;break;
 case 19: 
 var $70=((($5)-($13))|0);
 var $71=$70>>2;
 var $72=($70|0)>0;
 if($72){label=20;break;}else{label=22;break;}
 case 20: 
 var $74=$__s_0;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+48)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=FUNCTION_TABLE[$77]($__s_0,$__op,$71);
 var $79=($78|0)==($71|0);
 if($79){label=22;break;}else{label=21;break;}
 case 21: 
 var $81=(($agg_result)|0);
 HEAP32[(($81)>>2)]=0;
 label=23;break;
 case 22: 
 HEAP32[(($9)>>2)]=0;
 var $83=(($agg_result)|0);
 HEAP32[(($83)>>2)]=$__s_0;
 label=23;break;
 case 23: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=($__e_0|0)==0;
 if($19){label=10;break;}else{label=7;break;}
 case 7: 
 var $21=(($__e_0+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($__e_0+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $26=$__e_0;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=FUNCTION_TABLE[$29]($__e_0);
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 if($18){var $36=$__e_0;label=12;break;}else{label=11;break;}
 case 10: 
 if($18){label=11;break;}else{var $36=0;label=12;break;}
 case 11: 
 var $33=HEAP32[(($__err)>>2)];
 var $34=$33|6;
 HEAP32[(($__err)>>2)]=$34;
 var $_02=0;label=49;break;
 case 12: 
 var $36;
 var $37=HEAP32[(($1)>>2)];
 var $38=(($37+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($37+16)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($39|0)==($41|0);
 if($42){label=13;break;}else{label=14;break;}
 case 13: 
 var $44=$37;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($45+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($37);
 var $extract_t_i=(($48)&255);
 var $_0_i_off0_i=$extract_t_i;label=15;break;
 case 14: 
 var $50=HEAP8[(($39)>>0)];
 var $_0_i_off0_i=$50;label=15;break;
 case 15: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $51=(($_0_i_off0_i<<24)>>24);
 var $52=(($__ct+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+($51<<1))|0);
 var $55=HEAP16[(($54)>>1)];
 var $56=$55&2048;
 var $57=(($56<<16)>>16)==0;
 if($57){label=17;break;}else{label=18;break;}
 case 17: 
 var $58=HEAP32[(($__err)>>2)];
 var $59=$58|4;
 HEAP32[(($__err)>>2)]=$59;
 var $_02=0;label=49;break;
 case 18: 
 var $61=$__ct;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($__ct,$_0_i_off0_i,0);
 var $66=(($65<<24)>>24);
 var $67=HEAP32[(($1)>>2)];
 var $68=(($67+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($67+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($69|0)==($71|0);
 if($72){label=19;break;}else{label=20;break;}
 case 19: 
 var $74=$67;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+40)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=FUNCTION_TABLE[$77]($67);
 var $__r_0_in=$66;var $_0_in=$__n;var $81=$36;var $_pre_i2_i_i8=$36;label=21;break;
 case 20: 
 var $80=(($69+1)|0);
 HEAP32[(($68)>>2)]=$80;
 var $__r_0_in=$66;var $_0_in=$__n;var $81=$36;var $_pre_i2_i_i8=$36;label=21;break;
 case 21: 
 var $_pre_i2_i_i8;
 var $81;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $82=HEAP32[(($1)>>2)];
 var $83=($82|0)==0;
 if($83){var $97=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $85=(($82+12)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=23;break;}else{var $97=$82;label=26;break;}
 case 23: 
 var $90=$82;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($82);
 var $95=($94|0)==-1;
 if($95){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre_i_i_i4=HEAP32[(($1)>>2)];
 var $97=$_pre_i_i_i4;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $97=0;label=26;break;
 case 26: 
 var $97;
 var $98=($97|0)==0;
 var $99=($81|0)==0;
 if($99){var $112=0;var $_pre_i2_i_i22=$_pre_i2_i_i8;label=29;break;}else{label=27;break;}
 case 27: 
 var $101=(($81+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($81+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=28;break;}else{var $112=$81;var $_pre_i2_i_i22=$_pre_i2_i_i8;label=29;break;}
 case 28: 
 var $106=$81;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($81);
 var $111=($110|0)==-1;
 var $__pre_i2_i_i8=($111?0:$_pre_i2_i_i8);
 var $__pre_i2_i_i82=($111?0:$_pre_i2_i_i8);
 var $112=$__pre_i2_i_i82;var $_pre_i2_i_i22=$__pre_i2_i_i8;label=29;break;
 case 29: 
 var $_pre_i2_i_i22;
 var $112;
 var $113=($112|0)==0;
 var $tmp_i_i10=$98^$113;
 var $114=($_0|0)>0;
 var $or_cond=$tmp_i_i10&$114;
 var $115=HEAP32[(($1)>>2)];
 if($or_cond){label=30;break;}else{label=38;break;}
 case 30: 
 var $117=(($115+12)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(($115+16)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($118|0)==($120|0);
 if($121){label=31;break;}else{label=32;break;}
 case 31: 
 var $123=$115;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=FUNCTION_TABLE[$126]($115);
 var $extract_t_i11=(($127)&255);
 var $_0_i_off0_i12=$extract_t_i11;label=33;break;
 case 32: 
 var $129=HEAP8[(($118)>>0)];
 var $_0_i_off0_i12=$129;label=33;break;
 case 33: 
 var $_0_i_off0_i12;
 var $isascii1_i14=(($_0_i_off0_i12<<24)>>24)>-1;
 if($isascii1_i14){label=34;break;}else{var $_02=$__r_0;label=49;break;}
 case 34: 
 var $130=(($_0_i_off0_i12<<24)>>24);
 var $131=HEAP32[(($52)>>2)];
 var $132=(($131+($130<<1))|0);
 var $133=HEAP16[(($132)>>1)];
 var $134=$133&2048;
 var $135=(($134<<16)>>16)==0;
 if($135){var $_02=$__r_0;label=49;break;}else{label=35;break;}
 case 35: 
 var $137=((($__r_0)*(10))&-1);
 var $138=HEAP32[(($61)>>2)];
 var $139=(($138+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=FUNCTION_TABLE[$140]($__ct,$_0_i_off0_i12,0);
 var $142=(($141<<24)>>24);
 var $143=((($142)+($137))|0);
 var $144=HEAP32[(($1)>>2)];
 var $145=(($144+12)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($144+16)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($146|0)==($148|0);
 if($149){label=36;break;}else{label=37;break;}
 case 36: 
 var $151=$144;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+40)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=FUNCTION_TABLE[$154]($144);
 var $__r_0_in=$143;var $_0_in=$_0;var $81=$112;var $_pre_i2_i_i8=$_pre_i2_i_i22;label=21;break;
 case 37: 
 var $157=(($146+1)|0);
 HEAP32[(($145)>>2)]=$157;
 var $__r_0_in=$143;var $_0_in=$_0;var $81=$112;var $_pre_i2_i_i8=$_pre_i2_i_i22;label=21;break;
 case 38: 
 var $159=($115|0)==0;
 if($159){var $173=0;label=43;break;}else{label=39;break;}
 case 39: 
 var $161=(($115+12)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(($115+16)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($162|0)==($164|0);
 if($165){label=40;break;}else{var $173=$115;label=43;break;}
 case 40: 
 var $166=$115;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+36)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=FUNCTION_TABLE[$169]($115);
 var $171=($170|0)==-1;
 if($171){label=42;break;}else{label=41;break;}
 case 41: 
 var $_pre_i_i_i18=HEAP32[(($1)>>2)];
 var $173=$_pre_i_i_i18;label=43;break;
 case 42: 
 HEAP32[(($1)>>2)]=0;
 var $173=0;label=43;break;
 case 43: 
 var $173;
 var $174=($173|0)==0;
 var $175=($_pre_i2_i_i22|0)==0;
 if($175){label=47;break;}else{label=44;break;}
 case 44: 
 var $177=(($_pre_i2_i_i22+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($_pre_i2_i_i22+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=45;break;}else{label=46;break;}
 case 45: 
 var $182=$_pre_i2_i_i22;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=FUNCTION_TABLE[$185]($_pre_i2_i_i22);
 var $187=($186|0)==-1;
 if($187){label=47;break;}else{label=46;break;}
 case 46: 
 if($174){var $_02=$__r_0;label=49;break;}else{label=48;break;}
 case 47: 
 if($174){label=48;break;}else{var $_02=$__r_0;label=49;break;}
 case 48: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 var $_02=$__r_0;label=49;break;
 case 49: 
 var $_02;
 return $_02;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=($__e_0|0)==0;
 if($21){label=13;break;}else{label=9;break;}
 case 9: 
 var $23=(($__e_0+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($__e_0+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=$__e_0;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__e_0);
 var $_0_i_i1_i_i=$33;label=12;break;
 case 11: 
 var $35=HEAP32[(($24)>>2)];
 var $_0_i_i1_i_i=$35;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $36=($_0_i_i1_i_i|0)==-1;
 if($36){label=13;break;}else{label=14;break;}
 case 13: 
 if($20){label=15;break;}else{var $41=0;label=16;break;}
 case 14: 
 if($20){var $41=$__e_0;label=16;break;}else{label=15;break;}
 case 15: 
 var $38=HEAP32[(($__err)>>2)];
 var $39=$38|6;
 HEAP32[(($__err)>>2)]=$39;
 var $_02=0;label=59;break;
 case 16: 
 var $41;
 var $42=HEAP32[(($1)>>2)];
 var $43=(($42+12)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($42+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($44|0)==($46|0);
 if($47){label=17;break;}else{label=18;break;}
 case 17: 
 var $49=$42;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=FUNCTION_TABLE[$52]($42);
 var $_0_i_i=$53;label=19;break;
 case 18: 
 var $55=HEAP32[(($44)>>2)];
 var $_0_i_i=$55;label=19;break;
 case 19: 
 var $_0_i_i;
 var $56=$__ct;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+12)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=FUNCTION_TABLE[$59]($__ct,2048,$_0_i_i);
 if($60){label=21;break;}else{label=20;break;}
 case 20: 
 var $62=HEAP32[(($__err)>>2)];
 var $63=$62|4;
 HEAP32[(($__err)>>2)]=$63;
 var $_02=0;label=59;break;
 case 21: 
 var $65=$__ct;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+52)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($__ct,$_0_i_i,0);
 var $70=(($69<<24)>>24);
 var $71=HEAP32[(($1)>>2)];
 var $72=(($71+12)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($71+16)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($73|0)==($75|0);
 if($76){label=22;break;}else{label=23;break;}
 case 22: 
 var $78=$71;
 var $79=HEAP32[(($78)>>2)];
 var $80=(($79+40)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=FUNCTION_TABLE[$81]($71);
 var $__r_0_in=$70;var $_0_in=$__n;var $85=$41;var $_pre_i3_i_i11=$41;label=24;break;
 case 23: 
 var $84=(($73+4)|0);
 HEAP32[(($72)>>2)]=$84;
 var $__r_0_in=$70;var $_0_in=$__n;var $85=$41;var $_pre_i3_i_i11=$41;label=24;break;
 case 24: 
 var $_pre_i3_i_i11;
 var $85;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $86=HEAP32[(($1)>>2)];
 var $87=($86|0)==0;
 if($87){var $104=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $89=(($86+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($86+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($90|0)==($92|0);
 if($93){label=26;break;}else{label=27;break;}
 case 26: 
 var $95=$86;
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+36)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($86);
 var $_0_i_i_i_i3=$99;label=28;break;
 case 27: 
 var $101=HEAP32[(($90)>>2)];
 var $_0_i_i_i_i3=$101;label=28;break;
 case 28: 
 var $_0_i_i_i_i3;
 var $102=($_0_i_i_i_i3|0)==-1;
 if($102){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre_i_i_i5=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i6=($_pre_i_i_i5|0)==0;
 var $104=$phitmp_i_i_i6;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $104=1;label=31;break;
 case 31: 
 var $104;
 var $105=($85|0)==0;
 if($105){var $122=1;var $121=0;var $_pre_i3_i_i26=$_pre_i3_i_i11;label=36;break;}else{label=32;break;}
 case 32: 
 var $107=(($85+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($85+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=33;break;}else{label=34;break;}
 case 33: 
 var $113=$85;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=FUNCTION_TABLE[$116]($85);
 var $_0_i_i1_i_i9=$117;label=35;break;
 case 34: 
 var $119=HEAP32[(($108)>>2)];
 var $_0_i_i1_i_i9=$119;label=35;break;
 case 35: 
 var $_0_i_i1_i_i9;
 var $120=($_0_i_i1_i_i9|0)==-1;
 var $phitmp_i4_i_i12=($_pre_i3_i_i11|0)==0;
 var $__pre_i3_i_i11=($120?0:$_pre_i3_i_i11);
 var $__pre_i3_i_i112=($120?0:$_pre_i3_i_i11);
 var $_phitmp_i4_i_i12=($120?1:$phitmp_i4_i_i12);
 var $122=$_phitmp_i4_i_i12;var $121=$__pre_i3_i_i112;var $_pre_i3_i_i26=$__pre_i3_i_i11;label=36;break;
 case 36: 
 var $_pre_i3_i_i26;
 var $121;
 var $122;
 var $tmp_i_i14=$104^$122;
 var $123=($_0|0)>0;
 var $or_cond=$tmp_i_i14&$123;
 var $124=HEAP32[(($1)>>2)];
 if($or_cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $126=(($124+12)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($124+16)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=($127|0)==($129|0);
 if($130){label=38;break;}else{label=39;break;}
 case 38: 
 var $132=$124;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=FUNCTION_TABLE[$135]($124);
 var $_0_i_i15=$136;label=40;break;
 case 39: 
 var $138=HEAP32[(($127)>>2)];
 var $_0_i_i15=$138;label=40;break;
 case 40: 
 var $_0_i_i15;
 var $139=HEAP32[(($56)>>2)];
 var $140=(($139+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=FUNCTION_TABLE[$141]($__ct,2048,$_0_i_i15);
 if($142){label=41;break;}else{var $_02=$__r_0;label=59;break;}
 case 41: 
 var $144=((($__r_0)*(10))&-1);
 var $145=HEAP32[(($65)>>2)];
 var $146=(($145+52)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=FUNCTION_TABLE[$147]($__ct,$_0_i_i15,0);
 var $149=(($148<<24)>>24);
 var $150=((($149)+($144))|0);
 var $151=HEAP32[(($1)>>2)];
 var $152=(($151+12)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($151+16)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=($153|0)==($155|0);
 if($156){label=42;break;}else{label=43;break;}
 case 42: 
 var $158=$151;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+40)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=FUNCTION_TABLE[$161]($151);
 var $__r_0_in=$150;var $_0_in=$_0;var $85=$121;var $_pre_i3_i_i11=$_pre_i3_i_i26;label=24;break;
 case 43: 
 var $164=(($153+4)|0);
 HEAP32[(($152)>>2)]=$164;
 var $__r_0_in=$150;var $_0_in=$_0;var $85=$121;var $_pre_i3_i_i11=$_pre_i3_i_i26;label=24;break;
 case 44: 
 var $166=($124|0)==0;
 if($166){var $183=1;label=51;break;}else{label=45;break;}
 case 45: 
 var $168=(($124+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($124+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=46;break;}else{label=47;break;}
 case 46: 
 var $174=$124;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+36)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=FUNCTION_TABLE[$177]($124);
 var $_0_i_i_i_i18=$178;label=48;break;
 case 47: 
 var $180=HEAP32[(($169)>>2)];
 var $_0_i_i_i_i18=$180;label=48;break;
 case 48: 
 var $_0_i_i_i_i18;
 var $181=($_0_i_i_i_i18|0)==-1;
 if($181){label=50;break;}else{label=49;break;}
 case 49: 
 var $_pre_i_i_i20=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i21=($_pre_i_i_i20|0)==0;
 var $183=$phitmp_i_i_i21;label=51;break;
 case 50: 
 HEAP32[(($1)>>2)]=0;
 var $183=1;label=51;break;
 case 51: 
 var $183;
 var $184=($_pre_i3_i_i26|0)==0;
 if($184){label=56;break;}else{label=52;break;}
 case 52: 
 var $186=(($_pre_i3_i_i26+12)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($_pre_i3_i_i26+16)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($187|0)==($189|0);
 if($190){label=53;break;}else{label=54;break;}
 case 53: 
 var $192=$_pre_i3_i_i26;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+36)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=FUNCTION_TABLE[$195]($_pre_i3_i_i26);
 var $_0_i_i1_i_i24=$196;label=55;break;
 case 54: 
 var $198=HEAP32[(($187)>>2)];
 var $_0_i_i1_i_i24=$198;label=55;break;
 case 55: 
 var $_0_i_i1_i_i24;
 var $199=($_0_i_i1_i_i24|0)==-1;
 if($199){label=56;break;}else{label=57;break;}
 case 56: 
 if($183){label=58;break;}else{var $_02=$__r_0;label=59;break;}
 case 57: 
 if($183){var $_02=$__r_0;label=59;break;}else{label=58;break;}
 case 58: 
 var $201=HEAP32[(($__err)>>2)];
 var $202=$201|2;
 HEAP32[(($__err)>>2)]=$202;
 var $_02=$__r_0;label=59;break;
 case 59: 
 var $_02;
 return $_02;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((420)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=($3?$6:0);
 var $16=_realloc($15,$_);
 var $17=($16|0)==0;
 if($17){label=2;break;}else{label=3;break;}
 case 2: 
 var $19=___cxa_allocate_exception(4);
 var $20=$19;
 HEAP32[(($20)>>2)]=5208;
 ___cxa_throw($19,12352,(68));
 throw "Reached an unreachable!";
 case 3: 
 if($3){label=4;break;}else{label=5;break;}
 case 4: 
 HEAP32[(($5)>>2)]=$16;
 var $29=$16;label=9;break;
 case 5: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$16;
 var $23=($_pr|0)==0;
 if($23){var $29=$16;label=9;break;}else{label=6;break;}
 case 6: 
 var $25=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($_pr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 var $_pre=HEAP32[(($5)>>2)];
 var $29=$_pre;label=9;break;
 case 8: 
 var $27$0 = ___cxa_find_matching_catch(0); var $27$1 = tempRet0;
 var $28=$27$0;
 ___clang_call_terminate($28);
 throw "Reached an unreachable!";
 case 9: 
 var $29;
 HEAP32[(($1)>>2)]=224;
 var $30=(($29+$14)|0);
 HEAP32[(($__n)>>2)]=$30;
 var $31=HEAP32[(($5)>>2)];
 var $32=(($31+$_)|0);
 HEAP32[(($__e)>>2)]=$32;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((420)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>2;
 if($3){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $18=$phitmp;label=3;break;
 case 3: 
 var $18;
 var $19=_realloc($18,$_);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 HEAP32[(($24)>>2)]=5208;
 ___cxa_throw($23,12352,(68));
 throw "Reached an unreachable!";
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$20;
 var $34=$20;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$20;
 var $27=($_pr|0)==0;
 if($27){var $34=$20;label=11;break;}else{label=8;break;}
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $34=$_pre;label=11;break;
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 11: 
 var $34;
 HEAP32[(($1)>>2)]=224;
 var $35=$_>>>2;
 var $36=(($34+($15<<2))|0);
 HEAP32[(($__n)>>2)]=$36;
 var $37=HEAP32[(($5)>>2)];
 var $38=(($37+($35<<2))|0);
 HEAP32[(($__e)>>2)]=$38;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((420)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>2;
 if($3){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $18=$phitmp;label=3;break;
 case 3: 
 var $18;
 var $19=_realloc($18,$_);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 HEAP32[(($24)>>2)]=5208;
 ___cxa_throw($23,12352,(68));
 throw "Reached an unreachable!";
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$20;
 var $34=$20;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$20;
 var $27=($_pr|0)==0;
 if($27){var $34=$20;label=11;break;}else{label=8;break;}
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $34=$_pre;label=11;break;
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 11: 
 var $34;
 HEAP32[(($1)>>2)]=224;
 var $35=$_>>>2;
 var $36=(($34+($15<<2))|0);
 HEAP32[(($__n)>>2)]=$36;
 var $37=HEAP32[(($5)>>2)];
 var $38=(($37+($35<<2))|0);
 HEAP32[(($__e)>>2)]=$38;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($this+128)|0);
 HEAP8[(($5)>>0)]=0;
 var $6=($__n|0)==0;
 if($6){label=8;break;}else{label=2;break;}
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $_pre_i=HEAP32[(($3)>>2)];
 var $_0_i=$__n;var $10=$_pre_i;label=4;break;
 case 4: 
 var $10;
 var $_0_i;
 var $11=($10|0)==0;
 if($11){var $13=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($10)>>2)]=0;
 var $_pre1_i=HEAP32[(($3)>>2)];
 var $13=$_pre1_i;label=6;break;
 case 6: 
 var $13;
 var $14=(($13+4)|0);
 HEAP32[(($3)>>2)]=$14;
 var $15=((($_0_i)-(1))|0);
 var $16=($15|0)==0;
 if($16){label=8;break;}else{var $_0_i=$15;var $10=$14;label=4;break;}
 case 7: 
 var $18$0 = ___cxa_find_matching_catch(); var $18$1 = tempRet0;
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1);
 ___resumeException($18$0)
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=7;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($2|0);
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $__new_last2_i_i=$2;
 var $scevgep_i_i=((($6)-(4))|0);
 var $8=$scevgep_i_i;
 var $9=((($8)-($__new_last2_i_i))|0);
 var $10=$9>>>2;
 var $11=$10^-1;
 var $scevgep4_i_i=(($6+($11<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep4_i_i;
 label=4;break;
 case 4: 
 var $12=(($this+16)|0);
 var $13=$12;
 var $14=($13|0)==($2|0);
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=(($this+128)|0);
 HEAP8[(($16)>>0)]=0;
 label=7;break;
 case 6: 
 var $18=$2;
 _free($18);
 label=7;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor112($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((15996)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16004)>>2)];
 _free($6);
 label=3;break;
 case 3: 
 var $7=HEAP8[((15984)>>0)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=HEAP32[((15992)>>2)];
 _free($11);
 label=5;break;
 case 5: 
 var $12=HEAP8[((15972)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 var $16=HEAP32[((15980)>>2)];
 _free($16);
 label=7;break;
 case 7: 
 var $17=HEAP8[((15960)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 var $21=HEAP32[((15968)>>2)];
 _free($21);
 label=9;break;
 case 9: 
 var $22=HEAP8[((15948)>>0)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=HEAP32[((15956)>>2)];
 _free($26);
 label=11;break;
 case 11: 
 var $27=HEAP8[((15936)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=HEAP32[((15944)>>2)];
 _free($31);
 label=13;break;
 case 13: 
 var $32=HEAP8[((15924)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 var $36=HEAP32[((15932)>>2)];
 _free($36);
 label=15;break;
 case 15: 
 var $37=HEAP8[((15912)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[((15920)>>2)];
 _free($41);
 label=17;break;
 case 17: 
 var $42=HEAP8[((15900)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=18;break;}
 case 18: 
 var $46=HEAP32[((15908)>>2)];
 _free($46);
 label=19;break;
 case 19: 
 var $47=HEAP8[((15888)>>0)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=21;break;}else{label=20;break;}
 case 20: 
 var $51=HEAP32[((15896)>>2)];
 _free($51);
 label=21;break;
 case 21: 
 var $52=HEAP8[((15876)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=23;break;}else{label=22;break;}
 case 22: 
 var $56=HEAP32[((15884)>>2)];
 _free($56);
 label=23;break;
 case 23: 
 var $57=HEAP8[((15864)>>0)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $61=HEAP32[((15872)>>2)];
 _free($61);
 label=25;break;
 case 25: 
 var $62=HEAP8[((15852)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=27;break;}else{label=26;break;}
 case 26: 
 var $66=HEAP32[((15860)>>2)];
 _free($66);
 label=27;break;
 case 27: 
 var $67=HEAP8[((15840)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=29;break;}else{label=28;break;}
 case 28: 
 var $71=HEAP32[((15848)>>2)];
 _free($71);
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor97($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((15252)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((15260)>>2)];
 var $7=$6;
 _free($7);
 label=3;break;
 case 3: 
 var $8=HEAP8[((15240)>>0)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=4;break;}
 case 4: 
 var $12=HEAP32[((15248)>>2)];
 var $13=$12;
 _free($13);
 label=5;break;
 case 5: 
 var $14=HEAP8[((15228)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=HEAP32[((15236)>>2)];
 var $19=$18;
 _free($19);
 label=7;break;
 case 7: 
 var $20=HEAP8[((15216)>>0)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 var $24=HEAP32[((15224)>>2)];
 var $25=$24;
 _free($25);
 label=9;break;
 case 9: 
 var $26=HEAP8[((15204)>>0)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 var $30=HEAP32[((15212)>>2)];
 var $31=$30;
 _free($31);
 label=11;break;
 case 11: 
 var $32=HEAP8[((15192)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $36=HEAP32[((15200)>>2)];
 var $37=$36;
 _free($37);
 label=13;break;
 case 13: 
 var $38=HEAP8[((15180)>>0)];
 var $39=$38&1;
 var $40=(($39<<24)>>24)==0;
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=HEAP32[((15188)>>2)];
 var $43=$42;
 _free($43);
 label=15;break;
 case 15: 
 var $44=HEAP8[((15168)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=17;break;}else{label=16;break;}
 case 16: 
 var $48=HEAP32[((15176)>>2)];
 var $49=$48;
 _free($49);
 label=17;break;
 case 17: 
 var $50=HEAP8[((15156)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=HEAP32[((15164)>>2)];
 var $55=$54;
 _free($55);
 label=19;break;
 case 19: 
 var $56=HEAP8[((15144)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[((15152)>>2)];
 var $61=$60;
 _free($61);
 label=21;break;
 case 21: 
 var $62=HEAP8[((15132)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=23;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[((15140)>>2)];
 var $67=$66;
 _free($67);
 label=23;break;
 case 23: 
 var $68=HEAP8[((15120)>>0)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=25;break;}else{label=24;break;}
 case 24: 
 var $72=HEAP32[((15128)>>2)];
 var $73=$72;
 _free($73);
 label=25;break;
 case 25: 
 var $74=HEAP8[((15108)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=27;break;}else{label=26;break;}
 case 26: 
 var $78=HEAP32[((15116)>>2)];
 var $79=$78;
 _free($79);
 label=27;break;
 case 27: 
 var $80=HEAP8[((15096)>>0)];
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=29;break;}else{label=28;break;}
 case 28: 
 var $84=HEAP32[((15104)>>2)];
 var $85=$84;
 _free($85);
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor73($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((15828)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((15836)>>2)];
 _free($6);
 label=3;break;
 case 3: 
 var $7=HEAP8[((15816)>>0)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=HEAP32[((15824)>>2)];
 _free($11);
 label=5;break;
 case 5: 
 var $12=HEAP8[((15804)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 var $16=HEAP32[((15812)>>2)];
 _free($16);
 label=7;break;
 case 7: 
 var $17=HEAP8[((15792)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 var $21=HEAP32[((15800)>>2)];
 _free($21);
 label=9;break;
 case 9: 
 var $22=HEAP8[((15780)>>0)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=HEAP32[((15788)>>2)];
 _free($26);
 label=11;break;
 case 11: 
 var $27=HEAP8[((15768)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=HEAP32[((15776)>>2)];
 _free($31);
 label=13;break;
 case 13: 
 var $32=HEAP8[((15756)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 var $36=HEAP32[((15764)>>2)];
 _free($36);
 label=15;break;
 case 15: 
 var $37=HEAP8[((15744)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[((15752)>>2)];
 _free($41);
 label=17;break;
 case 17: 
 var $42=HEAP8[((15732)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=18;break;}
 case 18: 
 var $46=HEAP32[((15740)>>2)];
 _free($46);
 label=19;break;
 case 19: 
 var $47=HEAP8[((15720)>>0)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=21;break;}else{label=20;break;}
 case 20: 
 var $51=HEAP32[((15728)>>2)];
 _free($51);
 label=21;break;
 case 21: 
 var $52=HEAP8[((15708)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=23;break;}else{label=22;break;}
 case 22: 
 var $56=HEAP32[((15716)>>2)];
 _free($56);
 label=23;break;
 case 23: 
 var $57=HEAP8[((15696)>>0)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $61=HEAP32[((15704)>>2)];
 _free($61);
 label=25;break;
 case 25: 
 var $62=HEAP8[((15684)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=27;break;}else{label=26;break;}
 case 26: 
 var $66=HEAP32[((15692)>>2)];
 _free($66);
 label=27;break;
 case 27: 
 var $67=HEAP8[((15672)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=29;break;}else{label=28;break;}
 case 28: 
 var $71=HEAP32[((15680)>>2)];
 _free($71);
 label=29;break;
 case 29: 
 var $72=HEAP8[((15660)>>0)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=31;break;}else{label=30;break;}
 case 30: 
 var $76=HEAP32[((15668)>>2)];
 _free($76);
 label=31;break;
 case 31: 
 var $77=HEAP8[((15648)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=33;break;}else{label=32;break;}
 case 32: 
 var $81=HEAP32[((15656)>>2)];
 _free($81);
 label=33;break;
 case 33: 
 var $82=HEAP8[((15636)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=35;break;}else{label=34;break;}
 case 34: 
 var $86=HEAP32[((15644)>>2)];
 _free($86);
 label=35;break;
 case 35: 
 var $87=HEAP8[((15624)>>0)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=37;break;}else{label=36;break;}
 case 36: 
 var $91=HEAP32[((15632)>>2)];
 _free($91);
 label=37;break;
 case 37: 
 var $92=HEAP8[((15612)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=39;break;}else{label=38;break;}
 case 38: 
 var $96=HEAP32[((15620)>>2)];
 _free($96);
 label=39;break;
 case 39: 
 var $97=HEAP8[((15600)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=41;break;}else{label=40;break;}
 case 40: 
 var $101=HEAP32[((15608)>>2)];
 _free($101);
 label=41;break;
 case 41: 
 var $102=HEAP8[((15588)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=43;break;}else{label=42;break;}
 case 42: 
 var $106=HEAP32[((15596)>>2)];
 _free($106);
 label=43;break;
 case 43: 
 var $107=HEAP8[((15576)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=45;break;}else{label=44;break;}
 case 44: 
 var $111=HEAP32[((15584)>>2)];
 _free($111);
 label=45;break;
 case 45: 
 var $112=HEAP8[((15564)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=47;break;}else{label=46;break;}
 case 46: 
 var $116=HEAP32[((15572)>>2)];
 _free($116);
 label=47;break;
 case 47: 
 var $117=HEAP8[((15552)>>0)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){label=49;break;}else{label=48;break;}
 case 48: 
 var $121=HEAP32[((15560)>>2)];
 _free($121);
 label=49;break;
 case 49: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor48($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((15084)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((15092)>>2)];
 var $7=$6;
 _free($7);
 label=3;break;
 case 3: 
 var $8=HEAP8[((15072)>>0)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=4;break;}
 case 4: 
 var $12=HEAP32[((15080)>>2)];
 var $13=$12;
 _free($13);
 label=5;break;
 case 5: 
 var $14=HEAP8[((15060)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=HEAP32[((15068)>>2)];
 var $19=$18;
 _free($19);
 label=7;break;
 case 7: 
 var $20=HEAP8[((15048)>>0)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 var $24=HEAP32[((15056)>>2)];
 var $25=$24;
 _free($25);
 label=9;break;
 case 9: 
 var $26=HEAP8[((15036)>>0)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 var $30=HEAP32[((15044)>>2)];
 var $31=$30;
 _free($31);
 label=11;break;
 case 11: 
 var $32=HEAP8[((15024)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $36=HEAP32[((15032)>>2)];
 var $37=$36;
 _free($37);
 label=13;break;
 case 13: 
 var $38=HEAP8[((15012)>>0)];
 var $39=$38&1;
 var $40=(($39<<24)>>24)==0;
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=HEAP32[((15020)>>2)];
 var $43=$42;
 _free($43);
 label=15;break;
 case 15: 
 var $44=HEAP8[((15000)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=17;break;}else{label=16;break;}
 case 16: 
 var $48=HEAP32[((15008)>>2)];
 var $49=$48;
 _free($49);
 label=17;break;
 case 17: 
 var $50=HEAP8[((14988)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=HEAP32[((14996)>>2)];
 var $55=$54;
 _free($55);
 label=19;break;
 case 19: 
 var $56=HEAP8[((14976)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[((14984)>>2)];
 var $61=$60;
 _free($61);
 label=21;break;
 case 21: 
 var $62=HEAP8[((14964)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=23;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[((14972)>>2)];
 var $67=$66;
 _free($67);
 label=23;break;
 case 23: 
 var $68=HEAP8[((14952)>>0)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=25;break;}else{label=24;break;}
 case 24: 
 var $72=HEAP32[((14960)>>2)];
 var $73=$72;
 _free($73);
 label=25;break;
 case 25: 
 var $74=HEAP8[((14940)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=27;break;}else{label=26;break;}
 case 26: 
 var $78=HEAP32[((14948)>>2)];
 var $79=$78;
 _free($79);
 label=27;break;
 case 27: 
 var $80=HEAP8[((14928)>>0)];
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=29;break;}else{label=28;break;}
 case 28: 
 var $84=HEAP32[((14936)>>2)];
 var $85=$84;
 _free($85);
 label=29;break;
 case 29: 
 var $86=HEAP8[((14916)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=HEAP32[((14924)>>2)];
 var $91=$90;
 _free($91);
 label=31;break;
 case 31: 
 var $92=HEAP8[((14904)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[((14912)>>2)];
 var $97=$96;
 _free($97);
 label=33;break;
 case 33: 
 var $98=HEAP8[((14892)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[((14900)>>2)];
 var $103=$102;
 _free($103);
 label=35;break;
 case 35: 
 var $104=HEAP8[((14880)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=37;break;}else{label=36;break;}
 case 36: 
 var $108=HEAP32[((14888)>>2)];
 var $109=$108;
 _free($109);
 label=37;break;
 case 37: 
 var $110=HEAP8[((14868)>>0)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=39;break;}else{label=38;break;}
 case 38: 
 var $114=HEAP32[((14876)>>2)];
 var $115=$114;
 _free($115);
 label=39;break;
 case 39: 
 var $116=HEAP8[((14856)>>0)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=41;break;}else{label=40;break;}
 case 40: 
 var $120=HEAP32[((14864)>>2)];
 var $121=$120;
 _free($121);
 label=41;break;
 case 41: 
 var $122=HEAP8[((14844)>>0)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=43;break;}else{label=42;break;}
 case 42: 
 var $126=HEAP32[((14852)>>2)];
 var $127=$126;
 _free($127);
 label=43;break;
 case 43: 
 var $128=HEAP8[((14832)>>0)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=45;break;}else{label=44;break;}
 case 44: 
 var $132=HEAP32[((14840)>>2)];
 var $133=$132;
 _free($133);
 label=45;break;
 case 45: 
 var $134=HEAP8[((14820)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=47;break;}else{label=46;break;}
 case 46: 
 var $138=HEAP32[((14828)>>2)];
 var $139=$138;
 _free($139);
 label=47;break;
 case 47: 
 var $140=HEAP8[((14808)>>0)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=49;break;}else{label=48;break;}
 case 48: 
 var $144=HEAP32[((14816)>>2)];
 var $145=$144;
 _free($145);
 label=49;break;
 case 49: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor45($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((16284)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16292)>>2)];
 _free($6);
 label=3;break;
 case 3: 
 var $7=HEAP8[((16272)>>0)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=5;break;}else{label=4;break;}
 case 4: 
 var $11=HEAP32[((16280)>>2)];
 _free($11);
 label=5;break;
 case 5: 
 var $12=HEAP8[((16260)>>0)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 var $16=HEAP32[((16268)>>2)];
 _free($16);
 label=7;break;
 case 7: 
 var $17=HEAP8[((16248)>>0)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 var $21=HEAP32[((16256)>>2)];
 _free($21);
 label=9;break;
 case 9: 
 var $22=HEAP8[((16236)>>0)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=HEAP32[((16244)>>2)];
 _free($26);
 label=11;break;
 case 11: 
 var $27=HEAP8[((16224)>>0)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=13;break;}else{label=12;break;}
 case 12: 
 var $31=HEAP32[((16232)>>2)];
 _free($31);
 label=13;break;
 case 13: 
 var $32=HEAP8[((16212)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 var $36=HEAP32[((16220)>>2)];
 _free($36);
 label=15;break;
 case 15: 
 var $37=HEAP8[((16200)>>0)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=17;break;}else{label=16;break;}
 case 16: 
 var $41=HEAP32[((16208)>>2)];
 _free($41);
 label=17;break;
 case 17: 
 var $42=HEAP8[((16188)>>0)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=18;break;}
 case 18: 
 var $46=HEAP32[((16196)>>2)];
 _free($46);
 label=19;break;
 case 19: 
 var $47=HEAP8[((16176)>>0)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=21;break;}else{label=20;break;}
 case 20: 
 var $51=HEAP32[((16184)>>2)];
 _free($51);
 label=21;break;
 case 21: 
 var $52=HEAP8[((16164)>>0)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=23;break;}else{label=22;break;}
 case 22: 
 var $56=HEAP32[((16172)>>2)];
 _free($56);
 label=23;break;
 case 23: 
 var $57=HEAP8[((16152)>>0)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=25;break;}else{label=24;break;}
 case 24: 
 var $61=HEAP32[((16160)>>2)];
 _free($61);
 label=25;break;
 case 25: 
 var $62=HEAP8[((16140)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=27;break;}else{label=26;break;}
 case 26: 
 var $66=HEAP32[((16148)>>2)];
 _free($66);
 label=27;break;
 case 27: 
 var $67=HEAP8[((16128)>>0)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=29;break;}else{label=28;break;}
 case 28: 
 var $71=HEAP32[((16136)>>2)];
 _free($71);
 label=29;break;
 case 29: 
 var $72=HEAP8[((16116)>>0)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=31;break;}else{label=30;break;}
 case 30: 
 var $76=HEAP32[((16124)>>2)];
 _free($76);
 label=31;break;
 case 31: 
 var $77=HEAP8[((16104)>>0)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=33;break;}else{label=32;break;}
 case 32: 
 var $81=HEAP32[((16112)>>2)];
 _free($81);
 label=33;break;
 case 33: 
 var $82=HEAP8[((16092)>>0)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=35;break;}else{label=34;break;}
 case 34: 
 var $86=HEAP32[((16100)>>2)];
 _free($86);
 label=35;break;
 case 35: 
 var $87=HEAP8[((16080)>>0)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=37;break;}else{label=36;break;}
 case 36: 
 var $91=HEAP32[((16088)>>2)];
 _free($91);
 label=37;break;
 case 37: 
 var $92=HEAP8[((16068)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=39;break;}else{label=38;break;}
 case 38: 
 var $96=HEAP32[((16076)>>2)];
 _free($96);
 label=39;break;
 case 39: 
 var $97=HEAP8[((16056)>>0)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=41;break;}else{label=40;break;}
 case 40: 
 var $101=HEAP32[((16064)>>2)];
 _free($101);
 label=41;break;
 case 41: 
 var $102=HEAP8[((16044)>>0)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=43;break;}else{label=42;break;}
 case 42: 
 var $106=HEAP32[((16052)>>2)];
 _free($106);
 label=43;break;
 case 43: 
 var $107=HEAP8[((16032)>>0)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=45;break;}else{label=44;break;}
 case 44: 
 var $111=HEAP32[((16040)>>2)];
 _free($111);
 label=45;break;
 case 45: 
 var $112=HEAP8[((16020)>>0)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=47;break;}else{label=46;break;}
 case 46: 
 var $116=HEAP32[((16028)>>2)];
 _free($116);
 label=47;break;
 case 47: 
 var $117=HEAP8[((16008)>>0)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){label=49;break;}else{label=48;break;}
 case 48: 
 var $121=HEAP32[((16016)>>2)];
 _free($121);
 label=49;break;
 case 49: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[((15540)>>0)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((15548)>>2)];
 var $7=$6;
 _free($7);
 label=3;break;
 case 3: 
 var $8=HEAP8[((15528)>>0)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=4;break;}
 case 4: 
 var $12=HEAP32[((15536)>>2)];
 var $13=$12;
 _free($13);
 label=5;break;
 case 5: 
 var $14=HEAP8[((15516)>>0)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=7;break;}else{label=6;break;}
 case 6: 
 var $18=HEAP32[((15524)>>2)];
 var $19=$18;
 _free($19);
 label=7;break;
 case 7: 
 var $20=HEAP8[((15504)>>0)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 var $24=HEAP32[((15512)>>2)];
 var $25=$24;
 _free($25);
 label=9;break;
 case 9: 
 var $26=HEAP8[((15492)>>0)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=11;break;}else{label=10;break;}
 case 10: 
 var $30=HEAP32[((15500)>>2)];
 var $31=$30;
 _free($31);
 label=11;break;
 case 11: 
 var $32=HEAP8[((15480)>>0)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=13;break;}else{label=12;break;}
 case 12: 
 var $36=HEAP32[((15488)>>2)];
 var $37=$36;
 _free($37);
 label=13;break;
 case 13: 
 var $38=HEAP8[((15468)>>0)];
 var $39=$38&1;
 var $40=(($39<<24)>>24)==0;
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=HEAP32[((15476)>>2)];
 var $43=$42;
 _free($43);
 label=15;break;
 case 15: 
 var $44=HEAP8[((15456)>>0)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=17;break;}else{label=16;break;}
 case 16: 
 var $48=HEAP32[((15464)>>2)];
 var $49=$48;
 _free($49);
 label=17;break;
 case 17: 
 var $50=HEAP8[((15444)>>0)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=19;break;}else{label=18;break;}
 case 18: 
 var $54=HEAP32[((15452)>>2)];
 var $55=$54;
 _free($55);
 label=19;break;
 case 19: 
 var $56=HEAP8[((15432)>>0)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=21;break;}else{label=20;break;}
 case 20: 
 var $60=HEAP32[((15440)>>2)];
 var $61=$60;
 _free($61);
 label=21;break;
 case 21: 
 var $62=HEAP8[((15420)>>0)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=23;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[((15428)>>2)];
 var $67=$66;
 _free($67);
 label=23;break;
 case 23: 
 var $68=HEAP8[((15408)>>0)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=25;break;}else{label=24;break;}
 case 24: 
 var $72=HEAP32[((15416)>>2)];
 var $73=$72;
 _free($73);
 label=25;break;
 case 25: 
 var $74=HEAP8[((15396)>>0)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=27;break;}else{label=26;break;}
 case 26: 
 var $78=HEAP32[((15404)>>2)];
 var $79=$78;
 _free($79);
 label=27;break;
 case 27: 
 var $80=HEAP8[((15384)>>0)];
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=29;break;}else{label=28;break;}
 case 28: 
 var $84=HEAP32[((15392)>>2)];
 var $85=$84;
 _free($85);
 label=29;break;
 case 29: 
 var $86=HEAP8[((15372)>>0)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=HEAP32[((15380)>>2)];
 var $91=$90;
 _free($91);
 label=31;break;
 case 31: 
 var $92=HEAP8[((15360)>>0)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 if($94){label=33;break;}else{label=32;break;}
 case 32: 
 var $96=HEAP32[((15368)>>2)];
 var $97=$96;
 _free($97);
 label=33;break;
 case 33: 
 var $98=HEAP8[((15348)>>0)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[((15356)>>2)];
 var $103=$102;
 _free($103);
 label=35;break;
 case 35: 
 var $104=HEAP8[((15336)>>0)];
 var $105=$104&1;
 var $106=(($105<<24)>>24)==0;
 if($106){label=37;break;}else{label=36;break;}
 case 36: 
 var $108=HEAP32[((15344)>>2)];
 var $109=$108;
 _free($109);
 label=37;break;
 case 37: 
 var $110=HEAP8[((15324)>>0)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=39;break;}else{label=38;break;}
 case 38: 
 var $114=HEAP32[((15332)>>2)];
 var $115=$114;
 _free($115);
 label=39;break;
 case 39: 
 var $116=HEAP8[((15312)>>0)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=41;break;}else{label=40;break;}
 case 40: 
 var $120=HEAP32[((15320)>>2)];
 var $121=$120;
 _free($121);
 label=41;break;
 case 41: 
 var $122=HEAP8[((15300)>>0)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=43;break;}else{label=42;break;}
 case 42: 
 var $126=HEAP32[((15308)>>2)];
 var $127=$126;
 _free($127);
 label=43;break;
 case 43: 
 var $128=HEAP8[((15288)>>0)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=45;break;}else{label=44;break;}
 case 44: 
 var $132=HEAP32[((15296)>>2)];
 var $133=$132;
 _free($133);
 label=45;break;
 case 45: 
 var $134=HEAP8[((15276)>>0)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=47;break;}else{label=46;break;}
 case 46: 
 var $138=HEAP32[((15284)>>2)];
 var $139=$138;
 _free($139);
 label=47;break;
 case 47: 
 var $140=HEAP8[((15264)>>0)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=49;break;}else{label=48;break;}
 case 48: 
 var $144=HEAP32[((15272)>>2)];
 var $145=$144;
 _free($145);
 label=49;break;
 case 49: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=22;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[(($1)>>0)]=0;
 var $_0=$6;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_getc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[(($21)>>0)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[(($24)>>0)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[(($33)>>0)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_getc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[(($29)>>0)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[(($41)>>0)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[(($66)>>0)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[(($1)>>0)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=23;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[(($1)>>0)]=0;
 var $_0=$6;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_getc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[(($21)>>0)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[(($24)>>0)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[(($33)>>0)];
 HEAP8[(($__1buf)>>0)]=$34;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_getc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[(($29)>>0)];
 HEAP8[(($__1buf)>>0)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[(($40)>>0)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[(($64)>>0)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[(($__1buf)>>0)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[(($__1buf)>>0)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=__ZNSt3__16__clocEv();
 var $6$0=_strtoll($__a,$__p2,$__base);
 var $6$1=tempRet0;
 var $7=HEAP32[(($3)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($3)>>2)]=$4;
 label=4;break;
 case 4: 
 var $11=HEAP32[(($__p2)>>2)];
 var $12=($11|0)==($__a_end|0);
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 6: 
 var $15=($7|0)==34;
 if($15){label=11;break;}else{label=7;break;}
 case 7: 
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $17=(($6$1|0) < ($$etemp$0$1|0)) | (((($6$1|0) == ($$etemp$0$1|0) & ($6$0>>>0) <  ($$etemp$0$0>>>0))));
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($__err)>>2)]=4;
 label=12;break;
 case 9: 
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $19=(($6$1|0) > ($$etemp$1$1|0)) | (((($6$1|0) == ($$etemp$1$1|0) & ($6$0>>>0) >  ($$etemp$1$0>>>0))));
 if($19){label=10;break;}else{label=13;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=2147483647;label=15;break;
 case 11: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $21=(($6$1|0) > ($$etemp$2$1|0)) | (((($6$1|0) == ($$etemp$2$1|0) & ($6$0>>>0) >  ($$etemp$2$0>>>0))));
 if($21){var $_0=2147483647;label=15;break;}else{label=12;break;}
 case 12: 
 var $_0=-2147483648;label=15;break;
 case 13: 
 var $24$0=$6$0;
 var $24=$24$0;
 var $_0=$24;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=8;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=__ZNSt3__16__clocEv();
 var $6$0=_strtoll($__a,$__p2,$__base);
 var $6$1=tempRet0;
 var $7=HEAP32[(($3)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($3)>>2)]=$4;
 label=4;break;
 case 4: 
 var $11=HEAP32[(($__p2)>>2)];
 var $12=($11|0)==($__a_end|0);
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=9;break;
 case 6: 
 var $15=($7|0)==34;
 if($15){label=7;break;}else{var $_0$1=$6$1;var $_0$0=$6$0;label=9;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $17=(($6$1|0) > ($$etemp$0$1|0)) | (((($6$1|0) == ($$etemp$0$1|0) & ($6$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($17?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($17?$$etemp$1$1:$$etemp$2$1);
 STACKTOP=sp;return (tempRet0=$_$1,$_$0);
 case 8: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=9;break;
 case 9: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[(($__a)>>0)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=__ZNSt3__16__clocEv();
 var $10$0=_strtoull($__a,$__p2,$__base);
 var $10$1=tempRet0;
 var $11=HEAP32[(($7)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($7)>>2)]=$8;
 label=6;break;
 case 6: 
 var $15=HEAP32[(($__p2)>>2)];
 var $16=($15|0)==($__a_end|0);
 if($16){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 8: 
 var $19=($11|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $20=(($10$1>>>0) > ($$etemp$0$1>>>0)) | (((($10$1>>>0) == ($$etemp$0$1>>>0) & ($10$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$19|$20;
 if($or_cond){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=12;break;
 case 10: 
 var $23$0=$10$0;
 var $23=$23$0&65535;
 var $_0=$23;label=12;break;
 case 11: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[(($__a)>>0)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=__ZNSt3__16__clocEv();
 var $10$0=_strtoull($__a,$__p2,$__base);
 var $10$1=tempRet0;
 var $11=HEAP32[(($7)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($7)>>2)]=$8;
 label=6;break;
 case 6: 
 var $15=HEAP32[(($__p2)>>2)];
 var $16=($15|0)==($__a_end|0);
 if($16){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 8: 
 var $19=($11|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $20=(($10$1>>>0) > ($$etemp$0$1>>>0)) | (((($10$1>>>0) == ($$etemp$0$1>>>0) & ($10$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$19|$20;
 if($or_cond){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=12;break;
 case 10: 
 var $23$0=$10$0;
 var $23=$23$0;
 var $_0=$23;label=12;break;
 case 11: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[(($__a)>>0)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=__ZNSt3__16__clocEv();
 var $10$0=_strtoull($__a,$__p2,$__base);
 var $10$1=tempRet0;
 var $11=HEAP32[(($7)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($7)>>2)]=$8;
 label=6;break;
 case 6: 
 var $15=HEAP32[(($__p2)>>2)];
 var $16=($15|0)==($__a_end|0);
 if($16){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 8: 
 var $19=($11|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $20=(($10$1>>>0) > ($$etemp$0$1>>>0)) | (((($10$1>>>0) == ($$etemp$0$1>>>0) & ($10$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$19|$20;
 if($or_cond){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=12;break;
 case 10: 
 var $23$0=$10$0;
 var $23=$23$0;
 var $_0=$23;label=12;break;
 case 11: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=10;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[(($__a)>>0)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=11;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=__ZNSt3__16__clocEv();
 var $10$0=_strtoull($__a,$__p2,$__base);
 var $10$1=tempRet0;
 var $11=HEAP32[(($7)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($7)>>2)]=$8;
 label=6;break;
 case 6: 
 var $15=HEAP32[(($__p2)>>2)];
 var $16=($15|0)==($__a_end|0);
 if($16){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=11;break;
 case 8: 
 var $19=($11|0)==34;
 if($19){label=9;break;}else{var $_0$1=$10$1;var $_0$0=$10$0;label=11;break;}
 case 9: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=11;break;
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=11;break;
 case 11: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=9;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=__ZNSt3__16__clocEv();
 var $6=_strtold_l($__a,$__p2);
 var $7=HEAP32[(($3)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($3)>>2)]=$4;
 label=4;break;
 case 4: 
 var $11=HEAP32[(($__p2)>>2)];
 var $12=($11|0)==($__a_end|0);
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=10;break;
 case 6: 
 var $15=($7|0)==34;
 if($15){label=7;break;}else{label=8;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 label=8;break;
 case 8: 
 var $18=$6;
 var $_0=$18;label=10;break;
 case 9: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=8;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=__ZNSt3__16__clocEv();
 var $6=_strtold_l($__a,$__p2);
 var $7=HEAP32[(($3)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($3)>>2)]=$4;
 label=4;break;
 case 4: 
 var $11=HEAP32[(($__p2)>>2)];
 var $12=($11|0)==($__a_end|0);
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=9;break;
 case 6: 
 var $15=($7|0)==34;
 if($15){label=7;break;}else{var $_0=$6;label=9;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$6;label=9;break;
 case 8: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=9;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=8;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=__ZNSt3__16__clocEv();
 var $6=_strtold_l($__a,$__p2);
 var $7=HEAP32[(($3)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($3)>>2)]=$4;
 label=4;break;
 case 4: 
 var $11=HEAP32[(($__p2)>>2)];
 var $12=($11|0)==($__a_end|0);
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=9;break;
 case 6: 
 var $15=($7|0)==34;
 if($15){label=7;break;}else{var $_0=$6;label=9;break;}
 case 7: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$6;label=9;break;
 case 8: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=9;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n>>>0)>1073741823;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=(($this+128)|0);
 var $5=HEAP8[(($4)>>0)];
 var $_not_i_i=(($5<<24)>>24)==0;
 var $6=($__n>>>0)<29;
 var $or_cond_i_i=$_not_i_i&$6;
 if($or_cond_i_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $8=(($this+16)|0);
 HEAP8[(($4)>>0)]=1;
 var $9=$8;
 var $_0_i_i=$9;label=6;break;
 case 5: 
 var $11=$__n<<2;
 var $12=__Znwj($11);
 var $13=$12;
 var $_0_i_i=$13;label=6;break;
 case 6: 
 var $_0_i_i;
 var $14=(($this+4)|0);
 HEAP32[(($14)>>2)]=$_0_i_i;
 var $15=(($this)|0);
 HEAP32[(($15)>>2)]=$_0_i_i;
 var $16=(($_0_i_i+($__n<<2))|0);
 var $17=(($this+8)|0);
 HEAP32[(($17)>>2)]=$16;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?14296:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[(($src)>>0)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((4664+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[(($s_0)>>0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[(($45)>>0)];
 var $57=$56&-64;
 var $58=(($57<<24)>>24)==-128;
 if($58){var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}else{label=18;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $59=___errno_location();
 HEAP32[(($59)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_36=$wn;label=15;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=35;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_03=$wn;label=7;break;}else{var $s_5_ph=$1;var $_02_ph=$ws;var $_47_ph=$wn;label=6;break;}
 case 6: 
 var $_47_ph;
 var $_02_ph;
 var $s_5_ph;
 var $12=($_47_ph|0)==0;
 if($12){var $s_5_lcssa=$s_5_ph;label=25;break;}else{var $_4716=$_47_ph;var $_0217=$_02_ph;var $s_518=$s_5_ph;label=26;break;}
 case 7: 
 var $_03;
 var $s_0;
 var $13=HEAP8[(($s_0)>>0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$13;label=11;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$13;label=11;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_148=$_03;var $s_19=$s_0;label=10;break;}else{var $s_2=$s_0;var $_25=$_03;var $37=$27;label=11;break;}
 case 10: 
 var $s_19;
 var $_148;
 var $28=(($s_19+4)|0);
 var $29=((($_148)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 var $36=(($31)&255);
 if($35){var $_148=$29;var $s_19=$28;label=10;break;}else{var $s_2=$28;var $_25=$29;var $37=$36;label=11;break;}
 case 11: 
 var $37;
 var $_25;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($s_2+1)|0);
 var $43=((($_25)-(1))|0);
 var $s_0=$42;var $_03=$43;label=7;break;
 case 13: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_830=$_25;var $_432=$ws;var $s_1034=$s_2;var $182=$37;label=47;break;}else{label=14;break;}
 case 14: 
 var $48=(($s_2+1)|0);
 var $49=((4664+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_36=$_25;label=15;break;
 case 15: 
 var $_36;
 var $s_3;
 var $c_2;
 var $52=HEAP8[(($s_3)>>0)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_36;label=45;break;
 case 17: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=24;break;}else{label=18;break;}
 case 18: 
 var $67=HEAP8[(($63)>>0)];
 var $68=$67&-64;
 var $69=(($68<<24)>>24)==-128;
 if($69){label=20;break;}else{label=19;break;}
 case 19: 
 var $71=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$71;var $_4=$ws;var $_8=$_36;label=45;break;
 case 20: 
 var $73=(($s_3+2)|0);
 var $74=$c_2&524288;
 var $75=($74|0)==0;
 if($75){var $s_4=$73;label=24;break;}else{label=21;break;}
 case 21: 
 var $77=HEAP8[(($73)>>0)];
 var $78=$77&-64;
 var $79=(($78<<24)>>24)==-128;
 if($79){label=23;break;}else{label=22;break;}
 case 22: 
 var $81=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$81;var $_4=$ws;var $_8=$_36;label=45;break;
 case 23: 
 var $83=(($s_3+3)|0);
 var $s_4=$83;label=24;break;
 case 24: 
 var $s_4;
 var $85=((($_36)-(1))|0);
 var $s_0=$s_4;var $_03=$85;label=7;break;
 case 25: 
 var $s_5_lcssa;
 HEAP32[(($src)>>2)]=$s_5_lcssa;
 var $_0=$wn;label=53;break;
 case 26: 
 var $s_518;
 var $_0217;
 var $_4716;
 var $86=HEAP8[(($s_518)>>0)];
 var $87=($86&255);
 var $88=((($87)-(1))|0);
 var $89=($88>>>0)<127;
 if($89){label=27;break;}else{var $s_7=$s_518;var $_2=$_0217;var $_6=$_4716;var $119=$86;label=31;break;}
 case 27: 
 var $91=$s_518;
 var $92=$91&3;
 var $93=($92|0)==0;
 var $94=($_4716>>>0)>4;
 var $or_cond=$93&$94;
 if($or_cond){var $s_6=$s_518;var $_1=$_0217;var $_5=$_4716;label=28;break;}else{var $s_7=$s_518;var $_2=$_0217;var $_6=$_4716;var $119=$86;label=31;break;}
 case 28: 
 var $_5;
 var $_1;
 var $s_6;
 var $95=$s_6;
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)-(16843009))|0);
 var $98=$97|$96;
 var $99=$98&-2139062144;
 var $100=($99|0)==0;
 var $101=(($96)&255);
 if($100){label=29;break;}else{var $s_7=$s_6;var $_2=$_1;var $_6=$_5;var $119=$101;label=31;break;}
 case 29: 
 var $103=(($s_6+1)|0);
 var $104=$96&255;
 var $105=(($_1+4)|0);
 HEAP32[(($_1)>>2)]=$104;
 var $106=(($s_6+2)|0);
 var $107=HEAP8[(($103)>>0)];
 var $108=($107&255);
 var $109=(($_1+8)|0);
 HEAP32[(($105)>>2)]=$108;
 var $110=(($s_6+3)|0);
 var $111=HEAP8[(($106)>>0)];
 var $112=($111&255);
 var $113=(($_1+12)|0);
 HEAP32[(($109)>>2)]=$112;
 var $114=(($s_6+4)|0);
 var $115=HEAP8[(($110)>>0)];
 var $116=($115&255);
 var $117=(($_1+16)|0);
 HEAP32[(($113)>>2)]=$116;
 var $118=((($_5)-(4))|0);
 var $_old1=($118>>>0)>4;
 if($_old1){var $s_6=$114;var $_1=$117;var $_5=$118;label=28;break;}else{label=30;break;}
 case 30: 
 var $_pre_pre=HEAP8[(($114)>>0)];
 var $s_7=$114;var $_2=$117;var $_6=$118;var $119=$_pre_pre;label=31;break;
 case 31: 
 var $119;
 var $_6;
 var $_2;
 var $s_7;
 var $120=($119&255);
 var $121=((($120)-(1))|0);
 var $122=($121>>>0)<127;
 if($122){label=32;break;}else{label=33;break;}
 case 32: 
 var $124=(($s_7+1)|0);
 var $125=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$120;
 var $126=((($_6)-(1))|0);
 var $127=($126|0)==0;
 if($127){var $s_5_lcssa=$124;label=25;break;}else{var $_4716=$126;var $_0217=$125;var $s_518=$124;label=26;break;}
 case 33: 
 var $129=((($120)-(194))|0);
 var $130=($129>>>0)>50;
 if($130){var $_830=$_6;var $_432=$_2;var $s_1034=$s_7;var $182=$119;label=47;break;}else{label=34;break;}
 case 34: 
 var $132=(($s_7+1)|0);
 var $133=((4664+($129<<2))|0);
 var $134=HEAP32[(($133)>>2)];
 var $c_4=$134;var $s_8=$132;var $_3=$_2;var $_7=$_6;label=35;break;
 case 35: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $136=HEAP8[(($s_8)>>0)];
 var $137=($136&255);
 var $138=$137>>>3;
 var $139=((($138)-(16))|0);
 var $140=$c_4>>26;
 var $141=((($138)+($140))|0);
 var $142=$139|$141;
 var $143=($142>>>0)>7;
 if($143){label=36;break;}else{label=37;break;}
 case 36: 
 var $145=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$145;var $_4=$_3;var $_8=$_7;label=45;break;
 case 37: 
 var $147=$c_4<<6;
 var $148=(($s_8+1)|0);
 var $149=((($137)-(128))|0);
 var $150=$149|$147;
 var $151=($150|0)<0;
 if($151){label=38;break;}else{var $c_5=$150;var $s_9=$148;label=44;break;}
 case 38: 
 var $153=HEAP8[(($148)>>0)];
 var $154=($153&255);
 var $155=$154&192;
 var $156=($155|0)==128;
 if($156){label=40;break;}else{label=39;break;}
 case 39: 
 var $158=((($s_8)-(1))|0);
 var $c_6=$150;var $s_10=$158;var $_4=$_3;var $_8=$_7;label=45;break;
 case 40: 
 var $160=$150<<6;
 var $161=(($s_8+2)|0);
 var $162=((($154)-(128))|0);
 var $163=$162|$160;
 var $164=($163|0)<0;
 if($164){label=41;break;}else{var $c_5=$163;var $s_9=$161;label=44;break;}
 case 41: 
 var $166=HEAP8[(($161)>>0)];
 var $167=($166&255);
 var $168=$167&192;
 var $169=($168|0)==128;
 if($169){label=43;break;}else{label=42;break;}
 case 42: 
 var $171=((($s_8)-(1))|0);
 var $c_6=$163;var $s_10=$171;var $_4=$_3;var $_8=$_7;label=45;break;
 case 43: 
 var $173=$163<<6;
 var $174=(($s_8+3)|0);
 var $175=((($167)-(128))|0);
 var $176=$175|$173;
 var $c_5=$176;var $s_9=$174;label=44;break;
 case 44: 
 var $s_9;
 var $c_5;
 var $178=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $179=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_02_ph=$178;var $_47_ph=$179;label=6;break;
 case 45: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $181=($c_6|0)==0;
 if($181){label=46;break;}else{var $_431=$_4;var $s_1033=$s_10;label=51;break;}
 case 46: 
 var $_pre=HEAP8[(($s_10)>>0)];
 var $_830=$_8;var $_432=$_4;var $s_1034=$s_10;var $182=$_pre;label=47;break;
 case 47: 
 var $182;
 var $s_1034;
 var $_432;
 var $_830;
 var $183=(($182<<24)>>24)==0;
 if($183){label=48;break;}else{var $_431=$_432;var $s_1033=$s_1034;label=51;break;}
 case 48: 
 var $185=($_432|0)==0;
 if($185){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($_432)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $188=((($wn)-($_830))|0);
 var $_0=$188;label=53;break;
 case 51: 
 var $s_1033;
 var $_431;
 var $190=___errno_location();
 HEAP32[(($190)>>2)]=84;
 var $191=($_431|0)==0;
 if($191){var $_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_1033;
 var $_0=-1;label=53;break;
 case 53: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcsrtombs($s,$ws,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $1=($s|0)==0;
 if($1){label=4;break;}else{label=2;break;}
 case 2: 
 var $2=($n>>>0)>3;
 if($2){label=3;break;}else{var $_24_lcssa=$n;var $_01_lcssa=$s;label=8;break;}
 case 3: 
 var $_pre40=HEAP32[(($ws)>>2)];
 var $_2424=$n;var $_0125=$s;var $20=$_pre40;label=10;break;
 case 4: 
 var $4=HEAP32[(($ws)>>2)];
 var $5=(($buf)|0);
 var $6=HEAP32[(($4)>>2)];
 var $7=($6|0)==0;
 if($7){var $_0=0;label=26;break;}else{var $_026=0;var $ws2_07=$4;var $8=$6;label=5;break;}
 case 5: 
 var $8;
 var $ws2_07;
 var $_026;
 var $9=($8>>>0)>127;
 if($9){label=6;break;}else{var $_pn=1;label=7;break;}
 case 6: 
 var $11=_wcrtomb($5,$8);
 var $12=($11|0)==-1;
 if($12){var $_0=-1;label=26;break;}else{var $_pn=$11;label=7;break;}
 case 7: 
 var $_pn;
 var $_13=((($_pn)+($_026))|0);
 var $14=(($ws2_07+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){var $_0=$_13;label=26;break;}else{var $_026=$_13;var $ws2_07=$14;var $8=$15;label=5;break;}
 case 8: 
 var $_01_lcssa;
 var $_24_lcssa;
 var $17=($_24_lcssa|0)==0;
 if($17){var $_0=$n;label=26;break;}else{label=9;break;}
 case 9: 
 var $18=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $_414=$_24_lcssa;var $_215=$_01_lcssa;var $43=$_pre;label=17;break;
 case 10: 
 var $20;
 var $_0125;
 var $_2424;
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)-(1))|0);
 var $23=($22>>>0)>126;
 if($23){label=11;break;}else{label=15;break;}
 case 11: 
 var $25=($21|0)==0;
 if($25){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP8[(($_0125)>>0)]=0;
 HEAP32[(($ws)>>2)]=0;
 var $27=((($n)-($_2424))|0);
 var $_0=$27;label=26;break;
 case 13: 
 var $29=_wcrtomb($_0125,$21);
 var $30=($29|0)==-1;
 if($30){var $_0=-1;label=26;break;}else{label=14;break;}
 case 14: 
 var $32=(($_0125+$29)|0);
 var $33=((($_2424)-($29))|0);
 var $_1=$32;var $_35=$33;var $39=$20;label=16;break;
 case 15: 
 var $35=(($21)&255);
 var $36=(($_0125+1)|0);
 HEAP8[(($_0125)>>0)]=$35;
 var $37=((($_2424)-(1))|0);
 var $_pre41=HEAP32[(($ws)>>2)];
 var $_1=$36;var $_35=$37;var $39=$_pre41;label=16;break;
 case 16: 
 var $39;
 var $_35;
 var $_1;
 var $40=(($39+4)|0);
 HEAP32[(($ws)>>2)]=$40;
 var $41=($_35>>>0)>3;
 if($41){var $_2424=$_35;var $_0125=$_1;var $20=$40;label=10;break;}else{var $_24_lcssa=$_35;var $_01_lcssa=$_1;label=8;break;}
 case 17: 
 var $43;
 var $_215;
 var $_414;
 var $44=HEAP32[(($43)>>2)];
 var $45=((($44)-(1))|0);
 var $46=($45>>>0)>126;
 if($46){label=18;break;}else{label=24;break;}
 case 18: 
 var $48=($44|0)==0;
 if($48){label=19;break;}else{label=20;break;}
 case 19: 
 HEAP8[(($_215)>>0)]=0;
 HEAP32[(($ws)>>2)]=0;
 var $50=((($n)-($_414))|0);
 var $_0=$50;label=26;break;
 case 20: 
 var $52=_wcrtomb($18,$44);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=26;break;}else{label=21;break;}
 case 21: 
 var $55=($_414>>>0)<($52>>>0);
 if($55){label=22;break;}else{label=23;break;}
 case 22: 
 var $57=((($n)-($_414))|0);
 var $_0=$57;label=26;break;
 case 23: 
 var $59=HEAP32[(($43)>>2)];
 var $60=_wcrtomb($_215,$59);
 var $61=(($_215+$52)|0);
 var $62=((($_414)-($52))|0);
 var $_3=$61;var $_5=$62;var $68=$43;label=25;break;
 case 24: 
 var $64=(($44)&255);
 var $65=(($_215+1)|0);
 HEAP8[(($_215)>>0)]=$64;
 var $66=((($_414)-(1))|0);
 var $_pre39=HEAP32[(($ws)>>2)];
 var $_3=$65;var $_5=$66;var $68=$_pre39;label=25;break;
 case 25: 
 var $68;
 var $_5;
 var $_3;
 var $69=(($68+4)|0);
 HEAP32[(($ws)>>2)]=$69;
 var $70=($_5|0)==0;
 if($70){var $_0=$n;label=26;break;}else{var $_414=$_5;var $_215=$_3;var $43=$69;label=17;break;}
 case 26: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___string_read($f,$buf,$len){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+84)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=((($len)+(256))|0);
 var $4=$2;
 var $5=$4&3;
 var $6=($5|0)!=0;
 var $7=($3|0)!=0;
 var $or_cond11_i=$6&$7;
 if($or_cond11_i){var $_012_i=$3;var $s_013_i=$2;label=2;break;}else{var $_0_lcssa_i=$3;var $s_0_lcssa_i=$2;var $_lcssa_i=$7;label=4;break;}
 case 2: 
 var $s_013_i;
 var $_012_i;
 var $8=HEAP8[(($s_013_i)>>0)];
 var $9=(($8<<24)>>24)==0;
 if($9){var $s_2_i=$s_013_i;var $_3_i=$_012_i;label=12;break;}else{label=3;break;}
 case 3: 
 var $11=(($s_013_i+1)|0);
 var $12=((($_012_i)-(1))|0);
 var $13=$11;
 var $14=$13&3;
 var $15=($14|0)!=0;
 var $16=($12|0)!=0;
 var $or_cond_i=$15&$16;
 if($or_cond_i){var $_012_i=$12;var $s_013_i=$11;label=2;break;}else{var $_0_lcssa_i=$12;var $s_0_lcssa_i=$11;var $_lcssa_i=$16;label=4;break;}
 case 4: 
 var $_lcssa_i;
 var $s_0_lcssa_i;
 var $_0_lcssa_i;
 if($_lcssa_i){label=5;break;}else{var $s_2_i=$s_0_lcssa_i;var $_3_i=0;label=12;break;}
 case 5: 
 var $_pre=HEAP8[(($s_0_lcssa_i)>>0)];
 var $phitmp=(($_pre<<24)>>24)==0;
 if($phitmp){var $s_2_i=$s_0_lcssa_i;var $_3_i=$_0_lcssa_i;label=12;break;}else{label=6;break;}
 case 6: 
 var $18=$s_0_lcssa_i;
 var $19=($_0_lcssa_i>>>0)>3;
 if($19){var $_15_i=$_0_lcssa_i;var $w_06_i=$18;label=7;break;}else{var $_1_lcssa_i=$_0_lcssa_i;var $w_0_lcssa_i=$18;label=9;break;}
 case 7: 
 var $w_06_i;
 var $_15_i;
 var $20=HEAP32[(($w_06_i)>>2)];
 var $21=((($20)-(16843009))|0);
 var $22=$20&-2139062144;
 var $23=$22^-2139062144;
 var $24=$23&$21;
 var $25=($24|0)==0;
 if($25){label=8;break;}else{var $_1_lcssa_i=$_15_i;var $w_0_lcssa_i=$w_06_i;label=9;break;}
 case 8: 
 var $27=(($w_06_i+4)|0);
 var $28=((($_15_i)-(4))|0);
 var $29=($28>>>0)>3;
 if($29){var $_15_i=$28;var $w_06_i=$27;label=7;break;}else{var $_1_lcssa_i=$28;var $w_0_lcssa_i=$27;label=9;break;}
 case 9: 
 var $w_0_lcssa_i;
 var $_1_lcssa_i;
 var $30=$w_0_lcssa_i;
 var $31=($_1_lcssa_i|0)==0;
 if($31){var $s_2_i=$30;var $_3_i=0;label=12;break;}else{var $_22_i=$_1_lcssa_i;var $s_13_i=$30;label=10;break;}
 case 10: 
 var $s_13_i;
 var $_22_i;
 var $32=HEAP8[(($s_13_i)>>0)];
 var $33=(($32<<24)>>24)==0;
 if($33){var $s_2_i=$s_13_i;var $_3_i=$_22_i;label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($s_13_i+1)|0);
 var $36=((($_22_i)-(1))|0);
 var $37=($36|0)==0;
 if($37){var $s_2_i=$35;var $_3_i=0;label=12;break;}else{var $_22_i=$36;var $s_13_i=$35;label=10;break;}
 case 12: 
 var $_3_i;
 var $s_2_i;
 var $38=($_3_i|0)!=0;
 var $39=($38?$s_2_i:0);
 var $40=($39|0)==0;
 if($40){var $k_0=$3;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=$39;
 var $43=((($42)-($4))|0);
 var $k_0=$43;label=14;break;
 case 14: 
 var $k_0;
 var $45=($k_0>>>0)<($len>>>0);
 var $k_0_len=($45?$k_0:$len);
 assert($k_0_len % 1 === 0);(_memcpy($buf, $2, $k_0_len)|0);
 var $46=(($2+$k_0_len)|0);
 var $47=(($f+4)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=(($2+$k_0)|0);
 var $49=(($f+8)|0);
 HEAP32[(($49)>>2)]=$48;
 HEAP32[(($1)>>2)]=$48;
 return $k_0_len;
  default: assert(0, "bad label: " + label);
 }

}


function _sscanf($s,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vsscanf($s,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _vsscanf($s,$fmt,$ap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap2_i_i=sp;
 var $st_i=(sp)+(16);
 var $scanset_i=(sp)+(24);
 var $wc_i=(sp)+(288);
 var $1=(sp)+(296);
 var $f=(sp)+(304);
 var $2=$f;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($2, 0, 112)|0;
 var $3=(($f+32)|0);
 HEAP32[(($3)>>2)]=248;
 var $4=(($f+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f+76)|0);
 HEAP32[(($5)>>2)]=-1;
 var $6=(($f+84)|0);
 HEAP32[(($6)>>2)]=$s;
 var $7=$st_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;

 var $8=$wc_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $$etemp$3$0=1;
 var $$etemp$3$1=0;

 var $9=(($scanset_i)|0);
 var $$etemp$4$0=257;
 var $$etemp$4$1=0;

 var $10=HEAP8[(($fmt)>>0)];
 var $11=(($10<<24)>>24)==0;
 if($11){var $matches_3_i=0;label=173;break;}else{label=2;break;}
 case 2: 
 var $12=$ap2_i_i;
 var $13=(($ap2_i_i)|0);
 var $14=$ap;
 var $15=(($f+4)|0);
 var $16=(($f+100)|0);
 var $17=(($f+108)|0);
 var $18=(($f+8)|0);
 var $19=(($scanset_i+10)|0);
 var $20=(($scanset_i+33)|0);
 var $21=(($st_i)|0);
 var $22=(($st_i+4)|0);
 var $23=(($scanset_i+46)|0);
 var $24=(($scanset_i+94)|0);
 var $25=(($f+104)|0);
 var $s_0133_i=0;var $wcs_0134_i=0;var $matches_0135_i=0;var $pos_0140_i=0;var $p_0141_i=$fmt;var $27=$10;label=3;break;
 case 3: 
 var $27;
 var $p_0141_i;
 var $pos_0140_i;
 var $matches_0135_i;
 var $wcs_0134_i;
 var $s_0133_i;
 var $28=(($27<<24)>>24)==32;
 if($28){var $p_1_i=$p_0141_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $29=($27&255);
 var $30=((($29)-(9))|0);
 var $phitmp=($30>>>0)>4;
 if($phitmp){label=16;break;}else{var $p_1_i=$p_0141_i;label=5;break;}
 case 5: 
 var $p_1_i;
 var $31=(($p_1_i+1)|0);
 var $32=HEAP8[(($31)>>0)];
 var $33=(($32<<24)>>24)==32;
 if($33){var $p_1_i=$31;label=5;break;}else{label=6;break;}
 case 6: 
 var $34=($32&255);
 var $35=((($34)-(9))|0);
 var $phitmp1=($35>>>0)>4;
 if($phitmp1){label=7;break;}else{var $p_1_i=$31;label=5;break;}
 case 7: 
 HEAP32[(($25)>>2)]=0;
 var $37=HEAP32[(($18)>>2)];
 var $38=HEAP32[(($15)>>2)];
 var $39=$37;
 var $40=$38;
 var $41=((($39)-($40))|0);
 HEAP32[(($17)>>2)]=$41;
 HEAP32[(($16)>>2)]=$37;
 var $43=$38;var $42=$37;label=8;break;
 case 8: 
 var $42;
 var $43;
 var $44=($43>>>0)<($42>>>0);
 if($44){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($43+1)|0);
 HEAP32[(($15)>>2)]=$46;
 var $47=HEAP8[(($43)>>0)];
 var $48=($47&255);
 var $52=$48;label=11;break;
 case 10: 
 var $50=___shgetc($f);
 var $52=$50;label=11;break;
 case 11: 
 var $52;
 switch(($52|0)){case 32:case 13:case 12:case 11:case 10:case 9:{ label=12;break;}default:{label=13;break;}}break;
 case 12: 
 var $_pre16=HEAP32[(($15)>>2)];
 var $_pre17=HEAP32[(($16)>>2)];
 var $43=$_pre16;var $42=$_pre17;label=8;break;
 case 13: 
 var $54=HEAP32[(($16)>>2)];
 var $55=($54|0)==0;
 var $_pre240_i=HEAP32[(($15)>>2)];
 if($55){var $58=$_pre240_i;label=15;break;}else{label=14;break;}
 case 14: 
 var $57=((($_pre240_i)-(1))|0);
 HEAP32[(($15)>>2)]=$57;
 var $58=$57;label=15;break;
 case 15: 
 var $58;
 var $59=HEAP32[(($17)>>2)];
 var $60=HEAP32[(($18)>>2)];
 var $61=$58;
 var $62=$60;
 var $63=((($59)+($pos_0140_i))|0);
 var $64=((($63)+($61))|0);
 var $65=((($64)-($62))|0);
 var $p_11_i=$p_1_i;var $pos_2_i=$65;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_0134_i;var $s_5_i=$s_0133_i;label=168;break;
 case 16: 
 var $67=(($27<<24)>>24)==37;
 if($67){label=17;break;}else{label=18;break;}
 case 17: 
 var $69=(($p_0141_i+1)|0);
 var $70=HEAP8[(($69)>>0)];
 if((($70<<24)>>24)==37){ label=18;break;}else if((($70<<24)>>24)==42){ label=26;break;}else{label=27;break;}
 case 18: 
 var $72=($67&1);
 var $73=(($p_0141_i+$72)|0);
 HEAP32[(($25)>>2)]=0;
 var $74=HEAP32[(($18)>>2)];
 var $75=HEAP32[(($15)>>2)];
 var $76=$74;
 var $77=$75;
 var $78=((($76)-($77))|0);
 HEAP32[(($17)>>2)]=$78;
 HEAP32[(($16)>>2)]=$74;
 var $79=($75>>>0)<($74>>>0);
 if($79){label=19;break;}else{label=20;break;}
 case 19: 
 var $81=(($75+1)|0);
 HEAP32[(($15)>>2)]=$81;
 var $82=HEAP8[(($75)>>0)];
 var $83=($82&255);
 var $87=$83;label=21;break;
 case 20: 
 var $85=___shgetc($f);
 var $87=$85;label=21;break;
 case 21: 
 var $87;
 var $88=HEAP8[(($73)>>0)];
 var $89=($88&255);
 var $90=($87|0)==($89|0);
 if($90){label=25;break;}else{label=22;break;}
 case 22: 
 var $92=HEAP32[(($16)>>2)];
 var $93=($92|0)==0;
 if($93){label=24;break;}else{label=23;break;}
 case 23: 
 var $95=HEAP32[(($15)>>2)];
 var $96=((($95)-(1))|0);
 HEAP32[(($15)>>2)]=$96;
 label=24;break;
 case 24: 
 var $98=($87|0)>-1;
 var $99=($matches_0135_i|0)!=0;
 var $or_cond5_i=$98|$99;
 if($or_cond5_i){var $matches_3_i=$matches_0135_i;label=173;break;}else{var $alloc_1_i=0;var $wcs_8_i=$wcs_0134_i;var $s_7_i=$s_0133_i;label=170;break;}
 case 25: 
 var $101=((($pos_0140_i)+(1))|0);
 var $p_11_i=$73;var $pos_2_i=$101;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_0134_i;var $s_5_i=$s_0133_i;label=168;break;
 case 26: 
 var $103=(($p_0141_i+2)|0);
 var $p_2_i=$103;var $dest_0_i=0;label=33;break;
 case 27: 
 var $105=($70&255);
 var $isdigittmp_i=((($105)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 if($isdigit_i){label=28;break;}else{label=32;break;}
 case 28: 
 var $107=(($p_0141_i+2)|0);
 var $108=HEAP8[(($107)>>0)];
 var $109=(($108<<24)>>24)==36;
 if($109){label=29;break;}else{label=32;break;}
 case 29: 
 var $$etemp$5$0=16;
 var $$etemp$5$1=0;

 _llvm_va_copy($12,$14);
 var $i_0_i_i=$isdigittmp_i;label=30;break;
 case 30: 
 var $i_0_i_i;
 var $112=($i_0_i_i>>>0)>1;
 var $113=(tempInt=HEAP32[((($13)+(4))>>2)],HEAP32[((($13)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($13)>>2)])+(tempInt))>>2)]);
 var $114=((($i_0_i_i)-(1))|0);
 if($112){var $i_0_i_i=$114;label=30;break;}else{label=31;break;}
 case 31: 

 var $$etemp$6$0=16;
 var $$etemp$6$1=0;

 var $115=(($p_0141_i+3)|0);
 var $p_2_i=$115;var $dest_0_i=$113;label=33;break;
 case 32: 
 var $117=(tempInt=HEAP32[((($ap)+(4))>>2)],HEAP32[((($ap)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($ap)>>2)])+(tempInt))>>2)]);
 var $p_2_i=$69;var $dest_0_i=$117;label=33;break;
 case 33: 
 var $dest_0_i;
 var $p_2_i;
 var $119=HEAP8[(($p_2_i)>>0)];
 var $120=($119&255);
 var $isdigittmp622_i=((($120)-(48))|0);
 var $isdigit723_i=($isdigittmp622_i>>>0)<10;
 if($isdigit723_i){var $p_324_i=$p_2_i;var $width_025_i=0;var $121=$120;label=34;break;}else{var $p_3_lcssa_i=$p_2_i;var $width_0_lcssa_i=0;var $_lcssa21_i=$119;label=35;break;}
 case 34: 
 var $121;
 var $width_025_i;
 var $p_324_i;
 var $122=((($width_025_i)*(10))&-1);
 var $123=((($122)-(48))|0);
 var $124=((($123)+($121))|0);
 var $125=(($p_324_i+1)|0);
 var $126=HEAP8[(($125)>>0)];
 var $127=($126&255);
 var $isdigittmp6_i=((($127)-(48))|0);
 var $isdigit7_i=($isdigittmp6_i>>>0)<10;
 if($isdigit7_i){var $p_324_i=$125;var $width_025_i=$124;var $121=$127;label=34;break;}else{var $p_3_lcssa_i=$125;var $width_0_lcssa_i=$124;var $_lcssa21_i=$126;label=35;break;}
 case 35: 
 var $_lcssa21_i;
 var $width_0_lcssa_i;
 var $p_3_lcssa_i;
 var $128=(($_lcssa21_i<<24)>>24)==109;
 if($128){label=36;break;}else{var $alloc_0_i=0;var $p_4_i=$p_3_lcssa_i;var $wcs_1_i=$wcs_0134_i;var $s_1_i=$s_0133_i;var $134=$_lcssa21_i;label=37;break;}
 case 36: 
 var $130=($dest_0_i|0)!=0;
 var $131=($130&1);
 var $132=(($p_3_lcssa_i+1)|0);
 var $_pre_i=HEAP8[(($132)>>0)];
 var $alloc_0_i=$131;var $p_4_i=$132;var $wcs_1_i=0;var $s_1_i=0;var $134=$_pre_i;label=37;break;
 case 37: 
 var $134;
 var $s_1_i;
 var $wcs_1_i;
 var $p_4_i;
 var $alloc_0_i;
 var $135=(($p_4_i+1)|0);
 var $136=($134&255);
 switch(($136|0)){case 104:{ label=38;break;}case 108:{ label=39;break;}case 122:case 116:{ label=40;break;}case 76:{ label=41;break;}case 100:case 105:case 111:case 117:case 120:case 97:case 101:case 102:case 103:case 65:case 69:case 70:case 71:case 88:case 115:case 99:case 91:case 83:case 67:case 112:case 110:{ label=42;break;}case 106:{ var $size_0_i=3;var $p_5_i=$135;label=43;break;}default:{var $wcs_7_i=$wcs_1_i;var $s_6_i=$s_1_i;var $alloc_0224_i=$alloc_0_i;label=169;break;}}break;
 case 38: 
 var $138=HEAP8[(($135)>>0)];
 var $139=(($138<<24)>>24)==104;
 var $140=(($p_4_i+2)|0);
 var $_10_i=($139?$140:$135);
 var $_11_i=($139?-2:-1);
 var $size_0_i=$_11_i;var $p_5_i=$_10_i;label=43;break;
 case 39: 
 var $142=HEAP8[(($135)>>0)];
 var $143=(($142<<24)>>24)==108;
 var $144=(($p_4_i+2)|0);
 var $_12_i=($143?$144:$135);
 var $_13_i=($143?3:1);
 var $size_0_i=$_13_i;var $p_5_i=$_12_i;label=43;break;
 case 40: 
 var $size_0_i=1;var $p_5_i=$135;label=43;break;
 case 41: 
 var $size_0_i=2;var $p_5_i=$135;label=43;break;
 case 42: 
 var $size_0_i=0;var $p_5_i=$p_4_i;label=43;break;
 case 43: 
 var $p_5_i;
 var $size_0_i;
 var $149=HEAP8[(($p_5_i)>>0)];
 var $150=($149&255);
 var $151=$150&47;
 var $152=($151|0)==3;
 var $153=$150|32;
 var $__i=($152?$153:$150);
 var $_size_0_i=($152?1:$size_0_i);
 if(($__i|0)==99){ label=44;break;}else if(($__i|0)==110){ label=45;break;}else if(($__i|0)==91){ var $width_1_i=$width_0_lcssa_i;var $pos_1_i=$pos_0140_i;label=61;break;}else{label=52;break;}
 case 44: 
 var $155=($width_0_lcssa_i|0)<1;
 var $_width_0_i=($155?1:$width_0_lcssa_i);
 var $width_1_i=$_width_0_i;var $pos_1_i=$pos_0140_i;label=61;break;
 case 45: 
 var $157$0=$pos_0140_i;
 var $157$1=((((($pos_0140_i|0)<0))|0)?-1:0);
 var $158=($dest_0_i|0)==0;
 if($158){var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;}else{label=46;break;}
 case 46: 
 switch(($_size_0_i|0)){case -2:{ label=47;break;}case -1:{ label=48;break;}case 0:{ label=49;break;}case 1:{ label=50;break;}case 3:{ label=51;break;}default:{var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;}}break;
 case 47: 
 var $161=(($pos_0140_i)&255);
 HEAP8[(($dest_0_i)>>0)]=$161;
 var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;
 case 48: 
 var $163=(($pos_0140_i)&65535);
 var $164=$dest_0_i;
 HEAP16[(($164)>>1)]=$163;
 var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;
 case 49: 
 var $166=$dest_0_i;
 HEAP32[(($166)>>2)]=$pos_0140_i;
 var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;
 case 50: 
 var $168=$dest_0_i;
 HEAP32[(($168)>>2)]=$pos_0140_i;
 var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;
 case 51: 
 var $170=$dest_0_i;
 var $st$7$0=(($170)|0);
 HEAP32[(($st$7$0)>>2)]=$157$0;
 var $st$8$1=(($170+4)|0);
 HEAP32[(($st$8$1)>>2)]=$157$1;
 var $p_11_i=$p_5_i;var $pos_2_i=$pos_0140_i;var $matches_1_i=$matches_0135_i;var $wcs_6_i=$wcs_1_i;var $s_5_i=$s_1_i;label=168;break;
 case 52: 
 HEAP32[(($25)>>2)]=0;
 var $172=HEAP32[(($18)>>2)];
 var $173=HEAP32[(($15)>>2)];
 var $174=$172;
 var $175=$173;
 var $176=((($174)-($175))|0);
 HEAP32[(($17)>>2)]=$176;
 HEAP32[(($16)>>2)]=$172;
 var $178=$173;var $177=$172;label=53;break;
 case 53: 
 var $177;
 var $178;
 var $179=($178>>>0)<($177>>>0);
 if($179){label=54;break;}else{label=55;break;}
 case 54: 
 var $181=(($178+1)|0);
 HEAP32[(($15)>>2)]=$181;
 var $182=HEAP8[(($178)>>0)];
 var $183=($182&255);
 var $187=$183;label=56;break;
 case 55: 
 var $185=___shgetc($f);
 var $187=$185;label=56;break;
 case 56: 
 var $187;
 switch(($187|0)){case 32:case 13:case 12:case 11:case 10:case 9:{ label=57;break;}default:{label=58;break;}}break;
 case 57: 
 var $_pre=HEAP32[(($15)>>2)];
 var $_pre15=HEAP32[(($16)>>2)];
 var $178=$_pre;var $177=$_pre15;label=53;break;
 case 58: 
 var $189=HEAP32[(($16)>>2)];
 var $190=($189|0)==0;
 var $_pre229_i=HEAP32[(($15)>>2)];
 if($190){var $193=$_pre229_i;label=60;break;}else{label=59;break;}
 case 59: 
 var $192=((($_pre229_i)-(1))|0);
 HEAP32[(($15)>>2)]=$192;
 var $193=$192;label=60;break;
 case 60: 
 var $193;
 var $194=HEAP32[(($17)>>2)];
 var $195=HEAP32[(($18)>>2)];
 var $196=$193;
 var $197=$195;
 var $198=((($194)+($pos_0140_i))|0);
 var $199=((($198)+($196))|0);
 var $200=((($199)-($197))|0);
 var $width_1_i=$width_0_lcssa_i;var $pos_1_i=$200;label=61;break;
 case 61: 
 var $pos_1_i;
 var $width_1_i;
 HEAP32[(($25)>>2)]=$width_1_i;
 var $202=HEAP32[(($18)>>2)];
 var $203=HEAP32[(($15)>>2)];
 var $204=$202;
 var $205=$203;
 var $206=((($204)-($205))|0);
 HEAP32[(($17)>>2)]=$206;
 var $207=($width_1_i|0)!=0;
 var $208=($206|0)>($width_1_i|0);
 var $or_cond_i_i=$207&$208;
 if($or_cond_i_i){label=62;break;}else{var $storemerge=$202;label=63;break;}
 case 62: 
 var $210=(($203+$width_1_i)|0);
 var $storemerge=$210;label=63;break;
 case 63: 
 var $storemerge;
 HEAP32[(($16)>>2)]=$storemerge;
 var $211=($203>>>0)<($storemerge>>>0);
 if($211){label=64;break;}else{label=65;break;}
 case 64: 
 var $212=(($203+1)|0);
 HEAP32[(($15)>>2)]=$212;
 var $217=$storemerge;label=67;break;
 case 65: 
 var $214=___shgetc($f);
 var $215=($214|0)<0;
 if($215){var $wcs_7_i=$wcs_1_i;var $s_6_i=$s_1_i;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{label=66;break;}
 case 66: 
 var $_pre231_i=HEAP32[(($16)>>2)];
 var $217=$_pre231_i;label=67;break;
 case 67: 
 var $217;
 var $218=($217|0)==0;
 if($218){label=69;break;}else{label=68;break;}
 case 68: 
 var $220=HEAP32[(($15)>>2)];
 var $221=((($220)-(1))|0);
 HEAP32[(($15)>>2)]=$221;
 label=69;break;
 case 69: 
 switch(($__i|0)){case 111:{ label=148;break;}case 100:case 117:{ label=149;break;}case 105:{ label=150;break;}case 112:case 88:case 120:{ var $base_0_i=16;label=151;break;}case 97:case 65:case 101:case 69:case 102:case 70:case 103:case 71:{ label=161;break;}case 115:case 99:case 91:{ label=70;break;}default:{var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;}}break;
 case 70: 
 var $224=($__i|0)==99;
 var $225=$__i&239;
 var $226=($225|0)==99;
 if($226){label=71;break;}else{label=73;break;}
 case 71: 
 var $228=($__i|0)==115;
 _memset($9, -1, 257)|0;
 HEAP8[(($9)>>0)]=0;
 if($228){label=72;break;}else{var $p_9_i=$p_5_i;label=84;break;}
 case 72: 
 HEAP8[(($20)>>0)]=0;
 HEAP8[(($19)>>0)]=0; HEAP8[((($19)+(1))>>0)]=0; HEAP8[((($19)+(2))>>0)]=0; HEAP8[((($19)+(3))>>0)]=0; HEAP8[((($19)+(4))>>0)]=0;
 var $p_9_i=$p_5_i;label=84;break;
 case 73: 
 var $231=(($p_5_i+1)|0);
 var $232=HEAP8[(($231)>>0)];
 var $233=(($232<<24)>>24)==94;
 var $234=(($p_5_i+2)|0);
 var $invert_0_i=($233&1);
 var $p_6_i=($233?$234:$231);
 var $235=($233&1);
 _memset($9, $235, 257)|0;
 HEAP8[(($9)>>0)]=0;
 var $236=HEAP8[(($p_6_i)>>0)];
 if((($236<<24)>>24)==45){ label=75;break;}else if((($236<<24)>>24)==93){ label=76;break;}else{label=74;break;}
 case 74: 
 var $_pre241_i=$invert_0_i^1;
 var $_pre242_i=(($_pre241_i)&255);
 var $p_7_ph_i=$p_6_i;var $_pre_phi243_i=$_pre242_i;label=77;break;
 case 75: 
 var $238=(($p_6_i+1)|0);
 var $239=$invert_0_i^1;
 var $240=(($239)&255);
 HEAP8[(($23)>>0)]=$240;
 var $p_7_ph_i=$238;var $_pre_phi243_i=$240;label=77;break;
 case 76: 
 var $242=(($p_6_i+1)|0);
 var $243=$invert_0_i^1;
 var $244=(($243)&255);
 HEAP8[(($24)>>0)]=$244;
 var $p_7_ph_i=$242;var $_pre_phi243_i=$244;label=77;break;
 case 77: 
 var $_pre_phi243_i;
 var $p_7_ph_i;
 var $p_7_i=$p_7_ph_i;label=78;break;
 case 78: 
 var $p_7_i;
 var $246=HEAP8[(($p_7_i)>>0)];
 if((($246<<24)>>24)==0){ var $wcs_7_i=$wcs_1_i;var $s_6_i=$s_1_i;var $alloc_0224_i=$alloc_0_i;label=169;break;}else if((($246<<24)>>24)==45){ label=79;break;}else if((($246<<24)>>24)==93){ var $p_9_i=$p_7_i;label=84;break;}else{var $p_8_i=$p_7_i;var $261=$246;label=83;break;}
 case 79: 
 var $248=(($p_7_i+1)|0);
 var $249=HEAP8[(($248)>>0)];
 if((($249<<24)>>24)==0|(($249<<24)>>24)==93){ var $p_8_i=$p_7_i;var $261=45;label=83;break;}else{label=80;break;}
 case 80: 
 var $251=((($p_7_i)-(1))|0);
 var $252=HEAP8[(($251)>>0)];
 var $253=($252&255)<($249&255);
 if($253){label=81;break;}else{var $p_8_i=$248;var $261=$249;label=83;break;}
 case 81: 
 var $254=($252&255);
 var $c_030_i=$254;label=82;break;
 case 82: 
 var $c_030_i;
 var $256=((($c_030_i)+(1))|0);
 var $257=(($scanset_i+$256)|0);
 HEAP8[(($257)>>0)]=$_pre_phi243_i;
 var $258=HEAP8[(($248)>>0)];
 var $259=($258&255);
 var $260=($256|0)<($259|0);
 if($260){var $c_030_i=$256;label=82;break;}else{var $p_8_i=$248;var $261=$258;label=83;break;}
 case 83: 
 var $261;
 var $p_8_i;
 var $262=($261&255);
 var $263=((($262)+(1))|0);
 var $264=(($scanset_i+$263)|0);
 HEAP8[(($264)>>0)]=$_pre_phi243_i;
 var $265=(($p_8_i+1)|0);
 var $p_7_i=$265;label=78;break;
 case 84: 
 var $p_9_i;
 var $266=((($width_1_i)+(1))|0);
 var $_8_i=($224?$266:31);
 var $267=($_size_0_i|0)==1;
 var $268=($alloc_0_i|0)!=0;
 if($267){label=85;break;}else{label=115;break;}
 case 85: 
 if($268){label=86;break;}else{label=87;break;}
 case 86: 
 var $271=$_8_i<<2;
 var $272=_malloc($271);
 var $273=$272;
 var $274=($272|0)==0;
 if($274){var $wcs_7_i=$273;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{var $wcs_2_i=$273;label=88;break;}
 case 87: 
 var $276=$dest_0_i;
 var $wcs_2_i=$276;label=88;break;
 case 88: 
 var $wcs_2_i;
 HEAP32[(($21)>>2)]=0;
 HEAP32[(($22)>>2)]=0;
 var $k_0_ph_i=$_8_i;var $i_0_ph_i=0;var $wcs_3_ph_i=$wcs_2_i;label=89;break;
 case 89: 
 var $wcs_3_ph_i;
 var $i_0_ph_i;
 var $k_0_ph_i;
 var $278=($wcs_3_ph_i|0)==0;
 if($278){label=90;break;}else{label=91;break;}
 case 90: 
 var $279=($i_0_ph_i|0)==($k_0_ph_i|0);
 var $or_cond_us_i=$268&$279;
 label=97;break;
 case 91: 
 if($268){var $i_0_ph49_us56_i=$i_0_ph_i;label=98;break;}else{var $i_0_ph49_i=$i_0_ph_i;label=105;break;}
 case 92: 
 var $281=___shgetc($f);
 var $287=$281;label=94;break;
 case 93: 
 var $283=(($296+1)|0);
 HEAP32[(($15)>>2)]=$283;
 var $284=HEAP8[(($296)>>0)];
 var $285=($284&255);
 var $287=$285;label=94;break;
 case 94: 
 var $287;
 var $288=((($287)+(1))|0);
 var $289=(($scanset_i+$288)|0);
 var $290=HEAP8[(($289)>>0)];
 var $291=(($290<<24)>>24)==0;
 if($291){var $i_0_ph49_lcssa_i=$i_0_ph_i;var $wcs_3_ph165_i=0;label=114;break;}else{label=95;break;}
 case 95: 
 var $293=(($287)&255);
 HEAP8[(($1)>>0)]=$293;
 var $294=_mbrtowc($wc_i,$1,1,$st_i);
 if(($294|0)==-1){ var $wcs_7_i=0;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}else if(($294|0)==-2){ label=97;break;}else{label=96;break;}
 case 96: 
 if($or_cond_us_i){var $i_1_lcssa_i=$i_0_ph_i;label=112;break;}else{label=97;break;}
 case 97: 
 var $296=HEAP32[(($15)>>2)];
 var $297=HEAP32[(($16)>>2)];
 var $298=($296>>>0)<($297>>>0);
 if($298){label=93;break;}else{label=92;break;}
 case 98: 
 var $i_0_ph49_us56_i;
 label=104;break;
 case 99: 
 var $300=___shgetc($f);
 var $306=$300;label=101;break;
 case 100: 
 var $302=(($320+1)|0);
 HEAP32[(($15)>>2)]=$302;
 var $303=HEAP8[(($320)>>0)];
 var $304=($303&255);
 var $306=$304;label=101;break;
 case 101: 
 var $306;
 var $307=((($306)+(1))|0);
 var $308=(($scanset_i+$307)|0);
 var $309=HEAP8[(($308)>>0)];
 var $310=(($309<<24)>>24)==0;
 if($310){var $i_0_ph49_lcssa_i=$i_0_ph49_us56_i;var $wcs_3_ph165_i=$wcs_3_ph_i;label=114;break;}else{label=102;break;}
 case 102: 
 var $312=(($306)&255);
 HEAP8[(($1)>>0)]=$312;
 var $313=_mbrtowc($wc_i,$1,1,$st_i);
 if(($313|0)==-2){ label=104;break;}else if(($313|0)==-1){ var $wcs_7_i=$wcs_3_ph_i;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{label=103;break;}
 case 103: 
 var $315=HEAP32[(($wc_i)>>2)];
 var $316=((($i_0_ph49_us56_i)+(1))|0);
 var $317=(($wcs_3_ph_i+($i_0_ph49_us56_i<<2))|0);
 HEAP32[(($317)>>2)]=$315;
 var $318=($316|0)==($k_0_ph_i|0);
 if($318){var $i_1_lcssa_i=$k_0_ph_i;label=112;break;}else{var $i_0_ph49_us56_i=$316;label=98;break;}
 case 104: 
 var $320=HEAP32[(($15)>>2)];
 var $321=HEAP32[(($16)>>2)];
 var $322=($320>>>0)<($321>>>0);
 if($322){label=100;break;}else{label=99;break;}
 case 105: 
 var $i_0_ph49_i;
 label=106;break;
 case 106: 
 var $324=HEAP32[(($15)>>2)];
 var $325=HEAP32[(($16)>>2)];
 var $326=($324>>>0)<($325>>>0);
 if($326){label=107;break;}else{label=108;break;}
 case 107: 
 var $328=(($324+1)|0);
 HEAP32[(($15)>>2)]=$328;
 var $329=HEAP8[(($324)>>0)];
 var $330=($329&255);
 var $334=$330;label=109;break;
 case 108: 
 var $332=___shgetc($f);
 var $334=$332;label=109;break;
 case 109: 
 var $334;
 var $335=((($334)+(1))|0);
 var $336=(($scanset_i+$335)|0);
 var $337=HEAP8[(($336)>>0)];
 var $338=(($337<<24)>>24)==0;
 if($338){var $i_0_ph49_lcssa_i=$i_0_ph49_i;var $wcs_3_ph165_i=$wcs_3_ph_i;label=114;break;}else{label=110;break;}
 case 110: 
 var $340=(($334)&255);
 HEAP8[(($1)>>0)]=$340;
 var $341=_mbrtowc($wc_i,$1,1,$st_i);
 if(($341|0)==-2){ label=106;break;}else if(($341|0)==-1){ var $wcs_7_i=$wcs_3_ph_i;var $s_6_i=0;var $alloc_0224_i=0;label=169;break;}else{label=111;break;}
 case 111: 
 var $343=HEAP32[(($wc_i)>>2)];
 var $344=((($i_0_ph49_i)+(1))|0);
 var $345=(($wcs_3_ph_i+($i_0_ph49_i<<2))|0);
 HEAP32[(($345)>>2)]=$343;
 var $i_0_ph49_i=$344;label=105;break;
 case 112: 
 var $i_1_lcssa_i;
 var $factor_i=$k_0_ph_i<<1;
 var $346=$factor_i|1;
 var $347=$wcs_3_ph_i;
 var $348=$346<<2;
 var $349=_realloc($347,$348);
 var $350=($349|0)==0;
 if($350){var $wcs_7_i=$wcs_3_ph_i;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{label=113;break;}
 case 113: 
 var $352=$349;
 var $k_0_ph_i=$346;var $i_0_ph_i=$i_1_lcssa_i;var $wcs_3_ph_i=$352;label=89;break;
 case 114: 
 var $wcs_3_ph165_i;
 var $i_0_ph49_lcssa_i;
 var $353=HEAP32[(($21)>>2)];
 var $354=($353|0)==0;
 if($354){var $i_4_i=$i_0_ph49_lcssa_i;var $wcs_4_i=$wcs_3_ph165_i;var $s_3_i=0;label=135;break;}else{var $wcs_7_i=$wcs_3_ph165_i;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}
 case 115: 
 if($268){label=116;break;}else{label=124;break;}
 case 116: 
 var $357=_malloc($_8_i);
 var $358=($357|0)==0;
 if($358){var $wcs_7_i=0;var $s_6_i=0;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{var $k_1_ph_i=$_8_i;var $i_2_ph_i=0;var $s_2_ph_i=$357;label=117;break;}
 case 117: 
 var $s_2_ph_i;
 var $i_2_ph_i;
 var $k_1_ph_i;
 var $i_2_i=$i_2_ph_i;label=118;break;
 case 118: 
 var $i_2_i;
 var $360=HEAP32[(($15)>>2)];
 var $361=HEAP32[(($16)>>2)];
 var $362=($360>>>0)<($361>>>0);
 if($362){label=119;break;}else{label=120;break;}
 case 119: 
 var $364=(($360+1)|0);
 HEAP32[(($15)>>2)]=$364;
 var $365=HEAP8[(($360)>>0)];
 var $366=($365&255);
 var $370=$366;label=121;break;
 case 120: 
 var $368=___shgetc($f);
 var $370=$368;label=121;break;
 case 121: 
 var $370;
 var $371=((($370)+(1))|0);
 var $372=(($scanset_i+$371)|0);
 var $373=HEAP8[(($372)>>0)];
 var $374=(($373<<24)>>24)==0;
 if($374){var $i_4_i=$i_2_i;var $wcs_4_i=0;var $s_3_i=$s_2_ph_i;label=135;break;}else{label=122;break;}
 case 122: 
 var $376=(($370)&255);
 var $377=((($i_2_i)+(1))|0);
 var $378=(($s_2_ph_i+$i_2_i)|0);
 HEAP8[(($378)>>0)]=$376;
 var $379=($377|0)==($k_1_ph_i|0);
 if($379){label=123;break;}else{var $i_2_i=$377;label=118;break;}
 case 123: 
 var $factor17_i=$k_1_ph_i<<1;
 var $381=$factor17_i|1;
 var $382=_realloc($s_2_ph_i,$381);
 var $383=($382|0)==0;
 if($383){var $wcs_7_i=0;var $s_6_i=$s_2_ph_i;var $alloc_0224_i=$alloc_0_i;label=169;break;}else{var $i_2_ph_i=$k_1_ph_i;var $k_1_ph_i=$381;var $s_2_ph_i=$382;label=117;break;}
 case 124: 
 var $385=($dest_0_i|0)==0;
 if($385){var $405=$217;label=130;break;}else{var $i_3_i=0;var $386=$217;label=125;break;}
 case 125: 
 var $386;
 var $i_3_i;
 var $387=HEAP32[(($15)>>2)];
 var $388=($387>>>0)<($386>>>0);
 if($388){label=126;break;}else{label=127;break;}
 case 126: 
 var $390=(($387+1)|0);
 HEAP32[(($15)>>2)]=$390;
 var $391=HEAP8[(($387)>>0)];
 var $392=($391&255);
 var $396=$392;label=128;break;
 case 127: 
 var $394=___shgetc($f);
 var $396=$394;label=128;break;
 case 128: 
 var $396;
 var $397=((($396)+(1))|0);
 var $398=(($scanset_i+$397)|0);
 var $399=HEAP8[(($398)>>0)];
 var $400=(($399<<24)>>24)==0;
 if($400){var $i_4_i=$i_3_i;var $wcs_4_i=0;var $s_3_i=$dest_0_i;label=135;break;}else{label=129;break;}
 case 129: 
 var $402=(($396)&255);
 var $403=((($i_3_i)+(1))|0);
 var $404=(($dest_0_i+$i_3_i)|0);
 HEAP8[(($404)>>0)]=$402;
 var $_pre238_i=HEAP32[(($16)>>2)];
 var $i_3_i=$403;var $386=$_pre238_i;label=125;break;
 case 130: 
 var $405;
 var $406=HEAP32[(($15)>>2)];
 var $407=($406>>>0)<($405>>>0);
 if($407){label=131;break;}else{label=132;break;}
 case 131: 
 var $409=(($406+1)|0);
 HEAP32[(($15)>>2)]=$409;
 var $410=HEAP8[(($406)>>0)];
 var $411=($410&255);
 var $415=$411;label=133;break;
 case 132: 
 var $413=___shgetc($f);
 var $415=$413;label=133;break;
 case 133: 
 var $415;
 var $416=((($415)+(1))|0);
 var $417=(($scanset_i+$416)|0);
 var $418=HEAP8[(($417)>>0)];
 var $419=(($418<<24)>>24)==0;
 if($419){var $i_4_i=0;var $wcs_4_i=0;var $s_3_i=0;label=135;break;}else{label=134;break;}
 case 134: 
 var $_pre237_i=HEAP32[(($16)>>2)];
 var $405=$_pre237_i;label=130;break;
 case 135: 
 var $s_3_i;
 var $wcs_4_i;
 var $i_4_i;
 var $420=HEAP32[(($16)>>2)];
 var $421=($420|0)==0;
 var $_pre235_i=HEAP32[(($15)>>2)];
 if($421){var $424=$_pre235_i;label=137;break;}else{label=136;break;}
 case 136: 
 var $423=((($_pre235_i)-(1))|0);
 HEAP32[(($15)>>2)]=$423;
 var $424=$423;label=137;break;
 case 137: 
 var $424;
 var $425=HEAP32[(($17)>>2)];
 var $426=HEAP32[(($18)>>2)];
 var $427=$424;
 var $428=$426;
 var $429=((($427)-($428))|0);
 var $430=((($429)+($425))|0);
 var $431=($430|0)==0;
 if($431){var $alloc_2_i=$alloc_0_i;var $matches_2_i=$matches_0135_i;var $wcs_9_i=$wcs_4_i;var $s_8_i=$s_3_i;label=171;break;}else{label=138;break;}
 case 138: 
 var $_not_i=$224^1;
 var $433=($430|0)==($width_1_i|0);
 var $or_cond9_i=$433|$_not_i;
 if($or_cond9_i){label=139;break;}else{var $alloc_2_i=$alloc_0_i;var $matches_2_i=$matches_0135_i;var $wcs_9_i=$wcs_4_i;var $s_8_i=$s_3_i;label=171;break;}
 case 139: 
 if($268){label=140;break;}else{label=143;break;}
 case 140: 
 if($267){label=141;break;}else{label=142;break;}
 case 141: 
 var $437=$dest_0_i;
 HEAP32[(($437)>>2)]=$wcs_4_i;
 label=143;break;
 case 142: 
 var $439=$dest_0_i;
 HEAP32[(($439)>>2)]=$s_3_i;
 label=143;break;
 case 143: 
 if($224){var $p_10_i=$p_9_i;var $wcs_5_i=$wcs_4_i;var $s_4_i=$s_3_i;label=167;break;}else{label=144;break;}
 case 144: 
 var $442=($wcs_4_i|0)==0;
 if($442){label=146;break;}else{label=145;break;}
 case 145: 
 var $444=(($wcs_4_i+($i_4_i<<2))|0);
 HEAP32[(($444)>>2)]=0;
 label=146;break;
 case 146: 
 var $446=($s_3_i|0)==0;
 if($446){var $p_10_i=$p_9_i;var $wcs_5_i=$wcs_4_i;var $s_4_i=0;label=167;break;}else{label=147;break;}
 case 147: 
 var $448=(($s_3_i+$i_4_i)|0);
 HEAP8[(($448)>>0)]=0;
 var $p_10_i=$p_9_i;var $wcs_5_i=$wcs_4_i;var $s_4_i=$s_3_i;label=167;break;
 case 148: 
 var $base_0_i=8;label=151;break;
 case 149: 
 var $base_0_i=10;label=151;break;
 case 150: 
 var $base_0_i=0;label=151;break;
 case 151: 
 var $base_0_i;
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $453$0=___intscan($f,$base_0_i,0,$$etemp$9$0,$$etemp$9$1);
 var $453$1=tempRet0;
 var $454=HEAP32[(($17)>>2)];
 var $455=HEAP32[(($15)>>2)];
 var $456=HEAP32[(($18)>>2)];
 var $457=$455;
 var $458=$456;
 var $459=((($458)-($457))|0);
 var $460=($454|0)==($459|0);
 if($460){var $alloc_2_i=$alloc_0_i;var $matches_2_i=$matches_0135_i;var $wcs_9_i=$wcs_1_i;var $s_8_i=$s_1_i;label=171;break;}else{label=152;break;}
 case 152: 
 var $462=($__i|0)==112;
 var $463=($dest_0_i|0)!=0;
 var $or_cond3_i=$462&$463;
 if($or_cond3_i){label=153;break;}else{label=154;break;}
 case 153: 
 var $465$0=$453$0;
 var $465=$465$0;
 var $466=$465;
 var $467=$dest_0_i;
 HEAP32[(($467)>>2)]=$466;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 154: 
 var $469=($dest_0_i|0)==0;
 if($469){var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;}else{label=155;break;}
 case 155: 
 switch(($_size_0_i|0)){case -2:{ label=156;break;}case -1:{ label=157;break;}case 0:{ label=158;break;}case 1:{ label=159;break;}case 3:{ label=160;break;}default:{var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;}}break;
 case 156: 
 var $472$0=$453$0;
 var $472=$472$0&255;
 HEAP8[(($dest_0_i)>>0)]=$472;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 157: 
 var $474$0=$453$0;
 var $474=$474$0&65535;
 var $475=$dest_0_i;
 HEAP16[(($475)>>1)]=$474;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 158: 
 var $477$0=$453$0;
 var $477=$477$0;
 var $478=$dest_0_i;
 HEAP32[(($478)>>2)]=$477;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 159: 
 var $480$0=$453$0;
 var $480=$480$0;
 var $481=$dest_0_i;
 HEAP32[(($481)>>2)]=$480;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 160: 
 var $483=$dest_0_i;
 var $st$10$0=(($483)|0);
 HEAP32[(($st$10$0)>>2)]=$453$0;
 var $st$11$1=(($483+4)|0);
 HEAP32[(($st$11$1)>>2)]=$453$1;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 161: 
 var $485=___floatscan($f,$_size_0_i,0);
 var $486=HEAP32[(($17)>>2)];
 var $487=HEAP32[(($15)>>2)];
 var $488=HEAP32[(($18)>>2)];
 var $489=$487;
 var $490=$488;
 var $491=((($490)-($489))|0);
 var $492=($486|0)==($491|0);
 if($492){var $alloc_2_i=$alloc_0_i;var $matches_2_i=$matches_0135_i;var $wcs_9_i=$wcs_1_i;var $s_8_i=$s_1_i;label=171;break;}else{label=162;break;}
 case 162: 
 var $494=($dest_0_i|0)==0;
 if($494){var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;}else{label=163;break;}
 case 163: 
 if(($_size_0_i|0)==0){ label=164;break;}else if(($_size_0_i|0)==1){ label=165;break;}else if(($_size_0_i|0)==2){ label=166;break;}else{var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;}
 case 164: 
 var $497=$485;
 var $498=$dest_0_i;
 HEAPF32[(($498)>>2)]=$497;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 165: 
 var $500=$dest_0_i;
 HEAPF64[(($500)>>3)]=$485;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 166: 
 var $502=$dest_0_i;
 HEAPF64[(($502)>>3)]=$485;
 var $p_10_i=$p_5_i;var $wcs_5_i=$wcs_1_i;var $s_4_i=$s_1_i;label=167;break;
 case 167: 
 var $s_4_i;
 var $wcs_5_i;
 var $p_10_i;
 var $503=HEAP32[(($17)>>2)];
 var $504=HEAP32[(($15)>>2)];
 var $505=HEAP32[(($18)>>2)];
 var $506=$504;
 var $507=$505;
 var $508=((($503)+($pos_1_i))|0);
 var $509=((($508)+($506))|0);
 var $510=((($509)-($507))|0);
 var $not__i=($dest_0_i|0)!=0;
 var $511=($not__i&1);
 var $matches_0__i=((($511)+($matches_0135_i))|0);
 var $p_11_i=$p_10_i;var $pos_2_i=$510;var $matches_1_i=$matches_0__i;var $wcs_6_i=$wcs_5_i;var $s_5_i=$s_4_i;label=168;break;
 case 168: 
 var $s_5_i;
 var $wcs_6_i;
 var $matches_1_i;
 var $pos_2_i;
 var $p_11_i;
 var $512=(($p_11_i+1)|0);
 var $513=HEAP8[(($512)>>0)];
 var $514=(($513<<24)>>24)==0;
 if($514){var $matches_3_i=$matches_1_i;label=173;break;}else{var $s_0133_i=$s_5_i;var $wcs_0134_i=$wcs_6_i;var $matches_0135_i=$matches_1_i;var $pos_0140_i=$pos_2_i;var $p_0141_i=$512;var $27=$513;label=3;break;}
 case 169: 
 var $alloc_0224_i;
 var $s_6_i;
 var $wcs_7_i;
 var $_old4_i=($matches_0135_i|0)==0;
 if($_old4_i){var $alloc_1_i=$alloc_0224_i;var $wcs_8_i=$wcs_7_i;var $s_7_i=$s_6_i;label=170;break;}else{var $alloc_2_i=$alloc_0224_i;var $matches_2_i=$matches_0135_i;var $wcs_9_i=$wcs_7_i;var $s_8_i=$s_6_i;label=171;break;}
 case 170: 
 var $s_7_i;
 var $wcs_8_i;
 var $alloc_1_i;
 var $alloc_2_i=$alloc_1_i;var $matches_2_i=-1;var $wcs_9_i=$wcs_8_i;var $s_8_i=$s_7_i;label=171;break;
 case 171: 
 var $s_8_i;
 var $wcs_9_i;
 var $matches_2_i;
 var $alloc_2_i;
 var $516=($alloc_2_i|0)==0;
 if($516){var $matches_3_i=$matches_2_i;label=173;break;}else{label=172;break;}
 case 172: 
 _free($s_8_i);
 var $518=$wcs_9_i;
 _free($518);
 var $matches_3_i=$matches_2_i;label=173;break;
 case 173: 
 var $matches_3_i;
 var $$etemp$12$0=257;
 var $$etemp$12$1=0;

 var $$etemp$13$0=8;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=1;
 var $$etemp$15$1=0;

 var $$etemp$16$0=112;
 var $$etemp$16$1=0;

 STACKTOP=sp;return $matches_3_i;
  default: assert(0, "bad label: " + label);
 }

}


function _wmemmove($d,$s,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$d;
 var $2=$s;
 var $3=((($1)-($2))|0);
 var $4=$3>>2;
 var $5=($4>>>0)<($n>>>0);
 var $6=($n|0)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 if($6){label=6;break;}else{var $_025=$s;var $_16=$n;var $_07=$d;label=5;break;}
 case 3: 
 if($6){label=6;break;}else{var $_in=$n;label=4;break;}
 case 4: 
 var $_in;
 var $7=((($_in)-(1))|0);
 var $8=(($s+($7<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($d+($7<<2))|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=($7|0)==0;
 if($11){label=6;break;}else{var $_in=$7;label=4;break;}
 case 5: 
 var $_07;
 var $_16;
 var $_025;
 var $12=((($_16)-(1))|0);
 var $13=(($_025+4)|0);
 var $14=HEAP32[(($_025)>>2)];
 var $15=(($_07+4)|0);
 HEAP32[(($_07)>>2)]=$14;
 var $16=($12|0)==0;
 if($16){label=6;break;}else{var $_025=$13;var $_16=$12;var $_07=$15;label=5;break;}
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _do_read($f,$buf,$len){
 var label=0;


 var $1=$f;
 var $2=___string_read($1,$buf,$len);
 return $2;
}


function _abort_message($format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $list=sp;
 var $1=(($list)|0);
 var $2=$list;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=HEAP32[((_stderr)>>2)];
 var $4=_vfprintf($3,$format,$1);

 var $5=$3;
 var $fputc=_fputc(10,$5);
 _abort();
 throw "Reached an unreachable!";
}


function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 var $2=_malloc($_size);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{var $_lcssa=$2;label=5;break;}
 case 2: 
 var $4=(tempValue=HEAP32[((14800)>>2)],HEAP32[((14800)>>2)]=tempValue+0,tempValue);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$4;
 FUNCTION_TABLE[$7]();
 var $8=_malloc($_size);
 var $9=($8|0)==0;
 if($9){label=2;break;}else{var $_lcssa=$8;label=5;break;}
 case 4: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5208;
 ___cxa_throw($11,12352,(68));
 throw "Reached an unreachable!";
 case 5: 
 var $_lcssa;
 return $_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 3816;
}


function __ZSt11__terminatePFvvE($func){
 var label=0;
 var tempVarArgs=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return _abort_message(4184,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=3;break; } else { label=4;break; }
 case 3: 
 throw "Reached an unreachable!";
 case 4: 
 var $4$0 = ___cxa_find_matching_catch(0); var $4$1 = tempRet0;
 var $5=$4$0;
 var $6=___cxa_begin_catch($5);
 (function() { try { __THREW__ = 0; return _abort_message(3352,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 throw "Reached an unreachable!";
 case 6: 
 var $9$0 = ___cxa_find_matching_catch(0); var $9$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $11$0 = ___cxa_find_matching_catch(0); var $11$1 = tempRet0;
 var $12=$11$0;
 ___clang_call_terminate($12);
 throw "Reached an unreachable!";
 case 8: 
 var $14=$9$0;
 ___clang_call_terminate($14);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZSt9terminatev(){
 var label=0;
 var tempVarArgs=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(function() { try { __THREW__ = 0; return _pthread_once(18368,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $2=($1|0)==0;
 if($2){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return _abort_message(3448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=4;break; } else { label=11;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $5=HEAP32[((18376)>>2)];
 var $6=(function() { try { __THREW__ = 0; return _pthread_getspecific($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=11;break; }
 case 6: 
 var $7=($6|0)==0;
 if($7){label=10;break;}else{label=7;break;}
 case 7: 
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=10;break;}else{label=8;break;}
 case 8: 
 var $13=(($10+48)|0);
 var $ld$0$0=(($13)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($13+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=-256;
 var $$etemp$2$1=-1;
 var $15$0=$14$0&$$etemp$2$0;
 var $15$1=$14$1&$$etemp$2$1;
 var $$etemp$3$0=1126902528;
 var $$etemp$3$1=1129074247;
 var $16=(($15$0|0) == ($$etemp$3$0|0)) & (($15$1|0) == ($$etemp$3$1|0));
 if($16){label=9;break;}else{label=10;break;}
 case 9: 
 var $18=(($10+12)|0);
 var $19=HEAP32[(($18)>>2)];
 __ZSt11__terminatePFvvE($19);
 throw "Reached an unreachable!";
 case 10: 
 var $21=(tempValue=HEAP32[((4872)>>2)],HEAP32[((4872)>>2)]=tempValue+0,tempValue);
 var $22=$21;
 __ZSt11__terminatePFvvE($22);
 throw "Reached an unreachable!";
 case 11: 
 var $24$0 = ___cxa_find_matching_catch(0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5400;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5400;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt11logic_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNSt13runtime_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5304;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt13runtime_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNSt16invalid_argumentD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5400;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt12length_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5400;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt12out_of_rangeD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5400;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(4))|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+-1,tempValue);
 var $7=((($6)-(1))|0);
 var $8=($7|0)<0;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=HEAP32[(($2)>>2)];
 var $11=((($10)-(12))|0);
 _free($11);
 label=3;break;
 case 3: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt8bad_castD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNSt8bad_castD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt8bad_cast4whatEv($this){
 var label=0;


 return 3528;
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;


 var $1=$this;
 _free($1);
 return;
}


function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0){
 var label=0;


 var $2=(($this)|0);
 var $3=(($thrown_type)|0);
 var $4=($2|0)==($3|0);
 return $4;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_1=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_1=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,14176);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_1=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_1=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_1=1;label=6;break;
 case 6: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 HEAP32[(($1)>>2)]=$adjustedPtr;
 var $5=(($info+24)|0);
 HEAP32[(($5)>>2)]=$path_below;
 var $6=(($info+36)|0);
 HEAP32[(($6)>>2)]=1;
 label=7;break;
 case 3: 
 var $8=($2|0)==($adjustedPtr|0);
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=(($info+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==2;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 HEAP32[(($10)>>2)]=$path_below;
 label=7;break;
 case 6: 
 var $15=(($info+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($16)+(1))|0);
 HEAP32[(($15)>>2)]=$17;
 var $18=(($info+24)|0);
 HEAP32[(($18)>>2)]=2;
 var $19=(($info+54)|0);
 HEAP8[(($19)>>0)]=1;
 label=7;break;
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 label=4;break;
 case 3: 
 var $8=(($this+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+28)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($9,$info,$adjustedPtr,$path_below);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2>>8;
 var $4=$2&1;
 var $5=($4|0)==0;
 if($5){var $offset_to_base_0=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$adjustedPtr;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+$3)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $offset_to_base_0=$11;label=3;break;
 case 3: 
 var $offset_to_base_0;
 var $13=(($this)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+28)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($adjustedPtr+$offset_to_base_0)|0);
 var $20=$2&2;
 var $21=($20|0)!=0;
 var $22=($21?$path_below:2);
 FUNCTION_TABLE[$18]($14,$info,$19,$22);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($info,$adjustedPtr,$path_below);
 label=7;break;
 case 3: 
 var $8=(($this+16)|0);
 var $9=(($this+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+16+($10<<3))|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($8,$info,$adjustedPtr,$path_below);
 var $12=($10|0)>1;
 if($12){label=4;break;}else{label=7;break;}
 case 4: 
 var $13=(($this+24)|0);
 var $14=(($info+54)|0);
 var $p_0=$13;label=5;break;
 case 5: 
 var $p_0;
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p_0,$info,$adjustedPtr,$path_below);
 var $16=HEAP8[(($14)>>0)];
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=7;break;}
 case 6: 
 var $19=(($p_0+8)|0);
 var $20=($19>>>0)<($11>>>0);
 if($20){var $p_0=$19;label=5;break;}else{label=7;break;}
 case 7: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$dst_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $11=(($info)|0);
 HEAP32[(($11)>>2)]=$dst_type;
 var $12=(($info+4)|0);
 HEAP32[(($12)>>2)]=$static_ptr;
 var $13=(($info+8)|0);
 HEAP32[(($13)>>2)]=14192;
 var $14=(($info+12)|0);
 var $15=(($info+16)|0);
 var $16=(($info+20)|0);
 var $17=(($info+24)|0);
 var $18=(($info+28)|0);
 var $19=(($info+32)|0);
 var $20=(($info+40)|0);
 var $21=$8;
 var $22=(($dst_type)|0);
 var $23=($21|0)==($22|0);
 var $24=$14;
 _memset($24, 0, 43)|0;
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=(($info+48)|0);
 HEAP32[(($26)>>2)]=1;
 var $27=$8;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+20)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($9,$info,$6,$6,1,0);
 var $31=HEAP32[(($17)>>2)];
 var $32=($31|0)==1;
 var $_=($32?$6:0);
 var $dst_ptr_0=$_;label=8;break;
 case 3: 
 var $34=(($info+36)|0);
 var $35=$8;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($9,$info,$6,1,0);
 var $39=HEAP32[(($34)>>2)];
 if(($39|0)==0){ label=4;break;}else if(($39|0)==1){ label=5;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 4: 
 var $41=HEAP32[(($20)>>2)];
 var $42=($41|0)==1;
 var $43=HEAP32[(($18)>>2)];
 var $44=($43|0)==1;
 var $or_cond=$42&$44;
 var $45=HEAP32[(($19)>>2)];
 var $46=($45|0)==1;
 var $or_cond3=$or_cond&$46;
 var $47=HEAP32[(($16)>>2)];
 var $_8=($or_cond3?$47:0);
 var $dst_ptr_0=$_8;label=8;break;
 case 5: 
 var $49=HEAP32[(($17)>>2)];
 var $50=($49|0)==1;
 if($50){label=7;break;}else{label=6;break;}
 case 6: 
 var $52=HEAP32[(($20)>>2)];
 var $53=($52|0)==0;
 var $54=HEAP32[(($18)>>2)];
 var $55=($54|0)==1;
 var $or_cond5=$53&$55;
 var $56=HEAP32[(($19)>>2)];
 var $57=($56|0)==1;
 var $or_cond7=$or_cond5&$57;
 if($or_cond7){label=7;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 7: 
 var $59=HEAP32[(($15)>>2)];
 var $dst_ptr_0=$59;label=8;break;
 case 8: 
 var $dst_ptr_0;
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+53)|0);
 HEAP8[(($1)>>0)]=1;
 var $2=(($info+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==($current_ptr|0);
 if($4){label=2;break;}else{label=11;break;}
 case 2: 
 var $6=(($info+52)|0);
 HEAP8[(($6)>>0)]=1;
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$dst_ptr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 var $13=(($info+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==1;
 var $16=($path_below|0)==1;
 var $or_cond=$15&$16;
 if($or_cond){label=4;break;}else{label=11;break;}
 case 4: 
 var $18=(($info+54)|0);
 HEAP8[(($18)>>0)]=1;
 label=11;break;
 case 5: 
 var $20=($8|0)==($dst_ptr|0);
 if($20){label=6;break;}else{label=10;break;}
 case 6: 
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==2;
 if($24){label=7;break;}else{var $27=$23;label=8;break;}
 case 7: 
 HEAP32[(($22)>>2)]=$path_below;
 var $27=$path_below;label=8;break;
 case 8: 
 var $27;
 var $28=(($info+48)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==1;
 var $31=($27|0)==1;
 var $or_cond1=$30&$31;
 if($or_cond1){label=9;break;}else{label=11;break;}
 case 9: 
 var $33=(($info+54)|0);
 HEAP8[(($33)>>0)]=1;
 label=11;break;
 case 10: 
 var $35=(($info+36)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($36)+(1))|0);
 HEAP32[(($35)>>2)]=$37;
 var $38=(($info+54)|0);
 HEAP8[(($38)>>0)]=1;
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=43;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=43;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=43;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=27;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=43;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=43;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=43;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off023=0;label=21;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $does_dst_type_point_to_our_static_type_0_off012=0;var $p_013=$42;var $is_dst_type_derived_from_static_type_0_off014=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off014;
 var $p_013;
 var $does_dst_type_point_to_our_static_type_0_off012;
 HEAP8[(($43)>>0)]=0;
 HEAP8[(($44)>>0)]=0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p_013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $49=HEAP8[(($45)>>0)];
 var $50=(($49<<24)>>24)==0;
 if($50){label=14;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off014;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off012;label=20;break;}
 case 14: 
 var $52=HEAP8[(($44)>>0)];
 var $53=(($52<<24)>>24)==0;
 if($53){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off014;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off012;label=19;break;}else{label=15;break;}
 case 15: 
 var $55=HEAP8[(($43)>>0)];
 var $56=(($55<<24)>>24)==0;
 if($56){label=18;break;}else{label=16;break;}
 case 16: 
 var $58=HEAP32[(($47)>>2)];
 var $59=($58|0)==1;
 if($59){label=25;break;}else{label=17;break;}
 case 17: 
 var $61=HEAP32[(($46)>>2)];
 var $62=$61&2;
 var $63=($62|0)==0;
 if($63){label=25;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=19;break;}
 case 18: 
 var $65=HEAP32[(($46)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off012;label=20;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off012;label=19;break;}
 case 19: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $69=(($p_013+8)|0);
 var $70=($69>>>0)<($40>>>0);
 if($70){var $does_dst_type_point_to_our_static_type_0_off012=$does_dst_type_point_to_our_static_type_1_off0;var $p_013=$69;var $is_dst_type_derived_from_static_type_0_off014=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=20;break;}
 case 20: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off024=$is_dst_type_derived_from_static_type_2_off0;label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off023=$is_dst_type_derived_from_static_type_2_off0;label=21;break;}
 case 21: 
 var $is_dst_type_derived_from_static_type_2_off023;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $71=(($info+40)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($71)>>2)]=$73;
 var $74=(($info+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==1;
 if($76){label=22;break;}else{var $is_dst_type_derived_from_static_type_2_off024=$is_dst_type_derived_from_static_type_2_off023;label=24;break;}
 case 22: 
 var $78=(($info+24)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==2;
 if($80){label=23;break;}else{var $is_dst_type_derived_from_static_type_2_off024=$is_dst_type_derived_from_static_type_2_off023;label=24;break;}
 case 23: 
 var $82=(($info+54)|0);
 HEAP8[(($82)>>0)]=1;
 if($is_dst_type_derived_from_static_type_2_off023){label=25;break;}else{label=26;break;}
 case 24: 
 var $is_dst_type_derived_from_static_type_2_off024;
 if($is_dst_type_derived_from_static_type_2_off024){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($34)>>2)]=3;
 label=43;break;
 case 26: 
 HEAP32[(($34)>>2)]=4;
 label=43;break;
 case 27: 
 var $86=(($this+16)|0);
 var $87=(($this+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(($this+16+($88<<3))|0);
 __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($86,$info,$current_ptr,$path_below,$use_strcmp);
 var $90=(($this+24)|0);
 var $91=($88|0)>1;
 if($91){label=28;break;}else{label=43;break;}
 case 28: 
 var $93=(($this+8)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=29;break;}else{label=30;break;}
 case 29: 
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=30;break;}else{label=33;break;}
 case 30: 
 var $101=(($info+54)|0);
 var $p2_0=$90;label=31;break;
 case 31: 
 var $p2_0;
 var $103=HEAP8[(($101)>>0)];
 var $104=(($103<<24)>>24)==0;
 if($104){label=32;break;}else{label=43;break;}
 case 32: 
 __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2_0,$info,$current_ptr,$path_below,$use_strcmp);
 var $106=(($p2_0+8)|0);
 var $107=($106>>>0)<($89>>>0);
 if($107){var $p2_0=$106;label=31;break;}else{label=43;break;}
 case 33: 
 var $109=$94&1;
 var $110=($109|0)==0;
 if($110){label=35;break;}else{label=34;break;}
 case 34: 
 var $111=(($info+24)|0);
 var $112=(($info+54)|0);
 var $p2_1=$90;label=36;break;
 case 35: 
 var $113=(($info+54)|0);
 var $p2_2=$90;label=40;break;
 case 36: 
 var $p2_1;
 var $115=HEAP8[(($112)>>0)];
 var $116=(($115<<24)>>24)==0;
 if($116){label=37;break;}else{label=43;break;}
 case 37: 
 var $118=HEAP32[(($98)>>2)];
 var $119=($118|0)==1;
 if($119){label=38;break;}else{label=39;break;}
 case 38: 
 var $121=HEAP32[(($111)>>2)];
 var $122=($121|0)==1;
 if($122){label=43;break;}else{label=39;break;}
 case 39: 
 __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2_1,$info,$current_ptr,$path_below,$use_strcmp);
 var $124=(($p2_1+8)|0);
 var $125=($124>>>0)<($89>>>0);
 if($125){var $p2_1=$124;label=36;break;}else{label=43;break;}
 case 40: 
 var $p2_2;
 var $127=HEAP8[(($113)>>0)];
 var $128=(($127<<24)>>24)==0;
 if($128){label=41;break;}else{label=43;break;}
 case 41: 
 var $130=HEAP32[(($98)>>2)];
 var $131=($130|0)==1;
 if($131){label=43;break;}else{label=42;break;}
 case 42: 
 __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2_2,$info,$current_ptr,$path_below,$use_strcmp);
 var $133=(($p2_2+8)|0);
 var $134=($133>>>0)<($89>>>0);
 if($134){var $p2_2=$133;label=40;break;}else{label=43;break;}
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2>>8;
 var $4=$2&1;
 var $5=($4|0)==0;
 if($5){var $offset_to_base_0=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$current_ptr;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+$3)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $offset_to_base_0=$11;label=3;break;
 case 3: 
 var $offset_to_base_0;
 var $13=(($this)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+20)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($current_ptr+$offset_to_base_0)|0);
 var $20=$2&2;
 var $21=($20|0)!=0;
 var $22=($21?$path_below:2);
 FUNCTION_TABLE[$18]($14,$info,$dst_ptr,$19,$22,$use_strcmp);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2>>8;
 var $4=$2&1;
 var $5=($4|0)==0;
 if($5){var $offset_to_base_0=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=$current_ptr;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+$3)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $offset_to_base_0=$11;label=3;break;
 case 3: 
 var $offset_to_base_0;
 var $13=(($this)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+24)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($current_ptr+$offset_to_base_0)|0);
 var $20=$2&2;
 var $21=($20|0)!=0;
 var $22=($21?$path_below:2);
 FUNCTION_TABLE[$18]($14,$info,$19,$22,$use_strcmp);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[(($38)>>0)]=0;
 var $39=(($info+53)|0);
 HEAP8[(($39)>>0)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[(($39)>>0)];
 var $47=(($46<<24)>>24)==0;
 if($47){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $49=HEAP8[(($38)>>0)];
 var $not_=(($49<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $50=(($info+40)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $53=(($info+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==1;
 if($55){label=14;break;}else{label=16;break;}
 case 14: 
 var $57=(($info+24)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==2;
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $61=(($info+54)|0);
 HEAP8[(($61)>>0)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $65=(($this+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+24)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[(($42)>>0)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 label=13;break;
 case 3: 
 var $8=(($info+52)|0);
 var $9=HEAP8[(($8)>>0)];
 var $10=(($info+53)|0);
 var $11=HEAP8[(($10)>>0)];
 var $12=(($this+16)|0);
 var $13=(($this+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($this+16+($14<<3))|0);
 HEAP8[(($8)>>0)]=0;
 HEAP8[(($10)>>0)]=0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($12,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 var $16=($14|0)>1;
 if($16){label=4;break;}else{label=12;break;}
 case 4: 
 var $17=(($this+24)|0);
 var $18=(($info+24)|0);
 var $19=(($this+8)|0);
 var $20=(($info+54)|0);
 var $p_0=$17;label=5;break;
 case 5: 
 var $p_0;
 var $22=HEAP8[(($20)>>0)];
 var $23=(($22<<24)>>24)==0;
 if($23){label=6;break;}else{label=12;break;}
 case 6: 
 var $25=HEAP8[(($8)>>0)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=7;break;}
 case 7: 
 var $28=HEAP32[(($18)>>2)];
 var $29=($28|0)==1;
 if($29){label=12;break;}else{label=8;break;}
 case 8: 
 var $31=HEAP32[(($19)>>2)];
 var $32=$31&2;
 var $33=($32|0)==0;
 if($33){label=12;break;}else{label=11;break;}
 case 9: 
 var $35=HEAP8[(($10)>>0)];
 var $36=(($35<<24)>>24)==0;
 if($36){label=11;break;}else{label=10;break;}
 case 10: 
 var $38=HEAP32[(($19)>>2)];
 var $39=$38&1;
 var $40=($39|0)==0;
 if($40){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[(($8)>>0)]=0;
 HEAP8[(($10)>>0)]=0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p_0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 var $42=(($p_0+8)|0);
 var $43=($42>>>0)<($15>>>0);
 if($43){var $p_0=$42;label=5;break;}else{label=12;break;}
 case 12: 
 HEAP8[(($8)>>0)]=$9;
 HEAP8[(($10)>>0)]=$11;
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 label=4;break;
 case 3: 
 var $8=(($this+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 FUNCTION_TABLE[$13]($9,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxa_can_catch($catchType,$excpType,$thrown){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp=sp;
 var $1=HEAP32[(($thrown)>>2)];
 HEAP32[(($temp)>>2)]=$1;
 var $2=$catchType;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+16)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($catchType,$excpType,$temp);
 var $7=($6&1);
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($temp)>>2)];
 HEAP32[(($thrown)>>2)]=$9;
 label=3;break;
 case 3: 
 STACKTOP=sp;return $7;
  default: assert(0, "bad label: " + label);
 }

}
Module["___cxa_can_catch"] = ___cxa_can_catch;

function ___cxa_is_pointer_type($type){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($type|0)==0;
 if($1){var $6=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$type;
 var $4=___dynamic_cast($3,14144);
 var $phitmp=($4|0)!=0;
 var $phitmp1=($phitmp&1);
 var $6=$phitmp1;label=3;break;
 case 3: 
 var $6;
 return $6;
  default: assert(0, "bad label: " + label);
 }

}
Module["___cxa_is_pointer_type"] = ___cxa_is_pointer_type;

function __ZL25default_terminate_handlerv(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $thrown_object=sp;
 var $1=_pthread_once(18368,4);
 var $2=($1|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 _abort_message(3448,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 3: 
 var $4=HEAP32[((18376)>>2)];
 var $5=_pthread_getspecific($4);
 var $6=($5|0)==0;
 if($6){label=13;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=13;break;}else{label=5;break;}
 case 5: 
 var $12=(($9+80)|0);
 var $13=(($9+48)|0);
 var $ld$0$0=(($13)|0);
 var $14$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($13+4)|0);
 var $14$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=-256;
 var $$etemp$2$1=-1;
 var $15$0=$14$0&$$etemp$2$0;
 var $15$1=$14$1&$$etemp$2$1;
 var $$etemp$3$0=1126902528;
 var $$etemp$3$1=1129074247;
 var $16=(($15$0|0) == ($$etemp$3$0|0)) & (($15$1|0) == ($$etemp$3$1|0));
 if($16){label=6;break;}else{label=12;break;}
 case 6: 
 var $$etemp$4$0=1126902529;
 var $$etemp$4$1=1129074247;
 var $18=(($14$0|0) == ($$etemp$4$0|0)) & (($14$1|0) == ($$etemp$4$1|0));
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 var $20=(($9+44)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $26=$22;label=9;break;
 case 8: 
 var $24=$12;
 var $26=$24;label=9;break;
 case 9: 
 var $26;
 HEAP32[(($thrown_object)>>2)]=$26;
 var $27=(($9)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=(($28+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(12344,$29,$thrown_object);
 if($32){label=10;break;}else{label=11;break;}
 case 10: 
 var $34=HEAP32[(($thrown_object)>>2)];
 var $35=$34;
 var $36=$34;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=FUNCTION_TABLE[$39]($35);
 _abort_message(3208,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3992,HEAP32[(((tempVarArgs)+(8))>>2)]=$31,HEAP32[(((tempVarArgs)+(16))>>2)]=$40,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 11: 
 _abort_message(2344,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3992,HEAP32[(((tempVarArgs)+(8))>>2)]=$31,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 12: 
 _abort_message(2080,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=3992,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 13: 
 _abort_message(1816,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_pthread_key_create(18376,158);
 var $2=($1|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 _abort_message(2464,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 _free($p);
 var $1=HEAP32[((18376)>>2)];
 var $2=_pthread_setspecific($1,0);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 _abort_message(2128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 throw "Reached an unreachable!";
 case 3: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((14328)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((14368+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((14368+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((14328)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((14344)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((14336)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((14368+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((14368+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((14328)>>2)]=$94;
 var $105=$50;label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((14344)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 var $_pre=HEAP32[((14336)>>2)];
 var $105=$_pre;label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105;
 var $106=$82<<3;
 var $107=((($106)-($8))|0);
 var $108=$8|3;
 var $109=(($87+4)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=$87;
 var $111=(($110+$8)|0);
 var $112=$111;
 var $113=$107|1;
 var $_sum67=$8|4;
 var $114=(($110+$_sum67)|0);
 var $115=$114;
 HEAP32[(($115)>>2)]=$113;
 var $116=(($110+$106)|0);
 var $117=$116;
 HEAP32[(($117)>>2)]=$107;
 var $118=($105|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((14348)>>2)];
 var $121=$105>>>3;
 var $122=$121<<1;
 var $123=((14368+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((14328)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((14328)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre107=((14368+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre107;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((14368+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((14344)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((14336)>>2)]=$107;
 HEAP32[((14348)>>2)]=$112;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((14332)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((14632+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((14344)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((14632+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((14332)>>2)];
 var $251=$250&$249;
 HEAP32[((14332)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((14344)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((14344)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=($276>>>0)<($268>>>0);
 if($277){label=61;break;}else{label=60;break;}
 case 60: 
 var $279=(($R_1_i+16)|0);
 HEAP32[(($279)>>2)]=$273;
 var $280=(($273+24)|0);
 HEAP32[(($280)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $283=(($v_0_i+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=67;break;}else{label=63;break;}
 case 63: 
 var $287=$284;
 var $288=HEAP32[((14344)>>2)];
 var $289=($287>>>0)<($288>>>0);
 if($289){label=65;break;}else{label=64;break;}
 case 64: 
 var $291=(($R_1_i+20)|0);
 HEAP32[(($291)>>2)]=$284;
 var $292=(($284+24)|0);
 HEAP32[(($292)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $296=($rsize_0_i>>>0)<16;
 if($296){label=68;break;}else{label=69;break;}
 case 68: 
 var $298=((($rsize_0_i)+($8))|0);
 var $299=$298|3;
 var $300=(($v_0_i+4)|0);
 HEAP32[(($300)>>2)]=$299;
 var $_sum4_i=((($298)+(4))|0);
 var $301=(($192+$_sum4_i)|0);
 var $302=$301;
 var $303=HEAP32[(($302)>>2)];
 var $304=$303|1;
 HEAP32[(($302)>>2)]=$304;
 label=77;break;
 case 69: 
 var $306=$8|3;
 var $307=(($v_0_i+4)|0);
 HEAP32[(($307)>>2)]=$306;
 var $308=$rsize_0_i|1;
 var $_sum_i41=$8|4;
 var $309=(($192+$_sum_i41)|0);
 var $310=$309;
 HEAP32[(($310)>>2)]=$308;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $311=(($192+$_sum1_i)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$rsize_0_i;
 var $313=HEAP32[((14336)>>2)];
 var $314=($313|0)==0;
 if($314){label=75;break;}else{label=70;break;}
 case 70: 
 var $316=HEAP32[((14348)>>2)];
 var $317=$313>>>3;
 var $318=$317<<1;
 var $319=((14368+($318<<2))|0);
 var $320=$319;
 var $321=HEAP32[((14328)>>2)];
 var $322=1<<$317;
 var $323=$321&$322;
 var $324=($323|0)==0;
 if($324){label=71;break;}else{label=72;break;}
 case 71: 
 var $326=$321|$322;
 HEAP32[((14328)>>2)]=$326;
 var $_sum2_pre_i=((($318)+(2))|0);
 var $_pre_i=((14368+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$320;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($318)+(2))|0);
 var $328=((14368+($_sum3_i<<2))|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=$329;
 var $331=HEAP32[((14344)>>2)];
 var $332=($330>>>0)<($331>>>0);
 if($332){label=73;break;}else{var $F1_0_i=$329;var $_pre_phi_i=$328;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$316;
 var $335=(($F1_0_i+12)|0);
 HEAP32[(($335)>>2)]=$316;
 var $336=(($316+8)|0);
 HEAP32[(($336)>>2)]=$F1_0_i;
 var $337=(($316+12)|0);
 HEAP32[(($337)>>2)]=$320;
 label=75;break;
 case 75: 
 HEAP32[((14336)>>2)]=$rsize_0_i;
 HEAP32[((14348)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $340=(($v_0_i+8)|0);
 var $341=$340;
 var $mem_0=$341;label=341;break;
 case 78: 
 var $343=($bytes>>>0)>4294967231;
 if($343){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $345=((($bytes)+(11))|0);
 var $346=$345&-8;
 var $347=HEAP32[((14332)>>2)];
 var $348=($347|0)==0;
 if($348){var $nb_0=$346;label=160;break;}else{label=80;break;}
 case 80: 
 var $350=(((-$346))|0);
 var $351=$345>>>8;
 var $352=($351|0)==0;
 if($352){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $354=($346>>>0)>16777215;
 if($354){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $356=((($351)+(1048320))|0);
 var $357=$356>>>16;
 var $358=$357&8;
 var $359=$351<<$358;
 var $360=((($359)+(520192))|0);
 var $361=$360>>>16;
 var $362=$361&4;
 var $363=$362|$358;
 var $364=$359<<$362;
 var $365=((($364)+(245760))|0);
 var $366=$365>>>16;
 var $367=$366&2;
 var $368=$363|$367;
 var $369=(((14)-($368))|0);
 var $370=$364<<$367;
 var $371=$370>>>15;
 var $372=((($369)+($371))|0);
 var $373=$372<<1;
 var $374=((($372)+(7))|0);
 var $375=$346>>>($374>>>0);
 var $376=$375&1;
 var $377=$376|$373;
 var $idx_0_i=$377;label=83;break;
 case 83: 
 var $idx_0_i;
 var $379=((14632+($idx_0_i<<2))|0);
 var $380=HEAP32[(($379)>>2)];
 var $381=($380|0)==0;
 if($381){var $v_2_i=0;var $rsize_2_i=$350;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $383=($idx_0_i|0)==31;
 if($383){var $388=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $385=$idx_0_i>>>1;
 var $386=(((25)-($385))|0);
 var $388=$386;label=86;break;
 case 86: 
 var $388;
 var $389=$346<<$388;
 var $v_0_i18=0;var $rsize_0_i17=$350;var $t_0_i16=$380;var $sizebits_0_i=$389;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $391=(($t_0_i16+4)|0);
 var $392=HEAP32[(($391)>>2)];
 var $393=$392&-8;
 var $394=((($393)-($346))|0);
 var $395=($394>>>0)<($rsize_0_i17>>>0);
 if($395){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $397=($393|0)==($346|0);
 if($397){var $v_2_i=$t_0_i16;var $rsize_2_i=$394;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$394;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $399=(($t_0_i16+20)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=$sizebits_0_i>>>31;
 var $402=(($t_0_i16+16+($401<<2))|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=($400|0)==0;
 var $405=($400|0)==($403|0);
 var $or_cond21_i=$404|$405;
 var $rst_1_i=($or_cond21_i?$rst_0_i:$400);
 var $406=($403|0)==0;
 var $407=$sizebits_0_i<<1;
 if($406){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$403;var $sizebits_0_i=$407;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $408=($t_1_i|0)==0;
 var $409=($v_2_i|0)==0;
 var $or_cond_i=$408&$409;
 if($or_cond_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $411=2<<$idx_0_i;
 var $412=(((-$411))|0);
 var $413=$411|$412;
 var $414=$347&$413;
 var $415=($414|0)==0;
 if($415){var $nb_0=$346;label=160;break;}else{label=92;break;}
 case 92: 
 var $417=(((-$414))|0);
 var $418=$414&$417;
 var $419=((($418)-(1))|0);
 var $420=$419>>>12;
 var $421=$420&16;
 var $422=$419>>>($421>>>0);
 var $423=$422>>>5;
 var $424=$423&8;
 var $425=$424|$421;
 var $426=$422>>>($424>>>0);
 var $427=$426>>>2;
 var $428=$427&4;
 var $429=$425|$428;
 var $430=$426>>>($428>>>0);
 var $431=$430>>>1;
 var $432=$431&2;
 var $433=$429|$432;
 var $434=$430>>>($432>>>0);
 var $435=$434>>>1;
 var $436=$435&1;
 var $437=$433|$436;
 var $438=$434>>>($436>>>0);
 var $439=((($437)+($438))|0);
 var $440=((14632+($439<<2))|0);
 var $441=HEAP32[(($440)>>2)];
 var $t_2_ph_i=$441;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $442=($t_2_ph_i|0)==0;
 if($442){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_232_i=$t_2_ph_i;var $rsize_333_i=$rsize_2_i;var $v_334_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_334_i;
 var $rsize_333_i;
 var $t_232_i;
 var $443=(($t_232_i+4)|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=$444&-8;
 var $446=((($445)-($346))|0);
 var $447=($446>>>0)<($rsize_333_i>>>0);
 var $_rsize_3_i=($447?$446:$rsize_333_i);
 var $t_2_v_3_i=($447?$t_232_i:$v_334_i);
 var $448=(($t_232_i+16)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=($449|0)==0;
 if($450){label=95;break;}else{var $t_232_i=$449;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $451=(($t_232_i+20)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_232_i=$452;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $454=($v_3_lcssa_i|0)==0;
 if($454){var $nb_0=$346;label=160;break;}else{label=97;break;}
 case 97: 
 var $456=HEAP32[((14336)>>2)];
 var $457=((($456)-($346))|0);
 var $458=($rsize_3_lcssa_i>>>0)<($457>>>0);
 if($458){label=98;break;}else{var $nb_0=$346;label=160;break;}
 case 98: 
 var $460=$v_3_lcssa_i;
 var $461=HEAP32[((14344)>>2)];
 var $462=($460>>>0)<($461>>>0);
 if($462){label=158;break;}else{label=99;break;}
 case 99: 
 var $464=(($460+$346)|0);
 var $465=$464;
 var $466=($460>>>0)<($464>>>0);
 if($466){label=100;break;}else{label=158;break;}
 case 100: 
 var $468=(($v_3_lcssa_i+24)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=(($v_3_lcssa_i+12)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=($471|0)==($v_3_lcssa_i|0);
 if($472){label=106;break;}else{label=101;break;}
 case 101: 
 var $474=(($v_3_lcssa_i+8)|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=$475;
 var $477=($476>>>0)<($461>>>0);
 if($477){label=105;break;}else{label=102;break;}
 case 102: 
 var $479=(($475+12)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=($480|0)==($v_3_lcssa_i|0);
 if($481){label=103;break;}else{label=105;break;}
 case 103: 
 var $483=(($471+8)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=($484|0)==($v_3_lcssa_i|0);
 if($485){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($479)>>2)]=$471;
 HEAP32[(($483)>>2)]=$475;
 var $R_1_i22=$471;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $488=(($v_3_lcssa_i+20)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=($489|0)==0;
 if($490){label=107;break;}else{var $R_0_i20=$489;var $RP_0_i19=$488;label=108;break;}
 case 107: 
 var $492=(($v_3_lcssa_i+16)|0);
 var $493=HEAP32[(($492)>>2)];
 var $494=($493|0)==0;
 if($494){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$493;var $RP_0_i19=$492;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $495=(($R_0_i20+20)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){label=109;break;}else{var $R_0_i20=$496;var $RP_0_i19=$495;label=108;break;}
 case 109: 
 var $499=(($R_0_i20+16)|0);
 var $500=HEAP32[(($499)>>2)];
 var $501=($500|0)==0;
 if($501){label=110;break;}else{var $R_0_i20=$500;var $RP_0_i19=$499;label=108;break;}
 case 110: 
 var $503=$RP_0_i19;
 var $504=($503>>>0)<($461>>>0);
 if($504){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $508=($469|0)==0;
 if($508){label=133;break;}else{label=114;break;}
 case 114: 
 var $510=(($v_3_lcssa_i+28)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=((14632+($511<<2))|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=($v_3_lcssa_i|0)==($513|0);
 if($514){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($512)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $516=1<<$511;
 var $517=$516^-1;
 var $518=HEAP32[((14332)>>2)];
 var $519=$518&$517;
 HEAP32[((14332)>>2)]=$519;
 label=133;break;
 case 117: 
 var $521=$469;
 var $522=HEAP32[((14344)>>2)];
 var $523=($521>>>0)<($522>>>0);
 if($523){label=121;break;}else{label=118;break;}
 case 118: 
 var $525=(($469+16)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($526|0)==($v_3_lcssa_i|0);
 if($527){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($525)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $530=(($469+20)|0);
 HEAP32[(($530)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $533=($R_1_i22|0)==0;
 if($533){label=133;break;}else{label=123;break;}
 case 123: 
 var $535=$R_1_i22;
 var $536=HEAP32[((14344)>>2)];
 var $537=($535>>>0)<($536>>>0);
 if($537){label=132;break;}else{label=124;break;}
 case 124: 
 var $539=(($R_1_i22+24)|0);
 HEAP32[(($539)>>2)]=$469;
 var $540=(($v_3_lcssa_i+16)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=($541|0)==0;
 if($542){label=128;break;}else{label=125;break;}
 case 125: 
 var $544=$541;
 var $545=($544>>>0)<($536>>>0);
 if($545){label=127;break;}else{label=126;break;}
 case 126: 
 var $547=(($R_1_i22+16)|0);
 HEAP32[(($547)>>2)]=$541;
 var $548=(($541+24)|0);
 HEAP32[(($548)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $551=(($v_3_lcssa_i+20)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=($552|0)==0;
 if($553){label=133;break;}else{label=129;break;}
 case 129: 
 var $555=$552;
 var $556=HEAP32[((14344)>>2)];
 var $557=($555>>>0)<($556>>>0);
 if($557){label=131;break;}else{label=130;break;}
 case 130: 
 var $559=(($R_1_i22+20)|0);
 HEAP32[(($559)>>2)]=$552;
 var $560=(($552+24)|0);
 HEAP32[(($560)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $564=($rsize_3_lcssa_i>>>0)<16;
 if($564){label=134;break;}else{label=135;break;}
 case 134: 
 var $566=((($rsize_3_lcssa_i)+($346))|0);
 var $567=$566|3;
 var $568=(($v_3_lcssa_i+4)|0);
 HEAP32[(($568)>>2)]=$567;
 var $_sum19_i=((($566)+(4))|0);
 var $569=(($460+$_sum19_i)|0);
 var $570=$569;
 var $571=HEAP32[(($570)>>2)];
 var $572=$571|1;
 HEAP32[(($570)>>2)]=$572;
 label=159;break;
 case 135: 
 var $574=$346|3;
 var $575=(($v_3_lcssa_i+4)|0);
 HEAP32[(($575)>>2)]=$574;
 var $576=$rsize_3_lcssa_i|1;
 var $_sum_i2540=$346|4;
 var $577=(($460+$_sum_i2540)|0);
 var $578=$577;
 HEAP32[(($578)>>2)]=$576;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($346))|0);
 var $579=(($460+$_sum1_i26)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$rsize_3_lcssa_i;
 var $581=$rsize_3_lcssa_i>>>3;
 var $582=($rsize_3_lcssa_i>>>0)<256;
 if($582){label=136;break;}else{label=141;break;}
 case 136: 
 var $584=$581<<1;
 var $585=((14368+($584<<2))|0);
 var $586=$585;
 var $587=HEAP32[((14328)>>2)];
 var $588=1<<$581;
 var $589=$587&$588;
 var $590=($589|0)==0;
 if($590){label=137;break;}else{label=138;break;}
 case 137: 
 var $592=$587|$588;
 HEAP32[((14328)>>2)]=$592;
 var $_sum15_pre_i=((($584)+(2))|0);
 var $_pre_i27=((14368+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$586;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($584)+(2))|0);
 var $594=((14368+($_sum18_i<<2))|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=$595;
 var $597=HEAP32[((14344)>>2)];
 var $598=($596>>>0)<($597>>>0);
 if($598){label=139;break;}else{var $F5_0_i=$595;var $_pre_phi_i28=$594;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$465;
 var $601=(($F5_0_i+12)|0);
 HEAP32[(($601)>>2)]=$465;
 var $_sum16_i=((($346)+(8))|0);
 var $602=(($460+$_sum16_i)|0);
 var $603=$602;
 HEAP32[(($603)>>2)]=$F5_0_i;
 var $_sum17_i=((($346)+(12))|0);
 var $604=(($460+$_sum17_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$586;
 label=159;break;
 case 141: 
 var $607=$464;
 var $608=$rsize_3_lcssa_i>>>8;
 var $609=($608|0)==0;
 if($609){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $611=($rsize_3_lcssa_i>>>0)>16777215;
 if($611){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $613=((($608)+(1048320))|0);
 var $614=$613>>>16;
 var $615=$614&8;
 var $616=$608<<$615;
 var $617=((($616)+(520192))|0);
 var $618=$617>>>16;
 var $619=$618&4;
 var $620=$619|$615;
 var $621=$616<<$619;
 var $622=((($621)+(245760))|0);
 var $623=$622>>>16;
 var $624=$623&2;
 var $625=$620|$624;
 var $626=(((14)-($625))|0);
 var $627=$621<<$624;
 var $628=$627>>>15;
 var $629=((($626)+($628))|0);
 var $630=$629<<1;
 var $631=((($629)+(7))|0);
 var $632=$rsize_3_lcssa_i>>>($631>>>0);
 var $633=$632&1;
 var $634=$633|$630;
 var $I7_0_i=$634;label=144;break;
 case 144: 
 var $I7_0_i;
 var $636=((14632+($I7_0_i<<2))|0);
 var $_sum2_i=((($346)+(28))|0);
 var $637=(($460+$_sum2_i)|0);
 var $638=$637;
 HEAP32[(($638)>>2)]=$I7_0_i;
 var $_sum3_i29=((($346)+(16))|0);
 var $639=(($460+$_sum3_i29)|0);
 var $_sum4_i30=((($346)+(20))|0);
 var $640=(($460+$_sum4_i30)|0);
 var $641=$640;
 HEAP32[(($641)>>2)]=0;
 var $642=$639;
 HEAP32[(($642)>>2)]=0;
 var $643=HEAP32[((14332)>>2)];
 var $644=1<<$I7_0_i;
 var $645=$643&$644;
 var $646=($645|0)==0;
 if($646){label=145;break;}else{label=146;break;}
 case 145: 
 var $648=$643|$644;
 HEAP32[((14332)>>2)]=$648;
 HEAP32[(($636)>>2)]=$607;
 var $649=$636;
 var $_sum5_i=((($346)+(24))|0);
 var $650=(($460+$_sum5_i)|0);
 var $651=$650;
 HEAP32[(($651)>>2)]=$649;
 var $_sum6_i=((($346)+(12))|0);
 var $652=(($460+$_sum6_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$607;
 var $_sum7_i=((($346)+(8))|0);
 var $654=(($460+$_sum7_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$607;
 label=159;break;
 case 146: 
 var $657=HEAP32[(($636)>>2)];
 var $658=($I7_0_i|0)==31;
 if($658){var $663=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $660=$I7_0_i>>>1;
 var $661=(((25)-($660))|0);
 var $663=$661;label=148;break;
 case 148: 
 var $663;
 var $664=(($657+4)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=$665&-8;
 var $667=($666|0)==($rsize_3_lcssa_i|0);
 if($667){var $T_0_lcssa_i=$657;label=155;break;}else{label=149;break;}
 case 149: 
 var $668=$rsize_3_lcssa_i<<$663;
 var $T_028_i=$657;var $K12_029_i=$668;label=151;break;
 case 150: 
 var $670=$K12_029_i<<1;
 var $671=(($678+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){var $T_0_lcssa_i=$678;label=155;break;}else{var $T_028_i=$678;var $K12_029_i=$670;label=151;break;}
 case 151: 
 var $K12_029_i;
 var $T_028_i;
 var $676=$K12_029_i>>>31;
 var $677=(($T_028_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 if($679){label=152;break;}else{label=150;break;}
 case 152: 
 var $681=$677;
 var $682=HEAP32[((14344)>>2)];
 var $683=($681>>>0)<($682>>>0);
 if($683){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($677)>>2)]=$607;
 var $_sum12_i=((($346)+(24))|0);
 var $685=(($460+$_sum12_i)|0);
 var $686=$685;
 HEAP32[(($686)>>2)]=$T_028_i;
 var $_sum13_i=((($346)+(12))|0);
 var $687=(($460+$_sum13_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$607;
 var $_sum14_i=((($346)+(8))|0);
 var $689=(($460+$_sum14_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$607;
 label=159;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $692=(($T_0_lcssa_i+8)|0);
 var $693=HEAP32[(($692)>>2)];
 var $694=$T_0_lcssa_i;
 var $695=HEAP32[((14344)>>2)];
 var $696=($694>>>0)>=($695>>>0);
 var $697=$693;
 var $698=($697>>>0)>=($695>>>0);
 var $or_cond26_i=$696&$698;
 if($or_cond26_i){label=156;break;}else{label=157;break;}
 case 156: 
 var $700=(($693+12)|0);
 HEAP32[(($700)>>2)]=$607;
 HEAP32[(($692)>>2)]=$607;
 var $_sum9_i=((($346)+(8))|0);
 var $701=(($460+$_sum9_i)|0);
 var $702=$701;
 HEAP32[(($702)>>2)]=$693;
 var $_sum10_i=((($346)+(12))|0);
 var $703=(($460+$_sum10_i)|0);
 var $704=$703;
 HEAP32[(($704)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($346)+(24))|0);
 var $705=(($460+$_sum11_i)|0);
 var $706=$705;
 HEAP32[(($706)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $708=(($v_3_lcssa_i+8)|0);
 var $709=$708;
 var $mem_0=$709;label=341;break;
 case 160: 
 var $nb_0;
 var $710=HEAP32[((14336)>>2)];
 var $711=($710>>>0)<($nb_0>>>0);
 if($711){label=165;break;}else{label=161;break;}
 case 161: 
 var $713=((($710)-($nb_0))|0);
 var $714=HEAP32[((14348)>>2)];
 var $715=($713>>>0)>15;
 if($715){label=162;break;}else{label=163;break;}
 case 162: 
 var $717=$714;
 var $718=(($717+$nb_0)|0);
 var $719=$718;
 HEAP32[((14348)>>2)]=$719;
 HEAP32[((14336)>>2)]=$713;
 var $720=$713|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $721=(($717+$_sum2)|0);
 var $722=$721;
 HEAP32[(($722)>>2)]=$720;
 var $723=(($717+$710)|0);
 var $724=$723;
 HEAP32[(($724)>>2)]=$713;
 var $725=$nb_0|3;
 var $726=(($714+4)|0);
 HEAP32[(($726)>>2)]=$725;
 label=164;break;
 case 163: 
 HEAP32[((14336)>>2)]=0;
 HEAP32[((14348)>>2)]=0;
 var $728=$710|3;
 var $729=(($714+4)|0);
 HEAP32[(($729)>>2)]=$728;
 var $730=$714;
 var $_sum1=((($710)+(4))|0);
 var $731=(($730+$_sum1)|0);
 var $732=$731;
 var $733=HEAP32[(($732)>>2)];
 var $734=$733|1;
 HEAP32[(($732)>>2)]=$734;
 label=164;break;
 case 164: 
 var $736=(($714+8)|0);
 var $737=$736;
 var $mem_0=$737;label=341;break;
 case 165: 
 var $739=HEAP32[((14340)>>2)];
 var $740=($739>>>0)>($nb_0>>>0);
 if($740){label=166;break;}else{label=167;break;}
 case 166: 
 var $742=((($739)-($nb_0))|0);
 HEAP32[((14340)>>2)]=$742;
 var $743=HEAP32[((14352)>>2)];
 var $744=$743;
 var $745=(($744+$nb_0)|0);
 var $746=$745;
 HEAP32[((14352)>>2)]=$746;
 var $747=$742|1;
 var $_sum=((($nb_0)+(4))|0);
 var $748=(($744+$_sum)|0);
 var $749=$748;
 HEAP32[(($749)>>2)]=$747;
 var $750=$nb_0|3;
 var $751=(($743+4)|0);
 HEAP32[(($751)>>2)]=$750;
 var $752=(($743+8)|0);
 var $753=$752;
 var $mem_0=$753;label=341;break;
 case 167: 
 var $755=HEAP32[((14272)>>2)];
 var $756=($755|0)==0;
 if($756){label=168;break;}else{label=171;break;}
 case 168: 
 var $758=_sysconf(30);
 var $759=((($758)-(1))|0);
 var $760=$759&$758;
 var $761=($760|0)==0;
 if($761){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((14280)>>2)]=$758;
 HEAP32[((14276)>>2)]=$758;
 HEAP32[((14284)>>2)]=-1;
 HEAP32[((14288)>>2)]=-1;
 HEAP32[((14292)>>2)]=0;
 HEAP32[((14772)>>2)]=0;
 var $763=_time(0);
 var $764=$763&-16;
 var $765=$764^1431655768;
 HEAP32[((14272)>>2)]=$765;
 label=171;break;
 case 171: 
 var $767=((($nb_0)+(48))|0);
 var $768=HEAP32[((14280)>>2)];
 var $769=((($nb_0)+(47))|0);
 var $770=((($768)+($769))|0);
 var $771=(((-$768))|0);
 var $772=$770&$771;
 var $773=($772>>>0)>($nb_0>>>0);
 if($773){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $775=HEAP32[((14768)>>2)];
 var $776=($775|0)==0;
 if($776){label=174;break;}else{label=173;break;}
 case 173: 
 var $778=HEAP32[((14760)>>2)];
 var $779=((($778)+($772))|0);
 var $780=($779>>>0)<=($778>>>0);
 var $781=($779>>>0)>($775>>>0);
 var $or_cond1_i=$780|$781;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $783=HEAP32[((14772)>>2)];
 var $784=$783&4;
 var $785=($784|0)==0;
 if($785){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $787=HEAP32[((14352)>>2)];
 var $788=($787|0)==0;
 if($788){label=181;break;}else{label=176;break;}
 case 176: 
 var $790=$787;
 var $sp_0_i_i=14776;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $792=(($sp_0_i_i)|0);
 var $793=HEAP32[(($792)>>2)];
 var $794=($793>>>0)>($790>>>0);
 if($794){label=179;break;}else{label=178;break;}
 case 178: 
 var $796=(($sp_0_i_i+4)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=(($793+$797)|0);
 var $799=($798>>>0)>($790>>>0);
 if($799){label=180;break;}else{label=179;break;}
 case 179: 
 var $801=(($sp_0_i_i+8)|0);
 var $802=HEAP32[(($801)>>2)];
 var $803=($802|0)==0;
 if($803){label=181;break;}else{var $sp_0_i_i=$802;label=177;break;}
 case 180: 
 var $804=($sp_0_i_i|0)==0;
 if($804){label=181;break;}else{label=188;break;}
 case 181: 
 var $805=_sbrk(0);
 var $806=($805|0)==-1;
 if($806){var $tsize_03141_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $808=$805;
 var $809=HEAP32[((14276)>>2)];
 var $810=((($809)-(1))|0);
 var $811=$810&$808;
 var $812=($811|0)==0;
 if($812){var $ssize_0_i=$772;label=184;break;}else{label=183;break;}
 case 183: 
 var $814=((($810)+($808))|0);
 var $815=(((-$809))|0);
 var $816=$814&$815;
 var $817=((($772)-($808))|0);
 var $818=((($817)+($816))|0);
 var $ssize_0_i=$818;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $820=HEAP32[((14760)>>2)];
 var $821=((($820)+($ssize_0_i))|0);
 var $822=($ssize_0_i>>>0)>($nb_0>>>0);
 var $823=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$822&$823;
 if($or_cond_i31){label=185;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 185: 
 var $825=HEAP32[((14768)>>2)];
 var $826=($825|0)==0;
 if($826){label=187;break;}else{label=186;break;}
 case 186: 
 var $828=($821>>>0)<=($820>>>0);
 var $829=($821>>>0)>($825>>>0);
 var $or_cond2_i=$828|$829;
 if($or_cond2_i){var $tsize_03141_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $831=_sbrk($ssize_0_i);
 var $832=($831|0)==($805|0);
 if($832){var $br_0_i=$805;var $ssize_1_i=$ssize_0_i;label=190;break;}else{var $ssize_129_i=$ssize_0_i;var $br_030_i=$831;label=191;break;}
 case 188: 
 var $834=HEAP32[((14340)>>2)];
 var $835=((($770)-($834))|0);
 var $836=$835&$771;
 var $837=($836>>>0)<2147483647;
 if($837){label=189;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 189: 
 var $839=_sbrk($836);
 var $840=HEAP32[(($792)>>2)];
 var $841=HEAP32[(($796)>>2)];
 var $842=(($840+$841)|0);
 var $843=($839|0)==($842|0);
 if($843){var $br_0_i=$839;var $ssize_1_i=$836;label=190;break;}else{var $ssize_129_i=$836;var $br_030_i=$839;label=191;break;}
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $845=($br_0_i|0)==-1;
 if($845){var $tsize_03141_i=$ssize_1_i;label=197;break;}else{var $tsize_244_i=$ssize_1_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 191: 
 var $br_030_i;
 var $ssize_129_i;
 var $846=(((-$ssize_129_i))|0);
 var $847=($br_030_i|0)!=-1;
 var $848=($ssize_129_i>>>0)<2147483647;
 var $or_cond5_i=$847&$848;
 var $849=($767>>>0)>($ssize_129_i>>>0);
 var $or_cond4_i=$or_cond5_i&$849;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 192: 
 var $851=HEAP32[((14280)>>2)];
 var $852=((($769)-($ssize_129_i))|0);
 var $853=((($852)+($851))|0);
 var $854=(((-$851))|0);
 var $855=$853&$854;
 var $856=($855>>>0)<2147483647;
 if($856){label=193;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 193: 
 var $858=_sbrk($855);
 var $859=($858|0)==-1;
 if($859){label=195;break;}else{label=194;break;}
 case 194: 
 var $861=((($855)+($ssize_129_i))|0);
 var $ssize_2_i=$861;label=196;break;
 case 195: 
 var $862=_sbrk($846);
 var $tsize_03141_i=0;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $864=($br_030_i|0)==-1;
 if($864){var $tsize_03141_i=0;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_030_i;label=201;break;}
 case 197: 
 var $tsize_03141_i;
 var $865=HEAP32[((14772)>>2)];
 var $866=$865|4;
 HEAP32[((14772)>>2)]=$866;
 var $tsize_1_i=$tsize_03141_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $868=($772>>>0)<2147483647;
 if($868){label=199;break;}else{label=340;break;}
 case 199: 
 var $870=_sbrk($772);
 var $871=_sbrk(0);
 var $872=($870|0)!=-1;
 var $873=($871|0)!=-1;
 var $or_cond3_i=$872&$873;
 var $874=($870>>>0)<($871>>>0);
 var $or_cond6_i=$or_cond3_i&$874;
 if($or_cond6_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $876=$871;
 var $877=$870;
 var $878=((($876)-($877))|0);
 var $879=((($nb_0)+(40))|0);
 var $880=($878>>>0)>($879>>>0);
 var $_tsize_1_i=($880?$878:$tsize_1_i);
 if($880){var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$870;label=201;break;}else{label=340;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $881=HEAP32[((14760)>>2)];
 var $882=((($881)+($tsize_244_i))|0);
 HEAP32[((14760)>>2)]=$882;
 var $883=HEAP32[((14764)>>2)];
 var $884=($882>>>0)>($883>>>0);
 if($884){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((14764)>>2)]=$882;
 label=203;break;
 case 203: 
 var $887=HEAP32[((14352)>>2)];
 var $888=($887|0)==0;
 if($888){label=204;break;}else{var $sp_073_i=14776;label=211;break;}
 case 204: 
 var $890=HEAP32[((14344)>>2)];
 var $891=($890|0)==0;
 var $892=($tbase_245_i>>>0)<($890>>>0);
 var $or_cond8_i=$891|$892;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((14344)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((14776)>>2)]=$tbase_245_i;
 HEAP32[((14780)>>2)]=$tsize_244_i;
 HEAP32[((14788)>>2)]=0;
 var $895=HEAP32[((14272)>>2)];
 HEAP32[((14364)>>2)]=$895;
 HEAP32[((14360)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((14368+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((14368+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((14368+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=207;break;}else{label=208;break;}
 case 208: 
 var $904=((($tsize_244_i)-(40))|0);
 var $905=(($tbase_245_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=210;break;
 case 210: 
 var $912;
 var $913=(($tbase_245_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((14352)>>2)]=$914;
 HEAP32[((14340)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i12_i=((($912)+(4))|0);
 var $917=(($tbase_245_i+$_sum_i12_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $919=(($tbase_245_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((14288)>>2)];
 HEAP32[((14356)>>2)]=$921;
 label=338;break;
 case 211: 
 var $sp_073_i;
 var $922=(($sp_073_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_073_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_245_i|0)==($926|0);
 if($927){label=213;break;}else{label=212;break;}
 case 212: 
 var $929=(($sp_073_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=218;break;}else{var $sp_073_i=$930;label=211;break;}
 case 213: 
 var $932=(($sp_073_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=214;break;}else{label=218;break;}
 case 214: 
 var $937=$887;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$938&$939;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $941=((($925)+($tsize_244_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((14340)>>2)];
 var $943=((($942)+($tsize_244_i))|0);
 var $944=(($887+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=217;break;
 case 217: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((14352)>>2)]=$953;
 HEAP32[((14340)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i16_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i16_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i17_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i17_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((14288)>>2)];
 HEAP32[((14356)>>2)]=$960;
 label=338;break;
 case 218: 
 var $961=HEAP32[((14344)>>2)];
 var $962=($tbase_245_i>>>0)<($961>>>0);
 if($962){label=219;break;}else{var $964=$961;label=220;break;}
 case 219: 
 HEAP32[((14344)>>2)]=$tbase_245_i;
 var $964=$tbase_245_i;label=220;break;
 case 220: 
 var $964;
 var $965=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_166_i=14776;label=221;break;
 case 221: 
 var $sp_166_i;
 var $967=(($sp_166_i)|0);
 var $968=HEAP32[(($967)>>2)];
 var $969=($968|0)==($965|0);
 if($969){label=223;break;}else{label=222;break;}
 case 222: 
 var $971=(($sp_166_i+8)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=($972|0)==0;
 if($973){label=304;break;}else{var $sp_166_i=$972;label=221;break;}
 case 223: 
 var $974=(($sp_166_i+12)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=$975&8;
 var $977=($976|0)==0;
 if($977){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($967)>>2)]=$tbase_245_i;
 var $979=(($sp_166_i+4)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=((($980)+($tsize_244_i))|0);
 HEAP32[(($979)>>2)]=$981;
 var $982=(($tbase_245_i+8)|0);
 var $983=$982;
 var $984=$983&7;
 var $985=($984|0)==0;
 if($985){var $990=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $987=(((-$983))|0);
 var $988=$987&7;
 var $990=$988;label=226;break;
 case 226: 
 var $990;
 var $991=(($tbase_245_i+$990)|0);
 var $_sum102_i=((($tsize_244_i)+(8))|0);
 var $992=(($tbase_245_i+$_sum102_i)|0);
 var $993=$992;
 var $994=$993&7;
 var $995=($994|0)==0;
 if($995){var $1000=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $997=(((-$993))|0);
 var $998=$997&7;
 var $1000=$998;label=228;break;
 case 228: 
 var $1000;
 var $_sum103_i=((($1000)+($tsize_244_i))|0);
 var $1001=(($tbase_245_i+$_sum103_i)|0);
 var $1002=$1001;
 var $1003=$1001;
 var $1004=$991;
 var $1005=((($1003)-($1004))|0);
 var $_sum_i19_i=((($990)+($nb_0))|0);
 var $1006=(($tbase_245_i+$_sum_i19_i)|0);
 var $1007=$1006;
 var $1008=((($1005)-($nb_0))|0);
 var $1009=$nb_0|3;
 var $_sum1_i20_i=((($990)+(4))|0);
 var $1010=(($tbase_245_i+$_sum1_i20_i)|0);
 var $1011=$1010;
 HEAP32[(($1011)>>2)]=$1009;
 var $1012=($1002|0)==($887|0);
 if($1012){label=229;break;}else{label=230;break;}
 case 229: 
 var $1014=HEAP32[((14340)>>2)];
 var $1015=((($1014)+($1008))|0);
 HEAP32[((14340)>>2)]=$1015;
 HEAP32[((14352)>>2)]=$1007;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i19_i)+(4))|0);
 var $1017=(($tbase_245_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=303;break;
 case 230: 
 var $1020=HEAP32[((14348)>>2)];
 var $1021=($1002|0)==($1020|0);
 if($1021){label=231;break;}else{label=232;break;}
 case 231: 
 var $1023=HEAP32[((14336)>>2)];
 var $1024=((($1023)+($1008))|0);
 HEAP32[((14336)>>2)]=$1024;
 HEAP32[((14348)>>2)]=$1007;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i19_i)+(4))|0);
 var $1026=(($tbase_245_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i19_i))|0);
 var $1028=(($tbase_245_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=303;break;
 case 232: 
 var $_sum2_i21_i=((($tsize_244_i)+(4))|0);
 var $_sum104_i=((($_sum2_i21_i)+($1000))|0);
 var $1031=(($tbase_245_i+$_sum104_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=233;break;}else{var $oldfirst_0_i_i=$1002;var $qsize_0_i_i=$1008;label=280;break;}
 case 233: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1000|8;
 var $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1041=(($tbase_245_i+$_sum114_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum115_i=((($_sum41_i_i)+($1000))|0);
 var $1044=(($tbase_245_i+$_sum115_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((14368+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=237;break;}else{label=235;break;}
 case 235: 
 var $1052=$1043;
 var $1053=($1052>>>0)<($964>>>0);
 if($1053){label=245;break;}else{label=236;break;}
 case 236: 
 var $1055=(($1043+12)|0);
 var $1056=HEAP32[(($1055)>>2)];
 var $1057=($1056|0)==($1002|0);
 if($1057){label=237;break;}else{label=245;break;}
 case 237: 
 var $1058=($1046|0)==($1043|0);
 if($1058){label=238;break;}else{label=239;break;}
 case 238: 
 var $1060=1<<$1038;
 var $1061=$1060^-1;
 var $1062=HEAP32[((14328)>>2)];
 var $1063=$1062&$1061;
 HEAP32[((14328)>>2)]=$1063;
 label=279;break;
 case 239: 
 var $1065=($1046|0)==($1049|0);
 if($1065){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre62_i_i=(($1046+8)|0);
 var $_pre_phi63_i_i=$_pre62_i_i;label=243;break;
 case 241: 
 var $1067=$1046;
 var $1068=($1067>>>0)<($964>>>0);
 if($1068){label=244;break;}else{label=242;break;}
 case 242: 
 var $1070=(($1046+8)|0);
 var $1071=HEAP32[(($1070)>>2)];
 var $1072=($1071|0)==($1002|0);
 if($1072){var $_pre_phi63_i_i=$1070;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi63_i_i;
 var $1073=(($1043+12)|0);
 HEAP32[(($1073)>>2)]=$1046;
 HEAP32[(($_pre_phi63_i_i)>>2)]=$1043;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1075=$1001;
 var $_sum34_i_i=$1000|24;
 var $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1076=(($tbase_245_i+$_sum105_i)|0);
 var $1077=$1076;
 var $1078=HEAP32[(($1077)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum5_i_i)+($1000))|0);
 var $1079=(($tbase_245_i+$_sum106_i)|0);
 var $1080=$1079;
 var $1081=HEAP32[(($1080)>>2)];
 var $1082=($1081|0)==($1075|0);
 if($1082){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1000|8;
 var $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1084=(($tbase_245_i+$_sum107_i)|0);
 var $1085=$1084;
 var $1086=HEAP32[(($1085)>>2)];
 var $1087=$1086;
 var $1088=($1087>>>0)<($964>>>0);
 if($1088){label=251;break;}else{label=248;break;}
 case 248: 
 var $1090=(($1086+12)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=($1091|0)==($1075|0);
 if($1092){label=249;break;}else{label=251;break;}
 case 249: 
 var $1094=(($1081+8)|0);
 var $1095=HEAP32[(($1094)>>2)];
 var $1096=($1095|0)==($1075|0);
 if($1096){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1090)>>2)]=$1081;
 HEAP32[(($1094)>>2)]=$1086;
 var $R_1_i_i=$1081;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1000|16;
 var $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
 var $1099=(($tbase_245_i+$_sum112_i)|0);
 var $1100=$1099;
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=($1101|0)==0;
 if($1102){label=253;break;}else{var $R_0_i_i=$1101;var $RP_0_i_i=$1100;label=254;break;}
 case 253: 
 var $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1104=(($tbase_245_i+$_sum113_i)|0);
 var $1105=$1104;
 var $1106=HEAP32[(($1105)>>2)];
 var $1107=($1106|0)==0;
 if($1107){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1106;var $RP_0_i_i=$1105;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1108=(($R_0_i_i+20)|0);
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){label=255;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=254;break;}
 case 255: 
 var $1112=(($R_0_i_i+16)|0);
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){label=256;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 256: 
 var $1116=$RP_0_i_i;
 var $1117=($1116>>>0)<($964>>>0);
 if($1117){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1121=($1078|0)==0;
 if($1121){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum108_i=((($_sum31_i_i)+($1000))|0);
 var $1123=(($tbase_245_i+$_sum108_i)|0);
 var $1124=$1123;
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=((14632+($1125<<2))|0);
 var $1127=HEAP32[(($1126)>>2)];
 var $1128=($1075|0)==($1127|0);
 if($1128){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1126)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1130=1<<$1125;
 var $1131=$1130^-1;
 var $1132=HEAP32[((14332)>>2)];
 var $1133=$1132&$1131;
 HEAP32[((14332)>>2)]=$1133;
 label=279;break;
 case 263: 
 var $1135=$1078;
 var $1136=HEAP32[((14344)>>2)];
 var $1137=($1135>>>0)<($1136>>>0);
 if($1137){label=267;break;}else{label=264;break;}
 case 264: 
 var $1139=(($1078+16)|0);
 var $1140=HEAP32[(($1139)>>2)];
 var $1141=($1140|0)==($1075|0);
 if($1141){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1139)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1144=(($1078+20)|0);
 HEAP32[(($1144)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1147=($R_1_i_i|0)==0;
 if($1147){label=279;break;}else{label=269;break;}
 case 269: 
 var $1149=$R_1_i_i;
 var $1150=HEAP32[((14344)>>2)];
 var $1151=($1149>>>0)<($1150>>>0);
 if($1151){label=278;break;}else{label=270;break;}
 case 270: 
 var $1153=(($R_1_i_i+24)|0);
 HEAP32[(($1153)>>2)]=$1078;
 var $_sum3233_i_i=$1000|16;
 var $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1154=(($tbase_245_i+$_sum109_i)|0);
 var $1155=$1154;
 var $1156=HEAP32[(($1155)>>2)];
 var $1157=($1156|0)==0;
 if($1157){label=274;break;}else{label=271;break;}
 case 271: 
 var $1159=$1156;
 var $1160=($1159>>>0)<($1150>>>0);
 if($1160){label=273;break;}else{label=272;break;}
 case 272: 
 var $1162=(($R_1_i_i+16)|0);
 HEAP32[(($1162)>>2)]=$1156;
 var $1163=(($1156+24)|0);
 HEAP32[(($1163)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
 var $1166=(($tbase_245_i+$_sum110_i)|0);
 var $1167=$1166;
 var $1168=HEAP32[(($1167)>>2)];
 var $1169=($1168|0)==0;
 if($1169){label=279;break;}else{label=275;break;}
 case 275: 
 var $1171=$1168;
 var $1172=HEAP32[((14344)>>2)];
 var $1173=($1171>>>0)<($1172>>>0);
 if($1173){label=277;break;}else{label=276;break;}
 case 276: 
 var $1175=(($R_1_i_i+20)|0);
 HEAP32[(($1175)>>2)]=$1168;
 var $1176=(($1168+24)|0);
 HEAP32[(($1176)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1037|$1000;
 var $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1180=(($tbase_245_i+$_sum111_i)|0);
 var $1181=$1180;
 var $1182=((($1037)+($1008))|0);
 var $oldfirst_0_i_i=$1181;var $qsize_0_i_i=$1182;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1184=(($oldfirst_0_i_i+4)|0);
 var $1185=HEAP32[(($1184)>>2)];
 var $1186=$1185&-2;
 HEAP32[(($1184)>>2)]=$1186;
 var $1187=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i19_i)+(4))|0);
 var $1188=(($tbase_245_i+$_sum10_i_i)|0);
 var $1189=$1188;
 HEAP32[(($1189)>>2)]=$1187;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
 var $1190=(($tbase_245_i+$_sum11_i_i)|0);
 var $1191=$1190;
 HEAP32[(($1191)>>2)]=$qsize_0_i_i;
 var $1192=$qsize_0_i_i>>>3;
 var $1193=($qsize_0_i_i>>>0)<256;
 if($1193){label=281;break;}else{label=286;break;}
 case 281: 
 var $1195=$1192<<1;
 var $1196=((14368+($1195<<2))|0);
 var $1197=$1196;
 var $1198=HEAP32[((14328)>>2)];
 var $1199=1<<$1192;
 var $1200=$1198&$1199;
 var $1201=($1200|0)==0;
 if($1201){label=282;break;}else{label=283;break;}
 case 282: 
 var $1203=$1198|$1199;
 HEAP32[((14328)>>2)]=$1203;
 var $_sum27_pre_i_i=((($1195)+(2))|0);
 var $_pre_i22_i=((14368+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1197;var $_pre_phi_i23_i=$_pre_i22_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1195)+(2))|0);
 var $1205=((14368+($_sum30_i_i<<2))|0);
 var $1206=HEAP32[(($1205)>>2)];
 var $1207=$1206;
 var $1208=HEAP32[((14344)>>2)];
 var $1209=($1207>>>0)<($1208>>>0);
 if($1209){label=284;break;}else{var $F4_0_i_i=$1206;var $_pre_phi_i23_i=$1205;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i23_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i23_i)>>2)]=$1007;
 var $1212=(($F4_0_i_i+12)|0);
 HEAP32[(($1212)>>2)]=$1007;
 var $_sum28_i_i=((($_sum_i19_i)+(8))|0);
 var $1213=(($tbase_245_i+$_sum28_i_i)|0);
 var $1214=$1213;
 HEAP32[(($1214)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i19_i)+(12))|0);
 var $1215=(($tbase_245_i+$_sum29_i_i)|0);
 var $1216=$1215;
 HEAP32[(($1216)>>2)]=$1197;
 label=303;break;
 case 286: 
 var $1218=$1006;
 var $1219=$qsize_0_i_i>>>8;
 var $1220=($1219|0)==0;
 if($1220){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1222=($qsize_0_i_i>>>0)>16777215;
 if($1222){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1224=((($1219)+(1048320))|0);
 var $1225=$1224>>>16;
 var $1226=$1225&8;
 var $1227=$1219<<$1226;
 var $1228=((($1227)+(520192))|0);
 var $1229=$1228>>>16;
 var $1230=$1229&4;
 var $1231=$1230|$1226;
 var $1232=$1227<<$1230;
 var $1233=((($1232)+(245760))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&2;
 var $1236=$1231|$1235;
 var $1237=(((14)-($1236))|0);
 var $1238=$1232<<$1235;
 var $1239=$1238>>>15;
 var $1240=((($1237)+($1239))|0);
 var $1241=$1240<<1;
 var $1242=((($1240)+(7))|0);
 var $1243=$qsize_0_i_i>>>($1242>>>0);
 var $1244=$1243&1;
 var $1245=$1244|$1241;
 var $I7_0_i_i=$1245;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1247=((14632+($I7_0_i_i<<2))|0);
 var $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
 var $1248=(($tbase_245_i+$_sum12_i24_i)|0);
 var $1249=$1248;
 HEAP32[(($1249)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i19_i)+(16))|0);
 var $1250=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i19_i)+(20))|0);
 var $1251=(($tbase_245_i+$_sum14_i_i)|0);
 var $1252=$1251;
 HEAP32[(($1252)>>2)]=0;
 var $1253=$1250;
 HEAP32[(($1253)>>2)]=0;
 var $1254=HEAP32[((14332)>>2)];
 var $1255=1<<$I7_0_i_i;
 var $1256=$1254&$1255;
 var $1257=($1256|0)==0;
 if($1257){label=290;break;}else{label=291;break;}
 case 290: 
 var $1259=$1254|$1255;
 HEAP32[((14332)>>2)]=$1259;
 HEAP32[(($1247)>>2)]=$1218;
 var $1260=$1247;
 var $_sum15_i_i=((($_sum_i19_i)+(24))|0);
 var $1261=(($tbase_245_i+$_sum15_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=$1260;
 var $_sum16_i_i=((($_sum_i19_i)+(12))|0);
 var $1263=(($tbase_245_i+$_sum16_i_i)|0);
 var $1264=$1263;
 HEAP32[(($1264)>>2)]=$1218;
 var $_sum17_i_i=((($_sum_i19_i)+(8))|0);
 var $1265=(($tbase_245_i+$_sum17_i_i)|0);
 var $1266=$1265;
 HEAP32[(($1266)>>2)]=$1218;
 label=303;break;
 case 291: 
 var $1268=HEAP32[(($1247)>>2)];
 var $1269=($I7_0_i_i|0)==31;
 if($1269){var $1274=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1271=$I7_0_i_i>>>1;
 var $1272=(((25)-($1271))|0);
 var $1274=$1272;label=293;break;
 case 293: 
 var $1274;
 var $1275=(($1268+4)|0);
 var $1276=HEAP32[(($1275)>>2)];
 var $1277=$1276&-8;
 var $1278=($1277|0)==($qsize_0_i_i|0);
 if($1278){var $T_0_lcssa_i26_i=$1268;label=300;break;}else{label=294;break;}
 case 294: 
 var $1279=$qsize_0_i_i<<$1274;
 var $T_056_i_i=$1268;var $K8_057_i_i=$1279;label=296;break;
 case 295: 
 var $1281=$K8_057_i_i<<1;
 var $1282=(($1289+4)|0);
 var $1283=HEAP32[(($1282)>>2)];
 var $1284=$1283&-8;
 var $1285=($1284|0)==($qsize_0_i_i|0);
 if($1285){var $T_0_lcssa_i26_i=$1289;label=300;break;}else{var $T_056_i_i=$1289;var $K8_057_i_i=$1281;label=296;break;}
 case 296: 
 var $K8_057_i_i;
 var $T_056_i_i;
 var $1287=$K8_057_i_i>>>31;
 var $1288=(($T_056_i_i+16+($1287<<2))|0);
 var $1289=HEAP32[(($1288)>>2)];
 var $1290=($1289|0)==0;
 if($1290){label=297;break;}else{label=295;break;}
 case 297: 
 var $1292=$1288;
 var $1293=HEAP32[((14344)>>2)];
 var $1294=($1292>>>0)<($1293>>>0);
 if($1294){label=299;break;}else{label=298;break;}
 case 298: 
 HEAP32[(($1288)>>2)]=$1218;
 var $_sum24_i_i=((($_sum_i19_i)+(24))|0);
 var $1296=(($tbase_245_i+$_sum24_i_i)|0);
 var $1297=$1296;
 HEAP32[(($1297)>>2)]=$T_056_i_i;
 var $_sum25_i_i=((($_sum_i19_i)+(12))|0);
 var $1298=(($tbase_245_i+$_sum25_i_i)|0);
 var $1299=$1298;
 HEAP32[(($1299)>>2)]=$1218;
 var $_sum26_i_i=((($_sum_i19_i)+(8))|0);
 var $1300=(($tbase_245_i+$_sum26_i_i)|0);
 var $1301=$1300;
 HEAP32[(($1301)>>2)]=$1218;
 label=303;break;
 case 299: 
 _abort();
 throw "Reached an unreachable!";
 case 300: 
 var $T_0_lcssa_i26_i;
 var $1303=(($T_0_lcssa_i26_i+8)|0);
 var $1304=HEAP32[(($1303)>>2)];
 var $1305=$T_0_lcssa_i26_i;
 var $1306=HEAP32[((14344)>>2)];
 var $1307=($1305>>>0)>=($1306>>>0);
 var $1308=$1304;
 var $1309=($1308>>>0)>=($1306>>>0);
 var $or_cond_i27_i=$1307&$1309;
 if($or_cond_i27_i){label=301;break;}else{label=302;break;}
 case 301: 
 var $1311=(($1304+12)|0);
 HEAP32[(($1311)>>2)]=$1218;
 HEAP32[(($1303)>>2)]=$1218;
 var $_sum21_i_i=((($_sum_i19_i)+(8))|0);
 var $1312=(($tbase_245_i+$_sum21_i_i)|0);
 var $1313=$1312;
 HEAP32[(($1313)>>2)]=$1304;
 var $_sum22_i_i=((($_sum_i19_i)+(12))|0);
 var $1314=(($tbase_245_i+$_sum22_i_i)|0);
 var $1315=$1314;
 HEAP32[(($1315)>>2)]=$T_0_lcssa_i26_i;
 var $_sum23_i_i=((($_sum_i19_i)+(24))|0);
 var $1316=(($tbase_245_i+$_sum23_i_i)|0);
 var $1317=$1316;
 HEAP32[(($1317)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$990|8;
 var $1318=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1318;label=341;break;
 case 304: 
 var $1319=$887;
 var $sp_0_i_i_i=14776;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1321=(($sp_0_i_i_i)|0);
 var $1322=HEAP32[(($1321)>>2)];
 var $1323=($1322>>>0)>($1319>>>0);
 if($1323){label=307;break;}else{label=306;break;}
 case 306: 
 var $1325=(($sp_0_i_i_i+4)|0);
 var $1326=HEAP32[(($1325)>>2)];
 var $1327=(($1322+$1326)|0);
 var $1328=($1327>>>0)>($1319>>>0);
 if($1328){label=308;break;}else{label=307;break;}
 case 307: 
 var $1330=(($sp_0_i_i_i+8)|0);
 var $1331=HEAP32[(($1330)>>2)];
 var $sp_0_i_i_i=$1331;label=305;break;
 case 308: 
 var $_sum_i13_i=((($1326)-(47))|0);
 var $_sum1_i14_i=((($1326)-(39))|0);
 var $1332=(($1322+$_sum1_i14_i)|0);
 var $1333=$1332;
 var $1334=$1333&7;
 var $1335=($1334|0)==0;
 if($1335){var $1340=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1337=(((-$1333))|0);
 var $1338=$1337&7;
 var $1340=$1338;label=310;break;
 case 310: 
 var $1340;
 var $_sum2_i15_i=((($_sum_i13_i)+($1340))|0);
 var $1341=(($1322+$_sum2_i15_i)|0);
 var $1342=(($887+16)|0);
 var $1343=$1342;
 var $1344=($1341>>>0)<($1343>>>0);
 var $1345=($1344?$1319:$1341);
 var $1346=(($1345+8)|0);
 var $1347=$1346;
 var $1348=((($tsize_244_i)-(40))|0);
 var $1349=(($tbase_245_i+8)|0);
 var $1350=$1349;
 var $1351=$1350&7;
 var $1352=($1351|0)==0;
 if($1352){var $1356=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1354=(((-$1350))|0);
 var $1355=$1354&7;
 var $1356=$1355;label=312;break;
 case 312: 
 var $1356;
 var $1357=(($tbase_245_i+$1356)|0);
 var $1358=$1357;
 var $1359=((($1348)-($1356))|0);
 HEAP32[((14352)>>2)]=$1358;
 HEAP32[((14340)>>2)]=$1359;
 var $1360=$1359|1;
 var $_sum_i_i_i=((($1356)+(4))|0);
 var $1361=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1362=$1361;
 HEAP32[(($1362)>>2)]=$1360;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1363=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1364=$1363;
 HEAP32[(($1364)>>2)]=40;
 var $1365=HEAP32[((14288)>>2)];
 HEAP32[((14356)>>2)]=$1365;
 var $1366=(($1345+4)|0);
 var $1367=$1366;
 HEAP32[(($1367)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1346)>>2)]=HEAP32[((14776)>>2)];HEAP32[((($1346)+(4))>>2)]=HEAP32[((14780)>>2)];HEAP32[((($1346)+(8))>>2)]=HEAP32[((14784)>>2)];HEAP32[((($1346)+(12))>>2)]=HEAP32[((14788)>>2)];
 HEAP32[((14776)>>2)]=$tbase_245_i;
 HEAP32[((14780)>>2)]=$tsize_244_i;
 HEAP32[((14788)>>2)]=0;
 HEAP32[((14784)>>2)]=$1347;
 var $1368=(($1345+28)|0);
 var $1369=$1368;
 HEAP32[(($1369)>>2)]=7;
 var $1370=(($1345+32)|0);
 var $1371=($1370>>>0)<($1327>>>0);
 if($1371){var $1372=$1369;label=313;break;}else{label=314;break;}
 case 313: 
 var $1372;
 var $1373=(($1372+4)|0);
 HEAP32[(($1373)>>2)]=7;
 var $1374=(($1372+8)|0);
 var $1375=$1374;
 var $1376=($1375>>>0)<($1327>>>0);
 if($1376){var $1372=$1373;label=313;break;}else{label=314;break;}
 case 314: 
 var $1377=($1345|0)==($1319|0);
 if($1377){label=338;break;}else{label=315;break;}
 case 315: 
 var $1379=$1345;
 var $1380=$887;
 var $1381=((($1379)-($1380))|0);
 var $1382=(($1319+$1381)|0);
 var $_sum3_i_i=((($1381)+(4))|0);
 var $1383=(($1319+$_sum3_i_i)|0);
 var $1384=$1383;
 var $1385=HEAP32[(($1384)>>2)];
 var $1386=$1385&-2;
 HEAP32[(($1384)>>2)]=$1386;
 var $1387=$1381|1;
 var $1388=(($887+4)|0);
 HEAP32[(($1388)>>2)]=$1387;
 var $1389=$1382;
 HEAP32[(($1389)>>2)]=$1381;
 var $1390=$1381>>>3;
 var $1391=($1381>>>0)<256;
 if($1391){label=316;break;}else{label=321;break;}
 case 316: 
 var $1393=$1390<<1;
 var $1394=((14368+($1393<<2))|0);
 var $1395=$1394;
 var $1396=HEAP32[((14328)>>2)];
 var $1397=1<<$1390;
 var $1398=$1396&$1397;
 var $1399=($1398|0)==0;
 if($1399){label=317;break;}else{label=318;break;}
 case 317: 
 var $1401=$1396|$1397;
 HEAP32[((14328)>>2)]=$1401;
 var $_sum11_pre_i_i=((($1393)+(2))|0);
 var $_pre_i_i=((14368+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1395;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1393)+(2))|0);
 var $1403=((14368+($_sum12_i_i<<2))|0);
 var $1404=HEAP32[(($1403)>>2)];
 var $1405=$1404;
 var $1406=HEAP32[((14344)>>2)];
 var $1407=($1405>>>0)<($1406>>>0);
 if($1407){label=319;break;}else{var $F_0_i_i=$1404;var $_pre_phi_i_i=$1403;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$887;
 var $1410=(($F_0_i_i+12)|0);
 HEAP32[(($1410)>>2)]=$887;
 var $1411=(($887+8)|0);
 HEAP32[(($1411)>>2)]=$F_0_i_i;
 var $1412=(($887+12)|0);
 HEAP32[(($1412)>>2)]=$1395;
 label=338;break;
 case 321: 
 var $1414=$887;
 var $1415=$1381>>>8;
 var $1416=($1415|0)==0;
 if($1416){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1418=($1381>>>0)>16777215;
 if($1418){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1420=((($1415)+(1048320))|0);
 var $1421=$1420>>>16;
 var $1422=$1421&8;
 var $1423=$1415<<$1422;
 var $1424=((($1423)+(520192))|0);
 var $1425=$1424>>>16;
 var $1426=$1425&4;
 var $1427=$1426|$1422;
 var $1428=$1423<<$1426;
 var $1429=((($1428)+(245760))|0);
 var $1430=$1429>>>16;
 var $1431=$1430&2;
 var $1432=$1427|$1431;
 var $1433=(((14)-($1432))|0);
 var $1434=$1428<<$1431;
 var $1435=$1434>>>15;
 var $1436=((($1433)+($1435))|0);
 var $1437=$1436<<1;
 var $1438=((($1436)+(7))|0);
 var $1439=$1381>>>($1438>>>0);
 var $1440=$1439&1;
 var $1441=$1440|$1437;
 var $I1_0_i_i=$1441;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1443=((14632+($I1_0_i_i<<2))|0);
 var $1444=(($887+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1444)>>2)]=$I1_0_c_i_i;
 var $1445=(($887+20)|0);
 HEAP32[(($1445)>>2)]=0;
 var $1446=(($887+16)|0);
 HEAP32[(($1446)>>2)]=0;
 var $1447=HEAP32[((14332)>>2)];
 var $1448=1<<$I1_0_i_i;
 var $1449=$1447&$1448;
 var $1450=($1449|0)==0;
 if($1450){label=325;break;}else{label=326;break;}
 case 325: 
 var $1452=$1447|$1448;
 HEAP32[((14332)>>2)]=$1452;
 HEAP32[(($1443)>>2)]=$1414;
 var $1453=(($887+24)|0);
 var $_c_i_i=$1443;
 HEAP32[(($1453)>>2)]=$_c_i_i;
 var $1454=(($887+12)|0);
 HEAP32[(($1454)>>2)]=$887;
 var $1455=(($887+8)|0);
 HEAP32[(($1455)>>2)]=$887;
 label=338;break;
 case 326: 
 var $1457=HEAP32[(($1443)>>2)];
 var $1458=($I1_0_i_i|0)==31;
 if($1458){var $1463=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1460=$I1_0_i_i>>>1;
 var $1461=(((25)-($1460))|0);
 var $1463=$1461;label=328;break;
 case 328: 
 var $1463;
 var $1464=(($1457+4)|0);
 var $1465=HEAP32[(($1464)>>2)];
 var $1466=$1465&-8;
 var $1467=($1466|0)==($1381|0);
 if($1467){var $T_0_lcssa_i_i=$1457;label=335;break;}else{label=329;break;}
 case 329: 
 var $1468=$1381<<$1463;
 var $T_015_i_i=$1457;var $K2_016_i_i=$1468;label=331;break;
 case 330: 
 var $1470=$K2_016_i_i<<1;
 var $1471=(($1478+4)|0);
 var $1472=HEAP32[(($1471)>>2)];
 var $1473=$1472&-8;
 var $1474=($1473|0)==($1381|0);
 if($1474){var $T_0_lcssa_i_i=$1478;label=335;break;}else{var $T_015_i_i=$1478;var $K2_016_i_i=$1470;label=331;break;}
 case 331: 
 var $K2_016_i_i;
 var $T_015_i_i;
 var $1476=$K2_016_i_i>>>31;
 var $1477=(($T_015_i_i+16+($1476<<2))|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=($1478|0)==0;
 if($1479){label=332;break;}else{label=330;break;}
 case 332: 
 var $1481=$1477;
 var $1482=HEAP32[((14344)>>2)];
 var $1483=($1481>>>0)<($1482>>>0);
 if($1483){label=334;break;}else{label=333;break;}
 case 333: 
 HEAP32[(($1477)>>2)]=$1414;
 var $1485=(($887+24)|0);
 var $T_0_c8_i_i=$T_015_i_i;
 HEAP32[(($1485)>>2)]=$T_0_c8_i_i;
 var $1486=(($887+12)|0);
 HEAP32[(($1486)>>2)]=$887;
 var $1487=(($887+8)|0);
 HEAP32[(($1487)>>2)]=$887;
 label=338;break;
 case 334: 
 _abort();
 throw "Reached an unreachable!";
 case 335: 
 var $T_0_lcssa_i_i;
 var $1489=(($T_0_lcssa_i_i+8)|0);
 var $1490=HEAP32[(($1489)>>2)];
 var $1491=$T_0_lcssa_i_i;
 var $1492=HEAP32[((14344)>>2)];
 var $1493=($1491>>>0)>=($1492>>>0);
 var $1494=$1490;
 var $1495=($1494>>>0)>=($1492>>>0);
 var $or_cond_i_i=$1493&$1495;
 if($or_cond_i_i){label=336;break;}else{label=337;break;}
 case 336: 
 var $1497=(($1490+12)|0);
 HEAP32[(($1497)>>2)]=$1414;
 HEAP32[(($1489)>>2)]=$1414;
 var $1498=(($887+8)|0);
 var $_c7_i_i=$1490;
 HEAP32[(($1498)>>2)]=$_c7_i_i;
 var $1499=(($887+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1499)>>2)]=$T_0_c_i_i;
 var $1500=(($887+24)|0);
 HEAP32[(($1500)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1501=HEAP32[((14340)>>2)];
 var $1502=($1501>>>0)>($nb_0>>>0);
 if($1502){label=339;break;}else{label=340;break;}
 case 339: 
 var $1504=((($1501)-($nb_0))|0);
 HEAP32[((14340)>>2)]=$1504;
 var $1505=HEAP32[((14352)>>2)];
 var $1506=$1505;
 var $1507=(($1506+$nb_0)|0);
 var $1508=$1507;
 HEAP32[((14352)>>2)]=$1508;
 var $1509=$1504|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1510=(($1506+$_sum_i34)|0);
 var $1511=$1510;
 HEAP32[(($1511)>>2)]=$1509;
 var $1512=$nb_0|3;
 var $1513=(($1505+4)|0);
 HEAP32[(($1513)>>2)]=$1512;
 var $1514=(($1505+8)|0);
 var $1515=$1514;
 var $mem_0=$1515;label=341;break;
 case 340: 
 var $1516=___errno_location();
 HEAP32[(($1516)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((14344)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((14348)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((14368+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((14328)>>2)];
 var $57=$56&$55;
 HEAP32[((14328)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre82=(($40+8)|0);
 var $_pre_phi83=$_pre82;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi83=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi83;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi83)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((14632+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((14332)>>2)];
 var $127=$126&$125;
 HEAP32[((14332)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((14344)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((14344)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=($153>>>0)<($144>>>0);
 if($154){label=48;break;}else{label=47;break;}
 case 47: 
 var $156=(($R_1+16)|0);
 HEAP32[(($156)>>2)]=$150;
 var $157=(($150+24)|0);
 HEAP32[(($157)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $160=(($mem+$_sum43)|0);
 var $161=$160;
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $165=$162;
 var $166=HEAP32[((14344)>>2)];
 var $167=($165>>>0)<($166>>>0);
 if($167){label=52;break;}else{label=51;break;}
 case 51: 
 var $169=(($R_1+20)|0);
 HEAP32[(($169)>>2)]=$162;
 var $170=(($162+24)|0);
 HEAP32[(($170)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $174=(($mem+$_sum4)|0);
 var $175=$174;
 var $176=HEAP32[(($175)>>2)];
 var $177=$176&3;
 var $178=($177|0)==3;
 if($178){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((14336)>>2)]=$26;
 var $180=$176&-2;
 HEAP32[(($175)>>2)]=$180;
 var $181=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $182=(($mem+$_sum35)|0);
 var $183=$182;
 HEAP32[(($183)>>2)]=$181;
 var $184=$15;
 HEAP32[(($184)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $186=$p_0;
 var $187=($186>>>0)<($15>>>0);
 if($187){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $189=(($mem+$_sum34)|0);
 var $190=$189;
 var $191=HEAP32[(($190)>>2)];
 var $192=$191&1;
 var $phitmp=($192|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $194=$191&2;
 var $195=($194|0)==0;
 if($195){label=59;break;}else{label=112;break;}
 case 59: 
 var $197=HEAP32[((14352)>>2)];
 var $198=($16|0)==($197|0);
 if($198){label=60;break;}else{label=62;break;}
 case 60: 
 var $200=HEAP32[((14340)>>2)];
 var $201=((($200)+($psize_0))|0);
 HEAP32[((14340)>>2)]=$201;
 HEAP32[((14352)>>2)]=$p_0;
 var $202=$201|1;
 var $203=(($p_0+4)|0);
 HEAP32[(($203)>>2)]=$202;
 var $204=HEAP32[((14348)>>2)];
 var $205=($p_0|0)==($204|0);
 if($205){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((14348)>>2)]=0;
 HEAP32[((14336)>>2)]=0;
 label=140;break;
 case 62: 
 var $208=HEAP32[((14348)>>2)];
 var $209=($16|0)==($208|0);
 if($209){label=63;break;}else{label=64;break;}
 case 63: 
 var $211=HEAP32[((14336)>>2)];
 var $212=((($211)+($psize_0))|0);
 HEAP32[((14336)>>2)]=$212;
 HEAP32[((14348)>>2)]=$p_0;
 var $213=$212|1;
 var $214=(($p_0+4)|0);
 HEAP32[(($214)>>2)]=$213;
 var $215=(($186+$212)|0);
 var $216=$215;
 HEAP32[(($216)>>2)]=$212;
 label=140;break;
 case 64: 
 var $218=$191&-8;
 var $219=((($218)+($psize_0))|0);
 var $220=$191>>>3;
 var $221=($191>>>0)<256;
 if($221){label=65;break;}else{label=77;break;}
 case 65: 
 var $223=(($mem+$14)|0);
 var $224=$223;
 var $225=HEAP32[(($224)>>2)];
 var $_sum2829=$14|4;
 var $226=(($mem+$_sum2829)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $229=$220<<1;
 var $230=((14368+($229<<2))|0);
 var $231=$230;
 var $232=($225|0)==($231|0);
 if($232){label=68;break;}else{label=66;break;}
 case 66: 
 var $234=$225;
 var $235=HEAP32[((14344)>>2)];
 var $236=($234>>>0)<($235>>>0);
 if($236){label=76;break;}else{label=67;break;}
 case 67: 
 var $238=(($225+12)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==($16|0);
 if($240){label=68;break;}else{label=76;break;}
 case 68: 
 var $241=($228|0)==($225|0);
 if($241){label=69;break;}else{label=70;break;}
 case 69: 
 var $243=1<<$220;
 var $244=$243^-1;
 var $245=HEAP32[((14328)>>2)];
 var $246=$245&$244;
 HEAP32[((14328)>>2)]=$246;
 label=110;break;
 case 70: 
 var $248=($228|0)==($231|0);
 if($248){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre80=(($228+8)|0);
 var $_pre_phi81=$_pre80;label=74;break;
 case 72: 
 var $250=$228;
 var $251=HEAP32[((14344)>>2)];
 var $252=($250>>>0)<($251>>>0);
 if($252){label=75;break;}else{label=73;break;}
 case 73: 
 var $254=(($228+8)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=($255|0)==($16|0);
 if($256){var $_pre_phi81=$254;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi81;
 var $257=(($225+12)|0);
 HEAP32[(($257)>>2)]=$228;
 HEAP32[(($_pre_phi81)>>2)]=$225;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $259=$15;
 var $_sum6=((($14)+(16))|0);
 var $260=(($mem+$_sum6)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $_sum78=$14|4;
 var $263=(($mem+$_sum78)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==($259|0);
 if($266){label=83;break;}else{label=78;break;}
 case 78: 
 var $268=(($mem+$14)|0);
 var $269=$268;
 var $270=HEAP32[(($269)>>2)];
 var $271=$270;
 var $272=HEAP32[((14344)>>2)];
 var $273=($271>>>0)<($272>>>0);
 if($273){label=82;break;}else{label=79;break;}
 case 79: 
 var $275=(($270+12)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==($259|0);
 if($277){label=80;break;}else{label=82;break;}
 case 80: 
 var $279=(($265+8)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($280|0)==($259|0);
 if($281){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($275)>>2)]=$265;
 HEAP32[(($279)>>2)]=$270;
 var $R7_1=$265;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $284=(($mem+$_sum10)|0);
 var $285=$284;
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=84;break;}else{var $R7_0=$286;var $RP9_0=$285;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $289=(($mem+$_sum9)|0);
 var $290=$289;
 var $291=HEAP32[(($290)>>2)];
 var $292=($291|0)==0;
 if($292){var $R7_1=0;label=90;break;}else{var $R7_0=$291;var $RP9_0=$290;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $293=(($R7_0+20)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){label=86;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 86: 
 var $297=(($R7_0+16)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=($298|0)==0;
 if($299){label=87;break;}else{var $R7_0=$298;var $RP9_0=$297;label=85;break;}
 case 87: 
 var $301=$RP9_0;
 var $302=HEAP32[((14344)>>2)];
 var $303=($301>>>0)<($302>>>0);
 if($303){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $307=($262|0)==0;
 if($307){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $309=(($mem+$_sum21)|0);
 var $310=$309;
 var $311=HEAP32[(($310)>>2)];
 var $312=((14632+($311<<2))|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($259|0)==($313|0);
 if($314){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($312)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $316=1<<$311;
 var $317=$316^-1;
 var $318=HEAP32[((14332)>>2)];
 var $319=$318&$317;
 HEAP32[((14332)>>2)]=$319;
 label=110;break;
 case 94: 
 var $321=$262;
 var $322=HEAP32[((14344)>>2)];
 var $323=($321>>>0)<($322>>>0);
 if($323){label=98;break;}else{label=95;break;}
 case 95: 
 var $325=(($262+16)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=($326|0)==($259|0);
 if($327){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($325)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $330=(($262+20)|0);
 HEAP32[(($330)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $333=($R7_1|0)==0;
 if($333){label=110;break;}else{label=100;break;}
 case 100: 
 var $335=$R7_1;
 var $336=HEAP32[((14344)>>2)];
 var $337=($335>>>0)<($336>>>0);
 if($337){label=109;break;}else{label=101;break;}
 case 101: 
 var $339=(($R7_1+24)|0);
 HEAP32[(($339)>>2)]=$262;
 var $_sum22=((($14)+(8))|0);
 var $340=(($mem+$_sum22)|0);
 var $341=$340;
 var $342=HEAP32[(($341)>>2)];
 var $343=($342|0)==0;
 if($343){label=105;break;}else{label=102;break;}
 case 102: 
 var $345=$342;
 var $346=($345>>>0)<($336>>>0);
 if($346){label=104;break;}else{label=103;break;}
 case 103: 
 var $348=(($R7_1+16)|0);
 HEAP32[(($348)>>2)]=$342;
 var $349=(($342+24)|0);
 HEAP32[(($349)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $352=(($mem+$_sum23)|0);
 var $353=$352;
 var $354=HEAP32[(($353)>>2)];
 var $355=($354|0)==0;
 if($355){label=110;break;}else{label=106;break;}
 case 106: 
 var $357=$354;
 var $358=HEAP32[((14344)>>2)];
 var $359=($357>>>0)<($358>>>0);
 if($359){label=108;break;}else{label=107;break;}
 case 107: 
 var $361=(($R7_1+20)|0);
 HEAP32[(($361)>>2)]=$354;
 var $362=(($354+24)|0);
 HEAP32[(($362)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $366=$219|1;
 var $367=(($p_0+4)|0);
 HEAP32[(($367)>>2)]=$366;
 var $368=(($186+$219)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$219;
 var $370=HEAP32[((14348)>>2)];
 var $371=($p_0|0)==($370|0);
 if($371){label=111;break;}else{var $psize_1=$219;label=113;break;}
 case 111: 
 HEAP32[((14336)>>2)]=$219;
 label=140;break;
 case 112: 
 var $374=$191&-2;
 HEAP32[(($190)>>2)]=$374;
 var $375=$psize_0|1;
 var $376=(($p_0+4)|0);
 HEAP32[(($376)>>2)]=$375;
 var $377=(($186+$psize_0)|0);
 var $378=$377;
 HEAP32[(($378)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $380=$psize_1>>>3;
 var $381=($psize_1>>>0)<256;
 if($381){label=114;break;}else{label=119;break;}
 case 114: 
 var $383=$380<<1;
 var $384=((14368+($383<<2))|0);
 var $385=$384;
 var $386=HEAP32[((14328)>>2)];
 var $387=1<<$380;
 var $388=$386&$387;
 var $389=($388|0)==0;
 if($389){label=115;break;}else{label=116;break;}
 case 115: 
 var $391=$386|$387;
 HEAP32[((14328)>>2)]=$391;
 var $_sum19_pre=((($383)+(2))|0);
 var $_pre=((14368+($_sum19_pre<<2))|0);
 var $F16_0=$385;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($383)+(2))|0);
 var $393=((14368+($_sum20<<2))|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$394;
 var $396=HEAP32[((14344)>>2)];
 var $397=($395>>>0)<($396>>>0);
 if($397){label=117;break;}else{var $F16_0=$394;var $_pre_phi=$393;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $400=(($F16_0+12)|0);
 HEAP32[(($400)>>2)]=$p_0;
 var $401=(($p_0+8)|0);
 HEAP32[(($401)>>2)]=$F16_0;
 var $402=(($p_0+12)|0);
 HEAP32[(($402)>>2)]=$385;
 label=140;break;
 case 119: 
 var $404=$p_0;
 var $405=$psize_1>>>8;
 var $406=($405|0)==0;
 if($406){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $408=($psize_1>>>0)>16777215;
 if($408){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $410=((($405)+(1048320))|0);
 var $411=$410>>>16;
 var $412=$411&8;
 var $413=$405<<$412;
 var $414=((($413)+(520192))|0);
 var $415=$414>>>16;
 var $416=$415&4;
 var $417=$416|$412;
 var $418=$413<<$416;
 var $419=((($418)+(245760))|0);
 var $420=$419>>>16;
 var $421=$420&2;
 var $422=$417|$421;
 var $423=(((14)-($422))|0);
 var $424=$418<<$421;
 var $425=$424>>>15;
 var $426=((($423)+($425))|0);
 var $427=$426<<1;
 var $428=((($426)+(7))|0);
 var $429=$psize_1>>>($428>>>0);
 var $430=$429&1;
 var $431=$430|$427;
 var $I18_0=$431;label=122;break;
 case 122: 
 var $I18_0;
 var $433=((14632+($I18_0<<2))|0);
 var $434=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($434)>>2)]=$I18_0_c;
 var $435=(($p_0+20)|0);
 HEAP32[(($435)>>2)]=0;
 var $436=(($p_0+16)|0);
 HEAP32[(($436)>>2)]=0;
 var $437=HEAP32[((14332)>>2)];
 var $438=1<<$I18_0;
 var $439=$437&$438;
 var $440=($439|0)==0;
 if($440){label=123;break;}else{label=124;break;}
 case 123: 
 var $442=$437|$438;
 HEAP32[((14332)>>2)]=$442;
 HEAP32[(($433)>>2)]=$404;
 var $443=(($p_0+24)|0);
 var $_c=$433;
 HEAP32[(($443)>>2)]=$_c;
 var $444=(($p_0+12)|0);
 HEAP32[(($444)>>2)]=$p_0;
 var $445=(($p_0+8)|0);
 HEAP32[(($445)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $447=HEAP32[(($433)>>2)];
 var $448=($I18_0|0)==31;
 if($448){var $453=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $450=$I18_0>>>1;
 var $451=(((25)-($450))|0);
 var $453=$451;label=126;break;
 case 126: 
 var $453;
 var $454=(($447+4)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=$455&-8;
 var $457=($456|0)==($psize_1|0);
 if($457){var $T_0_lcssa=$447;label=133;break;}else{label=127;break;}
 case 127: 
 var $458=$psize_1<<$453;
 var $T_072=$447;var $K19_073=$458;label=129;break;
 case 128: 
 var $460=$K19_073<<1;
 var $461=(($468+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){var $T_0_lcssa=$468;label=133;break;}else{var $T_072=$468;var $K19_073=$460;label=129;break;}
 case 129: 
 var $K19_073;
 var $T_072;
 var $466=$K19_073>>>31;
 var $467=(($T_072+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 if($469){label=130;break;}else{label=128;break;}
 case 130: 
 var $471=$467;
 var $472=HEAP32[((14344)>>2)];
 var $473=($471>>>0)<($472>>>0);
 if($473){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($467)>>2)]=$404;
 var $475=(($p_0+24)|0);
 var $T_0_c16=$T_072;
 HEAP32[(($475)>>2)]=$T_0_c16;
 var $476=(($p_0+12)|0);
 HEAP32[(($476)>>2)]=$p_0;
 var $477=(($p_0+8)|0);
 HEAP32[(($477)>>2)]=$p_0;
 label=136;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $479=(($T_0_lcssa+8)|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=$T_0_lcssa;
 var $482=HEAP32[((14344)>>2)];
 var $483=($481>>>0)>=($482>>>0);
 var $484=$480;
 var $485=($484>>>0)>=($482>>>0);
 var $or_cond=$483&$485;
 if($or_cond){label=134;break;}else{label=135;break;}
 case 134: 
 var $487=(($480+12)|0);
 HEAP32[(($487)>>2)]=$404;
 HEAP32[(($479)>>2)]=$404;
 var $488=(($p_0+8)|0);
 var $_c15=$480;
 HEAP32[(($488)>>2)]=$_c15;
 var $489=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($489)>>2)]=$T_0_c;
 var $490=(($p_0+24)|0);
 HEAP32[(($490)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $492=HEAP32[((14360)>>2)];
 var $493=((($492)-(1))|0);
 HEAP32[((14360)>>2)]=$493;
 var $494=($493|0)==0;
 if($494){var $sp_0_in_i=14784;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $495=($sp_0_i|0)==0;
 var $496=(($sp_0_i+8)|0);
 if($495){label=138;break;}else{var $sp_0_in_i=$496;label=137;break;}
 case 138: 
 HEAP32[((14360)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=78;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=78;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=((($oldmem)-(4))|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-8;
 var $_sum=((($19)-(8))|0);
 var $20=(($oldmem+$_sum)|0);
 var $21=$20;
 var $22=HEAP32[((14344)>>2)];
 var $23=$18&3;
 var $notlhs_i=($15>>>0)>=($22>>>0);
 var $notrhs_i=($23|0)!=1;
 var $or_cond_not_i=$notrhs_i&$notlhs_i;
 var $24=($_sum|0)>-8;
 var $or_cond36_i=$or_cond_not_i&$24;
 if($or_cond36_i){label=8;break;}else{label=75;break;}
 case 8: 
 var $_sum3334_i=$19|4;
 var $_sum1=((($_sum3334_i)-(8))|0);
 var $26=(($oldmem+$_sum1)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28&1;
 var $phitmp_i=($29|0)==0;
 if($phitmp_i){label=75;break;}else{label=9;break;}
 case 9: 
 var $31=($23|0)==0;
 if($31){label=10;break;}else{label=12;break;}
 case 10: 
 var $33=($14>>>0)<256;
 var $34=$14|4;
 var $35=($19>>>0)<($34>>>0);
 var $or_cond=$33|$35;
 if($or_cond){label=76;break;}else{label=11;break;}
 case 11: 
 var $37=((($19)-($14))|0);
 var $38=HEAP32[((14280)>>2)];
 var $39=$38<<1;
 var $40=($37>>>0)>($39>>>0);
 if($40){label=76;break;}else{var $mem_0=$oldmem;label=78;break;}
 case 12: 
 var $42=($19>>>0)<($14>>>0);
 if($42){label=15;break;}else{label=13;break;}
 case 13: 
 var $44=((($19)-($14))|0);
 var $45=($44>>>0)>15;
 if($45){label=14;break;}else{var $mem_0=$oldmem;label=78;break;}
 case 14: 
 var $_sum2=((($14)-(8))|0);
 var $47=(($oldmem+$_sum2)|0);
 var $48=$47;
 var $49=$18&1;
 var $50=$49|$14;
 var $51=$50|2;
 HEAP32[(($17)>>2)]=$51;
 var $_sum29_i3=$14|4;
 var $_sum4=((($_sum29_i3)-(8))|0);
 var $52=(($oldmem+$_sum4)|0);
 var $53=$52;
 var $54=$44|3;
 HEAP32[(($53)>>2)]=$54;
 var $55=HEAP32[(($27)>>2)];
 var $56=$55|1;
 HEAP32[(($27)>>2)]=$56;
 _dispose_chunk($48,$44);
 var $mem_0=$oldmem;label=78;break;
 case 15: 
 var $58=HEAP32[((14352)>>2)];
 var $59=($21|0)==($58|0);
 if($59){label=16;break;}else{label=18;break;}
 case 16: 
 var $61=HEAP32[((14340)>>2)];
 var $62=((($61)+($19))|0);
 var $63=($62>>>0)>($14>>>0);
 if($63){label=17;break;}else{label=76;break;}
 case 17: 
 var $65=((($62)-($14))|0);
 var $_sum28=((($14)-(8))|0);
 var $66=(($oldmem+$_sum28)|0);
 var $67=$66;
 var $68=$18&1;
 var $69=$68|$14;
 var $70=$69|2;
 HEAP32[(($17)>>2)]=$70;
 var $_sum28_i29=$14|4;
 var $_sum30=((($_sum28_i29)-(8))|0);
 var $71=(($oldmem+$_sum30)|0);
 var $72=$71;
 var $73=$65|1;
 HEAP32[(($72)>>2)]=$73;
 HEAP32[((14352)>>2)]=$67;
 HEAP32[((14340)>>2)]=$65;
 var $mem_0=$oldmem;label=78;break;
 case 18: 
 var $75=HEAP32[((14348)>>2)];
 var $76=($21|0)==($75|0);
 if($76){label=19;break;}else{label=24;break;}
 case 19: 
 var $78=HEAP32[((14336)>>2)];
 var $79=((($78)+($19))|0);
 var $80=($79>>>0)<($14>>>0);
 if($80){label=76;break;}else{label=20;break;}
 case 20: 
 var $82=((($79)-($14))|0);
 var $83=($82>>>0)>15;
 if($83){label=21;break;}else{label=22;break;}
 case 21: 
 var $_sum23=((($14)-(8))|0);
 var $85=(($oldmem+$_sum23)|0);
 var $86=$85;
 var $_sum24=((($79)-(8))|0);
 var $87=(($oldmem+$_sum24)|0);
 var $88=$18&1;
 var $89=$88|$14;
 var $90=$89|2;
 HEAP32[(($17)>>2)]=$90;
 var $_sum25_i25=$14|4;
 var $_sum26=((($_sum25_i25)-(8))|0);
 var $91=(($oldmem+$_sum26)|0);
 var $92=$91;
 var $93=$82|1;
 HEAP32[(($92)>>2)]=$93;
 var $94=$87;
 HEAP32[(($94)>>2)]=$82;
 var $_sum27=((($79)-(4))|0);
 var $95=(($oldmem+$_sum27)|0);
 var $96=$95;
 var $97=HEAP32[(($96)>>2)];
 var $98=$97&-2;
 HEAP32[(($96)>>2)]=$98;
 var $storemerge_i=$86;var $storemerge27_i=$82;label=23;break;
 case 22: 
 var $100=$18&1;
 var $101=$100|$79;
 var $102=$101|2;
 HEAP32[(($17)>>2)]=$102;
 var $_sum22=((($79)-(4))|0);
 var $103=(($oldmem+$_sum22)|0);
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $106=$105|1;
 HEAP32[(($104)>>2)]=$106;
 var $storemerge_i=0;var $storemerge27_i=0;label=23;break;
 case 23: 
 var $storemerge27_i;
 var $storemerge_i;
 HEAP32[((14336)>>2)]=$storemerge27_i;
 HEAP32[((14348)>>2)]=$storemerge_i;
 var $mem_0=$oldmem;label=78;break;
 case 24: 
 var $109=$28&2;
 var $110=($109|0)==0;
 if($110){label=25;break;}else{label=76;break;}
 case 25: 
 var $112=$28&-8;
 var $113=((($112)+($19))|0);
 var $114=($113>>>0)<($14>>>0);
 if($114){label=76;break;}else{label=26;break;}
 case 26: 
 var $116=((($113)-($14))|0);
 var $117=$28>>>3;
 var $118=($28>>>0)<256;
 if($118){label=27;break;}else{label=39;break;}
 case 27: 
 var $120=(($oldmem+$19)|0);
 var $121=$120;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($oldmem+$_sum3334_i)|0);
 var $124=$123;
 var $125=HEAP32[(($124)>>2)];
 var $126=$117<<1;
 var $127=((14368+($126<<2))|0);
 var $128=$127;
 var $129=($122|0)==($128|0);
 if($129){label=30;break;}else{label=28;break;}
 case 28: 
 var $131=$122;
 var $132=($131>>>0)<($22>>>0);
 if($132){label=38;break;}else{label=29;break;}
 case 29: 
 var $134=(($122+12)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($21|0);
 if($136){label=30;break;}else{label=38;break;}
 case 30: 
 var $137=($125|0)==($122|0);
 if($137){label=31;break;}else{label=32;break;}
 case 31: 
 var $139=1<<$117;
 var $140=$139^-1;
 var $141=HEAP32[((14328)>>2)];
 var $142=$141&$140;
 HEAP32[((14328)>>2)]=$142;
 label=72;break;
 case 32: 
 var $144=($125|0)==($128|0);
 if($144){label=33;break;}else{label=34;break;}
 case 33: 
 var $_pre_i=(($125+8)|0);
 var $_pre_phi_i=$_pre_i;label=36;break;
 case 34: 
 var $146=$125;
 var $147=($146>>>0)<($22>>>0);
 if($147){label=37;break;}else{label=35;break;}
 case 35: 
 var $149=(($125+8)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($21|0);
 if($151){var $_pre_phi_i=$149;label=36;break;}else{label=37;break;}
 case 36: 
 var $_pre_phi_i;
 var $152=(($122+12)|0);
 HEAP32[(($152)>>2)]=$125;
 HEAP32[(($_pre_phi_i)>>2)]=$122;
 label=72;break;
 case 37: 
 _abort();
 throw "Reached an unreachable!";
 case 38: 
 _abort();
 throw "Reached an unreachable!";
 case 39: 
 var $154=$20;
 var $_sum5=((($19)+(16))|0);
 var $155=(($oldmem+$_sum5)|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($oldmem+$_sum3334_i)|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==($154|0);
 if($161){label=45;break;}else{label=40;break;}
 case 40: 
 var $163=(($oldmem+$19)|0);
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=$165;
 var $167=($166>>>0)<($22>>>0);
 if($167){label=44;break;}else{label=41;break;}
 case 41: 
 var $169=(($165+12)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($170|0)==($154|0);
 if($171){label=42;break;}else{label=44;break;}
 case 42: 
 var $173=(($160+8)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($174|0)==($154|0);
 if($175){label=43;break;}else{label=44;break;}
 case 43: 
 HEAP32[(($169)>>2)]=$160;
 HEAP32[(($173)>>2)]=$165;
 var $R_1_i=$160;label=52;break;
 case 44: 
 _abort();
 throw "Reached an unreachable!";
 case 45: 
 var $_sum17=((($19)+(12))|0);
 var $178=(($oldmem+$_sum17)|0);
 var $179=$178;
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)==0;
 if($181){label=46;break;}else{var $R_0_i=$180;var $RP_0_i=$179;label=47;break;}
 case 46: 
 var $_sum18=((($19)+(8))|0);
 var $183=(($oldmem+$_sum18)|0);
 var $184=$183;
 var $185=HEAP32[(($184)>>2)];
 var $186=($185|0)==0;
 if($186){var $R_1_i=0;label=52;break;}else{var $R_0_i=$185;var $RP_0_i=$184;label=47;break;}
 case 47: 
 var $RP_0_i;
 var $R_0_i;
 var $187=(($R_0_i+20)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){label=48;break;}else{var $R_0_i=$188;var $RP_0_i=$187;label=47;break;}
 case 48: 
 var $191=(($R_0_i+16)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){label=49;break;}else{var $R_0_i=$192;var $RP_0_i=$191;label=47;break;}
 case 49: 
 var $195=$RP_0_i;
 var $196=($195>>>0)<($22>>>0);
 if($196){label=51;break;}else{label=50;break;}
 case 50: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=52;break;
 case 51: 
 _abort();
 throw "Reached an unreachable!";
 case 52: 
 var $R_1_i;
 var $200=($157|0)==0;
 if($200){label=72;break;}else{label=53;break;}
 case 53: 
 var $_sum9=((($19)+(20))|0);
 var $202=(($oldmem+$_sum9)|0);
 var $203=$202;
 var $204=HEAP32[(($203)>>2)];
 var $205=((14632+($204<<2))|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($154|0)==($206|0);
 if($207){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($205)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=55;break;}else{label=62;break;}
 case 55: 
 var $209=1<<$204;
 var $210=$209^-1;
 var $211=HEAP32[((14332)>>2)];
 var $212=$211&$210;
 HEAP32[((14332)>>2)]=$212;
 label=72;break;
 case 56: 
 var $214=$157;
 var $215=HEAP32[((14344)>>2)];
 var $216=($214>>>0)<($215>>>0);
 if($216){label=60;break;}else{label=57;break;}
 case 57: 
 var $218=(($157+16)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==($154|0);
 if($220){label=58;break;}else{label=59;break;}
 case 58: 
 HEAP32[(($218)>>2)]=$R_1_i;
 label=61;break;
 case 59: 
 var $223=(($157+20)|0);
 HEAP32[(($223)>>2)]=$R_1_i;
 label=61;break;
 case 60: 
 _abort();
 throw "Reached an unreachable!";
 case 61: 
 var $226=($R_1_i|0)==0;
 if($226){label=72;break;}else{label=62;break;}
 case 62: 
 var $228=$R_1_i;
 var $229=HEAP32[((14344)>>2)];
 var $230=($228>>>0)<($229>>>0);
 if($230){label=71;break;}else{label=63;break;}
 case 63: 
 var $232=(($R_1_i+24)|0);
 HEAP32[(($232)>>2)]=$157;
 var $_sum10=((($19)+(8))|0);
 var $233=(($oldmem+$_sum10)|0);
 var $234=$233;
 var $235=HEAP32[(($234)>>2)];
 var $236=($235|0)==0;
 if($236){label=67;break;}else{label=64;break;}
 case 64: 
 var $238=$235;
 var $239=($238>>>0)<($229>>>0);
 if($239){label=66;break;}else{label=65;break;}
 case 65: 
 var $241=(($R_1_i+16)|0);
 HEAP32[(($241)>>2)]=$235;
 var $242=(($235+24)|0);
 HEAP32[(($242)>>2)]=$R_1_i;
 label=67;break;
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $_sum11=((($19)+(12))|0);
 var $245=(($oldmem+$_sum11)|0);
 var $246=$245;
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==0;
 if($248){label=72;break;}else{label=68;break;}
 case 68: 
 var $250=$247;
 var $251=HEAP32[((14344)>>2)];
 var $252=($250>>>0)<($251>>>0);
 if($252){label=70;break;}else{label=69;break;}
 case 69: 
 var $254=(($R_1_i+20)|0);
 HEAP32[(($254)>>2)]=$247;
 var $255=(($247+24)|0);
 HEAP32[(($255)>>2)]=$R_1_i;
 label=72;break;
 case 70: 
 _abort();
 throw "Reached an unreachable!";
 case 71: 
 _abort();
 throw "Reached an unreachable!";
 case 72: 
 var $259=($116>>>0)<16;
 if($259){label=73;break;}else{label=74;break;}
 case 73: 
 var $260=$18&1;
 var $261=$113|$260;
 var $262=$261|2;
 HEAP32[(($17)>>2)]=$262;
 var $_sum910_i=$113|4;
 var $_sum16=((($_sum910_i)-(8))|0);
 var $263=(($oldmem+$_sum16)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $266=$265|1;
 HEAP32[(($264)>>2)]=$266;
 var $mem_0=$oldmem;label=78;break;
 case 74: 
 var $_sum12=((($14)-(8))|0);
 var $268=(($oldmem+$_sum12)|0);
 var $269=$268;
 var $270=$18&1;
 var $271=$270|$14;
 var $272=$271|2;
 HEAP32[(($17)>>2)]=$272;
 var $_sum5_i13=$14|4;
 var $_sum14=((($_sum5_i13)-(8))|0);
 var $273=(($oldmem+$_sum14)|0);
 var $274=$273;
 var $275=$116|3;
 HEAP32[(($274)>>2)]=$275;
 var $_sum78_i=$113|4;
 var $_sum15=((($_sum78_i)-(8))|0);
 var $276=(($oldmem+$_sum15)|0);
 var $277=$276;
 var $278=HEAP32[(($277)>>2)];
 var $279=$278|1;
 HEAP32[(($277)>>2)]=$279;
 _dispose_chunk($269,$116);
 var $mem_0=$oldmem;label=78;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 var $280=_malloc($bytes);
 var $281=($280|0)==0;
 if($281){var $mem_0=0;label=78;break;}else{label=77;break;}
 case 77: 
 var $283=HEAP32[(($17)>>2)];
 var $284=$283&-8;
 var $285=$283&3;
 var $286=($285|0)==0;
 var $287=($286?8:4);
 var $288=((($284)-($287))|0);
 var $289=($288>>>0)<($bytes>>>0);
 var $290=($289?$288:$bytes);
 assert($290 % 1 === 0);(_memcpy($280, $oldmem, $290)|0);
 _free($oldmem);
 var $mem_0=$280;label=78;break;
 case 78: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function ___intscan($f,$base,$pok,$lim$0,$lim$1){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($base>>>0)>36;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $2=(($f+4)|0);
 var $3=(($f+100)|0);
 label=4;break;
 case 3: 
 var $5=___errno_location();
 HEAP32[(($5)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=86;break;
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=HEAP32[(($3)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=5;break;}else{label=6;break;}
 case 5: 
 var $10=(($6+1)|0);
 HEAP32[(($2)>>2)]=$10;
 var $11=HEAP8[(($6)>>0)];
 var $12=($11&255);
 var $16=$12;label=7;break;
 case 6: 
 var $14=___shgetc($f);
 var $16=$14;label=7;break;
 case 7: 
 var $16;
 switch(($16|0)){case 32:case 13:case 12:case 11:case 10:case 9:{ label=4;break;}default:{label=8;break;}}break;
 case 8: 
 var $18=($16|0)==45;
 if(($16|0)==45|($16|0)==43){ label=9;break;}else{var $neg_0=0;var $c_0=$16;label=12;break;}
 case 9: 
 var $19=HEAP32[(($2)>>2)];
 var $20=(($18<<31)>>31);
 var $21=HEAP32[(($3)>>2)];
 var $22=($19>>>0)<($21>>>0);
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 var $24=(($19+1)|0);
 HEAP32[(($2)>>2)]=$24;
 var $25=HEAP8[(($19)>>0)];
 var $26=($25&255);
 var $neg_0=$20;var $c_0=$26;label=12;break;
 case 11: 
 var $28=___shgetc($f);
 var $neg_0=$20;var $c_0=$28;label=12;break;
 case 12: 
 var $c_0;
 var $neg_0;
 var $30=($base|0)==0;
 var $31=$base&-17;
 var $32=($31|0)==0;
 var $33=($c_0|0)==48;
 var $or_cond5=$32&$33;
 if($or_cond5){label=13;break;}else{label=28;break;}
 case 13: 
 var $35=HEAP32[(($2)>>2)];
 var $36=HEAP32[(($3)>>2)];
 var $37=($35>>>0)<($36>>>0);
 if($37){label=14;break;}else{label=15;break;}
 case 14: 
 var $39=(($35+1)|0);
 HEAP32[(($2)>>2)]=$39;
 var $40=HEAP8[(($35)>>0)];
 var $41=($40&255);
 var $45=$41;label=16;break;
 case 15: 
 var $43=___shgetc($f);
 var $45=$43;label=16;break;
 case 16: 
 var $45;
 var $46=$45|32;
 var $47=($46|0)==120;
 if($47){label=17;break;}else{label=27;break;}
 case 17: 
 var $49=HEAP32[(($2)>>2)];
 var $50=HEAP32[(($3)>>2)];
 var $51=($49>>>0)<($50>>>0);
 if($51){label=18;break;}else{label=19;break;}
 case 18: 
 var $53=(($49+1)|0);
 HEAP32[(($2)>>2)]=$53;
 var $54=HEAP8[(($49)>>0)];
 var $55=($54&255);
 var $59=$55;label=20;break;
 case 19: 
 var $57=___shgetc($f);
 var $59=$57;label=20;break;
 case 20: 
 var $59;
 var $_sum23=((($59)+(1))|0);
 var $60=((136+$_sum23)|0);
 var $61=HEAP8[(($60)>>0)];
 var $62=($61&255)>15;
 if($62){label=21;break;}else{var $_126=16;var $c_127=$59;label=46;break;}
 case 21: 
 var $64=HEAP32[(($3)>>2)];
 var $65=($64|0)==0;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $67=HEAP32[(($2)>>2)];
 var $68=((($67)-(1))|0);
 HEAP32[(($2)>>2)]=$68;
 label=23;break;
 case 23: 
 var $70=($pok|0)==0;
 if($70){label=26;break;}else{label=24;break;}
 case 24: 
 if($65){var $_0$1=0;var $_0$0=0;label=86;break;}else{label=25;break;}
 case 25: 
 var $73=HEAP32[(($2)>>2)];
 var $74=((($73)-(1))|0);
 HEAP32[(($2)>>2)]=$74;
 var $_0$1=0;var $_0$0=0;label=86;break;
 case 26: 
 var $76=(($f+104)|0);
 HEAP32[(($76)>>2)]=0;
 var $77=(($f+8)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=HEAP32[(($2)>>2)];
 var $80=$78;
 var $81=$79;
 var $82=((($80)-($81))|0);
 var $83=(($f+108)|0);
 HEAP32[(($83)>>2)]=$82;
 HEAP32[(($3)>>2)]=$78;
 var $_0$1=0;var $_0$0=0;label=86;break;
 case 27: 
 if($30){var $_126=8;var $c_127=$45;label=46;break;}else{var $c_1=$45;var $_1=$base;label=32;break;}
 case 28: 
 var $_base24=($30?10:$base);
 var $_sum=((($c_0)+(1))|0);
 var $86=((136+$_sum)|0);
 var $87=HEAP8[(($86)>>0)];
 var $88=($87&255);
 var $89=($88>>>0)<($_base24>>>0);
 if($89){var $c_1=$c_0;var $_1=$_base24;label=32;break;}else{label=29;break;}
 case 29: 
 var $91=HEAP32[(($3)>>2)];
 var $92=($91|0)==0;
 var $_pre=HEAP32[(($2)>>2)];
 if($92){var $95=$_pre;label=31;break;}else{label=30;break;}
 case 30: 
 var $94=((($_pre)-(1))|0);
 HEAP32[(($2)>>2)]=$94;
 var $95=$94;label=31;break;
 case 31: 
 var $95;
 var $96=(($f+104)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=(($f+8)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=$98;
 var $100=$95;
 var $101=((($99)-($100))|0);
 var $102=(($f+108)|0);
 HEAP32[(($102)>>2)]=$101;
 HEAP32[(($3)>>2)]=$98;
 var $103=___errno_location();
 HEAP32[(($103)>>2)]=22;
 var $_0$1=0;var $_0$0=0;label=86;break;
 case 32: 
 var $_1;
 var $c_1;
 var $105=($_1|0)==10;
 if($105){label=33;break;}else{var $_126=$_1;var $c_127=$c_1;label=46;break;}
 case 33: 
 var $106=((($c_1)-(48))|0);
 var $107=($106>>>0)<10;
 if($107){var $x_073=0;var $108=$106;label=34;break;}else{var $c_2_lcssa=$c_1;var $x_0_lcssa$1=0;var $x_0_lcssa$0=0;label=39;break;}
 case 34: 
 var $108;
 var $x_073;
 var $109=((($x_073)*(10))&-1);
 var $110=((($109)+($108))|0);
 var $111=HEAP32[(($2)>>2)];
 var $112=HEAP32[(($3)>>2)];
 var $113=($111>>>0)<($112>>>0);
 if($113){label=35;break;}else{label=36;break;}
 case 35: 
 var $115=(($111+1)|0);
 HEAP32[(($2)>>2)]=$115;
 var $116=HEAP8[(($111)>>0)];
 var $117=($116&255);
 var $c_2_be=$117;label=37;break;
 case 36: 
 var $119=___shgetc($f);
 var $c_2_be=$119;label=37;break;
 case 37: 
 var $c_2_be;
 var $120=((($c_2_be)-(48))|0);
 var $121=($120>>>0)<10;
 var $122=($110>>>0)<429496729;
 var $or_cond7=$121&$122;
 if($or_cond7){var $x_073=$110;var $108=$120;label=34;break;}else{label=38;break;}
 case 38: 
 var $phitmp83$0=$110;
 var $phitmp83$1=0;
 var $c_2_lcssa=$c_2_be;var $x_0_lcssa$1=$phitmp83$1;var $x_0_lcssa$0=$phitmp83$0;label=39;break;
 case 39: 
 var $x_0_lcssa$0;
 var $x_0_lcssa$1;
 var $c_2_lcssa;
 var $124=((($c_2_lcssa)-(48))|0);
 var $125=($124>>>0)<10;
 if($125){var $c_362=$c_2_lcssa;var $y_063$1=$x_0_lcssa$1;var $y_063$0=$x_0_lcssa$0;var $126=$124;label=40;break;}else{var $y_4$1=$x_0_lcssa$1;var $y_4$0=$x_0_lcssa$0;label=78;break;}
 case 40: 
 var $126;
 var $y_063$0;
 var $y_063$1;
 var $c_362;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $127$0=___muldi3($y_063$0,$y_063$1,$$etemp$0$0,$$etemp$0$1);var $127$1=tempRet0;
 var $128$0=$126;
 var $128$1=((((($126|0)<0))|0)?-1:0);
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $129$0=$128$0^$$etemp$1$0;
 var $129$1=$128$1^$$etemp$1$1;
 var $130=(($127$1>>>0) > ($129$1>>>0)) | (((($127$1>>>0) == ($129$1>>>0) & ($127$0>>>0) >  ($129$0>>>0))));
 if($130){var $c_3_lcssa=$c_362;var $y_0_lcssa$1=$y_063$1;var $y_0_lcssa$0=$y_063$0;var $_lcssa=$126;label=45;break;}else{label=41;break;}
 case 41: 
 var $132$0=_i64Add($127$0,$127$1,$128$0,$128$1);var $132$1=tempRet0;
 var $133=HEAP32[(($2)>>2)];
 var $134=HEAP32[(($3)>>2)];
 var $135=($133>>>0)<($134>>>0);
 if($135){label=42;break;}else{label=43;break;}
 case 42: 
 var $137=(($133+1)|0);
 HEAP32[(($2)>>2)]=$137;
 var $138=HEAP8[(($133)>>0)];
 var $139=($138&255);
 var $c_3_be=$139;label=44;break;
 case 43: 
 var $141=___shgetc($f);
 var $c_3_be=$141;label=44;break;
 case 44: 
 var $c_3_be;
 var $142=((($c_3_be)-(48))|0);
 var $143=($142>>>0)<10;
 var $$etemp$2$0=-1717986918;
 var $$etemp$2$1=429496729;
 var $144=(($132$1>>>0) < ($$etemp$2$1>>>0)) | (((($132$1>>>0) == ($$etemp$2$1>>>0) & ($132$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond9=$143&$144;
 if($or_cond9){var $c_362=$c_3_be;var $y_063$1=$132$1;var $y_063$0=$132$0;var $126=$142;label=40;break;}else{var $c_3_lcssa=$c_3_be;var $y_0_lcssa$1=$132$1;var $y_0_lcssa$0=$132$0;var $_lcssa=$142;label=45;break;}
 case 45: 
 var $_lcssa;
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_3_lcssa;
 var $145=($_lcssa>>>0)>9;
 if($145){var $y_4$1=$y_0_lcssa$1;var $y_4$0=$y_0_lcssa$0;label=78;break;}else{var $y_3$1=$y_0_lcssa$1;var $y_3$0=$y_0_lcssa$0;var $c_8=$c_3_lcssa;var $_125=10;label=72;break;}
 case 46: 
 var $c_127;
 var $_126;
 var $146=((($_126)-(1))|0);
 var $147=$146&$_126;
 var $148=($147|0)==0;
 if($148){label=48;break;}else{label=47;break;}
 case 47: 
 var $_sum2155=((($c_127)+(1))|0);
 var $149=((136+$_sum2155)|0);
 var $150=HEAP8[(($149)>>0)];
 var $151=($150&255);
 var $152=($151>>>0)<($_126>>>0);
 if($152){var $x_256=0;var $206=$151;label=59;break;}else{var $c_6_lcssa=$c_127;var $x_2_lcssa$1=0;var $x_2_lcssa$0=0;var $224=$150;label=64;break;}
 case 48: 
 var $154=((($_126)*(23))&-1);
 var $155=$154>>>5;
 var $156=$155&7;
 var $157=((2192+$156)|0);
 var $158=HEAP8[(($157)>>0)];
 var $159=(($158<<24)>>24);
 var $_sum1737=((($c_127)+(1))|0);
 var $160=((136+$_sum1737)|0);
 var $161=HEAP8[(($160)>>0)];
 var $162=($161&255);
 var $163=($162>>>0)<($_126>>>0);
 if($163){var $x_138=0;var $164=$162;label=49;break;}else{var $c_4_lcssa=$c_127;var $x_1_lcssa$1=0;var $x_1_lcssa$0=0;var $182=$161;label=54;break;}
 case 49: 
 var $164;
 var $x_138;
 var $165=$x_138<<$159;
 var $166=$164|$165;
 var $167=HEAP32[(($2)>>2)];
 var $168=HEAP32[(($3)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=50;break;}else{label=51;break;}
 case 50: 
 var $171=(($167+1)|0);
 HEAP32[(($2)>>2)]=$171;
 var $172=HEAP8[(($167)>>0)];
 var $173=($172&255);
 var $c_4_be=$173;label=52;break;
 case 51: 
 var $175=___shgetc($f);
 var $c_4_be=$175;label=52;break;
 case 52: 
 var $c_4_be;
 var $_sum17=((($c_4_be)+(1))|0);
 var $176=((136+$_sum17)|0);
 var $177=HEAP8[(($176)>>0)];
 var $178=($177&255);
 var $179=($178>>>0)<($_126>>>0);
 var $180=($166>>>0)<134217728;
 var $or_cond11=$179&$180;
 if($or_cond11){var $x_138=$166;var $164=$178;label=49;break;}else{label=53;break;}
 case 53: 
 var $phitmp82$0=$166;
 var $phitmp82$1=0;
 var $c_4_lcssa=$c_4_be;var $x_1_lcssa$1=$phitmp82$1;var $x_1_lcssa$0=$phitmp82$0;var $182=$177;label=54;break;
 case 54: 
 var $182;
 var $x_1_lcssa$0;
 var $x_1_lcssa$1;
 var $c_4_lcssa;
 var $183$0=$159;
 var $183$1=0;
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $184$0=_bitshift64Lshr($$etemp$3$0,$$etemp$3$1,$183$0);var $184$1=tempRet0;
 var $185=($182&255);
 var $186=($185>>>0)>=($_126>>>0);
 var $187=(($x_1_lcssa$1>>>0) > ($184$1>>>0)) | (((($x_1_lcssa$1>>>0) == ($184$1>>>0) & ($x_1_lcssa$0>>>0) >  ($184$0>>>0))));
 var $or_cond31=$186|$187;
 if($or_cond31){var $y_3$1=$x_1_lcssa$1;var $y_3$0=$x_1_lcssa$0;var $c_8=$c_4_lcssa;var $_125=$_126;label=72;break;}else{var $y_132$1=$x_1_lcssa$1;var $y_132$0=$x_1_lcssa$0;var $188=$182;label=55;break;}
 case 55: 
 var $188;
 var $y_132$0;
 var $y_132$1;
 var $189$0=_bitshift64Shl($y_132$0,$y_132$1,$183$0);var $189$1=tempRet0;
 var $190$0=($188&255);
 var $190$1=0;
 var $191$0=$190$0|$189$0;
 var $191$1=$190$1|$189$1;
 var $192=HEAP32[(($2)>>2)];
 var $193=HEAP32[(($3)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=56;break;}else{label=57;break;}
 case 56: 
 var $196=(($192+1)|0);
 HEAP32[(($2)>>2)]=$196;
 var $197=HEAP8[(($192)>>0)];
 var $198=($197&255);
 var $c_5_be=$198;label=58;break;
 case 57: 
 var $200=___shgetc($f);
 var $c_5_be=$200;label=58;break;
 case 58: 
 var $c_5_be;
 var $_sum18=((($c_5_be)+(1))|0);
 var $201=((136+$_sum18)|0);
 var $202=HEAP8[(($201)>>0)];
 var $203=($202&255);
 var $204=($203>>>0)>=($_126>>>0);
 var $205=(($191$1>>>0) > ($184$1>>>0)) | (((($191$1>>>0) == ($184$1>>>0) & ($191$0>>>0) >  ($184$0>>>0))));
 var $or_cond=$204|$205;
 if($or_cond){var $y_3$1=$191$1;var $y_3$0=$191$0;var $c_8=$c_5_be;var $_125=$_126;label=72;break;}else{var $y_132$1=$191$1;var $y_132$0=$191$0;var $188=$202;label=55;break;}
 case 59: 
 var $206;
 var $x_256;
 var $207=(Math_imul($x_256,$_126)|0);
 var $208=((($206)+($207))|0);
 var $209=HEAP32[(($2)>>2)];
 var $210=HEAP32[(($3)>>2)];
 var $211=($209>>>0)<($210>>>0);
 if($211){label=60;break;}else{label=61;break;}
 case 60: 
 var $213=(($209+1)|0);
 HEAP32[(($2)>>2)]=$213;
 var $214=HEAP8[(($209)>>0)];
 var $215=($214&255);
 var $c_6_be=$215;label=62;break;
 case 61: 
 var $217=___shgetc($f);
 var $c_6_be=$217;label=62;break;
 case 62: 
 var $c_6_be;
 var $_sum21=((($c_6_be)+(1))|0);
 var $218=((136+$_sum21)|0);
 var $219=HEAP8[(($218)>>0)];
 var $220=($219&255);
 var $221=($220>>>0)<($_126>>>0);
 var $222=($208>>>0)<119304647;
 var $or_cond13=$221&$222;
 if($or_cond13){var $x_256=$208;var $206=$220;label=59;break;}else{label=63;break;}
 case 63: 
 var $phitmp$0=$208;
 var $phitmp$1=0;
 var $c_6_lcssa=$c_6_be;var $x_2_lcssa$1=$phitmp$1;var $x_2_lcssa$0=$phitmp$0;var $224=$219;label=64;break;
 case 64: 
 var $224;
 var $x_2_lcssa$0;
 var $x_2_lcssa$1;
 var $c_6_lcssa;
 var $225$0=$_126;
 var $225$1=0;
 var $226=($224&255);
 var $227=($226>>>0)<($_126>>>0);
 if($227){label=65;break;}else{var $y_3$1=$x_2_lcssa$1;var $y_3$0=$x_2_lcssa$0;var $c_8=$c_6_lcssa;var $_125=$_126;label=72;break;}
 case 65: 
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $228$0=___udivdi3($$etemp$4$0,$$etemp$4$1,$225$0,$225$1);var $228$1=tempRet0;
 var $c_747=$c_6_lcssa;var $y_248$1=$x_2_lcssa$1;var $y_248$0=$x_2_lcssa$0;var $230=$224;label=66;break;
 case 66: 
 var $230;
 var $y_248$0;
 var $y_248$1;
 var $c_747;
 var $231=(($y_248$1>>>0) > ($228$1>>>0)) | (((($y_248$1>>>0) == ($228$1>>>0) & ($y_248$0>>>0) >  ($228$0>>>0))));
 if($231){var $y_3$1=$y_248$1;var $y_3$0=$y_248$0;var $c_8=$c_747;var $_125=$_126;label=72;break;}else{label=67;break;}
 case 67: 
 var $233$0=___muldi3($y_248$0,$y_248$1,$225$0,$225$1);var $233$1=tempRet0;
 var $234$0=($230&255);
 var $234$1=0;
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $235$0=$234$0^$$etemp$5$0;
 var $235$1=$234$1^$$etemp$5$1;
 var $236=(($233$1>>>0) > ($235$1>>>0)) | (((($233$1>>>0) == ($235$1>>>0) & ($233$0>>>0) >  ($235$0>>>0))));
 if($236){var $y_3$1=$y_248$1;var $y_3$0=$y_248$0;var $c_8=$c_747;var $_125=$_126;label=72;break;}else{label=68;break;}
 case 68: 
 var $238$0=_i64Add($234$0,$234$1,$233$0,$233$1);var $238$1=tempRet0;
 var $239=HEAP32[(($2)>>2)];
 var $240=HEAP32[(($3)>>2)];
 var $241=($239>>>0)<($240>>>0);
 if($241){label=69;break;}else{label=70;break;}
 case 69: 
 var $243=(($239+1)|0);
 HEAP32[(($2)>>2)]=$243;
 var $244=HEAP8[(($239)>>0)];
 var $245=($244&255);
 var $c_7_be=$245;label=71;break;
 case 70: 
 var $247=___shgetc($f);
 var $c_7_be=$247;label=71;break;
 case 71: 
 var $c_7_be;
 var $_sum22=((($c_7_be)+(1))|0);
 var $248=((136+$_sum22)|0);
 var $249=HEAP8[(($248)>>0)];
 var $250=($249&255);
 var $251=($250>>>0)<($_126>>>0);
 if($251){var $c_747=$c_7_be;var $y_248$1=$238$1;var $y_248$0=$238$0;var $230=$249;label=66;break;}else{var $y_3$1=$238$1;var $y_3$0=$238$0;var $c_8=$c_7_be;var $_125=$_126;label=72;break;}
 case 72: 
 var $_125;
 var $c_8;
 var $y_3$0;
 var $y_3$1;
 var $_sum19=((($c_8)+(1))|0);
 var $252=((136+$_sum19)|0);
 var $253=HEAP8[(($252)>>0)];
 var $254=($253&255);
 var $255=($254>>>0)<($_125>>>0);
 if($255){label=73;break;}else{var $y_4$1=$y_3$1;var $y_4$0=$y_3$0;label=78;break;}
 case 73: 
 var $256=HEAP32[(($2)>>2)];
 var $257=HEAP32[(($3)>>2)];
 var $258=($256>>>0)<($257>>>0);
 if($258){label=74;break;}else{label=75;break;}
 case 74: 
 var $260=(($256+1)|0);
 HEAP32[(($2)>>2)]=$260;
 var $261=HEAP8[(($256)>>0)];
 var $262=($261&255);
 var $c_9_be=$262;label=76;break;
 case 75: 
 var $264=___shgetc($f);
 var $c_9_be=$264;label=76;break;
 case 76: 
 var $c_9_be;
 var $_sum20=((($c_9_be)+(1))|0);
 var $265=((136+$_sum20)|0);
 var $266=HEAP8[(($265)>>0)];
 var $267=($266&255);
 var $268=($267>>>0)<($_125>>>0);
 if($268){label=73;break;}else{label=77;break;}
 case 77: 
 var $269=___errno_location();
 HEAP32[(($269)>>2)]=34;
 var $y_4$1=$lim$1;var $y_4$0=$lim$0;label=78;break;
 case 78: 
 var $y_4$0;
 var $y_4$1;
 var $270=HEAP32[(($3)>>2)];
 var $271=($270|0)==0;
 if($271){label=80;break;}else{label=79;break;}
 case 79: 
 var $273=HEAP32[(($2)>>2)];
 var $274=((($273)-(1))|0);
 HEAP32[(($2)>>2)]=$274;
 label=80;break;
 case 80: 
 var $276=(($y_4$1>>>0) < ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) <  ($lim$0>>>0))));
 if($276){label=85;break;}else{label=81;break;}
 case 81: 
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $278$0=$lim$0&$$etemp$6$0;
 var $278$1=$lim$1&$$etemp$6$1;
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $279=(($278$0|0) != ($$etemp$7$0|0)) | (($278$1|0) != ($$etemp$7$1|0));
 var $280=($neg_0|0)!=0;
 var $or_cond15=$279|$280;
 if($or_cond15){label=83;break;}else{label=82;break;}
 case 82: 
 var $282=___errno_location();
 HEAP32[(($282)>>2)]=34;
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $283$0=_i64Add($lim$0,$lim$1,$$etemp$8$0,$$etemp$8$1);var $283$1=tempRet0;
 var $_0$1=$283$1;var $_0$0=$283$0;label=86;break;
 case 83: 
 var $285=(($y_4$1>>>0) > ($lim$1>>>0)) | (((($y_4$1>>>0) == ($lim$1>>>0) & ($y_4$0>>>0) >  ($lim$0>>>0))));
 if($285){label=84;break;}else{label=85;break;}
 case 84: 
 var $287=___errno_location();
 HEAP32[(($287)>>2)]=34;
 var $_0$1=$lim$1;var $_0$0=$lim$0;label=86;break;
 case 85: 
 var $289$0=$neg_0;
 var $289$1=((((($neg_0|0)<0))|0)?-1:0);
 var $290$0=$y_4$0^$289$0;
 var $290$1=$y_4$1^$289$1;
 var $291$0=_i64Subtract($290$0,$290$1,$289$0,$289$1);var $291$1=tempRet0;
 var $_0$1=$291$1;var $_0$0=$291$0;label=86;break;
 case 86: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___floatscan($f,$prec,$pok){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i=sp;
 if(($prec|0)==1){ label=2;break;}else if(($prec|0)==2){ label=3;break;}else if(($prec|0)==0){ var $emin_0_ph=-149;var $bits_0_ph=24;label=4;break;}else{var $_0=0;label=300;break;}
 case 2: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 3: 
 var $emin_0_ph=-1074;var $bits_0_ph=53;label=4;break;
 case 4: 
 var $bits_0_ph;
 var $emin_0_ph;
 var $3=(($f+4)|0);
 var $4=(($f+100)|0);
 label=5;break;
 case 5: 
 var $5=HEAP32[(($3)>>2)];
 var $6=HEAP32[(($4)>>2)];
 var $7=($5>>>0)<($6>>>0);
 if($7){label=6;break;}else{label=7;break;}
 case 6: 
 var $9=(($5+1)|0);
 HEAP32[(($3)>>2)]=$9;
 var $10=HEAP8[(($5)>>0)];
 var $11=($10&255);
 var $15=$11;label=8;break;
 case 7: 
 var $13=___shgetc($f);
 var $15=$13;label=8;break;
 case 8: 
 var $15;
 switch(($15|0)){case 32:case 13:case 12:case 11:case 10:case 9:{ label=5;break;}default:{label=9;break;}}break;
 case 9: 
 var $17=($15|0)==45;
 if(($15|0)==45|($15|0)==43){ label=10;break;}else{var $c_0=$15;var $sign_0=1;label=13;break;}
 case 10: 
 var $18=HEAP32[(($3)>>2)];
 var $19=($17&1);
 var $20=$19<<1;
 var $21=(((1)-($20))|0);
 var $22=HEAP32[(($4)>>2)];
 var $23=($18>>>0)<($22>>>0);
 if($23){label=11;break;}else{label=12;break;}
 case 11: 
 var $25=(($18+1)|0);
 HEAP32[(($3)>>2)]=$25;
 var $26=HEAP8[(($18)>>0)];
 var $27=($26&255);
 var $c_0=$27;var $sign_0=$21;label=13;break;
 case 12: 
 var $29=___shgetc($f);
 var $c_0=$29;var $sign_0=$21;label=13;break;
 case 13: 
 var $sign_0;
 var $c_0;
 var $i_070=0;var $c_171=$c_0;label=14;break;
 case 14: 
 var $c_171;
 var $i_070;
 var $32=$c_171|32;
 var $33=((1984+$i_070)|0);
 var $34=HEAP8[(($33)>>0)];
 var $35=(($34<<24)>>24);
 var $36=($32|0)==($35|0);
 if($36){label=15;break;}else{var $i_0_lcssa=$i_070;var $c_1_lcssa=$c_171;label=20;break;}
 case 15: 
 var $38=($i_070>>>0)<7;
 if($38){label=16;break;}else{var $c_2=$c_171;label=19;break;}
 case 16: 
 var $40=HEAP32[(($3)>>2)];
 var $41=HEAP32[(($4)>>2)];
 var $42=($40>>>0)<($41>>>0);
 if($42){label=17;break;}else{label=18;break;}
 case 17: 
 var $44=(($40+1)|0);
 HEAP32[(($3)>>2)]=$44;
 var $45=HEAP8[(($40)>>0)];
 var $46=($45&255);
 var $c_2=$46;label=19;break;
 case 18: 
 var $48=___shgetc($f);
 var $c_2=$48;label=19;break;
 case 19: 
 var $c_2;
 var $50=((($i_070)+(1))|0);
 var $51=($50>>>0)<8;
 if($51){var $i_070=$50;var $c_171=$c_2;label=14;break;}else{var $i_0_lcssa=$50;var $c_1_lcssa=$c_2;label=20;break;}
 case 20: 
 var $c_1_lcssa;
 var $i_0_lcssa;
 if(($i_0_lcssa|0)==3){ label=23;break;}else if(($i_0_lcssa|0)==8){ label=27;break;}else{label=21;break;}
 case 21: 
 var $54=($i_0_lcssa>>>0)>3;
 var $55=($pok|0)!=0;
 var $or_cond5=$54&$55;
 if($or_cond5){label=22;break;}else{label=28;break;}
 case 22: 
 var $57=($i_0_lcssa|0)==8;
 if($57){label=27;break;}else{label=23;break;}
 case 23: 
 var $59=HEAP32[(($4)>>2)];
 var $60=($59|0)==0;
 if($60){label=27;break;}else{label=24;break;}
 case 24: 
 var $62=HEAP32[(($3)>>2)];
 var $63=((($62)-(1))|0);
 HEAP32[(($3)>>2)]=$63;
 var $notlhs=($pok|0)==0;
 var $notrhs=($i_0_lcssa>>>0)<4;
 var $or_cond9_not=$notrhs|$notlhs;
 if($or_cond9_not){label=27;break;}else{var $i_1=$i_0_lcssa;var $64=$63;label=25;break;}
 case 25: 
 var $64;
 var $i_1;
 var $65=((($64)-(1))|0);
 var $66=((($i_1)-(1))|0);
 var $_old8=($66>>>0)>3;
 if($_old8){var $i_1=$66;var $64=$65;label=25;break;}else{label=26;break;}
 case 26: 
 HEAP32[(($3)>>2)]=$65;
 label=27;break;
 case 27: 
 var $67=($sign_0|0);
 var $68=($67)*(Infinity);
 var $69=$68;
 var $_0=$69;label=300;break;
 case 28: 
 var $71=($i_0_lcssa|0)==0;
 if($71){var $i_268=0;var $c_369=$c_1_lcssa;label=29;break;}else{var $c_5=$c_1_lcssa;var $i_3=$i_0_lcssa;label=35;break;}
 case 29: 
 var $c_369;
 var $i_268;
 var $72=$c_369|32;
 var $73=((1752+$i_268)|0);
 var $74=HEAP8[(($73)>>0)];
 var $75=(($74<<24)>>24);
 var $76=($72|0)==($75|0);
 if($76){label=30;break;}else{var $c_5=$c_369;var $i_3=$i_268;label=35;break;}
 case 30: 
 var $78=($i_268>>>0)<2;
 if($78){label=31;break;}else{var $c_4=$c_369;label=34;break;}
 case 31: 
 var $80=HEAP32[(($3)>>2)];
 var $81=HEAP32[(($4)>>2)];
 var $82=($80>>>0)<($81>>>0);
 if($82){label=32;break;}else{label=33;break;}
 case 32: 
 var $84=(($80+1)|0);
 HEAP32[(($3)>>2)]=$84;
 var $85=HEAP8[(($80)>>0)];
 var $86=($85&255);
 var $c_4=$86;label=34;break;
 case 33: 
 var $88=___shgetc($f);
 var $c_4=$88;label=34;break;
 case 34: 
 var $c_4;
 var $90=((($i_268)+(1))|0);
 var $91=($90>>>0)<3;
 if($91){var $i_268=$90;var $c_369=$c_4;label=29;break;}else{var $c_5=$c_4;var $i_3=$90;label=35;break;}
 case 35: 
 var $i_3;
 var $c_5;
 if(($i_3|0)==3){ label=36;break;}else if(($i_3|0)==0){ label=59;break;}else{label=56;break;}
 case 36: 
 var $93=HEAP32[(($3)>>2)];
 var $94=HEAP32[(($4)>>2)];
 var $95=($93>>>0)<($94>>>0);
 if($95){label=37;break;}else{label=38;break;}
 case 37: 
 var $97=(($93+1)|0);
 HEAP32[(($3)>>2)]=$97;
 var $98=HEAP8[(($93)>>0)];
 var $99=($98&255);
 var $103=$99;label=39;break;
 case 38: 
 var $101=___shgetc($f);
 var $103=$101;label=39;break;
 case 39: 
 var $103;
 var $104=($103|0)==40;
 if($104){var $i_4=1;label=42;break;}else{label=40;break;}
 case 40: 
 var $106=HEAP32[(($4)>>2)];
 var $107=($106|0)==0;
 if($107){var $_0=NaN;label=300;break;}else{label=41;break;}
 case 41: 
 var $109=HEAP32[(($3)>>2)];
 var $110=((($109)-(1))|0);
 HEAP32[(($3)>>2)]=$110;
 var $_0=NaN;label=300;break;
 case 42: 
 var $i_4;
 var $111=HEAP32[(($3)>>2)];
 var $112=HEAP32[(($4)>>2)];
 var $113=($111>>>0)<($112>>>0);
 if($113){label=43;break;}else{label=44;break;}
 case 43: 
 var $115=(($111+1)|0);
 HEAP32[(($3)>>2)]=$115;
 var $116=HEAP8[(($111)>>0)];
 var $117=($116&255);
 var $121=$117;label=45;break;
 case 44: 
 var $119=___shgetc($f);
 var $121=$119;label=45;break;
 case 45: 
 var $121;
 var $122=((($121)-(48))|0);
 var $123=($122>>>0)<10;
 var $124=((($121)-(65))|0);
 var $125=($124>>>0)<26;
 var $or_cond=$123|$125;
 if($or_cond){label=55;break;}else{label=46;break;}
 case 46: 
 var $127=((($121)-(97))|0);
 var $128=($127>>>0)<26;
 var $129=($121|0)==95;
 var $or_cond7=$128|$129;
 if($or_cond7){label=55;break;}else{label=47;break;}
 case 47: 
 var $131=($121|0)==41;
 if($131){var $_0=NaN;label=300;break;}else{label=48;break;}
 case 48: 
 var $133=HEAP32[(($4)>>2)];
 var $134=($133|0)==0;
 if($134){label=50;break;}else{label=49;break;}
 case 49: 
 var $136=HEAP32[(($3)>>2)];
 var $137=((($136)-(1))|0);
 HEAP32[(($3)>>2)]=$137;
 label=50;break;
 case 50: 
 if($55){label=51;break;}else{label=53;break;}
 case 51: 
 var $139=($i_4|0)==0;
 var $brmerge108=$139|$134;
 if($brmerge108){var $_0=NaN;label=300;break;}else{label=52;break;}
 case 52: 
 var $_promoted23=HEAP32[(($3)>>2)];
 var $_in=$i_4;var $150=$_promoted23;label=54;break;
 case 53: 
 var $141=___errno_location();
 HEAP32[(($141)>>2)]=22;
 var $142=(($f+104)|0);
 HEAP32[(($142)>>2)]=0;
 var $143=(($f+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=HEAP32[(($3)>>2)];
 var $146=$144;
 var $147=$145;
 var $148=((($146)-($147))|0);
 var $149=(($f+108)|0);
 HEAP32[(($149)>>2)]=$148;
 HEAP32[(($4)>>2)]=$144;
 var $_0=0;label=300;break;
 case 54: 
 var $150;
 var $_in;
 var $151=((($_in)-(1))|0);
 var $152=((($150)-(1))|0);
 var $153=($151|0)==0;
 if($153){label=299;break;}else{var $_in=$151;var $150=$152;label=54;break;}
 case 55: 
 var $155=((($i_4)+(1))|0);
 var $i_4=$155;label=42;break;
 case 56: 
 var $157=HEAP32[(($4)>>2)];
 var $158=($157|0)==0;
 var $_pre=HEAP32[(($3)>>2)];
 if($158){var $161=$_pre;label=58;break;}else{label=57;break;}
 case 57: 
 var $160=((($_pre)-(1))|0);
 HEAP32[(($3)>>2)]=$160;
 var $161=$160;label=58;break;
 case 58: 
 var $161;
 var $162=___errno_location();
 HEAP32[(($162)>>2)]=22;
 var $163=(($f+104)|0);
 HEAP32[(($163)>>2)]=0;
 var $164=(($f+8)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=$165;
 var $167=$161;
 var $168=((($166)-($167))|0);
 var $169=(($f+108)|0);
 HEAP32[(($169)>>2)]=$168;
 HEAP32[(($4)>>2)]=$165;
 var $_0=0;label=300;break;
 case 59: 
 var $171=($c_5|0)==48;
 if($171){label=60;break;}else{var $c_6=$c_5;label=145;break;}
 case 60: 
 var $173=HEAP32[(($3)>>2)];
 var $174=HEAP32[(($4)>>2)];
 var $175=($173>>>0)<($174>>>0);
 if($175){label=61;break;}else{label=62;break;}
 case 61: 
 var $177=(($173+1)|0);
 HEAP32[(($3)>>2)]=$177;
 var $178=HEAP8[(($173)>>0)];
 var $179=($178&255);
 var $183=$179;label=63;break;
 case 62: 
 var $181=___shgetc($f);
 var $183=$181;label=63;break;
 case 63: 
 var $183;
 var $184=$183|32;
 var $185=($184|0)==120;
 if($185){label=64;break;}else{label=143;break;}
 case 64: 
 var $187=HEAP32[(($3)>>2)];
 var $188=HEAP32[(($4)>>2)];
 var $189=($187>>>0)<($188>>>0);
 if($189){label=65;break;}else{label=66;break;}
 case 65: 
 var $191=(($187+1)|0);
 HEAP32[(($3)>>2)]=$191;
 var $192=HEAP8[(($187)>>0)];
 var $193=($192&255);
 var $c_0_i=$193;var $gotdig_0_i=0;label=67;break;
 case 66: 
 var $195=___shgetc($f);
 var $c_0_i=$195;var $gotdig_0_i=0;label=67;break;
 case 67: 
 var $gotdig_0_i;
 var $c_0_i;
 if(($c_0_i|0)==48){ label=68;break;}else if(($c_0_i|0)==46){ label=71;break;}else{var $c_2_i=$c_0_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=0;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 68: 
 var $197=HEAP32[(($3)>>2)];
 var $198=HEAP32[(($4)>>2)];
 var $199=($197>>>0)<($198>>>0);
 if($199){label=69;break;}else{label=70;break;}
 case 69: 
 var $201=(($197+1)|0);
 HEAP32[(($3)>>2)]=$201;
 var $202=HEAP8[(($197)>>0)];
 var $203=($202&255);
 var $c_0_i=$203;var $gotdig_0_i=1;label=67;break;
 case 70: 
 var $205=___shgetc($f);
 var $c_0_i=$205;var $gotdig_0_i=1;label=67;break;
 case 71: 
 var $207=HEAP32[(($3)>>2)];
 var $208=HEAP32[(($4)>>2)];
 var $209=($207>>>0)<($208>>>0);
 if($209){label=72;break;}else{label=73;break;}
 case 72: 
 var $211=(($207+1)|0);
 HEAP32[(($3)>>2)]=$211;
 var $212=HEAP8[(($207)>>0)];
 var $213=($212&255);
 var $c_1_ph_i=$213;label=74;break;
 case 73: 
 var $215=___shgetc($f);
 var $c_1_ph_i=$215;label=74;break;
 case 74: 
 var $c_1_ph_i;
 var $216=($c_1_ph_i|0)==48;
 if($216){var $rp_026_i$1=0;var $rp_026_i$0=0;label=75;break;}else{var $c_2_i=$c_1_ph_i;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=0;var $rp_1_i$0=0;var $gotdig_2_i=$gotdig_0_i;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 75: 
 var $rp_026_i$0;
 var $rp_026_i$1;
 var $217=HEAP32[(($3)>>2)];
 var $218=HEAP32[(($4)>>2)];
 var $219=($217>>>0)<($218>>>0);
 if($219){label=76;break;}else{label=77;break;}
 case 76: 
 var $221=(($217+1)|0);
 HEAP32[(($3)>>2)]=$221;
 var $222=HEAP8[(($217)>>0)];
 var $223=($222&255);
 var $227=$223;label=78;break;
 case 77: 
 var $225=___shgetc($f);
 var $227=$225;label=78;break;
 case 78: 
 var $227;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $228$0=_i64Add($rp_026_i$0,$rp_026_i$1,$$etemp$0$0,$$etemp$0$1);var $228$1=tempRet0;
 var $229=($227|0)==48;
 if($229){var $rp_026_i$1=$228$1;var $rp_026_i$0=$228$0;label=75;break;}else{var $c_2_i=$227;var $dc_0_i$1=0;var $dc_0_i$0=0;var $rp_1_i$1=$228$1;var $rp_1_i$0=$228$0;var $gotdig_2_i=1;var $gotrad_0_i=1;var $gottail_0_i=0;var $scale_0_i=1;var $y_0_i=0;var $x_0_i=0;label=79;break;}
 case 79: 
 var $x_0_i;
 var $y_0_i;
 var $scale_0_i;
 var $gottail_0_i;
 var $gotrad_0_i;
 var $gotdig_2_i;
 var $rp_1_i$0;
 var $rp_1_i$1;
 var $dc_0_i$0;
 var $dc_0_i$1;
 var $c_2_i;
 var $230=((($c_2_i)-(48))|0);
 var $231=($230>>>0)<10;
 if($231){var $d_0_i=$230;label=84;break;}else{label=80;break;}
 case 80: 
 var $233=$c_2_i|32;
 var $234=((($233)-(97))|0);
 var $235=($234>>>0)<6;
 var $236=($c_2_i|0)==46;
 var $or_cond_i=$235|$236;
 if($or_cond_i){label=81;break;}else{var $c_2_lcssa_i=$c_2_i;label=94;break;}
 case 81: 
 if($236){label=82;break;}else{label=83;break;}
 case 82: 
 var $239=($gotrad_0_i|0)==0;
 if($239){var $dc_1_i$1=$dc_0_i$1;var $dc_1_i$0=$dc_0_i$0;var $rp_2_i$1=$dc_0_i$1;var $rp_2_i$0=$dc_0_i$0;var $gotdig_3_i=$gotdig_2_i;var $gotrad_1_i=1;var $gottail_2_i=$gottail_0_i;var $scale_2_i=$scale_0_i;var $y_2_i=$y_0_i;var $x_2_i=$x_0_i;label=91;break;}else{var $c_2_lcssa_i=46;label=94;break;}
 case 83: 
 var $241=($c_2_i|0)>57;
 var $242=((($233)-(87))|0);
 var $__i=($241?$242:$230);
 var $d_0_i=$__i;label=84;break;
 case 84: 
 var $d_0_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $243=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($243){label=85;break;}else{label=86;break;}
 case 85: 
 var $245=$x_0_i<<4;
 var $246=((($d_0_i)+($245))|0);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$246;label=90;break;
 case 86: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $248=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($248){label=87;break;}else{label=88;break;}
 case 87: 
 var $250=($d_0_i|0);
 var $251=($scale_0_i)*((0.0625));
 var $252=($251)*($250);
 var $253=($y_0_i)+($252);
 var $gottail_1_i=$gottail_0_i;var $scale_1_i=$251;var $y_1_i=$253;var $x_1_i=$x_0_i;label=90;break;
 case 88: 
 var $255=($d_0_i|0)==0;
 var $256=($gottail_0_i|0)!=0;
 var $or_cond3_i=$255|$256;
 if($or_cond3_i){var $gottail_1_i=$gottail_0_i;var $scale_1_i=$scale_0_i;var $y_1_i=$y_0_i;var $x_1_i=$x_0_i;label=90;break;}else{label=89;break;}
 case 89: 
 var $258=($scale_0_i)*((0.5));
 var $259=($y_0_i)+($258);
 var $gottail_1_i=1;var $scale_1_i=$scale_0_i;var $y_1_i=$259;var $x_1_i=$x_0_i;label=90;break;
 case 90: 
 var $x_1_i;
 var $y_1_i;
 var $scale_1_i;
 var $gottail_1_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $261$0=_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1);var $261$1=tempRet0;
 var $dc_1_i$1=$261$1;var $dc_1_i$0=$261$0;var $rp_2_i$1=$rp_1_i$1;var $rp_2_i$0=$rp_1_i$0;var $gotdig_3_i=1;var $gotrad_1_i=$gotrad_0_i;var $gottail_2_i=$gottail_1_i;var $scale_2_i=$scale_1_i;var $y_2_i=$y_1_i;var $x_2_i=$x_1_i;label=91;break;
 case 91: 
 var $x_2_i;
 var $y_2_i;
 var $scale_2_i;
 var $gottail_2_i;
 var $gotrad_1_i;
 var $gotdig_3_i;
 var $rp_2_i$0;
 var $rp_2_i$1;
 var $dc_1_i$0;
 var $dc_1_i$1;
 var $263=HEAP32[(($3)>>2)];
 var $264=HEAP32[(($4)>>2)];
 var $265=($263>>>0)<($264>>>0);
 if($265){label=92;break;}else{label=93;break;}
 case 92: 
 var $267=(($263+1)|0);
 HEAP32[(($3)>>2)]=$267;
 var $268=HEAP8[(($263)>>0)];
 var $269=($268&255);
 var $c_2_i=$269;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 93: 
 var $271=___shgetc($f);
 var $c_2_i=$271;var $dc_0_i$1=$dc_1_i$1;var $dc_0_i$0=$dc_1_i$0;var $rp_1_i$1=$rp_2_i$1;var $rp_1_i$0=$rp_2_i$0;var $gotdig_2_i=$gotdig_3_i;var $gotrad_0_i=$gotrad_1_i;var $gottail_0_i=$gottail_2_i;var $scale_0_i=$scale_2_i;var $y_0_i=$y_2_i;var $x_0_i=$x_2_i;label=79;break;
 case 94: 
 var $c_2_lcssa_i;
 var $273=($gotdig_2_i|0)==0;
 if($273){label=95;break;}else{label=103;break;}
 case 95: 
 var $275=HEAP32[(($4)>>2)];
 var $276=($275|0)==0;
 if($276){label=97;break;}else{label=96;break;}
 case 96: 
 var $278=HEAP32[(($3)>>2)];
 var $279=((($278)-(1))|0);
 HEAP32[(($3)>>2)]=$279;
 label=97;break;
 case 97: 
 var $281=($pok|0)==0;
 if($281){label=101;break;}else{label=98;break;}
 case 98: 
 if($276){label=102;break;}else{label=99;break;}
 case 99: 
 var $284=HEAP32[(($3)>>2)];
 var $285=((($284)-(1))|0);
 HEAP32[(($3)>>2)]=$285;
 var $286=($gotrad_0_i|0)==0;
 if($286){label=102;break;}else{label=100;break;}
 case 100: 
 var $288=((($284)-(2))|0);
 HEAP32[(($3)>>2)]=$288;
 label=102;break;
 case 101: 
 var $290=(($f+104)|0);
 HEAP32[(($290)>>2)]=0;
 var $291=(($f+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=HEAP32[(($3)>>2)];
 var $294=$292;
 var $295=$293;
 var $296=((($294)-($295))|0);
 var $297=(($f+108)|0);
 HEAP32[(($297)>>2)]=$296;
 HEAP32[(($4)>>2)]=$292;
 label=102;break;
 case 102: 
 var $298=($sign_0|0);
 var $299=($298)*(0);
 var $_0=$299;label=300;break;
 case 103: 
 var $301=($gotrad_0_i|0)==0;
 var $dc_0_rp_1_i$0=($301?$dc_0_i$0:$rp_1_i$0);
 var $dc_0_rp_1_i$1=($301?$dc_0_i$1:$rp_1_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $302=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($302){var $x_318_i=$x_0_i;var $dc_219_i$1=$dc_0_i$1;var $dc_219_i$0=$dc_0_i$0;label=104;break;}else{var $x_3_lcssa_i=$x_0_i;label=105;break;}
 case 104: 
 var $dc_219_i$0;
 var $dc_219_i$1;
 var $x_318_i;
 var $303=$x_318_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $304$0=_i64Add($dc_219_i$0,$dc_219_i$1,$$etemp$5$0,$$etemp$5$1);var $304$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $305=(($304$1|0) < ($$etemp$6$1|0)) | (((($304$1|0) == ($$etemp$6$1|0) & ($304$0>>>0) <  ($$etemp$6$0>>>0))));
 if($305){var $x_318_i=$303;var $dc_219_i$1=$304$1;var $dc_219_i$0=$304$0;label=104;break;}else{var $x_3_lcssa_i=$303;label=105;break;}
 case 105: 
 var $x_3_lcssa_i;
 var $306=$c_2_lcssa_i|32;
 var $307=($306|0)==112;
 if($307){label=106;break;}else{label=111;break;}
 case 106: 
 var $309$0=_scanexp($f,$pok);
 var $309$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $310=(($309$0|0) == ($$etemp$7$0|0)) & (($309$1|0) == ($$etemp$7$1|0));
 if($310){label=107;break;}else{var $e2_0_i$1=$309$1;var $e2_0_i$0=$309$0;label=113;break;}
 case 107: 
 var $312=($pok|0)==0;
 if($312){label=110;break;}else{label=108;break;}
 case 108: 
 var $314=HEAP32[(($4)>>2)];
 var $315=($314|0)==0;
 if($315){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=109;break;}
 case 109: 
 var $317=HEAP32[(($3)>>2)];
 var $318=((($317)-(1))|0);
 HEAP32[(($3)>>2)]=$318;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 110: 
 var $320=(($f+104)|0);
 HEAP32[(($320)>>2)]=0;
 var $321=(($f+8)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=HEAP32[(($3)>>2)];
 var $324=$322;
 var $325=$323;
 var $326=((($324)-($325))|0);
 var $327=(($f+108)|0);
 HEAP32[(($327)>>2)]=$326;
 HEAP32[(($4)>>2)]=$322;
 var $_0=0;label=300;break;
 case 111: 
 var $329=HEAP32[(($4)>>2)];
 var $330=($329|0)==0;
 if($330){var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;}else{label=112;break;}
 case 112: 
 var $332=HEAP32[(($3)>>2)];
 var $333=((($332)-(1))|0);
 HEAP32[(($3)>>2)]=$333;
 var $e2_0_i$1=0;var $e2_0_i$0=0;label=113;break;
 case 113: 
 var $e2_0_i$0;
 var $e2_0_i$1;
 var $335$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
 var $335$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $336$0=_i64Add($335$0,$335$1,$$etemp$8$0,$$etemp$8$1);var $336$1=tempRet0;
 var $337$0=_i64Add($336$0,$336$1,$e2_0_i$0,$e2_0_i$1);var $337$1=tempRet0;
 var $338=($x_3_lcssa_i|0)==0;
 if($338){label=114;break;}else{label=115;break;}
 case 114: 
 var $340=($sign_0|0);
 var $341=($340)*(0);
 var $_0=$341;label=300;break;
 case 115: 
 var $343=(((-$emin_0_ph))|0);
 var $344$0=$343;
 var $344$1=0;
 var $345=(($337$1|0) > ($344$1|0)) | (((($337$1|0) == ($344$1|0) & ($337$0>>>0) >  ($344$0>>>0))));
 if($345){label=116;break;}else{label=117;break;}
 case 116: 
 var $347=___errno_location();
 HEAP32[(($347)>>2)]=34;
 var $348=($sign_0|0);
 var $349=($348)*((1.7976931348623157e+308));
 var $350=($349)*((1.7976931348623157e+308));
 var $_0=$350;label=300;break;
 case 117: 
 var $352=((($emin_0_ph)-(106))|0);
 var $353$0=$352;
 var $353$1=((((($352|0)<0))|0)?-1:0);
 var $354=(($337$1|0) < ($353$1|0)) | (((($337$1|0) == ($353$1|0) & ($337$0>>>0) <  ($353$0>>>0))));
 if($354){label=119;break;}else{label=118;break;}
 case 118: 
 var $355=($x_3_lcssa_i|0)>-1;
 if($355){var $x_413_i=$x_3_lcssa_i;var $y_314_i=$y_0_i;var $e2_115_i$1=$337$1;var $e2_115_i$0=$337$0;label=120;break;}else{var $x_4_lcssa_i=$x_3_lcssa_i;var $y_3_lcssa_i=$y_0_i;var $e2_1_lcssa_i$1=$337$1;var $e2_1_lcssa_i$0=$337$0;label=123;break;}
 case 119: 
 var $357=___errno_location();
 HEAP32[(($357)>>2)]=34;
 var $358=($sign_0|0);
 var $359=($358)*((2.2250738585072014e-308));
 var $360=($359)*((2.2250738585072014e-308));
 var $_0=$360;label=300;break;
 case 120: 
 var $e2_115_i$0;
 var $e2_115_i$1;
 var $y_314_i;
 var $x_413_i;
 var $361=$y_314_i<(0.5);
 var $362=$x_413_i<<1;
 if($361){var $_pn_i=$y_314_i;var $x_5_i=$362;label=122;break;}else{label=121;break;}
 case 121: 
 var $364=$362|1;
 var $365=($y_314_i)-(1);
 var $_pn_i=$365;var $x_5_i=$364;label=122;break;
 case 122: 
 var $x_5_i;
 var $_pn_i;
 var $y_4_i=($y_314_i)+($_pn_i);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $367$0=_i64Add($e2_115_i$0,$e2_115_i$1,$$etemp$9$0,$$etemp$9$1);var $367$1=tempRet0;
 var $368=($x_5_i|0)>-1;
 if($368){var $x_413_i=$x_5_i;var $y_314_i=$y_4_i;var $e2_115_i$1=$367$1;var $e2_115_i$0=$367$0;label=120;break;}else{var $x_4_lcssa_i=$x_5_i;var $y_3_lcssa_i=$y_4_i;var $e2_1_lcssa_i$1=$367$1;var $e2_1_lcssa_i$0=$367$0;label=123;break;}
 case 123: 
 var $e2_1_lcssa_i$0;
 var $e2_1_lcssa_i$1;
 var $y_3_lcssa_i;
 var $x_4_lcssa_i;
 var $369$0=$bits_0_ph;
 var $369$1=0;
 var $370$0=$emin_0_ph;
 var $370$1=((((($emin_0_ph|0)<0))|0)?-1:0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;
 var $371$0=_i64Subtract($$etemp$10$0,$$etemp$10$1,$370$0,$370$1);var $371$1=tempRet0;
 var $372$0=_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$371$0,$371$1);var $372$1=tempRet0;
 var $373=(($369$1|0) > ($372$1|0)) | (((($369$1|0) == ($372$1|0) & ($369$0>>>0) >  ($372$0>>>0))));
 if($373){label=124;break;}else{var $_06_i=$bits_0_ph;label=125;break;}
 case 124: 
 var $375$0=$372$0;
 var $375=$375$0;
 var $376=($375|0)<0;
 if($376){var $_0611_i=0;label=127;break;}else{var $_06_i=$375;label=125;break;}
 case 125: 
 var $_06_i;
 var $378=($_06_i|0)<53;
 if($378){var $_0611_i=$_06_i;label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=($sign_0|0);
 var $bias_0_i=0;var $_0612_i=$_06_i;var $_pre_phi_i=$_pre_i;label=134;break;
 case 127: 
 var $_0611_i;
 var $379=(((84)-($_0611_i))|0);
 var $380=($379|0)>1023;
 if($380){label=128;break;}else{label=130;break;}
 case 128: 
 var $382=((($379)-(1023))|0);
 var $383=($382|0)>1023;
 if($383){label=129;break;}else{var $y_0_i11=8.98846567431158e+307;var $_0_i10=$382;label=133;break;}
 case 129: 
 var $385=((($379)-(2046))|0);
 var $386=($385|0)>1023;
 var $__i8=($386?1023:$385);
 var $y_0_i11=Infinity;var $_0_i10=$__i8;label=133;break;
 case 130: 
 var $388=($379|0)<-1022;
 if($388){label=131;break;}else{var $y_0_i11=1;var $_0_i10=$379;label=133;break;}
 case 131: 
 var $390=((($379)+(1022))|0);
 var $391=($390|0)<-1022;
 if($391){label=132;break;}else{var $y_0_i11=2.2250738585072014e-308;var $_0_i10=$390;label=133;break;}
 case 132: 
 var $393=((($379)+(2044))|0);
 var $394=($393|0)<-1022;
 var $_1_i9=($394?-1022:$393);
 var $y_0_i11=0;var $_0_i10=$_1_i9;label=133;break;
 case 133: 
 var $_0_i10;
 var $y_0_i11;
 var $395=((($_0_i10)+(1023))|0);
 var $396$0=$395;
 var $396$1=0;
 var $397$0=(0<<20)|(0>>>12);
 var $397$1=($396$0<<20)|(0>>>12);
 var $398=(HEAP32[((tempDoublePtr)>>2)]=$397$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$397$1, HEAPF64[(tempDoublePtr)>>3]);
 var $399=($y_0_i11)*($398);
 var $400=($sign_0|0);
 HEAPF64[(tempDoublePtr)>>3]=$399; var $401$0=HEAP32[((tempDoublePtr)>>2)];var $401$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 HEAPF64[(tempDoublePtr)>>3]=$400; var $402$0=HEAP32[((tempDoublePtr)>>2)];var $402$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$11$0=-1;
 var $$etemp$11$1=2147483647;
 var $403$0=$401$0&$$etemp$11$0;
 var $403$1=$401$1&$$etemp$11$1;
 var $$etemp$12$0=0;
 var $$etemp$12$1=-2147483648;
 var $404$0=$402$0&$$etemp$12$0;
 var $404$1=$402$1&$$etemp$12$1;
 var $405$0=$404$0|$403$0;
 var $405$1=$404$1|$403$1;
 var $406=(HEAP32[((tempDoublePtr)>>2)]=$405$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$405$1, HEAPF64[(tempDoublePtr)>>3]);
 var $bias_0_i=$406;var $_0612_i=$_0611_i;var $_pre_phi_i=$400;label=134;break;
 case 134: 
 var $_pre_phi_i;
 var $_0612_i;
 var $bias_0_i;
 var $408=($_0612_i|0)<32;
 var $409=$y_3_lcssa_i!=0;
 var $or_cond5_i=$408&$409;
 var $410=$x_4_lcssa_i&1;
 var $411=($410|0)==0;
 var $or_cond8_i=$or_cond5_i&$411;
 var $412=($or_cond8_i&1);
 var $x_6_i=((($412)+($x_4_lcssa_i))|0);
 var $y_5_i=($or_cond8_i?0:$y_3_lcssa_i);
 var $413=($x_6_i>>>0);
 var $414=($_pre_phi_i)*($413);
 var $415=($bias_0_i)+($414);
 var $416=($_pre_phi_i)*($y_5_i);
 var $417=($416)+($415);
 var $418=($417)-($bias_0_i);
 var $419=$418!=0;
 if($419){label=136;break;}else{label=135;break;}
 case 135: 
 var $421=___errno_location();
 HEAP32[(($421)>>2)]=34;
 label=136;break;
 case 136: 
 var $423$0=$e2_1_lcssa_i$0;
 var $423=$423$0;
 var $424=($423|0)>1023;
 if($424){label=137;break;}else{label=139;break;}
 case 137: 
 var $426=($418)*((8.98846567431158e+307));
 var $427=((($423)-(1023))|0);
 var $428=($427|0)>1023;
 if($428){label=138;break;}else{var $y_0_i_i16=$426;var $_0_i_i15=$427;label=142;break;}
 case 138: 
 var $430=($426)*((8.98846567431158e+307));
 var $431=((($423)-(2046))|0);
 var $432=($431|0)>1023;
 var $__i_i13=($432?1023:$431);
 var $y_0_i_i16=$430;var $_0_i_i15=$__i_i13;label=142;break;
 case 139: 
 var $434=($423|0)<-1022;
 if($434){label=140;break;}else{var $y_0_i_i16=$418;var $_0_i_i15=$423;label=142;break;}
 case 140: 
 var $436=($418)*((2.2250738585072014e-308));
 var $437=((($423)+(1022))|0);
 var $438=($437|0)<-1022;
 if($438){label=141;break;}else{var $y_0_i_i16=$436;var $_0_i_i15=$437;label=142;break;}
 case 141: 
 var $440=($436)*((2.2250738585072014e-308));
 var $441=((($423)+(2044))|0);
 var $442=($441|0)<-1022;
 var $_1_i_i14=($442?-1022:$441);
 var $y_0_i_i16=$440;var $_0_i_i15=$_1_i_i14;label=142;break;
 case 142: 
 var $_0_i_i15;
 var $y_0_i_i16;
 var $443=((($_0_i_i15)+(1023))|0);
 var $444$0=$443;
 var $444$1=0;
 var $445$0=(0<<20)|(0>>>12);
 var $445$1=($444$0<<20)|(0>>>12);
 var $446=(HEAP32[((tempDoublePtr)>>2)]=$445$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$445$1, HEAPF64[(tempDoublePtr)>>3]);
 var $447=($y_0_i_i16)*($446);
 var $_0=$447;label=300;break;
 case 143: 
 var $449=HEAP32[(($4)>>2)];
 var $450=($449|0)==0;
 if($450){var $c_6=48;label=145;break;}else{label=144;break;}
 case 144: 
 var $452=HEAP32[(($3)>>2)];
 var $453=((($452)-(1))|0);
 HEAP32[(($3)>>2)]=$453;
 var $c_6=48;label=145;break;
 case 145: 
 var $c_6;
 var $455=$x_i;
 var $$etemp$13$0=512;
 var $$etemp$13$1=0;

 var $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
 var $456=(((-$sum_i))|0);
 var $_011_i=$c_6;var $gotdig_0_i11=0;label=146;break;
 case 146: 
 var $gotdig_0_i11;
 var $_011_i;
 if(($_011_i|0)==48){ label=147;break;}else if(($_011_i|0)==46){ label=150;break;}else{var $_2_i=$_011_i;var $gotrad_0_i13=0;var $gotdig_2_i12=$gotdig_0_i11;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=158;break;}
 case 147: 
 var $458=HEAP32[(($3)>>2)];
 var $459=HEAP32[(($4)>>2)];
 var $460=($458>>>0)<($459>>>0);
 if($460){label=148;break;}else{label=149;break;}
 case 148: 
 var $462=(($458+1)|0);
 HEAP32[(($3)>>2)]=$462;
 var $463=HEAP8[(($458)>>0)];
 var $464=($463&255);
 var $_011_i=$464;var $gotdig_0_i11=1;label=146;break;
 case 149: 
 var $466=___shgetc($f);
 var $_011_i=$466;var $gotdig_0_i11=1;label=146;break;
 case 150: 
 var $468=HEAP32[(($3)>>2)];
 var $469=HEAP32[(($4)>>2)];
 var $470=($468>>>0)<($469>>>0);
 if($470){label=151;break;}else{label=152;break;}
 case 151: 
 var $472=(($468+1)|0);
 HEAP32[(($3)>>2)]=$472;
 var $473=HEAP8[(($468)>>0)];
 var $474=($473&255);
 var $_1_ph_i=$474;label=153;break;
 case 152: 
 var $476=___shgetc($f);
 var $_1_ph_i=$476;label=153;break;
 case 153: 
 var $_1_ph_i;
 var $477=($_1_ph_i|0)==48;
 if($477){var $lrp_0134_i$1=0;var $lrp_0134_i$0=0;label=154;break;}else{var $_2_i=$_1_ph_i;var $gotrad_0_i13=1;var $gotdig_2_i12=$gotdig_0_i11;var $lrp_1_i$1=0;var $lrp_1_i$0=0;label=158;break;}
 case 154: 
 var $lrp_0134_i$0;
 var $lrp_0134_i$1;
 var $$etemp$14$0=-1;
 var $$etemp$14$1=-1;
 var $478$0=_i64Add($lrp_0134_i$0,$lrp_0134_i$1,$$etemp$14$0,$$etemp$14$1);var $478$1=tempRet0;
 var $479=HEAP32[(($3)>>2)];
 var $480=HEAP32[(($4)>>2)];
 var $481=($479>>>0)<($480>>>0);
 if($481){label=155;break;}else{label=156;break;}
 case 155: 
 var $483=(($479+1)|0);
 HEAP32[(($3)>>2)]=$483;
 var $484=HEAP8[(($479)>>0)];
 var $485=($484&255);
 var $_1_be_i=$485;label=157;break;
 case 156: 
 var $487=___shgetc($f);
 var $_1_be_i=$487;label=157;break;
 case 157: 
 var $_1_be_i;
 var $488=($_1_be_i|0)==48;
 if($488){var $lrp_0134_i$1=$478$1;var $lrp_0134_i$0=$478$0;label=154;break;}else{var $_2_i=$_1_be_i;var $gotrad_0_i13=1;var $gotdig_2_i12=1;var $lrp_1_i$1=$478$1;var $lrp_1_i$0=$478$0;label=158;break;}
 case 158: 
 var $lrp_1_i$0;
 var $lrp_1_i$1;
 var $gotdig_2_i12;
 var $gotrad_0_i13;
 var $_2_i;
 var $489=(($x_i)|0);
 HEAP32[(($489)>>2)]=0;
 var $490=((($_2_i)-(48))|0);
 var $491=($490>>>0)<10;
 var $492=($_2_i|0)==46;
 var $or_cond112_i=$491|$492;
 if($or_cond112_i){label=159;break;}else{var $lrp_2_lcssa_i$1=$lrp_1_i$1;var $lrp_2_lcssa_i$0=$lrp_1_i$0;var $dc_0_lcssa_i$1=0;var $dc_0_lcssa_i$0=0;var $lnz_0_lcssa_i=0;var $gotdig_3_lcssa_i=$gotdig_2_i12;var $gotrad_1_lcssa_i=$gotrad_0_i13;var $k_0_lcssa_i=0;var $j_0_lcssa_i=0;var $_3_lcssa_i=$_2_i;label=173;break;}
 case 159: 
 var $493=(($x_i+496)|0);
 var $lrp_2113_i$1=$lrp_1_i$1;var $lrp_2113_i$0=$lrp_1_i$0;var $dc_0114_i$1=0;var $dc_0114_i$0=0;var $lnz_0115_i=0;var $gotdig_3116_i=$gotdig_2_i12;var $gotrad_1117_i=$gotrad_0_i13;var $k_0118_i=0;var $j_0119_i=0;var $_3120_i=$_2_i;var $496=$490;var $495=$492;label=160;break;
 case 160: 
 var $495;
 var $496;
 var $_3120_i;
 var $j_0119_i;
 var $k_0118_i;
 var $gotrad_1117_i;
 var $gotdig_3116_i;
 var $lnz_0115_i;
 var $dc_0114_i$0;
 var $dc_0114_i$1;
 var $lrp_2113_i$0;
 var $lrp_2113_i$1;
 if($495){label=161;break;}else{label=163;break;}
 case 161: 
 var $cond_i=($gotrad_1117_i|0)==0;
 if($cond_i){var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=1;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$dc_0114_i$1;var $dc_1_i14$0=$dc_0114_i$0;var $lrp_3_i$1=$dc_0114_i$1;var $lrp_3_i$0=$dc_0114_i$0;label=169;break;}else{label=162;break;}
 case 162: 
 var $498=($gotdig_3116_i|0)!=0;
 var $562=$498;var $lrp_42426_i$1=$lrp_2113_i$1;var $lrp_42426_i$0=$lrp_2113_i$0;var $dc_096_i$1=$dc_0114_i$1;var $dc_096_i$0=$dc_0114_i$0;var $lnz_0100_i=$lnz_0115_i;var $k_0106_i=$k_0118_i;var $j_0110_i=$j_0119_i;label=181;break;
 case 163: 
 var $500=($k_0118_i|0)<125;
 var $$etemp$15$0=1;
 var $$etemp$15$1=0;
 var $501$0=_i64Add($dc_0114_i$0,$dc_0114_i$1,$$etemp$15$0,$$etemp$15$1);var $501$1=tempRet0;
 var $502=($_3120_i|0)!=48;
 if($500){label=164;break;}else{label=167;break;}
 case 164: 
 var $504$0=$501$0;
 var $504=$504$0;
 var $_lnz_0_i=($502?$504:$lnz_0115_i);
 var $505=($j_0119_i|0)==0;
 var $506=(($x_i+($k_0118_i<<2))|0);
 if($505){var $storemerge_i=$496;label=166;break;}else{label=165;break;}
 case 165: 
 var $508=HEAP32[(($506)>>2)];
 var $509=((($508)*(10))&-1);
 var $510=((($_3120_i)-(48))|0);
 var $511=((($510)+($509))|0);
 var $storemerge_i=$511;label=166;break;
 case 166: 
 var $storemerge_i;
 HEAP32[(($506)>>2)]=$storemerge_i;
 var $513=((($j_0119_i)+(1))|0);
 var $514=($513|0)==9;
 var $515=($514&1);
 var $_k_0_i=((($515)+($k_0118_i))|0);
 var $_13_i=($514?0:$513);
 var $j_2_i=$_13_i;var $k_2_i=$_k_0_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=1;var $lnz_2_i=$_lnz_0_i;var $dc_1_i14$1=$501$1;var $dc_1_i14$0=$501$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=169;break;
 case 167: 
 if($502){label=168;break;}else{var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$501$1;var $dc_1_i14$0=$501$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=169;break;}
 case 168: 
 var $518=HEAP32[(($493)>>2)];
 var $519=$518|1;
 HEAP32[(($493)>>2)]=$519;
 var $j_2_i=$j_0119_i;var $k_2_i=$k_0118_i;var $gotrad_2_i=$gotrad_1117_i;var $gotdig_4_i=$gotdig_3116_i;var $lnz_2_i=$lnz_0115_i;var $dc_1_i14$1=$501$1;var $dc_1_i14$0=$501$0;var $lrp_3_i$1=$lrp_2113_i$1;var $lrp_3_i$0=$lrp_2113_i$0;label=169;break;
 case 169: 
 var $lrp_3_i$0;
 var $lrp_3_i$1;
 var $dc_1_i14$0;
 var $dc_1_i14$1;
 var $lnz_2_i;
 var $gotdig_4_i;
 var $gotrad_2_i;
 var $k_2_i;
 var $j_2_i;
 var $521=HEAP32[(($3)>>2)];
 var $522=HEAP32[(($4)>>2)];
 var $523=($521>>>0)<($522>>>0);
 if($523){label=170;break;}else{label=171;break;}
 case 170: 
 var $525=(($521+1)|0);
 HEAP32[(($3)>>2)]=$525;
 var $526=HEAP8[(($521)>>0)];
 var $527=($526&255);
 var $_3_be_i=$527;label=172;break;
 case 171: 
 var $529=___shgetc($f);
 var $_3_be_i=$529;label=172;break;
 case 172: 
 var $_3_be_i;
 var $530=((($_3_be_i)-(48))|0);
 var $531=($530>>>0)<10;
 var $532=($_3_be_i|0)==46;
 var $or_cond_i15=$531|$532;
 if($or_cond_i15){var $lrp_2113_i$1=$lrp_3_i$1;var $lrp_2113_i$0=$lrp_3_i$0;var $dc_0114_i$1=$dc_1_i14$1;var $dc_0114_i$0=$dc_1_i14$0;var $lnz_0115_i=$lnz_2_i;var $gotdig_3116_i=$gotdig_4_i;var $gotrad_1117_i=$gotrad_2_i;var $k_0118_i=$k_2_i;var $j_0119_i=$j_2_i;var $_3120_i=$_3_be_i;var $496=$530;var $495=$532;label=160;break;}else{var $lrp_2_lcssa_i$1=$lrp_3_i$1;var $lrp_2_lcssa_i$0=$lrp_3_i$0;var $dc_0_lcssa_i$1=$dc_1_i14$1;var $dc_0_lcssa_i$0=$dc_1_i14$0;var $lnz_0_lcssa_i=$lnz_2_i;var $gotdig_3_lcssa_i=$gotdig_4_i;var $gotrad_1_lcssa_i=$gotrad_2_i;var $k_0_lcssa_i=$k_2_i;var $j_0_lcssa_i=$j_2_i;var $_3_lcssa_i=$_3_be_i;label=173;break;}
 case 173: 
 var $_3_lcssa_i;
 var $j_0_lcssa_i;
 var $k_0_lcssa_i;
 var $gotrad_1_lcssa_i;
 var $gotdig_3_lcssa_i;
 var $lnz_0_lcssa_i;
 var $dc_0_lcssa_i$0;
 var $dc_0_lcssa_i$1;
 var $lrp_2_lcssa_i$0;
 var $lrp_2_lcssa_i$1;
 var $533=($gotrad_1_lcssa_i|0)==0;
 var $dc_0_lrp_2_i$0=($533?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
 var $dc_0_lrp_2_i$1=($533?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
 var $534=($gotdig_3_lcssa_i|0)!=0;
 var $535=$_3_lcssa_i|32;
 var $536=($535|0)==101;
 var $or_cond15_i=$534&$536;
 if($or_cond15_i){label=174;break;}else{label=180;break;}
 case 174: 
 var $538$0=_scanexp($f,$pok);
 var $538$1=tempRet0;
 var $$etemp$16$0=0;
 var $$etemp$16$1=-2147483648;
 var $539=(($538$0|0) == ($$etemp$16$0|0)) & (($538$1|0) == ($$etemp$16$1|0));
 if($539){label=175;break;}else{var $e10_0_i$1=$538$1;var $e10_0_i$0=$538$0;label=179;break;}
 case 175: 
 var $541=($pok|0)==0;
 if($541){label=178;break;}else{label=176;break;}
 case 176: 
 var $543=HEAP32[(($4)>>2)];
 var $544=($543|0)==0;
 if($544){var $e10_0_i$1=0;var $e10_0_i$0=0;label=179;break;}else{label=177;break;}
 case 177: 
 var $546=HEAP32[(($3)>>2)];
 var $547=((($546)-(1))|0);
 HEAP32[(($3)>>2)]=$547;
 var $e10_0_i$1=0;var $e10_0_i$0=0;label=179;break;
 case 178: 
 var $549=(($f+104)|0);
 HEAP32[(($549)>>2)]=0;
 var $550=(($f+8)|0);
 var $551=HEAP32[(($550)>>2)];
 var $552=HEAP32[(($3)>>2)];
 var $553=$551;
 var $554=$552;
 var $555=((($553)-($554))|0);
 var $556=(($f+108)|0);
 HEAP32[(($556)>>2)]=$555;
 HEAP32[(($4)>>2)]=$551;
 var $_0=0;label=300;break;
 case 179: 
 var $e10_0_i$0;
 var $e10_0_i$1;
 var $558$0=_i64Add($e10_0_i$0,$e10_0_i$1,$dc_0_lrp_2_i$0,$dc_0_lrp_2_i$1);var $558$1=tempRet0;
 var $lrp_527_i$1=$558$1;var $lrp_527_i$0=$558$0;var $dc_094_i$1=$dc_0_lcssa_i$1;var $dc_094_i$0=$dc_0_lcssa_i$0;var $lnz_098_i=$lnz_0_lcssa_i;var $k_0104_i=$k_0_lcssa_i;var $j_0108_i=$j_0_lcssa_i;label=186;break;
 case 180: 
 var $560=($_3_lcssa_i|0)>-1;
 if($560){var $562=$534;var $lrp_42426_i$1=$dc_0_lrp_2_i$1;var $lrp_42426_i$0=$dc_0_lrp_2_i$0;var $dc_096_i$1=$dc_0_lcssa_i$1;var $dc_096_i$0=$dc_0_lcssa_i$0;var $lnz_0100_i=$lnz_0_lcssa_i;var $k_0106_i=$k_0_lcssa_i;var $j_0110_i=$j_0_lcssa_i;label=181;break;}else{var $lrp_5_i$1=$dc_0_lrp_2_i$1;var $lrp_5_i$0=$dc_0_lrp_2_i$0;var $569=$534;var $dc_095_i$1=$dc_0_lcssa_i$1;var $dc_095_i$0=$dc_0_lcssa_i$0;var $lnz_099_i=$lnz_0_lcssa_i;var $k_0105_i=$k_0_lcssa_i;var $j_0109_i=$j_0_lcssa_i;label=183;break;}
 case 181: 
 var $j_0110_i;
 var $k_0106_i;
 var $lnz_0100_i;
 var $dc_096_i$0;
 var $dc_096_i$1;
 var $lrp_42426_i$0;
 var $lrp_42426_i$1;
 var $562;
 var $563=HEAP32[(($4)>>2)];
 var $564=($563|0)==0;
 if($564){var $lrp_5_i$1=$lrp_42426_i$1;var $lrp_5_i$0=$lrp_42426_i$0;var $569=$562;var $dc_095_i$1=$dc_096_i$1;var $dc_095_i$0=$dc_096_i$0;var $lnz_099_i=$lnz_0100_i;var $k_0105_i=$k_0106_i;var $j_0109_i=$j_0110_i;label=183;break;}else{label=182;break;}
 case 182: 
 var $566=HEAP32[(($3)>>2)];
 var $567=((($566)-(1))|0);
 HEAP32[(($3)>>2)]=$567;
 if($562){var $lrp_527_i$1=$lrp_42426_i$1;var $lrp_527_i$0=$lrp_42426_i$0;var $dc_094_i$1=$dc_096_i$1;var $dc_094_i$0=$dc_096_i$0;var $lnz_098_i=$lnz_0100_i;var $k_0104_i=$k_0106_i;var $j_0108_i=$j_0110_i;label=186;break;}else{var $571=$567;label=185;break;}
 case 183: 
 var $j_0109_i;
 var $k_0105_i;
 var $lnz_099_i;
 var $dc_095_i$0;
 var $dc_095_i$1;
 var $569;
 var $lrp_5_i$0;
 var $lrp_5_i$1;
 if($569){var $lrp_527_i$1=$lrp_5_i$1;var $lrp_527_i$0=$lrp_5_i$0;var $dc_094_i$1=$dc_095_i$1;var $dc_094_i$0=$dc_095_i$0;var $lnz_098_i=$lnz_099_i;var $k_0104_i=$k_0105_i;var $j_0108_i=$j_0109_i;label=186;break;}else{label=184;break;}
 case 184: 
 var $_pre29=HEAP32[(($3)>>2)];
 var $571=$_pre29;label=185;break;
 case 185: 
 var $571;
 var $572=___errno_location();
 HEAP32[(($572)>>2)]=22;
 var $573=(($f+104)|0);
 HEAP32[(($573)>>2)]=0;
 var $574=(($f+8)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=$575;
 var $577=$571;
 var $578=((($576)-($577))|0);
 var $579=(($f+108)|0);
 HEAP32[(($579)>>2)]=$578;
 HEAP32[(($4)>>2)]=$575;
 var $_0=0;label=300;break;
 case 186: 
 var $j_0108_i;
 var $k_0104_i;
 var $lnz_098_i;
 var $dc_094_i$0;
 var $dc_094_i$1;
 var $lrp_527_i$0;
 var $lrp_527_i$1;
 var $581=HEAP32[(($489)>>2)];
 var $582=($581|0)==0;
 if($582){label=187;break;}else{label=188;break;}
 case 187: 
 var $584=($sign_0|0);
 var $585=($584)*(0);
 var $_0=$585;label=300;break;
 case 188: 
 var $587=(($lrp_527_i$0|0) == ($dc_094_i$0|0)) & (($lrp_527_i$1|0) == ($dc_094_i$1|0));
 var $$etemp$17$0=10;
 var $$etemp$17$1=0;
 var $588=(($dc_094_i$1|0) < ($$etemp$17$1|0)) | (((($dc_094_i$1|0) == ($$etemp$17$1|0) & ($dc_094_i$0>>>0) <  ($$etemp$17$0>>>0))));
 var $or_cond3_i16=$587&$588;
 if($or_cond3_i16){label=189;break;}else{label=191;break;}
 case 189: 
 var $590=($bits_0_ph>>>0)>30;
 var $591=$581>>>($bits_0_ph>>>0);
 var $592=($591|0)==0;
 var $or_cond17_i=$590|$592;
 if($or_cond17_i){label=190;break;}else{label=191;break;}
 case 190: 
 var $594=($sign_0|0);
 var $595=($581>>>0);
 var $596=($594)*($595);
 var $_0=$596;label=300;break;
 case 191: 
 var $598=(((($emin_0_ph|0))/(-2))&-1);
 var $599$0=$598;
 var $599$1=((((($598|0)<0))|0)?-1:0);
 var $600=(($lrp_527_i$1|0) > ($599$1|0)) | (((($lrp_527_i$1|0) == ($599$1|0) & ($lrp_527_i$0>>>0) >  ($599$0>>>0))));
 if($600){label=192;break;}else{label=193;break;}
 case 192: 
 var $602=___errno_location();
 HEAP32[(($602)>>2)]=34;
 var $603=($sign_0|0);
 var $604=($603)*((1.7976931348623157e+308));
 var $605=($604)*((1.7976931348623157e+308));
 var $_0=$605;label=300;break;
 case 193: 
 var $607=((($emin_0_ph)-(106))|0);
 var $608$0=$607;
 var $608$1=((((($607|0)<0))|0)?-1:0);
 var $609=(($lrp_527_i$1|0) < ($608$1|0)) | (((($lrp_527_i$1|0) == ($608$1|0) & ($lrp_527_i$0>>>0) <  ($608$0>>>0))));
 if($609){label=194;break;}else{label=195;break;}
 case 194: 
 var $611=___errno_location();
 HEAP32[(($611)>>2)]=34;
 var $612=($sign_0|0);
 var $613=($612)*((2.2250738585072014e-308));
 var $614=($613)*((2.2250738585072014e-308));
 var $_0=$614;label=300;break;
 case 195: 
 var $616=($j_0108_i|0)==0;
 if($616){var $k_3_i=$k_0104_i;label=201;break;}else{label=196;break;}
 case 196: 
 var $617=($j_0108_i|0)<9;
 if($617){label=197;break;}else{label=200;break;}
 case 197: 
 var $618=(($x_i+($k_0104_i<<2))|0);
 var $_promoted_i=HEAP32[(($618)>>2)];
 var $j_388_i=$j_0108_i;var $620=$_promoted_i;label=198;break;
 case 198: 
 var $620;
 var $j_388_i;
 var $621=((($620)*(10))&-1);
 var $622=((($j_388_i)+(1))|0);
 var $623=($622|0)<9;
 if($623){var $j_388_i=$622;var $620=$621;label=198;break;}else{label=199;break;}
 case 199: 
 HEAP32[(($618)>>2)]=$621;
 label=200;break;
 case 200: 
 var $625=((($k_0104_i)+(1))|0);
 var $k_3_i=$625;label=201;break;
 case 201: 
 var $k_3_i;
 var $627$0=$lrp_527_i$0;
 var $627=$627$0;
 var $628=($lnz_098_i|0)<9;
 if($628){label=202;break;}else{label=209;break;}
 case 202: 
 var $630=($lnz_098_i|0)<=($627|0);
 var $631=($627|0)<18;
 var $or_cond5_i17=$630&$631;
 if($or_cond5_i17){label=203;break;}else{label=209;break;}
 case 203: 
 var $633=($627|0)==9;
 if($633){label=204;break;}else{label=205;break;}
 case 204: 
 var $635=($sign_0|0);
 var $636=HEAP32[(($489)>>2)];
 var $637=($636>>>0);
 var $638=($635)*($637);
 var $_0=$638;label=300;break;
 case 205: 
 var $640=($627|0)<9;
 if($640){label=206;break;}else{label=207;break;}
 case 206: 
 var $642=($sign_0|0);
 var $643=HEAP32[(($489)>>2)];
 var $644=($643>>>0);
 var $645=($642)*($644);
 var $646=(((8)-($627))|0);
 var $647=((872+($646<<2))|0);
 var $648=HEAP32[(($647)>>2)];
 var $649=($648|0);
 var $650=($645)/($649);
 var $_0=$650;label=300;break;
 case 207: 
 var $652=((($627)*(-3))&-1);
 var $_neg37_i=((($bits_0_ph)+(27))|0);
 var $653=((($_neg37_i)+($652))|0);
 var $654=($653|0)>30;
 var $_pre_i18=HEAP32[(($489)>>2)];
 var $655=$_pre_i18>>>($653>>>0);
 var $656=($655|0)==0;
 var $or_cond187_i=$654|$656;
 if($or_cond187_i){label=208;break;}else{label=209;break;}
 case 208: 
 var $657=($sign_0|0);
 var $658=($_pre_i18>>>0);
 var $659=($657)*($658);
 var $660=((($627)-(10))|0);
 var $661=((872+($660<<2))|0);
 var $662=HEAP32[(($661)>>2)];
 var $663=($662|0);
 var $664=($659)*($663);
 var $_0=$664;label=300;break;
 case 209: 
 var $666=(((($627|0))%(9))&-1);
 var $667=($666|0)==0;
 if($667){var $a_2_ph57_i=0;var $z_1_ph56_i=$k_3_i;var $e2_0_ph_i=0;var $rp_2_ph55_i=$627;label=218;break;}else{label=210;break;}
 case 210: 
 var $669=($627|0)>-1;
 var $670=((($666)+(9))|0);
 var $671=($669?$666:$670);
 var $672=(((8)-($671))|0);
 var $673=((872+($672<<2))|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=($k_3_i|0)==0;
 if($675){var $z_0_i=0;var $a_0_lcssa182_i=0;var $rp_0_lcssa183_i=$627;label=217;break;}else{label=211;break;}
 case 211: 
 var $676=(((1000000000)/(($674|0)))&-1);
 var $rp_077_i=$627;var $a_078_i=0;var $k_479_i=0;var $carry_080_i=0;label=212;break;
 case 212: 
 var $carry_080_i;
 var $k_479_i;
 var $a_078_i;
 var $rp_077_i;
 var $678=(($x_i+($k_479_i<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=(((($679>>>0))%(($674>>>0)))&-1);
 var $681=(((($679>>>0))/(($674>>>0)))&-1);
 var $682=((($681)+($carry_080_i))|0);
 HEAP32[(($678)>>2)]=$682;
 var $683=(Math_imul($680,$676)|0);
 var $684=($k_479_i|0)==($a_078_i|0);
 var $685=($682|0)==0;
 var $or_cond18_i=$684&$685;
 var $686=((($k_479_i)+(1))|0);
 if($or_cond18_i){label=213;break;}else{var $a_1_i=$a_078_i;var $rp_1_i19=$rp_077_i;label=214;break;}
 case 213: 
 var $688=$686&127;
 var $689=((($rp_077_i)-(9))|0);
 var $a_1_i=$688;var $rp_1_i19=$689;label=214;break;
 case 214: 
 var $rp_1_i19;
 var $a_1_i;
 var $690=($686|0)==($k_3_i|0);
 if($690){label=215;break;}else{var $rp_077_i=$rp_1_i19;var $a_078_i=$a_1_i;var $k_479_i=$686;var $carry_080_i=$683;label=212;break;}
 case 215: 
 var $691=($683|0)==0;
 if($691){var $z_0_i=$k_3_i;var $a_0_lcssa182_i=$a_1_i;var $rp_0_lcssa183_i=$rp_1_i19;label=217;break;}else{label=216;break;}
 case 216: 
 var $693=((($k_3_i)+(1))|0);
 var $694=(($x_i+($k_3_i<<2))|0);
 HEAP32[(($694)>>2)]=$683;
 var $z_0_i=$693;var $a_0_lcssa182_i=$a_1_i;var $rp_0_lcssa183_i=$rp_1_i19;label=217;break;
 case 217: 
 var $rp_0_lcssa183_i;
 var $a_0_lcssa182_i;
 var $z_0_i;
 var $695=(((9)-($671))|0);
 var $696=((($695)+($rp_0_lcssa183_i))|0);
 var $a_2_ph57_i=$a_0_lcssa182_i;var $z_1_ph56_i=$z_0_i;var $e2_0_ph_i=0;var $rp_2_ph55_i=$696;label=218;break;
 case 218: 
 var $rp_2_ph55_i;
 var $e2_0_ph_i;
 var $z_1_ph56_i;
 var $a_2_ph57_i;
 var $697=($rp_2_ph55_i|0)<18;
 var $698=(($x_i+($a_2_ph57_i<<2))|0);
 if($697){var $z_1_us_i=$z_1_ph56_i;var $e2_0_us_i=$e2_0_ph_i;label=220;break;}else{label=219;break;}
 case 219: 
 var $699=($rp_2_ph55_i|0)==18;
 if($699){var $z_1_us62_i=$z_1_ph56_i;var $e2_0_us61_i=$e2_0_ph_i;label=227;break;}else{var $a_3_ph_i=$a_2_ph57_i;var $z_5_ph_i=$z_1_ph56_i;var $e2_1_ph_i=$e2_0_ph_i;var $rp_3_ph50_i=$rp_2_ph55_i;label=251;break;}
 case 220: 
 var $e2_0_us_i;
 var $z_1_us_i;
 var $700=((($z_1_us_i)+(127))|0);
 var $carry1_0_us_i=0;var $k_5_in_us_i=$700;var $z_2_us_i=$z_1_us_i;label=221;break;
 case 221: 
 var $z_2_us_i;
 var $k_5_in_us_i;
 var $carry1_0_us_i;
 var $k_5_us_i=$k_5_in_us_i&127;
 var $702=(($x_i+($k_5_us_i<<2))|0);
 var $703=HEAP32[(($702)>>2)];
 var $704$0=$703;
 var $704$1=0;
 var $705$0=($704$0<<29)|(0>>>3);
 var $705$1=($704$1<<29)|($704$0>>>3);
 var $706$0=$carry1_0_us_i;
 var $706$1=0;
 var $707$0=_i64Add($705$0,$705$1,$706$0,$706$1);var $707$1=tempRet0;
 var $$etemp$18$0=1000000000;
 var $$etemp$18$1=0;
 var $708=(($707$1>>>0) > ($$etemp$18$1>>>0)) | (((($707$1>>>0) == ($$etemp$18$1>>>0) & ($707$0>>>0) >  ($$etemp$18$0>>>0))));
 var $extract_t36_us_i$0=$707$0;
 var $extract_t36_us_i=$extract_t36_us_i$0;
 if($708){label=222;break;}else{var $carry1_1_us_i=0;var $_sink_off0_us_i=$extract_t36_us_i;label=223;break;}
 case 222: 
 var $$etemp$19$0=1000000000;
 var $$etemp$19$1=0;
 var $710$0=___udivdi3($707$0,$707$1,$$etemp$19$0,$$etemp$19$1);var $710$1=tempRet0;
 var $711$0=$710$0;
 var $711=$711$0;
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $712$0=___uremdi3($707$0,$707$1,$$etemp$20$0,$$etemp$20$1);var $712$1=tempRet0;
 var $extract_t_us_i$0=$712$0;
 var $extract_t_us_i=$extract_t_us_i$0;
 var $carry1_1_us_i=$711;var $_sink_off0_us_i=$extract_t_us_i;label=223;break;
 case 223: 
 var $_sink_off0_us_i;
 var $carry1_1_us_i;
 HEAP32[(($702)>>2)]=$_sink_off0_us_i;
 var $714=((($z_2_us_i)+(127))|0);
 var $715=$714&127;
 var $716=($k_5_us_i|0)!=($715|0);
 var $717=($k_5_us_i|0)==($a_2_ph57_i|0);
 var $or_cond19_us_i=$716|$717;
 if($or_cond19_us_i){var $z_3_us_i=$z_2_us_i;label=225;break;}else{label=224;break;}
 case 224: 
 var $719=($_sink_off0_us_i|0)==0;
 var $k_5_z_2_us_i=($719?$k_5_us_i:$z_2_us_i);
 var $z_3_us_i=$k_5_z_2_us_i;label=225;break;
 case 225: 
 var $z_3_us_i;
 var $721=((($k_5_us_i)-(1))|0);
 if($717){label=226;break;}else{var $carry1_0_us_i=$carry1_1_us_i;var $k_5_in_us_i=$721;var $z_2_us_i=$z_3_us_i;label=221;break;}
 case 226: 
 var $723=((($e2_0_us_i)-(29))|0);
 var $724=($carry1_1_us_i|0)==0;
 if($724){var $z_1_us_i=$z_3_us_i;var $e2_0_us_i=$723;label=220;break;}else{var $_lcssa60_i=$723;var $z_3_lcssa_lcssa_i=$z_3_us_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us_i;label=235;break;}
 case 227: 
 var $e2_0_us61_i;
 var $z_1_us62_i;
 var $725=HEAP32[(($698)>>2)];
 var $726=($725>>>0)<9007199;
 if($726){label=228;break;}else{var $a_3_ph_i=$a_2_ph57_i;var $z_5_ph_i=$z_1_us62_i;var $e2_1_ph_i=$e2_0_us61_i;var $rp_3_ph50_i=18;label=251;break;}
 case 228: 
 var $727=((($z_1_us62_i)+(127))|0);
 var $carry1_0_us66_i=0;var $k_5_in_us65_i=$727;var $z_2_us64_i=$z_1_us62_i;label=229;break;
 case 229: 
 var $z_2_us64_i;
 var $k_5_in_us65_i;
 var $carry1_0_us66_i;
 var $k_5_us67_i=$k_5_in_us65_i&127;
 var $729=(($x_i+($k_5_us67_i<<2))|0);
 var $730=HEAP32[(($729)>>2)];
 var $731$0=$730;
 var $731$1=0;
 var $732$0=($731$0<<29)|(0>>>3);
 var $732$1=($731$1<<29)|($731$0>>>3);
 var $733$0=$carry1_0_us66_i;
 var $733$1=0;
 var $734$0=_i64Add($732$0,$732$1,$733$0,$733$1);var $734$1=tempRet0;
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $735=(($734$1>>>0) > ($$etemp$21$1>>>0)) | (((($734$1>>>0) == ($$etemp$21$1>>>0) & ($734$0>>>0) >  ($$etemp$21$0>>>0))));
 var $extract_t36_us68_i$0=$734$0;
 var $extract_t36_us68_i=$extract_t36_us68_i$0;
 if($735){label=230;break;}else{var $carry1_1_us71_i=0;var $_sink_off0_us70_i=$extract_t36_us68_i;label=231;break;}
 case 230: 
 var $$etemp$22$0=1000000000;
 var $$etemp$22$1=0;
 var $737$0=___udivdi3($734$0,$734$1,$$etemp$22$0,$$etemp$22$1);var $737$1=tempRet0;
 var $738$0=$737$0;
 var $738=$738$0;
 var $$etemp$23$0=1000000000;
 var $$etemp$23$1=0;
 var $739$0=___uremdi3($734$0,$734$1,$$etemp$23$0,$$etemp$23$1);var $739$1=tempRet0;
 var $extract_t_us69_i$0=$739$0;
 var $extract_t_us69_i=$extract_t_us69_i$0;
 var $carry1_1_us71_i=$738;var $_sink_off0_us70_i=$extract_t_us69_i;label=231;break;
 case 231: 
 var $_sink_off0_us70_i;
 var $carry1_1_us71_i;
 HEAP32[(($729)>>2)]=$_sink_off0_us70_i;
 var $741=((($z_2_us64_i)+(127))|0);
 var $742=$741&127;
 var $743=($k_5_us67_i|0)!=($742|0);
 var $744=($k_5_us67_i|0)==($a_2_ph57_i|0);
 var $or_cond19_us72_i=$743|$744;
 if($or_cond19_us72_i){var $z_3_us74_i=$z_2_us64_i;label=233;break;}else{label=232;break;}
 case 232: 
 var $746=($_sink_off0_us70_i|0)==0;
 var $k_5_z_2_us73_i=($746?$k_5_us67_i:$z_2_us64_i);
 var $z_3_us74_i=$k_5_z_2_us73_i;label=233;break;
 case 233: 
 var $z_3_us74_i;
 var $748=((($k_5_us67_i)-(1))|0);
 if($744){label=234;break;}else{var $carry1_0_us66_i=$carry1_1_us71_i;var $k_5_in_us65_i=$748;var $z_2_us64_i=$z_3_us74_i;label=229;break;}
 case 234: 
 var $750=((($e2_0_us61_i)-(29))|0);
 var $751=($carry1_1_us71_i|0)==0;
 if($751){var $z_1_us62_i=$z_3_us74_i;var $e2_0_us61_i=$750;label=227;break;}else{var $_lcssa60_i=$750;var $z_3_lcssa_lcssa_i=$z_3_us74_i;var $carry1_1_lcssa_lcssa_i=$carry1_1_us71_i;label=235;break;}
 case 235: 
 var $carry1_1_lcssa_lcssa_i;
 var $z_3_lcssa_lcssa_i;
 var $_lcssa60_i;
 var $752=((($rp_2_ph55_i)+(9))|0);
 var $753=((($a_2_ph57_i)+(127))|0);
 var $754=$753&127;
 var $755=($754|0)==($z_3_lcssa_lcssa_i|0);
 if($755){label=236;break;}else{var $z_4_i=$z_3_lcssa_lcssa_i;label=237;break;}
 case 236: 
 var $757=((($z_3_lcssa_lcssa_i)+(127))|0);
 var $758=$757&127;
 var $759=(($x_i+($758<<2))|0);
 var $760=HEAP32[(($759)>>2)];
 var $761=((($z_3_lcssa_lcssa_i)+(126))|0);
 var $762=$761&127;
 var $763=(($x_i+($762<<2))|0);
 var $764=HEAP32[(($763)>>2)];
 var $765=$764|$760;
 HEAP32[(($763)>>2)]=$765;
 var $z_4_i=$758;label=237;break;
 case 237: 
 var $z_4_i;
 var $767=(($x_i+($754<<2))|0);
 HEAP32[(($767)>>2)]=$carry1_1_lcssa_lcssa_i;
 var $a_2_ph57_i=$754;var $z_1_ph56_i=$z_4_i;var $e2_0_ph_i=$_lcssa60_i;var $rp_2_ph55_i=$752;label=218;break;
 case 238: 
 var $e2_1_i;
 var $a_3_i;
 var $i_042_i=0;label=240;break;
 case 239: 
 var $769=($782|0)<2;
 if($769){var $i_042_i=$782;label=240;break;}else{var $i_1_i=$782;label=243;break;}
 case 240: 
 var $i_042_i;
 var $771=((($i_042_i)+($a_3_i))|0);
 var $772=$771&127;
 var $773=($772|0)==($z_5_ph_i|0);
 if($773){var $i_1_i=2;label=243;break;}else{label=241;break;}
 case 241: 
 var $775=(($x_i+($772<<2))|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=((864+($i_042_i<<2))|0);
 var $778=HEAP32[(($777)>>2)];
 var $779=($776>>>0)<($778>>>0);
 if($779){var $i_1_i=2;label=243;break;}else{label=242;break;}
 case 242: 
 var $781=($776>>>0)>($778>>>0);
 var $782=((($i_042_i)+(1))|0);
 if($781){var $i_1_i=$i_042_i;label=243;break;}else{label=239;break;}
 case 243: 
 var $i_1_i;
 var $784=($i_1_i|0)==2;
 var $or_cond8_i20=$784&$815;
 if($or_cond8_i20){label=244;break;}else{label=245;break;}
 case 244: 
 var $785=$a_3_i&127;
 var $786=($785|0)==($z_5_ph_i|0);
 if($786){label=254;break;}else{var $z_7_i=$z_5_ph_i;label=255;break;}
 case 245: 
 var $788=((($_20_i)+($e2_1_i))|0);
 var $789=($a_3_i|0)==($z_5_ph_i|0);
 if($789){var $a_3_i=$z_5_ph_i;var $e2_1_i=$788;label=238;break;}else{label=246;break;}
 case 246: 
 var $790=1<<$_20_i;
 var $791=((($790)-(1))|0);
 var $792=1000000000>>>($_20_i>>>0);
 var $rp_443_i=$rp_3_i_ph;var $a_444_i=$a_3_i;var $k_645_i=$a_3_i;var $carry3_047_i=0;label=247;break;
 case 247: 
 var $carry3_047_i;
 var $k_645_i;
 var $a_444_i;
 var $rp_443_i;
 var $793=(($x_i+($k_645_i<<2))|0);
 var $794=HEAP32[(($793)>>2)];
 var $795=$794&$791;
 var $796=$794>>>($_20_i>>>0);
 var $797=((($796)+($carry3_047_i))|0);
 HEAP32[(($793)>>2)]=$797;
 var $798=(Math_imul($795,$792)|0);
 var $799=($k_645_i|0)==($a_444_i|0);
 var $800=($797|0)==0;
 var $or_cond21_i=$799&$800;
 var $801=((($k_645_i)+(1))|0);
 var $802=$801&127;
 var $803=((($rp_443_i)-(9))|0);
 var $rp_5_i=($or_cond21_i?$803:$rp_443_i);
 var $a_5_i=($or_cond21_i?$802:$a_444_i);
 var $804=($802|0)==($z_5_ph_i|0);
 if($804){label=248;break;}else{var $rp_443_i=$rp_5_i;var $a_444_i=$a_5_i;var $k_645_i=$802;var $carry3_047_i=$798;label=247;break;}
 case 248: 
 var $805=($798|0)==0;
 if($805){var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$788;var $rp_3_i_ph=$rp_5_i;label=252;break;}else{label=249;break;}
 case 249: 
 var $807=($811|0)==($a_5_i|0);
 if($807){label=253;break;}else{label=250;break;}
 case 250: 
 var $809=(($x_i+($z_5_ph_i<<2))|0);
 HEAP32[(($809)>>2)]=$798;
 var $a_3_ph_i=$a_5_i;var $z_5_ph_i=$811;var $e2_1_ph_i=$788;var $rp_3_ph50_i=$rp_5_i;label=251;break;
 case 251: 
 var $rp_3_ph50_i;
 var $e2_1_ph_i;
 var $z_5_ph_i;
 var $a_3_ph_i;
 var $810=((($z_5_ph_i)+(1))|0);
 var $811=$810&127;
 var $812=((($z_5_ph_i)+(127))|0);
 var $813=$812&127;
 var $814=(($x_i+($813<<2))|0);
 var $a_3_i_ph=$a_3_ph_i;var $e2_1_i_ph=$e2_1_ph_i;var $rp_3_i_ph=$rp_3_ph50_i;label=252;break;
 case 252: 
 var $rp_3_i_ph;
 var $e2_1_i_ph;
 var $a_3_i_ph;
 var $815=($rp_3_i_ph|0)==18;
 var $816=($rp_3_i_ph|0)>27;
 var $_20_i=($816?9:1);
 var $a_3_i=$a_3_i_ph;var $e2_1_i=$e2_1_i_ph;label=238;break;
 case 253: 
 var $818=HEAP32[(($814)>>2)];
 var $819=$818|1;
 HEAP32[(($814)>>2)]=$819;
 var $a_3_i_ph=$a_5_i;var $e2_1_i_ph=$788;var $rp_3_i_ph=$rp_5_i;label=252;break;
 case 254: 
 var $821=((($811)-(1))|0);
 var $822=(($x_i+($821<<2))|0);
 HEAP32[(($822)>>2)]=0;
 var $z_7_i=$811;label=255;break;
 case 255: 
 var $z_7_i;
 var $824=(($x_i+($785<<2))|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=($825>>>0);
 var $827=((($a_3_i)+(1))|0);
 var $828=$827&127;
 var $829=($828|0)==($z_7_i|0);
 if($829){label=297;break;}else{var $z_7_1_i=$z_7_i;label=298;break;}
 case 256: 
 var $831=($986|0)<0;
 if($831){var $denormal_030_i=1;var $_01231_i=0;label=258;break;}else{var $_012_i=$986;var $denormal_0_i=1;label=257;break;}
 case 257: 
 var $denormal_0_i;
 var $_012_i;
 var $833=($_012_i|0)<53;
 if($833){var $denormal_030_i=$denormal_0_i;var $_01231_i=$_012_i;label=258;break;}else{var $bias_0_i25=0;var $frac_0_i=0;var $y_1_i24=$984;var $denormal_029_i=$denormal_0_i;var $_01232_i=$_012_i;label=271;break;}
 case 258: 
 var $_01231_i;
 var $denormal_030_i;
 var $834=(((105)-($_01231_i))|0);
 var $835=($834|0)>1023;
 if($835){label=259;break;}else{label=261;break;}
 case 259: 
 var $837=((($834)-(1023))|0);
 var $838=($837|0)>1023;
 if($838){label=260;break;}else{var $y_0_i6=8.98846567431158e+307;var $_0_i5=$837;label=264;break;}
 case 260: 
 var $840=((($834)-(2046))|0);
 var $841=($840|0)>1023;
 var $__i3=($841?1023:$840);
 var $y_0_i6=Infinity;var $_0_i5=$__i3;label=264;break;
 case 261: 
 var $843=($834|0)<-1022;
 if($843){label=262;break;}else{var $y_0_i6=1;var $_0_i5=$834;label=264;break;}
 case 262: 
 var $845=((($834)+(1022))|0);
 var $846=($845|0)<-1022;
 if($846){label=263;break;}else{var $y_0_i6=2.2250738585072014e-308;var $_0_i5=$845;label=264;break;}
 case 263: 
 var $848=((($834)+(2044))|0);
 var $849=($848|0)<-1022;
 var $_1_i4=($849?-1022:$848);
 var $y_0_i6=0;var $_0_i5=$_1_i4;label=264;break;
 case 264: 
 var $_0_i5;
 var $y_0_i6;
 var $850=((($_0_i5)+(1023))|0);
 var $851$0=$850;
 var $851$1=0;
 var $852$0=(0<<20)|(0>>>12);
 var $852$1=($851$0<<20)|(0>>>12);
 var $853=(HEAP32[((tempDoublePtr)>>2)]=$852$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$852$1, HEAPF64[(tempDoublePtr)>>3]);
 var $854=($y_0_i6)*($853);
 HEAPF64[(tempDoublePtr)>>3]=$854; var $855$0=HEAP32[((tempDoublePtr)>>2)];var $855$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 HEAPF64[(tempDoublePtr)>>3]=$984; var $856$0=HEAP32[((tempDoublePtr)>>2)];var $856$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$24$0=-1;
 var $$etemp$24$1=2147483647;
 var $857$0=$855$0&$$etemp$24$0;
 var $857$1=$855$1&$$etemp$24$1;
 var $$etemp$25$0=0;
 var $$etemp$25$1=-2147483648;
 var $858$0=$856$0&$$etemp$25$0;
 var $858$1=$856$1&$$etemp$25$1;
 var $859$0=$858$0|$857$0;
 var $859$1=$858$1|$857$1;
 var $860=(HEAP32[((tempDoublePtr)>>2)]=$859$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$859$1, HEAPF64[(tempDoublePtr)>>3]);
 var $861=(((53)-($_01231_i))|0);
 var $862=($861|0)>1023;
 if($862){label=265;break;}else{label=267;break;}
 case 265: 
 var $864=((($861)-(1023))|0);
 var $865=($864|0)>1023;
 if($865){label=266;break;}else{var $y_0_i2=8.98846567431158e+307;var $_0_i=$864;label=270;break;}
 case 266: 
 var $867=((($861)-(2046))|0);
 var $868=($867|0)>1023;
 var $__i1=($868?1023:$867);
 var $y_0_i2=Infinity;var $_0_i=$__i1;label=270;break;
 case 267: 
 var $870=($861|0)<-1022;
 if($870){label=268;break;}else{var $y_0_i2=1;var $_0_i=$861;label=270;break;}
 case 268: 
 var $872=((($861)+(1022))|0);
 var $873=($872|0)<-1022;
 if($873){label=269;break;}else{var $y_0_i2=2.2250738585072014e-308;var $_0_i=$872;label=270;break;}
 case 269: 
 var $875=((($861)+(2044))|0);
 var $876=($875|0)<-1022;
 var $_1_i=($876?-1022:$875);
 var $y_0_i2=0;var $_0_i=$_1_i;label=270;break;
 case 270: 
 var $_0_i;
 var $y_0_i2;
 var $877=((($_0_i)+(1023))|0);
 var $878$0=$877;
 var $878$1=0;
 var $879$0=(0<<20)|(0>>>12);
 var $879$1=($878$0<<20)|(0>>>12);
 var $880=(HEAP32[((tempDoublePtr)>>2)]=$879$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$879$1, HEAPF64[(tempDoublePtr)>>3]);
 var $881=($y_0_i2)*($880);
 var $882=_fmodl($984,$881);
 var $883=($984)-($882);
 var $884=($860)+($883);
 var $bias_0_i25=$860;var $frac_0_i=$882;var $y_1_i24=$884;var $denormal_029_i=$denormal_030_i;var $_01232_i=$_01231_i;label=271;break;
 case 271: 
 var $_01232_i;
 var $denormal_029_i;
 var $y_1_i24;
 var $frac_0_i;
 var $bias_0_i25;
 var $886=((($a_3_i)+(2))|0);
 var $887=$886&127;
 var $888=($887|0)==($z_7_1_i|0);
 if($888){var $frac_2_i=$frac_0_i;label=284;break;}else{label=272;break;}
 case 272: 
 var $890=(($x_i+($887<<2))|0);
 var $891=HEAP32[(($890)>>2)];
 var $892=($891>>>0)<500000000;
 if($892){label=273;break;}else{label=276;break;}
 case 273: 
 var $894=($891|0)==0;
 if($894){label=274;break;}else{label=275;break;}
 case 274: 
 var $896=((($a_3_i)+(3))|0);
 var $897=$896&127;
 var $898=($897|0)==($z_7_1_i|0);
 if($898){var $frac_1_i=$frac_0_i;label=281;break;}else{label=275;break;}
 case 275: 
 var $900=($983)*((0.25));
 var $901=($900)+($frac_0_i);
 var $frac_1_i=$901;label=281;break;
 case 276: 
 var $903=($891>>>0)>500000000;
 if($903){label=277;break;}else{label=278;break;}
 case 277: 
 var $905=($983)*((0.75));
 var $906=($905)+($frac_0_i);
 var $frac_1_i=$906;label=281;break;
 case 278: 
 var $908=((($a_3_i)+(3))|0);
 var $909=$908&127;
 var $910=($909|0)==($z_7_1_i|0);
 if($910){label=279;break;}else{label=280;break;}
 case 279: 
 var $912=($983)*((0.5));
 var $913=($912)+($frac_0_i);
 var $frac_1_i=$913;label=281;break;
 case 280: 
 var $915=($983)*((0.75));
 var $916=($915)+($frac_0_i);
 var $frac_1_i=$916;label=281;break;
 case 281: 
 var $frac_1_i;
 var $918=(((53)-($_01232_i))|0);
 var $919=($918|0)>1;
 if($919){label=282;break;}else{var $frac_2_i=$frac_1_i;label=284;break;}
 case 282: 
 var $921=_fmodl($frac_1_i,1);
 var $922=$921!=0;
 if($922){var $frac_2_i=$frac_1_i;label=284;break;}else{label=283;break;}
 case 283: 
 var $924=($frac_1_i)+(1);
 var $frac_2_i=$924;label=284;break;
 case 284: 
 var $frac_2_i;
 var $926=($y_1_i24)+($frac_2_i);
 var $927=($926)-($bias_0_i25);
 var $928=$985&2147483647;
 var $929=(((-2)-($sum_i))|0);
 var $930=($928|0)>($929|0);
 if($930){label=285;break;}else{var $y_3_i=$927;var $e2_3_i=$e2_1_i;label=290;break;}
 case 285: 
 var $932=Math_abs($927);
 var $933=$932<9007199254740992;
 if($933){var $y_2_i26=$927;var $denormal_2_i=$denormal_029_i;var $e2_2_i=$e2_1_i;label=287;break;}else{label=286;break;}
 case 286: 
 var $935=($denormal_029_i|0)!=0;
 var $936=($_01232_i|0)==($986|0);
 var $or_cond22_i=$935&$936;
 var $denormal_1_i=($or_cond22_i?0:$denormal_029_i);
 var $937=($927)*((0.5));
 var $938=((($e2_1_i)+(1))|0);
 var $y_2_i26=$937;var $denormal_2_i=$denormal_1_i;var $e2_2_i=$938;label=287;break;
 case 287: 
 var $e2_2_i;
 var $denormal_2_i;
 var $y_2_i26;
 var $940=((($e2_2_i)+(50))|0);
 var $941=($940|0)>($456|0);
 if($941){label=289;break;}else{label=288;break;}
 case 288: 
 var $943=($denormal_2_i|0)!=0;
 var $944=$frac_2_i!=0;
 var $or_cond10_i=$943&$944;
 if($or_cond10_i){label=289;break;}else{var $y_3_i=$y_2_i26;var $e2_3_i=$e2_2_i;label=290;break;}
 case 289: 
 var $946=___errno_location();
 HEAP32[(($946)>>2)]=34;
 var $y_3_i=$y_2_i26;var $e2_3_i=$e2_2_i;label=290;break;
 case 290: 
 var $e2_3_i;
 var $y_3_i;
 var $948=($e2_3_i|0)>1023;
 if($948){label=291;break;}else{label=293;break;}
 case 291: 
 var $950=($y_3_i)*((8.98846567431158e+307));
 var $951=((($e2_3_i)-(1023))|0);
 var $952=($951|0)>1023;
 if($952){label=292;break;}else{var $y_0_i_i=$950;var $_0_i_i=$951;label=296;break;}
 case 292: 
 var $954=($950)*((8.98846567431158e+307));
 var $955=((($e2_3_i)-(2046))|0);
 var $956=($955|0)>1023;
 var $__i_i=($956?1023:$955);
 var $y_0_i_i=$954;var $_0_i_i=$__i_i;label=296;break;
 case 293: 
 var $958=($e2_3_i|0)<-1022;
 if($958){label=294;break;}else{var $y_0_i_i=$y_3_i;var $_0_i_i=$e2_3_i;label=296;break;}
 case 294: 
 var $960=($y_3_i)*((2.2250738585072014e-308));
 var $961=((($e2_3_i)+(1022))|0);
 var $962=($961|0)<-1022;
 if($962){label=295;break;}else{var $y_0_i_i=$960;var $_0_i_i=$961;label=296;break;}
 case 295: 
 var $964=($960)*((2.2250738585072014e-308));
 var $965=((($e2_3_i)+(2044))|0);
 var $966=($965|0)<-1022;
 var $_1_i_i=($966?-1022:$965);
 var $y_0_i_i=$964;var $_0_i_i=$_1_i_i;label=296;break;
 case 296: 
 var $_0_i_i;
 var $y_0_i_i;
 var $967=((($_0_i_i)+(1023))|0);
 var $968$0=$967;
 var $968$1=0;
 var $969$0=(0<<20)|(0>>>12);
 var $969$1=($968$0<<20)|(0>>>12);
 var $970=(HEAP32[((tempDoublePtr)>>2)]=$969$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$969$1, HEAPF64[(tempDoublePtr)>>3]);
 var $971=($y_0_i_i)*($970);
 var $_0=$971;label=300;break;
 case 297: 
 var $973=((($z_7_i)+(1))|0);
 var $974=$973&127;
 var $975=((($974)-(1))|0);
 var $976=(($x_i+($975<<2))|0);
 HEAP32[(($976)>>2)]=0;
 var $z_7_1_i=$974;label=298;break;
 case 298: 
 var $z_7_1_i;
 var $978=($826)*(1000000000);
 var $979=(($x_i+($828<<2))|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=($980>>>0);
 var $982=($978)+($981);
 var $983=($sign_0|0);
 var $984=($983)*($982);
 var $985=((($e2_1_i)+(53))|0);
 var $986=((($985)-($emin_0_ph))|0);
 var $987=($986|0)<($bits_0_ph|0);
 if($987){label=256;break;}else{var $_012_i=$bits_0_ph;var $denormal_0_i=0;label=257;break;}
 case 299: 
 HEAP32[(($3)>>2)]=$152;
 var $_0=NaN;label=300;break;
 case 300: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$f;
 var $10=___uflow($9);
 var $11=($10|0)<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=(($f+100)|0);
 HEAP32[(($13)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $15=HEAP32[(($1)>>2)];
 var $16=($15|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert2_phi_trans_insert_phi_trans_insert=(($f+4)|0);
 var $_pre3_pre_pre=HEAP32[(($_phi_trans_insert2_phi_trans_insert_phi_trans_insert)>>2)];
 if($16){var $_pre3_pre=$_pre3_pre_pre;label=8;break;}else{label=6;break;}
 case 6: 
 var $18=$_pre;
 var $19=$_pre3_pre_pre;
 var $20=((($18)-($19))|0);
 var $21=(($f+108)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($15)-($22))|0);
 var $24=((($23)-(1))|0);
 var $25=($20|0)>($24|0);
 if($25){label=7;break;}else{var $_pre3_pre=$_pre3_pre_pre;label=8;break;}
 case 7: 
 var $27=(($_pre3_pre_pre+$24)|0);
 var $28=(($f+100)|0);
 HEAP32[(($28)>>2)]=$27;
 var $_pre3=$_pre3_pre_pre;label=9;break;
 case 8: 
 var $_pre3_pre;
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$_pre;
 var $_pre3=$_pre3_pre;label=9;break;
 case 9: 
 var $_pre3;
 var $31=($_pre|0)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=$_pre;
 var $34=$_pre3;
 var $35=(($f+108)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($33)+(1))|0);
 var $38=((($37)-($34))|0);
 var $39=((($38)+($36))|0);
 HEAP32[(($35)>>2)]=$39;
 label=11;break;
 case 11: 
 var $40=((($_pre3)-(1))|0);
 var $41=HEAP8[(($40)>>0)];
 var $42=($41&255);
 var $43=($42|0)==($10|0);
 if($43){var $_0=$10;label=13;break;}else{label=12;break;}
 case 12: 
 var $45=(($10)&255);
 HEAP8[(($40)>>0)]=$45;
 var $_0=$10;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _fmodl($x,$y){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 HEAPF64[(tempDoublePtr)>>3]=$y; var $2$0=HEAP32[((tempDoublePtr)>>2)];var $2$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $3$0=($1$1>>>20)|(0<<12);
 var $3$1=(0>>>20)|(0<<12);
 var $_tr_i$0=$3$0;
 var $_tr_i=$_tr_i$0;
 var $4=$_tr_i&2047;
 var $5$0=($2$1>>>20)|(0<<12);
 var $5$1=(0>>>20)|(0<<12);
 var $_tr2_i$0=$5$0;
 var $_tr2_i=$_tr2_i$0;
 var $6=$_tr2_i&2047;
 var $$etemp$0$0=0;
 var $$etemp$0$1=-2147483648;
 var $7$0=$1$0&$$etemp$0$0;
 var $7$1=$1$1&$$etemp$0$1;
 var $8$0=($2$0<<1)|(0>>>31);
 var $8$1=($2$1<<1)|($2$0>>>31);
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $9=(($8$0|0) == ($$etemp$1$0|0)) & (($8$1|0) == ($$etemp$1$1|0));
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $$etemp$2$0=-1;
 var $$etemp$2$1=2147483647;
 var $11$0=$2$0&$$etemp$2$0;
 var $11$1=$2$1&$$etemp$2$1;
 var $$etemp$3$0=0;
 var $$etemp$3$1=2146435072;
 var $12=(($11$1>>>0) > ($$etemp$3$1>>>0)) | (((($11$1>>>0) == ($$etemp$3$1>>>0) & ($11$0>>>0) >  ($$etemp$3$0>>>0))));
 var $13=($4|0)==2047;
 var $or_cond_i=$12|$13;
 if($or_cond_i){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=($x)*($y);
 var $16=($15)/($15);
 var $_0_i=$16;label=31;break;
 case 4: 
 var $18$0=($1$0<<1)|(0>>>31);
 var $18$1=($1$1<<1)|($1$0>>>31);
 var $19=(($18$1>>>0) > ($8$1>>>0)) | (((($18$1>>>0) == ($8$1>>>0) & ($18$0>>>0) >  ($8$0>>>0))));
 if($19){label=7;break;}else{label=5;break;}
 case 5: 
 var $21=(($18$0|0) == ($8$0|0)) & (($18$1|0) == ($8$1|0));
 if($21){label=6;break;}else{var $_0_i=$x;label=31;break;}
 case 6: 
 var $23=($x)*(0);
 var $_0_i=$23;label=31;break;
 case 7: 
 var $25=($4|0)==0;
 if($25){label=8;break;}else{label=11;break;}
 case 8: 
 var $27$0=($1$0<<12)|(0>>>20);
 var $27$1=($1$1<<12)|($1$0>>>20);
 var $$etemp$4$0=-1;
 var $$etemp$4$1=-1;
 var $28=(($27$1|0) > ($$etemp$4$1|0)) | (((($27$1|0) == ($$etemp$4$1|0) & ($27$0>>>0) >  ($$etemp$4$0>>>0))));
 if($28){var $ex_026_i=0;var $i_027_i$1=$27$1;var $i_027_i$0=$27$0;label=9;break;}else{var $ex_0_lcssa_i=0;label=10;break;}
 case 9: 
 var $i_027_i$0;
 var $i_027_i$1;
 var $ex_026_i;
 var $29=((($ex_026_i)-(1))|0);
 var $30$0=($i_027_i$0<<1)|(0>>>31);
 var $30$1=($i_027_i$1<<1)|($i_027_i$0>>>31);
 var $$etemp$5$0=-1;
 var $$etemp$5$1=-1;
 var $31=(($30$1|0) > ($$etemp$5$1|0)) | (((($30$1|0) == ($$etemp$5$1|0) & ($30$0>>>0) >  ($$etemp$5$0>>>0))));
 if($31){var $ex_026_i=$29;var $i_027_i$1=$30$1;var $i_027_i$0=$30$0;label=9;break;}else{var $ex_0_lcssa_i=$29;label=10;break;}
 case 10: 
 var $ex_0_lcssa_i;
 var $32=(((1)-($ex_0_lcssa_i))|0);
 var $33$0=$32;
 var $33$1=0;
 var $34$0=_bitshift64Shl($1$0,$1$1,$33$0);var $34$1=tempRet0;
 var $uxi_0_i$1=$34$1;var $uxi_0_i$0=$34$0;var $ex_1_i=$ex_0_lcssa_i;label=12;break;
 case 11: 
 var $$etemp$6$0=-1;
 var $$etemp$6$1=1048575;
 var $36$0=$1$0&$$etemp$6$0;
 var $36$1=$1$1&$$etemp$6$1;
 var $$etemp$7$0=0;
 var $$etemp$7$1=1048576;
 var $37$0=$36$0|$$etemp$7$0;
 var $37$1=$36$1|$$etemp$7$1;
 var $uxi_0_i$1=$37$1;var $uxi_0_i$0=$37$0;var $ex_1_i=$4;label=12;break;
 case 12: 
 var $ex_1_i;
 var $uxi_0_i$0;
 var $uxi_0_i$1;
 var $39=($6|0)==0;
 if($39){label=13;break;}else{label=16;break;}
 case 13: 
 var $41$0=($2$0<<12)|(0>>>20);
 var $41$1=($2$1<<12)|($2$0>>>20);
 var $$etemp$8$0=-1;
 var $$etemp$8$1=-1;
 var $42=(($41$1|0) > ($$etemp$8$1|0)) | (((($41$1|0) == ($$etemp$8$1|0) & ($41$0>>>0) >  ($$etemp$8$0>>>0))));
 if($42){var $ey_020_i=0;var $i_121_i$1=$41$1;var $i_121_i$0=$41$0;label=14;break;}else{var $ey_0_lcssa_i=0;label=15;break;}
 case 14: 
 var $i_121_i$0;
 var $i_121_i$1;
 var $ey_020_i;
 var $43=((($ey_020_i)-(1))|0);
 var $44$0=($i_121_i$0<<1)|(0>>>31);
 var $44$1=($i_121_i$1<<1)|($i_121_i$0>>>31);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $45=(($44$1|0) > ($$etemp$9$1|0)) | (((($44$1|0) == ($$etemp$9$1|0) & ($44$0>>>0) >  ($$etemp$9$0>>>0))));
 if($45){var $ey_020_i=$43;var $i_121_i$1=$44$1;var $i_121_i$0=$44$0;label=14;break;}else{var $ey_0_lcssa_i=$43;label=15;break;}
 case 15: 
 var $ey_0_lcssa_i;
 var $46=(((1)-($ey_0_lcssa_i))|0);
 var $47$0=$46;
 var $47$1=0;
 var $48$0=_bitshift64Shl($2$0,$2$1,$47$0);var $48$1=tempRet0;
 var $ey_1_ph_i=$ey_0_lcssa_i;var $uy_sroa_0_0_ph_i$1=$48$1;var $uy_sroa_0_0_ph_i$0=$48$0;label=17;break;
 case 16: 
 var $$etemp$10$0=-1;
 var $$etemp$10$1=1048575;
 var $50$0=$2$0&$$etemp$10$0;
 var $50$1=$2$1&$$etemp$10$1;
 var $$etemp$11$0=0;
 var $$etemp$11$1=1048576;
 var $51$0=$50$0|$$etemp$11$0;
 var $51$1=$50$1|$$etemp$11$1;
 var $ey_1_ph_i=$6;var $uy_sroa_0_0_ph_i$1=$51$1;var $uy_sroa_0_0_ph_i$0=$51$0;label=17;break;
 case 17: 
 var $uy_sroa_0_0_ph_i$0;
 var $uy_sroa_0_0_ph_i$1;
 var $ey_1_ph_i;
 var $52=($ex_1_i|0)>($ey_1_ph_i|0);
 var $53$0=_i64Subtract($uxi_0_i$0,$uxi_0_i$1,$uy_sroa_0_0_ph_i$0,$uy_sroa_0_0_ph_i$1);var $53$1=tempRet0;
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $54=(($53$1|0) > ($$etemp$12$1|0)) | (((($53$1|0) == ($$etemp$12$1|0) & ($53$0>>>0) >  ($$etemp$12$0>>>0))));
 if($52){var $ex_212_i=$ex_1_i;var $uxi_113_i$1=$uxi_0_i$1;var $uxi_113_i$0=$uxi_0_i$0;var $56$1=$53$1;var $56$0=$53$0;var $55=$54;label=18;break;}else{var $ex_2_lcssa_i=$ex_1_i;var $uxi_1_lcssa_i$1=$uxi_0_i$1;var $uxi_1_lcssa_i$0=$uxi_0_i$0;var $_lcssa_i$1=$53$1;var $_lcssa_i$0=$53$0;var $_lcssa10_i=$54;label=22;break;}
 case 18: 
 var $55;
 var $56$0;
 var $56$1;
 var $uxi_113_i$0;
 var $uxi_113_i$1;
 var $ex_212_i;
 if($55){label=19;break;}else{var $uxi_2_i$1=$uxi_113_i$1;var $uxi_2_i$0=$uxi_113_i$0;label=21;break;}
 case 19: 
 var $58=(($uxi_113_i$0|0) == ($uy_sroa_0_0_ph_i$0|0)) & (($uxi_113_i$1|0) == ($uy_sroa_0_0_ph_i$1|0));
 if($58){label=20;break;}else{var $uxi_2_i$1=$56$1;var $uxi_2_i$0=$56$0;label=21;break;}
 case 20: 
 var $60=($x)*(0);
 var $_0_i=$60;label=31;break;
 case 21: 
 var $uxi_2_i$0;
 var $uxi_2_i$1;
 var $62$0=($uxi_2_i$0<<1)|(0>>>31);
 var $62$1=($uxi_2_i$1<<1)|($uxi_2_i$0>>>31);
 var $63=((($ex_212_i)-(1))|0);
 var $64=($63|0)>($ey_1_ph_i|0);
 var $65$0=_i64Subtract($62$0,$62$1,$uy_sroa_0_0_ph_i$0,$uy_sroa_0_0_ph_i$1);var $65$1=tempRet0;
 var $$etemp$13$0=-1;
 var $$etemp$13$1=-1;
 var $66=(($65$1|0) > ($$etemp$13$1|0)) | (((($65$1|0) == ($$etemp$13$1|0) & ($65$0>>>0) >  ($$etemp$13$0>>>0))));
 if($64){var $ex_212_i=$63;var $uxi_113_i$1=$62$1;var $uxi_113_i$0=$62$0;var $56$1=$65$1;var $56$0=$65$0;var $55=$66;label=18;break;}else{var $ex_2_lcssa_i=$63;var $uxi_1_lcssa_i$1=$62$1;var $uxi_1_lcssa_i$0=$62$0;var $_lcssa_i$1=$65$1;var $_lcssa_i$0=$65$0;var $_lcssa10_i=$66;label=22;break;}
 case 22: 
 var $_lcssa10_i;
 var $_lcssa_i$0;
 var $_lcssa_i$1;
 var $uxi_1_lcssa_i$0;
 var $uxi_1_lcssa_i$1;
 var $ex_2_lcssa_i;
 if($_lcssa10_i){label=23;break;}else{var $uxi_3_ph_i$1=$uxi_1_lcssa_i$1;var $uxi_3_ph_i$0=$uxi_1_lcssa_i$0;label=24;break;}
 case 23: 
 var $68=(($uxi_1_lcssa_i$0|0) == ($uy_sroa_0_0_ph_i$0|0)) & (($uxi_1_lcssa_i$1|0) == ($uy_sroa_0_0_ph_i$1|0));
 if($68){label=25;break;}else{var $uxi_3_ph_i$1=$_lcssa_i$1;var $uxi_3_ph_i$0=$_lcssa_i$0;label=24;break;}
 case 24: 
 var $uxi_3_ph_i$0;
 var $uxi_3_ph_i$1;
 var $$etemp$14$0=0;
 var $$etemp$14$1=1048576;
 var $69=(($uxi_3_ph_i$1>>>0) < ($$etemp$14$1>>>0)) | (((($uxi_3_ph_i$1>>>0) == ($$etemp$14$1>>>0) & ($uxi_3_ph_i$0>>>0) <  ($$etemp$14$0>>>0))));
 if($69){var $ex_33_i=$ex_2_lcssa_i;var $uxi_34_i$1=$uxi_3_ph_i$1;var $uxi_34_i$0=$uxi_3_ph_i$0;label=26;break;}else{var $ex_3_lcssa_i=$ex_2_lcssa_i;var $uxi_3_lcssa_i$1=$uxi_3_ph_i$1;var $uxi_3_lcssa_i$0=$uxi_3_ph_i$0;label=27;break;}
 case 25: 
 var $71=($x)*(0);
 var $_0_i=$71;label=31;break;
 case 26: 
 var $uxi_34_i$0;
 var $uxi_34_i$1;
 var $ex_33_i;
 var $72$0=($uxi_34_i$0<<1)|(0>>>31);
 var $72$1=($uxi_34_i$1<<1)|($uxi_34_i$0>>>31);
 var $73=((($ex_33_i)-(1))|0);
 var $$etemp$15$0=0;
 var $$etemp$15$1=1048576;
 var $74=(($72$1>>>0) < ($$etemp$15$1>>>0)) | (((($72$1>>>0) == ($$etemp$15$1>>>0) & ($72$0>>>0) <  ($$etemp$15$0>>>0))));
 if($74){var $ex_33_i=$73;var $uxi_34_i$1=$72$1;var $uxi_34_i$0=$72$0;label=26;break;}else{var $ex_3_lcssa_i=$73;var $uxi_3_lcssa_i$1=$72$1;var $uxi_3_lcssa_i$0=$72$0;label=27;break;}
 case 27: 
 var $uxi_3_lcssa_i$0;
 var $uxi_3_lcssa_i$1;
 var $ex_3_lcssa_i;
 var $75=($ex_3_lcssa_i|0)>0;
 if($75){label=28;break;}else{label=29;break;}
 case 28: 
 var $$etemp$16$0=0;
 var $$etemp$16$1=-1048576;
 var $77$0=_i64Add($uxi_3_lcssa_i$0,$uxi_3_lcssa_i$1,$$etemp$16$0,$$etemp$16$1);var $77$1=tempRet0;
 var $78$0=$ex_3_lcssa_i;
 var $78$1=0;
 var $79$0=(0<<20)|(0>>>12);
 var $79$1=($78$0<<20)|(0>>>12);
 var $80$0=$77$0|$79$0;
 var $80$1=$77$1|$79$1;
 var $uxi_4_i$1=$80$1;var $uxi_4_i$0=$80$0;label=30;break;
 case 29: 
 var $82=(((1)-($ex_3_lcssa_i))|0);
 var $83$0=$82;
 var $83$1=0;
 var $84$0=_bitshift64Lshr($uxi_3_lcssa_i$0,$uxi_3_lcssa_i$1,$83$0);var $84$1=tempRet0;
 var $uxi_4_i$1=$84$1;var $uxi_4_i$0=$84$0;label=30;break;
 case 30: 
 var $uxi_4_i$0;
 var $uxi_4_i$1;
 var $86$0=$uxi_4_i$0|$7$0;
 var $86$1=$uxi_4_i$1|$7$1;
 var $87=(HEAP32[((tempDoublePtr)>>2)]=$86$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$86$1, HEAPF64[(tempDoublePtr)>>3]);
 var $_0_i=$87;label=31;break;
 case 31: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function _frexp($x,$e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAPF64[(tempDoublePtr)>>3]=$x; var $1$0=HEAP32[((tempDoublePtr)>>2)];var $1$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $2$0=($1$1>>>20)|(0<<12);
 var $2$1=(0>>>20)|(0<<12);
 var $_tr$0=$2$0;
 var $_tr=$_tr$0;
 var $3=$_tr&2047;
 if(($3|0)==0){ label=2;break;}else if(($3|0)==2047){ var $_0=$x;label=6;break;}else{label=5;break;}
 case 2: 
 var $5=$x!=0;
 if($5){label=3;break;}else{var $_01=$x;var $storemerge=0;label=4;break;}
 case 3: 
 var $7=($x)*(18446744073709552000);
 var $8=_frexp($7,$e);
 var $9=HEAP32[(($e)>>2)];
 var $10=((($9)-(64))|0);
 var $_01=$8;var $storemerge=$10;label=4;break;
 case 4: 
 var $storemerge;
 var $_01;
 HEAP32[(($e)>>2)]=$storemerge;
 var $_0=$_01;label=6;break;
 case 5: 
 var $13=((($3)-(1022))|0);
 HEAP32[(($e)>>2)]=$13;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-2146435073;
 var $14$0=$1$0&$$etemp$0$0;
 var $14$1=$1$1&$$etemp$0$1;
 var $$etemp$1$0=0;
 var $$etemp$1$1=1071644672;
 var $15$0=$14$0|$$etemp$1$0;
 var $15$1=$14$1|$$etemp$1$1;
 var $16=(HEAP32[((tempDoublePtr)>>2)]=$15$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$15$1, HEAPF64[(tempDoublePtr)>>3]);
 var $_0=$16;label=6;break;
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[(($s)>>0)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[(($s)>>0)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[(($12)>>0)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=$wc&-8192;
 var $19=($18|0)==57344;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[(($s)>>0)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[(($24)>>0)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[(($29)>>0)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[(($s)>>0)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[(($40)>>0)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[(($45)>>0)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[(($50)>>0)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($f+74)|0);
 var $6=HEAP8[(($5)>>0)];
 var $7=((($6)-(1))&255);
 var $8=$7|$6;
 HEAP8[(($5)>>0)]=$8;
 var $9=(($f+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($f+44)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($10>>>0)>($12>>>0);
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($f+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($f,0,0);
 label=4;break;
 case 4: 
 var $19=(($f+16)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($f+28)|0);
 HEAP32[(($20)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 var $21=(($f)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&20;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 var $26=$22&4;
 var $27=($26|0)==0;
 if($27){var $_0=-1;label=10;break;}else{label=6;break;}
 case 6: 
 var $29=$22|32;
 HEAP32[(($21)>>2)]=$29;
 var $_0=-1;label=10;break;
 case 7: 
 var $30=HEAP32[(($11)>>2)];
 HEAP32[(($1)>>2)]=$30;
 var $31=(($f+4)|0);
 HEAP32[(($31)>>2)]=$30;
 label=8;break;
 case 8: 
 var $33=(($f+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($f,$c,1);
 var $36=($35|0)==1;
 if($36){label=9;break;}else{var $_0=-1;label=10;break;}
 case 9: 
 var $38=HEAP8[(($c)>>0)];
 var $39=($38&255);
 var $_0=$39;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___fwritex($s,$l,$f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $_phi_trans_insert=(($f+20)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $25=$2;var $24=$_pre;label=6;break;
 case 3: 
 var $5=(($f+74)|0);
 var $6=HEAP8[(($5)>>0)];
 var $7=((($6)-(1))&255);
 var $8=$7|$6;
 HEAP8[(($5)>>0)]=$8;
 var $9=(($f)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&8;
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=$10|32;
 HEAP32[(($9)>>2)]=$13;
 label=14;break;
 case 5: 
 var $14=(($f+8)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=(($f+4)|0);
 HEAP32[(($15)>>2)]=0;
 var $16=(($f+44)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($f+28)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($f+20)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=(($f+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($17+$21)|0);
 HEAP32[(($1)>>2)]=$22;
 var $25=$22;var $24=$17;label=6;break;
 case 6: 
 var $24;
 var $25;
 var $26=(($f+20)|0);
 var $27=$25;
 var $28=$24;
 var $29=((($27)-($28))|0);
 var $30=($29>>>0)<($l>>>0);
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 var $32=(($f+36)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=FUNCTION_TABLE[$33]($f,$s,$l);
 label=14;break;
 case 8: 
 var $36=(($f+75)|0);
 var $37=HEAP8[(($36)>>0)];
 var $38=(($37<<24)>>24)>-1;
 if($38){var $i_0=$l;label=9;break;}else{var $_01=$l;var $_02=$s;var $53=$24;label=13;break;}
 case 9: 
 var $i_0;
 var $39=($i_0|0)==0;
 if($39){var $_01=$l;var $_02=$s;var $53=$24;label=13;break;}else{label=10;break;}
 case 10: 
 var $41=((($i_0)-(1))|0);
 var $42=(($s+$41)|0);
 var $43=HEAP8[(($42)>>0)];
 var $44=(($43<<24)>>24)==10;
 if($44){label=11;break;}else{var $i_0=$41;label=9;break;}
 case 11: 
 var $46=(($f+36)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=FUNCTION_TABLE[$47]($f,$s,$i_0);
 var $49=($48>>>0)<($i_0>>>0);
 if($49){label=14;break;}else{label=12;break;}
 case 12: 
 var $51=(($s+$i_0)|0);
 var $52=((($l)-($i_0))|0);
 var $_pre5=HEAP32[(($26)>>2)];
 var $_01=$52;var $_02=$51;var $53=$_pre5;label=13;break;
 case 13: 
 var $53;
 var $_02;
 var $_01;
 assert($_01 % 1 === 0);(_memcpy($53, $_02, $_01)|0);
 var $54=HEAP32[(($26)>>2)];
 var $55=(($54+$_01)|0);
 HEAP32[(($26)>>2)]=$55;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _snprintf($s,$n,$fmt,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $ap=sp;
 var $1=(($ap)|0);
 var $2=$ap;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_vsnprintf($s,$n,$fmt,$1);

 STACKTOP=sp;return $3;
}


function _vsnprintf($s,$n,$fmt,$ap){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ap2_i=sp;
 var $nl_type_i=(sp)+(16);
 var $nl_arg_i=(sp)+(56);
 var $internal_buf_i=(sp)+(136);
 var $b=(sp)+(216);
 var $f=(sp)+(224);
 var $1=$f;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 assert(112 % 1 === 0);(_memcpy($1, 24, 112)|0);
 var $2=((($n)-(1))|0);
 var $3=($2>>>0)>2147483646;
 if($3){label=2;break;}else{var $9=$s;var $_02=$n;label=4;break;}
 case 2: 
 var $5=($n|0)==0;
 if($5){var $9=$b;var $_02=1;label=4;break;}else{label=3;break;}
 case 3: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=75;
 var $_0=-1;label=13;break;
 case 4: 
 var $_02;
 var $9;
 var $10=$9;
 var $11=(((-2)-($10))|0);
 var $12=($_02>>>0)>($11>>>0);
 var $__02=($12?$11:$_02);
 var $13=(($f+48)|0);
 HEAP32[(($13)>>2)]=$__02;
 var $14=(($f+20)|0);
 HEAP32[(($14)>>2)]=$9;
 var $15=(($f+44)|0);
 HEAP32[(($15)>>2)]=$9;
 var $16=(($9+$__02)|0);
 var $17=(($f+16)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($f+28)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$ap2_i;
 var $$etemp$1$0=16;
 var $$etemp$1$1=0;

 var $20=$nl_type_i;
 var $$etemp$2$0=40;
 var $$etemp$2$1=0;

 _memset($20, 0, 40)|0;
 var $21=$nl_arg_i;
 var $$etemp$3$0=80;
 var $$etemp$3$1=0;

 var $22=(($internal_buf_i)|0);
 var $$etemp$4$0=80;
 var $$etemp$4$1=0;

 var $23=$ap;
 _llvm_va_copy($19,$23);
 var $24=(($nl_arg_i)|0);
 var $25=(($nl_type_i)|0);
 var $26=_printf_core(0,$fmt,$ap2_i,$24,$25);
 var $27=($26|0)<0;
 if($27){label=5;break;}else{label=6;break;}
 case 5: 

 var $_0_i=-1;label=11;break;
 case 6: 
 var $30=($__02|0)==0;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=_printf_core($f,$fmt,$ap2_i,$24,$25);
 var $ret_1_i=$31;label=10;break;
 case 8: 
 HEAP32[(($15)>>2)]=$22;
 HEAP32[(($18)>>2)]=$22;
 HEAP32[(($14)>>2)]=$22;
 HEAP32[(($13)>>2)]=80;
 var $33=(($internal_buf_i+80)|0);
 HEAP32[(($17)>>2)]=$33;
 var $34=_printf_core($f,$fmt,$ap2_i,$24,$25);
 var $35=($9|0)==0;
 if($35){var $ret_1_i=$34;label=10;break;}else{label=9;break;}
 case 9: 
 var $37=(($f+36)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=FUNCTION_TABLE[$38]($f,0,0);
 var $40=HEAP32[(($14)>>2)];
 var $41=($40|0)==0;
 var $__i=($41?-1:$34);
 HEAP32[(($15)>>2)]=$9;
 HEAP32[(($13)>>2)]=0;
 HEAP32[(($17)>>2)]=0;
 HEAP32[(($18)>>2)]=0;
 HEAP32[(($14)>>2)]=0;
 var $ret_1_i=$__i;label=10;break;
 case 10: 
 var $ret_1_i;

 var $_0_i=$ret_1_i;label=11;break;
 case 11: 
 var $_0_i;
 var $$etemp$5$0=80;
 var $$etemp$5$1=0;

 var $$etemp$6$0=80;
 var $$etemp$6$1=0;

 var $$etemp$7$0=40;
 var $$etemp$7$1=0;

 var $$etemp$8$0=16;
 var $$etemp$8$1=0;

 var $43=($__02|0)==0;
 if($43){var $_0=$_0_i;label=13;break;}else{label=12;break;}
 case 12: 
 var $45=HEAP32[(($14)>>2)];
 var $46=HEAP32[(($17)>>2)];
 var $47=($45|0)==($46|0);
 var $48=(($47<<31)>>31);
 var $49=(($45+$48)|0);
 HEAP8[(($49)>>0)]=0;
 var $_0=$_0_i;label=13;break;
 case 13: 
 var $_0;
 var $$etemp$9$0=112;
 var $$etemp$9$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i_i=sp;
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 108)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 var $6=(($f_i_i+104)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=$s;
 var $8=$7^-1;
 var $9=(($f_i_i+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=(($f_i_i+100)|0);
 HEAP32[(($10)>>2)]=-1;
 var $11=___floatscan($f_i_i,2,1);
 var $12=HEAP32[(($9)>>2)];
 var $13=HEAP32[(($2)>>2)];
 var $14=HEAP32[(($3)>>2)];
 var $15=$13;
 var $16=$14;
 var $17=((($15)-($16))|0);
 var $18=((($17)+($12))|0);
 var $19=($p|0)==0;
 if($19){label=5;break;}else{label=2;break;}
 case 2: 
 var $21=($18|0)==0;
 if($21){var $25=$s;label=4;break;}else{label=3;break;}
 case 3: 
 var $23=(($s+$18)|0);
 var $25=$23;label=4;break;
 case 4: 
 var $25;
 HEAP32[(($p)>>2)]=$25;
 label=5;break;
 case 5: 
 var $$etemp$1$0=112;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $11;
  default: assert(0, "bad label: " + label);
 }

}


function _strtoull($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 var $2=(($f_i)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($f_i+4)|0);
 HEAP32[(($3)>>2)]=$s;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=($s|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($f_i+8)|0);
 HEAP32[(($7)>>2)]=-1;
 var $12=-1;label=4;break;
 case 3: 
 var $9=(($s+2147483647)|0);
 var $10=(($f_i+8)|0);
 HEAP32[(($10)>>2)]=$9;
 var $12=$9;label=4;break;
 case 4: 
 var $12;
 var $13=(($f_i+76)|0);
 HEAP32[(($13)>>2)]=-1;
 var $14=(($f_i+104)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$12;
 var $16=$s;
 var $17=((($15)-($16))|0);
 var $18=(($f_i+108)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($f_i+100)|0);
 HEAP32[(($19)>>2)]=$12;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $20$0=___intscan($f_i,$base,1,$$etemp$1$0,$$etemp$1$1);
 var $20$1=tempRet0;
 var $21=($p|0)==0;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($f_i+8)|0);
 var $24=HEAP32[(($18)>>2)];
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($23)>>2)];
 var $27=$25;
 var $28=$26;
 var $29=((($27)+($24))|0);
 var $30=((($29)-($28))|0);
 var $31=(($s+$30)|0);
 HEAP32[(($p)>>2)]=$31;
 label=6;break;
 case 6: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 STACKTOP=sp;return (tempRet0=$20$1,$20$0);
  default: assert(0, "bad label: " + label);
 }

}


function _strtoll($s,$p,$base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $f_i=sp;
 var $1=$f_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 var $2=(($f_i)|0);
 HEAP32[(($2)>>2)]=0;
 var $3=(($f_i+4)|0);
 HEAP32[(($3)>>2)]=$s;
 var $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=($s|0)<0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($f_i+8)|0);
 HEAP32[(($7)>>2)]=-1;
 var $12=-1;label=4;break;
 case 3: 
 var $9=(($s+2147483647)|0);
 var $10=(($f_i+8)|0);
 HEAP32[(($10)>>2)]=$9;
 var $12=$9;label=4;break;
 case 4: 
 var $12;
 var $13=(($f_i+76)|0);
 HEAP32[(($13)>>2)]=-1;
 var $14=(($f_i+104)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$12;
 var $16=$s;
 var $17=((($15)-($16))|0);
 var $18=(($f_i+108)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=(($f_i+100)|0);
 HEAP32[(($19)>>2)]=$12;
 var $$etemp$1$0=0;
 var $$etemp$1$1=-2147483648;
 var $20$0=___intscan($f_i,$base,1,$$etemp$1$0,$$etemp$1$1);
 var $20$1=tempRet0;
 var $21=($p|0)==0;
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($f_i+8)|0);
 var $24=HEAP32[(($18)>>2)];
 var $25=HEAP32[(($3)>>2)];
 var $26=HEAP32[(($23)>>2)];
 var $27=$25;
 var $28=$26;
 var $29=((($27)+($24))|0);
 var $30=((($29)-($28))|0);
 var $31=(($s+$30)|0);
 HEAP32[(($p)>>2)]=$31;
 label=6;break;
 case 6: 
 var $$etemp$2$0=112;
 var $$etemp$2$1=0;

 STACKTOP=sp;return (tempRet0=$20$1,$20$0);
  default: assert(0, "bad label: " + label);
 }

}


function _sn_write($f,$s,$l){
 var label=0;


 var $1=(($f+16)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+20)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=($7>>>0)>($l>>>0);
 var $l_=($8?$l:$7);
 assert($l_ % 1 === 0);(_memcpy($4, $s, $l_)|0);
 var $9=HEAP32[(($3)>>2)];
 var $10=(($9+$l_)|0);
 HEAP32[(($3)>>2)]=$10;
 return $l;
}


function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((14344)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((14348)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((14368+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((14328)>>2)];
 var $49=$48&$47;
 HEAP32[((14328)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre65=(($32+8)|0);
 var $_pre_phi66=$_pre65;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi66=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi66;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi66)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((14632+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((14332)>>2)];
 var $119=$118&$117;
 HEAP32[((14332)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((14344)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((14344)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=($145>>>0)<($136>>>0);
 if($146){label=45;break;}else{label=44;break;}
 case 44: 
 var $148=(($R_1+16)|0);
 HEAP32[(($148)>>2)]=$142;
 var $149=(($142+24)|0);
 HEAP32[(($149)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $152=(($1+$_sum32)|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==0;
 if($155){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $157=$154;
 var $158=HEAP32[((14344)>>2)];
 var $159=($157>>>0)<($158>>>0);
 if($159){label=49;break;}else{label=48;break;}
 case 48: 
 var $161=(($R_1+20)|0);
 HEAP32[(($161)>>2)]=$154;
 var $162=(($154+24)|0);
 HEAP32[(($162)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $166=(($1+$_sum)|0);
 var $167=$166;
 var $168=HEAP32[(($167)>>2)];
 var $169=$168&3;
 var $170=($169|0)==3;
 if($170){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((14336)>>2)]=$17;
 var $172=$168&-2;
 HEAP32[(($167)>>2)]=$172;
 var $173=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $174=(($1+$_sum24)|0);
 var $175=$174;
 HEAP32[(($175)>>2)]=$173;
 var $176=$2;
 HEAP32[(($176)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $179=HEAP32[((14344)>>2)];
 var $180=($2>>>0)<($179>>>0);
 if($180){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $182=(($1+$_sum1)|0);
 var $183=$182;
 var $184=HEAP32[(($183)>>2)];
 var $185=$184&2;
 var $186=($185|0)==0;
 if($186){label=56;break;}else{label=109;break;}
 case 56: 
 var $188=HEAP32[((14352)>>2)];
 var $189=($3|0)==($188|0);
 if($189){label=57;break;}else{label=59;break;}
 case 57: 
 var $191=HEAP32[((14340)>>2)];
 var $192=((($191)+($_02))|0);
 HEAP32[((14340)>>2)]=$192;
 HEAP32[((14352)>>2)]=$_0;
 var $193=$192|1;
 var $194=(($_0+4)|0);
 HEAP32[(($194)>>2)]=$193;
 var $195=HEAP32[((14348)>>2)];
 var $196=($_0|0)==($195|0);
 if($196){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((14348)>>2)]=0;
 HEAP32[((14336)>>2)]=0;
 label=134;break;
 case 59: 
 var $199=HEAP32[((14348)>>2)];
 var $200=($3|0)==($199|0);
 if($200){label=60;break;}else{label=61;break;}
 case 60: 
 var $202=HEAP32[((14336)>>2)];
 var $203=((($202)+($_02))|0);
 HEAP32[((14336)>>2)]=$203;
 HEAP32[((14348)>>2)]=$_0;
 var $204=$203|1;
 var $205=(($_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=$_0;
 var $207=(($206+$203)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=$203;
 label=134;break;
 case 61: 
 var $210=$184&-8;
 var $211=((($210)+($_02))|0);
 var $212=$184>>>3;
 var $213=($184>>>0)<256;
 if($213){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $215=(($1+$_sum20)|0);
 var $216=$215;
 var $217=HEAP32[(($216)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $218=(($1+$_sum21)|0);
 var $219=$218;
 var $220=HEAP32[(($219)>>2)];
 var $221=$212<<1;
 var $222=((14368+($221<<2))|0);
 var $223=$222;
 var $224=($217|0)==($223|0);
 if($224){label=65;break;}else{label=63;break;}
 case 63: 
 var $226=$217;
 var $227=($226>>>0)<($179>>>0);
 if($227){label=73;break;}else{label=64;break;}
 case 64: 
 var $229=(($217+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)==($3|0);
 if($231){label=65;break;}else{label=73;break;}
 case 65: 
 var $232=($220|0)==($217|0);
 if($232){label=66;break;}else{label=67;break;}
 case 66: 
 var $234=1<<$212;
 var $235=$234^-1;
 var $236=HEAP32[((14328)>>2)];
 var $237=$236&$235;
 HEAP32[((14328)>>2)]=$237;
 label=107;break;
 case 67: 
 var $239=($220|0)==($223|0);
 if($239){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre63=(($220+8)|0);
 var $_pre_phi64=$_pre63;label=71;break;
 case 69: 
 var $241=$220;
 var $242=($241>>>0)<($179>>>0);
 if($242){label=72;break;}else{label=70;break;}
 case 70: 
 var $244=(($220+8)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($245|0)==($3|0);
 if($246){var $_pre_phi64=$244;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi64;
 var $247=(($217+12)|0);
 HEAP32[(($247)>>2)]=$220;
 HEAP32[(($_pre_phi64)>>2)]=$217;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $249=$2;
 var $_sum2=((($psize)+(24))|0);
 var $250=(($1+$_sum2)|0);
 var $251=$250;
 var $252=HEAP32[(($251)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $253=(($1+$_sum3)|0);
 var $254=$253;
 var $255=HEAP32[(($254)>>2)];
 var $256=($255|0)==($249|0);
 if($256){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $258=(($1+$_sum18)|0);
 var $259=$258;
 var $260=HEAP32[(($259)>>2)];
 var $261=$260;
 var $262=($261>>>0)<($179>>>0);
 if($262){label=79;break;}else{label=76;break;}
 case 76: 
 var $264=(($260+12)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==($249|0);
 if($266){label=77;break;}else{label=79;break;}
 case 77: 
 var $268=(($255+8)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=($269|0)==($249|0);
 if($270){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($264)>>2)]=$255;
 HEAP32[(($268)>>2)]=$260;
 var $R7_1=$255;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $273=(($1+$_sum5)|0);
 var $274=$273;
 var $275=HEAP32[(($274)>>2)];
 var $276=($275|0)==0;
 if($276){label=81;break;}else{var $R7_0=$275;var $RP9_0=$274;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $278=(($1+$_sum4)|0);
 var $279=$278;
 var $280=HEAP32[(($279)>>2)];
 var $281=($280|0)==0;
 if($281){var $R7_1=0;label=87;break;}else{var $R7_0=$280;var $RP9_0=$279;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $282=(($R7_0+20)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==0;
 if($284){label=83;break;}else{var $R7_0=$283;var $RP9_0=$282;label=82;break;}
 case 83: 
 var $286=(($R7_0+16)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=($287|0)==0;
 if($288){label=84;break;}else{var $R7_0=$287;var $RP9_0=$286;label=82;break;}
 case 84: 
 var $290=$RP9_0;
 var $291=($290>>>0)<($179>>>0);
 if($291){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $295=($252|0)==0;
 if($295){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $297=(($1+$_sum15)|0);
 var $298=$297;
 var $299=HEAP32[(($298)>>2)];
 var $300=((14632+($299<<2))|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($249|0)==($301|0);
 if($302){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($300)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $304=1<<$299;
 var $305=$304^-1;
 var $306=HEAP32[((14332)>>2)];
 var $307=$306&$305;
 HEAP32[((14332)>>2)]=$307;
 label=107;break;
 case 91: 
 var $309=$252;
 var $310=HEAP32[((14344)>>2)];
 var $311=($309>>>0)<($310>>>0);
 if($311){label=95;break;}else{label=92;break;}
 case 92: 
 var $313=(($252+16)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)==($249|0);
 if($315){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($313)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $318=(($252+20)|0);
 HEAP32[(($318)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $321=($R7_1|0)==0;
 if($321){label=107;break;}else{label=97;break;}
 case 97: 
 var $323=$R7_1;
 var $324=HEAP32[((14344)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=106;break;}else{label=98;break;}
 case 98: 
 var $327=(($R7_1+24)|0);
 HEAP32[(($327)>>2)]=$252;
 var $_sum16=((($psize)+(16))|0);
 var $328=(($1+$_sum16)|0);
 var $329=$328;
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==0;
 if($331){label=102;break;}else{label=99;break;}
 case 99: 
 var $333=$330;
 var $334=($333>>>0)<($324>>>0);
 if($334){label=101;break;}else{label=100;break;}
 case 100: 
 var $336=(($R7_1+16)|0);
 HEAP32[(($336)>>2)]=$330;
 var $337=(($330+24)|0);
 HEAP32[(($337)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $340=(($1+$_sum17)|0);
 var $341=$340;
 var $342=HEAP32[(($341)>>2)];
 var $343=($342|0)==0;
 if($343){label=107;break;}else{label=103;break;}
 case 103: 
 var $345=$342;
 var $346=HEAP32[((14344)>>2)];
 var $347=($345>>>0)<($346>>>0);
 if($347){label=105;break;}else{label=104;break;}
 case 104: 
 var $349=(($R7_1+20)|0);
 HEAP32[(($349)>>2)]=$342;
 var $350=(($342+24)|0);
 HEAP32[(($350)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $354=$211|1;
 var $355=(($_0+4)|0);
 HEAP32[(($355)>>2)]=$354;
 var $356=$_0;
 var $357=(($356+$211)|0);
 var $358=$357;
 HEAP32[(($358)>>2)]=$211;
 var $359=HEAP32[((14348)>>2)];
 var $360=($_0|0)==($359|0);
 if($360){label=108;break;}else{var $_1=$211;label=110;break;}
 case 108: 
 HEAP32[((14336)>>2)]=$211;
 label=134;break;
 case 109: 
 var $363=$184&-2;
 HEAP32[(($183)>>2)]=$363;
 var $364=$_02|1;
 var $365=(($_0+4)|0);
 HEAP32[(($365)>>2)]=$364;
 var $366=$_0;
 var $367=(($366+$_02)|0);
 var $368=$367;
 HEAP32[(($368)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $370=$_1>>>3;
 var $371=($_1>>>0)<256;
 if($371){label=111;break;}else{label=116;break;}
 case 111: 
 var $373=$370<<1;
 var $374=((14368+($373<<2))|0);
 var $375=$374;
 var $376=HEAP32[((14328)>>2)];
 var $377=1<<$370;
 var $378=$376&$377;
 var $379=($378|0)==0;
 if($379){label=112;break;}else{label=113;break;}
 case 112: 
 var $381=$376|$377;
 HEAP32[((14328)>>2)]=$381;
 var $_sum13_pre=((($373)+(2))|0);
 var $_pre=((14368+($_sum13_pre<<2))|0);
 var $F16_0=$375;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($373)+(2))|0);
 var $383=((14368+($_sum14<<2))|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=$384;
 var $386=HEAP32[((14344)>>2)];
 var $387=($385>>>0)<($386>>>0);
 if($387){label=114;break;}else{var $F16_0=$384;var $_pre_phi=$383;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $390=(($F16_0+12)|0);
 HEAP32[(($390)>>2)]=$_0;
 var $391=(($_0+8)|0);
 HEAP32[(($391)>>2)]=$F16_0;
 var $392=(($_0+12)|0);
 HEAP32[(($392)>>2)]=$375;
 label=134;break;
 case 116: 
 var $394=$_0;
 var $395=$_1>>>8;
 var $396=($395|0)==0;
 if($396){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $398=($_1>>>0)>16777215;
 if($398){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $400=((($395)+(1048320))|0);
 var $401=$400>>>16;
 var $402=$401&8;
 var $403=$395<<$402;
 var $404=((($403)+(520192))|0);
 var $405=$404>>>16;
 var $406=$405&4;
 var $407=$406|$402;
 var $408=$403<<$406;
 var $409=((($408)+(245760))|0);
 var $410=$409>>>16;
 var $411=$410&2;
 var $412=$407|$411;
 var $413=(((14)-($412))|0);
 var $414=$408<<$411;
 var $415=$414>>>15;
 var $416=((($413)+($415))|0);
 var $417=$416<<1;
 var $418=((($416)+(7))|0);
 var $419=$_1>>>($418>>>0);
 var $420=$419&1;
 var $421=$420|$417;
 var $I19_0=$421;label=119;break;
 case 119: 
 var $I19_0;
 var $423=((14632+($I19_0<<2))|0);
 var $424=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($424)>>2)]=$I19_0_c;
 var $425=(($_0+20)|0);
 HEAP32[(($425)>>2)]=0;
 var $426=(($_0+16)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=HEAP32[((14332)>>2)];
 var $428=1<<$I19_0;
 var $429=$427&$428;
 var $430=($429|0)==0;
 if($430){label=120;break;}else{label=121;break;}
 case 120: 
 var $432=$427|$428;
 HEAP32[((14332)>>2)]=$432;
 HEAP32[(($423)>>2)]=$394;
 var $433=(($_0+24)|0);
 var $_c=$423;
 HEAP32[(($433)>>2)]=$_c;
 var $434=(($_0+12)|0);
 HEAP32[(($434)>>2)]=$_0;
 var $435=(($_0+8)|0);
 HEAP32[(($435)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $437=HEAP32[(($423)>>2)];
 var $438=($I19_0|0)==31;
 if($438){var $443=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $440=$I19_0>>>1;
 var $441=(((25)-($440))|0);
 var $443=$441;label=123;break;
 case 123: 
 var $443;
 var $444=(($437+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=($446|0)==($_1|0);
 if($447){var $T_0_lcssa=$437;label=130;break;}else{label=124;break;}
 case 124: 
 var $448=$_1<<$443;
 var $T_056=$437;var $K20_057=$448;label=126;break;
 case 125: 
 var $450=$K20_057<<1;
 var $451=(($458+4)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=$452&-8;
 var $454=($453|0)==($_1|0);
 if($454){var $T_0_lcssa=$458;label=130;break;}else{var $T_056=$458;var $K20_057=$450;label=126;break;}
 case 126: 
 var $K20_057;
 var $T_056;
 var $456=$K20_057>>>31;
 var $457=(($T_056+16+($456<<2))|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=($458|0)==0;
 if($459){label=127;break;}else{label=125;break;}
 case 127: 
 var $461=$457;
 var $462=HEAP32[((14344)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($457)>>2)]=$394;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_056;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $469=(($T_0_lcssa+8)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=$T_0_lcssa;
 var $472=HEAP32[((14344)>>2)];
 var $473=($471>>>0)>=($472>>>0);
 var $474=$470;
 var $475=($474>>>0)>=($472>>>0);
 var $or_cond=$473&$475;
 if($or_cond){label=131;break;}else{label=132;break;}
 case 131: 
 var $477=(($470+12)|0);
 HEAP32[(($477)>>2)]=$394;
 HEAP32[(($469)>>2)]=$394;
 var $478=(($_0+8)|0);
 var $_c9=$470;
 HEAP32[(($478)>>2)]=$_c9;
 var $479=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($479)>>2)]=$T_0_c;
 var $480=(($_0+24)|0);
 HEAP32[(($480)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _scanexp($f,$pok){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[(($2)>>0)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=HEAP32[(($1)>>2)];
 var $16=($14&1);
 var $17=HEAP32[(($3)>>2)];
 var $18=($15>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($15+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[(($15)>>0)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)>9;
 var $29=($pok|0)!=0;
 var $or_cond3=$28&$29;
 if($or_cond3){label=9;break;}else{var $neg_0=$16;var $c_0=$26;label=11;break;}
 case 9: 
 var $31=HEAP32[(($3)>>2)];
 var $32=($31|0)==0;
 if($32){var $neg_0=$16;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $34=HEAP32[(($1)>>2)];
 var $35=((($34)-(1))|0);
 HEAP32[(($1)>>2)]=$35;
 var $neg_0=$16;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $37=((($c_0)-(48))|0);
 var $38=($37>>>0)>9;
 if($38){label=12;break;}else{var $c_116=$c_0;var $x_017=0;label=14;break;}
 case 12: 
 var $40=HEAP32[(($3)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0$1=-2147483648;var $_0$0=0;label=31;break;}else{label=13;break;}
 case 13: 
 var $43=HEAP32[(($1)>>2)];
 var $44=((($43)-(1))|0);
 HEAP32[(($1)>>2)]=$44;
 var $_0$1=-2147483648;var $_0$0=0;label=31;break;
 case 14: 
 var $x_017;
 var $c_116;
 var $45=((($x_017)*(10))&-1);
 var $46=((($c_116)-(48))|0);
 var $47=((($46)+($45))|0);
 var $48=HEAP32[(($1)>>2)];
 var $49=HEAP32[(($3)>>2)];
 var $50=($48>>>0)<($49>>>0);
 if($50){label=15;break;}else{label=16;break;}
 case 15: 
 var $52=(($48+1)|0);
 HEAP32[(($1)>>2)]=$52;
 var $53=HEAP8[(($48)>>0)];
 var $54=($53&255);
 var $c_1_be=$54;label=17;break;
 case 16: 
 var $56=___shgetc($f);
 var $c_1_be=$56;label=17;break;
 case 17: 
 var $c_1_be;
 var $57=((($c_1_be)-(48))|0);
 var $58=($57>>>0)<10;
 var $59=($47|0)<214748364;
 var $or_cond5=$58&$59;
 if($or_cond5){var $c_116=$c_1_be;var $x_017=$47;label=14;break;}else{label=18;break;}
 case 18: 
 var $phitmp$0=$47;
 var $phitmp$1=((((($47|0)<0))|0)?-1:0);
 if($58){var $c_29=$c_1_be;var $y_010$1=$phitmp$1;var $y_010$0=$phitmp$0;label=20;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=19;break;}
 case 19: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $61=((($c_2_lcssa)-(48))|0);
 var $62=($61>>>0)<10;
 if($62){label=24;break;}else{label=28;break;}
 case 20: 
 var $y_010$0;
 var $y_010$1;
 var $c_29;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $63$0=___muldi3($y_010$0,$y_010$1,$$etemp$0$0,$$etemp$0$1);var $63$1=tempRet0;
 var $64$0=$c_29;
 var $64$1=((((($c_29|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $65$0=_i64Add($64$0,$64$1,$$etemp$1$0,$$etemp$1$1);var $65$1=tempRet0;
 var $66$0=_i64Add($65$0,$65$1,$63$0,$63$1);var $66$1=tempRet0;
 var $67=HEAP32[(($1)>>2)];
 var $68=HEAP32[(($3)>>2)];
 var $69=($67>>>0)<($68>>>0);
 if($69){label=21;break;}else{label=22;break;}
 case 21: 
 var $71=(($67+1)|0);
 HEAP32[(($1)>>2)]=$71;
 var $72=HEAP8[(($67)>>0)];
 var $73=($72&255);
 var $c_2_be=$73;label=23;break;
 case 22: 
 var $75=___shgetc($f);
 var $c_2_be=$75;label=23;break;
 case 23: 
 var $c_2_be;
 var $76=((($c_2_be)-(48))|0);
 var $77=($76>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $78=(($66$1|0) < ($$etemp$2$1|0)) | (((($66$1|0) == ($$etemp$2$1|0) & ($66$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond7=$77&$78;
 if($or_cond7){var $c_29=$c_2_be;var $y_010$1=$66$1;var $y_010$0=$66$0;label=20;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$66$1;var $y_0_lcssa$0=$66$0;label=19;break;}
 case 24: 
 var $79=HEAP32[(($1)>>2)];
 var $80=HEAP32[(($3)>>2)];
 var $81=($79>>>0)<($80>>>0);
 if($81){label=25;break;}else{label=26;break;}
 case 25: 
 var $83=(($79+1)|0);
 HEAP32[(($1)>>2)]=$83;
 var $84=HEAP8[(($79)>>0)];
 var $85=($84&255);
 var $c_3_be=$85;label=27;break;
 case 26: 
 var $87=___shgetc($f);
 var $c_3_be=$87;label=27;break;
 case 27: 
 var $c_3_be;
 var $88=((($c_3_be)-(48))|0);
 var $89=($88>>>0)<10;
 if($89){label=24;break;}else{label=28;break;}
 case 28: 
 var $90=HEAP32[(($3)>>2)];
 var $91=($90|0)==0;
 if($91){label=30;break;}else{label=29;break;}
 case 29: 
 var $93=HEAP32[(($1)>>2)];
 var $94=((($93)-(1))|0);
 HEAP32[(($1)>>2)]=$94;
 label=30;break;
 case 30: 
 var $96=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $97$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $97$1=tempRet0;
 var $98$0=($96?$97$0:$y_0_lcssa$0);
 var $98$1=($96?$97$1:$y_0_lcssa$1);
 var $_0$1=$98$1;var $_0$0=$98$0;label=31;break;
 case 31: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $big_i=sp;
 var $e2_i=(sp)+(504);
 var $buf_i=(sp)+(512);
 var $1=$buf_i;
 var $ebuf0_i=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $pad_i=STACKTOP;STACKTOP = (STACKTOP + 256)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $buf=STACKTOP;STACKTOP = (STACKTOP + 40)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $wc=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $mb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=(($buf)|0);
 var $$etemp$0$0=40;
 var $$etemp$0$1=0;

 var $3=($f|0)!=0;
 var $4=(($ap)|0);
 var $5=(($buf+40)|0);
 var $6=(($pad_i)|0);
 var $7=$5;
 var $8=(($buf+39)|0);
 var $9=(($wc)|0);
 var $10=(($wc+4)|0);
 var $11=$wc;
 var $12=(($mb)|0);
 var $13=$e2_i;
 var $14=(($buf_i)|0);
 var $15=(($ebuf0_i)|0);
 var $16=$big_i;
 var $17=(($ebuf0_i+12)|0);
 var $18=(($ebuf0_i+11)|0);
 var $19=$17;
 var $20=((($19)-($1))|0);
 var $21=(((-2)-($1))|0);
 var $22=((($19)+(2))|0);
 var $23=(($big_i)|0);
 var $24=(($big_i+288)|0);
 var $25=(($buf_i+9)|0);
 var $26=$25;
 var $27=(($buf_i+8)|0);
 var $l_0=0;var $cnt_0=0;var $l10n_0=0;var $29=0;var $28=0;var $fmt83=$fmt;label=2;break;
 case 2: 
 var $fmt83;
 var $28;
 var $29;
 var $l10n_0;
 var $cnt_0;
 var $l_0;
 var $30=($cnt_0|0)>-1;
 if($30){label=3;break;}else{var $cnt_1=$cnt_0;label=6;break;}
 case 3: 
 var $32=(((2147483647)-($cnt_0))|0);
 var $33=($l_0|0)>($32|0);
 if($33){label=4;break;}else{label=5;break;}
 case 4: 
 var $35=___errno_location();
 HEAP32[(($35)>>2)]=75;
 var $cnt_1=-1;label=6;break;
 case 5: 
 var $37=((($l_0)+($cnt_0))|0);
 var $cnt_1=$37;label=6;break;
 case 6: 
 var $cnt_1;
 var $39=HEAP8[(($fmt83)>>0)];
 var $40=(($39<<24)>>24)==0;
 if($40){label=365;break;}else{var $fmt82=$fmt83;var $41=$39;label=7;break;}
 case 7: 
 var $41;
 var $fmt82;
 if((($41<<24)>>24)==0){ var $fmt81_lcssa=$fmt82;var $z_0_lcssa=$fmt82;label=11;break;}else if((($41<<24)>>24)==37){ var $fmt81102=$fmt82;var $z_0103=$fmt82;label=9;break;}else{label=8;break;}
 case 8: 
 var $43=(($fmt82+1)|0);
 var $_pre=HEAP8[(($43)>>0)];
 var $fmt82=$43;var $41=$_pre;label=7;break;
 case 9: 
 var $z_0103;
 var $fmt81102;
 var $44=(($fmt81102+1)|0);
 var $45=HEAP8[(($44)>>0)];
 var $46=(($45<<24)>>24)==37;
 if($46){label=10;break;}else{var $fmt81_lcssa=$fmt81102;var $z_0_lcssa=$z_0103;label=11;break;}
 case 10: 
 var $48=(($z_0103+1)|0);
 var $49=(($fmt81102+2)|0);
 var $50=HEAP8[(($49)>>0)];
 var $51=(($50<<24)>>24)==37;
 if($51){var $fmt81102=$49;var $z_0103=$48;label=9;break;}else{var $fmt81_lcssa=$49;var $z_0_lcssa=$48;label=11;break;}
 case 11: 
 var $z_0_lcssa;
 var $fmt81_lcssa;
 var $52=$z_0_lcssa;
 var $53=$fmt83;
 var $54=((($52)-($53))|0);
 if($3){label=12;break;}else{label=13;break;}
 case 12: 
 ___fwritex($fmt83,$54,$f);
 label=13;break;
 case 13: 
 var $57=($z_0_lcssa|0)==($fmt83|0);
 if($57){label=14;break;}else{var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_0;var $29=$29;var $28=$28;var $fmt83=$fmt81_lcssa;label=2;break;}
 case 14: 
 var $59=(($fmt81_lcssa+1)|0);
 var $60=HEAP8[(($59)>>0)];
 var $61=(($60<<24)>>24);
 var $isdigittmp=((($61)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){label=15;break;}else{var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$59;var $69=$60;label=17;break;}
 case 15: 
 var $63=(($fmt81_lcssa+2)|0);
 var $64=HEAP8[(($63)>>0)];
 var $65=(($64<<24)>>24)==36;
 if($65){label=16;break;}else{var $argpos_0=-1;var $l10n_1=$l10n_0;var $storemerge=$59;var $69=$60;label=17;break;}
 case 16: 
 var $67=(($fmt81_lcssa+3)|0);
 var $_pre260=HEAP8[(($67)>>0)];
 var $argpos_0=$isdigittmp;var $l10n_1=1;var $storemerge=$67;var $69=$_pre260;label=17;break;
 case 17: 
 var $69;
 var $storemerge;
 var $l10n_1;
 var $argpos_0;
 var $70=(($69<<24)>>24);
 var $71=$70&-32;
 var $72=($71|0)==32;
 if($72){var $storemerge2117=$storemerge;var $fl_0118=0;var $73=$70;var $_pr=$69;label=18;break;}else{var $85=$69;var $storemerge2111=$storemerge;var $fl_0113=0;label=20;break;}
 case 18: 
 var $_pr;
 var $73;
 var $fl_0118;
 var $storemerge2117;
 var $74=((($73)-(32))|0);
 var $75=1<<$74;
 var $76=$75&75913;
 var $77=($76|0)==0;
 if($77){var $85=$_pr;var $storemerge2111=$storemerge2117;var $fl_0113=$fl_0118;label=20;break;}else{label=19;break;}
 case 19: 
 var $79=$75|$fl_0118;
 var $80=(($storemerge2117+1)|0);
 var $81=HEAP8[(($80)>>0)];
 var $82=(($81<<24)>>24);
 var $83=$82&-32;
 var $84=($83|0)==32;
 if($84){var $storemerge2117=$80;var $fl_0118=$79;var $73=$82;var $_pr=$81;label=18;break;}else{var $85=$81;var $storemerge2111=$80;var $fl_0113=$79;label=20;break;}
 case 20: 
 var $fl_0113;
 var $storemerge2111;
 var $85;
 var $86=(($85<<24)>>24)==42;
 if($86){label=21;break;}else{label=29;break;}
 case 21: 
 var $88=(($storemerge2111+1)|0);
 var $89=HEAP8[(($88)>>0)];
 var $90=(($89<<24)>>24);
 var $isdigittmp5=((($90)-(48))|0);
 var $isdigit6=($isdigittmp5>>>0)<10;
 if($isdigit6){label=22;break;}else{label=24;break;}
 case 22: 
 var $92=(($storemerge2111+2)|0);
 var $93=HEAP8[(($92)>>0)];
 var $94=(($93<<24)>>24)==36;
 if($94){label=23;break;}else{label=24;break;}
 case 23: 
 var $96=(($nl_type+($isdigittmp5<<2))|0);
 HEAP32[(($96)>>2)]=10;
 var $97=HEAP8[(($88)>>0)];
 var $98=(($97<<24)>>24);
 var $99=((($98)-(48))|0);
 var $100=(($nl_arg+($99<<3))|0);
 var $ld$1$0=(($100)|0);
 var $101$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($100+4)|0);
 var $101$1=HEAP32[(($ld$2$1)>>2)];
 var $101$$SHADOW=HEAPF64[(($100)>>3)];
 var $102$0=$101$0;
 var $102=$102$0;
 var $103=(($storemerge2111+3)|0);
 var $w_0=$102;var $l10n_2=1;var $storemerge7=$103;label=27;break;
 case 24: 
 var $105=($l10n_1|0)==0;
 if($105){label=25;break;}else{var $_0=-1;label=384;break;}
 case 25: 
 if($3){label=26;break;}else{var $w_1=0;var $fl_1=$fl_0113;var $l10n_3=0;var $fmt84=$88;label=32;break;}
 case 26: 
 var $108=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $w_0=$108;var $l10n_2=0;var $storemerge7=$88;label=27;break;
 case 27: 
 var $storemerge7;
 var $l10n_2;
 var $w_0;
 var $110=($w_0|0)<0;
 if($110){label=28;break;}else{var $w_1=$w_0;var $fl_1=$fl_0113;var $l10n_3=$l10n_2;var $fmt84=$storemerge7;label=32;break;}
 case 28: 
 var $112=$fl_0113|8192;
 var $113=(((-$w_0))|0);
 var $w_1=$113;var $fl_1=$112;var $l10n_3=$l10n_2;var $fmt84=$storemerge7;label=32;break;
 case 29: 
 var $115=(($85<<24)>>24);
 var $isdigittmp1_i=((($115)-(48))|0);
 var $isdigit2_i=($isdigittmp1_i>>>0)<10;
 if($isdigit2_i){var $i_03_i=0;var $117=$storemerge2111;var $116=$115;label=30;break;}else{var $w_1=0;var $fl_1=$fl_0113;var $l10n_3=$l10n_1;var $fmt84=$storemerge2111;label=32;break;}
 case 30: 
 var $116;
 var $117;
 var $i_03_i;
 var $118=((($i_03_i)*(10))&-1);
 var $119=((($116)-(48))|0);
 var $120=((($119)+($118))|0);
 var $121=(($117+1)|0);
 var $122=HEAP8[(($121)>>0)];
 var $123=(($122<<24)>>24);
 var $isdigittmp_i=((($123)-(48))|0);
 var $isdigit_i=($isdigittmp_i>>>0)<10;
 if($isdigit_i){var $i_03_i=$120;var $117=$121;var $116=$123;label=30;break;}else{label=31;break;}
 case 31: 
 var $124=($120|0)<0;
 if($124){var $_0=-1;label=384;break;}else{var $w_1=$120;var $fl_1=$fl_0113;var $l10n_3=$l10n_1;var $fmt84=$121;label=32;break;}
 case 32: 
 var $fmt84;
 var $l10n_3;
 var $fl_1;
 var $w_1;
 var $125=HEAP8[(($fmt84)>>0)];
 var $126=(($125<<24)>>24)==46;
 if($126){label=33;break;}else{var $p_0=-1;var $fmt87=$fmt84;label=42;break;}
 case 33: 
 var $128=(($fmt84+1)|0);
 var $129=HEAP8[(($128)>>0)];
 var $130=(($129<<24)>>24)==42;
 if($130){label=34;break;}else{label=40;break;}
 case 34: 
 var $132=(($fmt84+2)|0);
 var $133=HEAP8[(($132)>>0)];
 var $134=(($133<<24)>>24);
 var $isdigittmp3=((($134)-(48))|0);
 var $isdigit4=($isdigittmp3>>>0)<10;
 if($isdigit4){label=35;break;}else{label=37;break;}
 case 35: 
 var $136=(($fmt84+3)|0);
 var $137=HEAP8[(($136)>>0)];
 var $138=(($137<<24)>>24)==36;
 if($138){label=36;break;}else{label=37;break;}
 case 36: 
 var $140=(($nl_type+($isdigittmp3<<2))|0);
 HEAP32[(($140)>>2)]=10;
 var $141=HEAP8[(($132)>>0)];
 var $142=(($141<<24)>>24);
 var $143=((($142)-(48))|0);
 var $144=(($nl_arg+($143<<3))|0);
 var $ld$3$0=(($144)|0);
 var $145$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($144+4)|0);
 var $145$1=HEAP32[(($ld$4$1)>>2)];
 var $145$$SHADOW=HEAPF64[(($144)>>3)];
 var $146$0=$145$0;
 var $146=$146$0;
 var $147=(($fmt84+4)|0);
 var $p_0=$146;var $fmt87=$147;label=42;break;
 case 37: 
 var $149=($l10n_3|0)==0;
 if($149){label=38;break;}else{var $_0=-1;label=384;break;}
 case 38: 
 if($3){label=39;break;}else{var $p_0=0;var $fmt87=$132;label=42;break;}
 case 39: 
 var $152=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $p_0=$152;var $fmt87=$132;label=42;break;
 case 40: 
 var $154=(($129<<24)>>24);
 var $isdigittmp1_i22=((($154)-(48))|0);
 var $isdigit2_i23=($isdigittmp1_i22>>>0)<10;
 if($isdigit2_i23){var $i_03_i24=0;var $156=$128;var $155=$154;label=41;break;}else{var $p_0=0;var $fmt87=$128;label=42;break;}
 case 41: 
 var $155;
 var $156;
 var $i_03_i24;
 var $157=((($i_03_i24)*(10))&-1);
 var $158=((($155)-(48))|0);
 var $159=((($158)+($157))|0);
 var $160=(($156+1)|0);
 var $161=HEAP8[(($160)>>0)];
 var $162=(($161<<24)>>24);
 var $isdigittmp_i25=((($162)-(48))|0);
 var $isdigit_i26=($isdigittmp_i25>>>0)<10;
 if($isdigit_i26){var $i_03_i24=$159;var $156=$160;var $155=$162;label=41;break;}else{var $p_0=$159;var $fmt87=$160;label=42;break;}
 case 42: 
 var $fmt87;
 var $p_0;
 var $st_0=0;var $fmt86=$fmt87;label=43;break;
 case 43: 
 var $fmt86;
 var $st_0;
 var $164=HEAP8[(($fmt86)>>0)];
 var $165=(($164<<24)>>24);
 var $166=((($165)-(65))|0);
 var $167=($166>>>0)>57;
 if($167){var $_0=-1;label=384;break;}else{label=44;break;}
 case 44: 
 var $169=(($fmt86+1)|0);
 var $170=((400+((($st_0)*(58))&-1)+$166)|0);
 var $171=HEAP8[(($170)>>0)];
 var $172=($171&255);
 var $173=((($172)-(1))|0);
 var $174=($173>>>0)<8;
 if($174){var $st_0=$172;var $fmt86=$169;label=43;break;}else{label=45;break;}
 case 45: 
 var $176=(($171<<24)>>24)==0;
 if($176){var $_0=-1;label=384;break;}else{label=46;break;}
 case 46: 
 var $178=(($171<<24)>>24)==19;
 var $179=($argpos_0|0)>-1;
 if($178){label=47;break;}else{label=48;break;}
 case 47: 
 if($179){var $_0=-1;label=384;break;}else{var $238=$29;var $237=$28;label=63;break;}
 case 48: 
 if($179){label=49;break;}else{label=50;break;}
 case 49: 
 var $183=(($nl_type+($argpos_0<<2))|0);
 HEAP32[(($183)>>2)]=$172;
 var $184=(($nl_arg+($argpos_0<<3))|0);
 var $ld$5$0=(($184)|0);
 var $185$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($184+4)|0);
 var $185$1=HEAP32[(($ld$6$1)>>2)];
 var $185$$SHADOW=HEAPF64[(($184)>>3)];
 var $186$0=$185$0;
 var $186=$186$0;
 var $187$0=$185$1;
 var $187$1=0;
 var $188$0=$187$0;
 var $188=$188$0;
 var $238=$188;var $237=$186;label=63;break;
 case 50: 
 if($3){label=51;break;}else{var $_0=0;label=384;break;}
 case 51: 
 var $191=($171&255)>20;
 if($191){var $243=$28;var $242=$29;var $241=$164;label=65;break;}else{label=52;break;}
 case 52: 
 switch(($172|0)){case 9:{ label=53;break;}case 10:{ label=54;break;}case 11:{ label=55;break;}case 12:{ label=56;break;}case 13:{ label=57;break;}case 14:{ label=58;break;}case 15:{ label=59;break;}case 16:{ label=60;break;}case 17:{ label=61;break;}case 18:{ label=62;break;}default:{var $240=$28;var $239=$29;label=64;break;}}break;
 case 53: 
 var $194=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $195=$194;
 var $240=$195;var $239=$29;label=64;break;
 case 54: 
 var $197=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $198$0=$197;
 var $198$1=((((($197|0)<0))|0)?-1:0);
 var $199$0=$198$1;
 var $199$1=0;
 var $200$0=$199$0;
 var $200=$200$0;
 var $240=$197;var $239=$200;label=64;break;
 case 55: 
 var $202=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $240=$202;var $239=0;label=64;break;
 case 56: 
 var $204$0=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $204$1=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $205$0=$204$0;
 var $205=$205$0;
 var $206$0=$204$1;
 var $206$1=0;
 var $207$0=$206$0;
 var $207=$207$0;
 var $240=$205;var $239=$207;label=64;break;
 case 57: 
 var $209=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $210=(($209)&65535);
 var $211$0=(($210<<16)>>16);
 var $211$1=(((((($210<<16)>>16)<0))|0)?-1:0);
 var $212=(($210<<16)>>16);
 var $213$0=$211$1;
 var $213$1=0;
 var $214$0=$213$0;
 var $214=$214$0;
 var $240=$212;var $239=$214;label=64;break;
 case 58: 
 var $216=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask1_i31=$216&65535;
 var $240=$_mask1_i31;var $239=0;label=64;break;
 case 59: 
 var $218=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $219=(($218)&255);
 var $220$0=(($219<<24)>>24);
 var $220$1=(((((($219<<24)>>24)<0))|0)?-1:0);
 var $221=(($219<<24)>>24);
 var $222$0=$220$1;
 var $222$1=0;
 var $223$0=$222$0;
 var $223=$223$0;
 var $240=$221;var $239=$223;label=64;break;
 case 60: 
 var $225=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask_i32=$225&255;
 var $240=$_mask_i32;var $239=0;label=64;break;
 case 61: 
 var $227=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$227; var $228$0=HEAP32[((tempDoublePtr)>>2)];var $228$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $229$0=$228$0;
 var $229=$229$0;
 var $230$0=$228$1;
 var $230$1=0;
 var $231$0=$230$0;
 var $231=$231$0;
 var $240=$229;var $239=$231;label=64;break;
 case 62: 
 var $232=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 HEAPF64[(tempDoublePtr)>>3]=$232; var $233$0=HEAP32[((tempDoublePtr)>>2)];var $233$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $234$0=$233$0;
 var $234=$234$0;
 var $235$0=$233$1;
 var $235$1=0;
 var $236$0=$235$0;
 var $236=$236$0;
 var $240=$234;var $239=$236;label=64;break;
 case 63: 
 var $237;
 var $238;
 if($3){var $240=$237;var $239=$238;label=64;break;}else{var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$238;var $28=$237;var $fmt83=$169;label=2;break;}
 case 64: 
 var $239;
 var $240;
 var $_pre261=HEAP8[(($fmt86)>>0)];
 var $243=$240;var $242=$239;var $241=$_pre261;label=65;break;
 case 65: 
 var $241;
 var $242;
 var $243;
 var $244=(($241<<24)>>24);
 var $245=($st_0|0)!=0;
 var $246=$244&15;
 var $247=($246|0)==3;
 var $or_cond9=$245&$247;
 var $248=$244&-33;
 var $t_0=($or_cond9?$248:$244);
 var $249=$fl_1&8192;
 var $250=($249|0)==0;
 var $251=$fl_1&-65537;
 var $fl_1_=($250?$fl_1:$251);
 switch(($t_0|0)){case 67:{ label=110;break;}case 83:{ label=111;break;}case 101:case 102:case 103:case 97:case 69:case 70:case 71:case 65:{ label=132;break;}case 110:{ label=66;break;}case 112:{ label=74;break;}case 120:case 88:{ var $t_1=$t_0;var $p_1=$p_0;var $fl_3=$fl_1_;label=75;break;}case 111:{ label=79;break;}case 100:case 105:{ label=82;break;}case 117:{ var $pl_0=0;var $prefix_0=2008;var $330=$242;var $329=$243;label=86;break;}case 99:{ label=93;break;}case 109:{ label=94;break;}case 115:{ label=95;break;}default:{var $pl_2=0;var $prefix_2=2008;var $p_5=$p_0;var $fl_6=$fl_1_;var $z_2=$5;var $a_2=$fmt83;var $1132=$242;var $1131=$243;label=345;break;}}break;
 case 66: 
 switch(($st_0|0)){case 0:{ label=67;break;}case 1:{ label=68;break;}case 2:{ label=69;break;}case 3:{ label=70;break;}case 4:{ label=71;break;}case 6:{ label=72;break;}case 7:{ label=73;break;}default:{var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;}}break;
 case 67: 
 var $254=$243;
 HEAP32[(($254)>>2)]=$cnt_1;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 68: 
 var $256=$243;
 HEAP32[(($256)>>2)]=$cnt_1;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 69: 
 var $258$0=$cnt_1;
 var $258$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $259=$243;
 var $st$7$0=(($259)|0);
 HEAP32[(($st$7$0)>>2)]=$258$0;
 var $st$8$1=(($259+4)|0);
 HEAP32[(($st$8$1)>>2)]=$258$1;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 70: 
 var $261=(($cnt_1)&65535);
 var $262=$243;
 HEAP16[(($262)>>1)]=$261;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 71: 
 var $264=(($cnt_1)&255);
 var $265=$243;
 HEAP8[(($265)>>0)]=$264;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 72: 
 var $267=$243;
 HEAP32[(($267)>>2)]=$cnt_1;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 73: 
 var $269$0=$cnt_1;
 var $269$1=((((($cnt_1|0)<0))|0)?-1:0);
 var $270=$243;
 var $st$9$0=(($270)|0);
 HEAP32[(($st$9$0)>>2)]=$269$0;
 var $st$10$1=(($270+4)|0);
 HEAP32[(($st$10$1)>>2)]=$269$1;
 var $l_0=$54;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 74: 
 var $272=($p_0>>>0)>8;
 var $273=($272?$p_0:8);
 var $274=$fl_1_|8;
 var $t_1=120;var $p_1=$273;var $fl_3=$274;label=75;break;
 case 75: 
 var $fl_3;
 var $p_1;
 var $t_1;
 var $276$0=$242;
 var $276$1=0;
 var $277$0=0;
 var $277$1=$276$0;
 var $278$0=$243;
 var $278$1=0;
 var $279$0=$277$0|$278$0;
 var $279$1=$277$1|$278$1;
 var $280=$t_1&32;
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $281=(($279$0|0) == ($$etemp$11$0|0)) & (($279$1|0) == ($$etemp$11$1|0));
 if($281){var $pl_1=0;var $prefix_1=2008;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$5;var $351=$242;var $350=$243;label=91;break;}else{var $_012_i=$5;var $_03_i$1=$279$1;var $_03_i$0=$279$0;label=76;break;}
 case 76: 
 var $_03_i$0;
 var $_03_i$1;
 var $_012_i;
 var $_0_tr_i$0=$_03_i$0;
 var $_0_tr_i=$_0_tr_i$0;
 var $282=$_0_tr_i&15;
 var $283=((8+$282)|0);
 var $284=HEAP8[(($283)>>0)];
 var $285=($284&255);
 var $286=$285|$280;
 var $287=(($286)&255);
 var $288=((($_012_i)-(1))|0);
 HEAP8[(($288)>>0)]=$287;
 var $289$0=($_03_i$0>>>4)|($_03_i$1<<28);
 var $289$1=($_03_i$1>>>4)|(0<<28);
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $290=(($289$0|0) == ($$etemp$12$0|0)) & (($289$1|0) == ($$etemp$12$1|0));
 if($290){label=77;break;}else{var $_012_i=$288;var $_03_i$1=$289$1;var $_03_i$0=$289$0;label=76;break;}
 case 77: 
 var $291=$fl_3&8;
 var $292=($291|0)==0;
 if($292){var $pl_1=0;var $prefix_1=2008;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$288;var $351=$242;var $350=$243;label=91;break;}else{label=78;break;}
 case 78: 
 var $294=$t_1>>4;
 var $295=((2008+$294)|0);
 var $pl_1=2;var $prefix_1=$295;var $p_2=$p_1;var $fl_4=$fl_3;var $a_0=$288;var $351=$242;var $350=$243;label=91;break;
 case 79: 
 var $297$0=$242;
 var $297$1=0;
 var $298$0=0;
 var $298$1=$297$0;
 var $299$0=$243;
 var $299$1=0;
 var $300$0=$298$0|$299$0;
 var $300$1=$298$1|$299$1;
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $301=(($300$0|0) == ($$etemp$13$0|0)) & (($300$1|0) == ($$etemp$13$1|0));
 if($301){var $_0_lcssa_i45=$5;label=81;break;}else{var $_012_i43$1=$300$1;var $_012_i43$0=$300$0;var $_03_i42=$5;label=80;break;}
 case 80: 
 var $_03_i42;
 var $_012_i43$0;
 var $_012_i43$1;
 var $$etemp$14$0=7;
 var $$etemp$14$1=0;
 var $302$0=$_012_i43$0&$$etemp$14$0;
 var $302$1=$_012_i43$1&$$etemp$14$1;
 var $$etemp$15$0=48;
 var $$etemp$15$1=0;
 var $303$0=$302$0|$$etemp$15$0;
 var $303$1=$302$1|$$etemp$15$1;
 var $304$0=$303$0;
 var $304=$304$0&255;
 var $305=((($_03_i42)-(1))|0);
 HEAP8[(($305)>>0)]=$304;
 var $306$0=($_012_i43$0>>>3)|($_012_i43$1<<29);
 var $306$1=($_012_i43$1>>>3)|(0<<29);
 var $$etemp$16$0=0;
 var $$etemp$16$1=0;
 var $307=(($306$0|0) == ($$etemp$16$0|0)) & (($306$1|0) == ($$etemp$16$1|0));
 if($307){var $_0_lcssa_i45=$305;label=81;break;}else{var $_012_i43$1=$306$1;var $_012_i43$0=$306$0;var $_03_i42=$305;label=80;break;}
 case 81: 
 var $_0_lcssa_i45;
 var $308=$fl_1_&8;
 var $309=($308|0)==0;
 var $or_cond13=$309|$301;
 var $_19=($or_cond13?2008:2013);
 var $310=($or_cond13&1);
 var $_20=$310^1;
 var $pl_1=$_20;var $prefix_1=$_19;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$_0_lcssa_i45;var $351=$242;var $350=$243;label=91;break;
 case 82: 
 var $312$0=$242;
 var $312$1=0;
 var $313$0=0;
 var $313$1=$312$0;
 var $314$0=$243;
 var $314$1=0;
 var $315$0=$313$0|$314$0;
 var $315$1=$313$1|$314$1;
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $316=(($315$1|0) < ($$etemp$17$1|0)) | (((($315$1|0) == ($$etemp$17$1|0) & ($315$0>>>0) <  ($$etemp$17$0>>>0))));
 if($316){label=83;break;}else{label=84;break;}
 case 83: 
 var $$etemp$18$0=0;
 var $$etemp$18$1=0;
 var $318$0=_i64Subtract($$etemp$18$0,$$etemp$18$1,$315$0,$315$1);var $318$1=tempRet0;
 var $319$0=$318$0;
 var $319=$319$0;
 var $320$0=$318$1;
 var $320$1=0;
 var $321$0=$320$0;
 var $321=$321$0;
 var $pl_0=1;var $prefix_0=2008;var $330=$321;var $329=$319;label=86;break;
 case 84: 
 var $323=$fl_1_&2048;
 var $324=($323|0)==0;
 if($324){label=85;break;}else{var $pl_0=1;var $prefix_0=2009;var $330=$242;var $329=$243;label=86;break;}
 case 85: 
 var $326=$fl_1_&1;
 var $327=($326|0)==0;
 var $_=($327?2008:2010);
 var $pl_0=$326;var $prefix_0=$_;var $330=$242;var $329=$243;label=86;break;
 case 86: 
 var $329;
 var $330;
 var $prefix_0;
 var $pl_0;
 var $331$0=$330;
 var $331$1=0;
 var $332$0=0;
 var $332$1=$331$0;
 var $333$0=$329;
 var $333$1=0;
 var $334$0=$332$0|$333$0;
 var $334$1=$332$1|$333$1;
 var $$etemp$19$0=-1;
 var $$etemp$19$1=0;
 var $335=(($334$1>>>0) > ($$etemp$19$1>>>0)) | (((($334$1>>>0) == ($$etemp$19$1>>>0) & ($334$0>>>0) >  ($$etemp$19$0>>>0))));
 if($335){var $_014_i$1=$334$1;var $_014_i$0=$334$0;var $_05_i=$5;label=87;break;}else{var $_01_lcssa_off0_i=$329;var $_0_lcssa_i47=$5;label=89;break;}
 case 87: 
 var $_05_i;
 var $_014_i$0;
 var $_014_i$1;
 var $$etemp$20$0=10;
 var $$etemp$20$1=0;
 var $336$0=___uremdi3($_014_i$0,$_014_i$1,$$etemp$20$0,$$etemp$20$1);var $336$1=tempRet0;
 var $$etemp$21$0=48;
 var $$etemp$21$1=0;
 var $337$0=$336$0|$$etemp$21$0;
 var $337$1=$336$1|$$etemp$21$1;
 var $338$0=$337$0;
 var $338=$338$0&255;
 var $339=((($_05_i)-(1))|0);
 HEAP8[(($339)>>0)]=$338;
 var $$etemp$22$0=10;
 var $$etemp$22$1=0;
 var $340$0=___udivdi3($_014_i$0,$_014_i$1,$$etemp$22$0,$$etemp$22$1);var $340$1=tempRet0;
 var $$etemp$23$0=-1;
 var $$etemp$23$1=9;
 var $341=(($_014_i$1>>>0) > ($$etemp$23$1>>>0)) | (((($_014_i$1>>>0) == ($$etemp$23$1>>>0) & ($_014_i$0>>>0) >  ($$etemp$23$0>>>0))));
 if($341){var $_014_i$1=$340$1;var $_014_i$0=$340$0;var $_05_i=$339;label=87;break;}else{label=88;break;}
 case 88: 
 var $extract_t_i$0=$340$0;
 var $extract_t_i=$extract_t_i$0;
 var $_01_lcssa_off0_i=$extract_t_i;var $_0_lcssa_i47=$339;label=89;break;
 case 89: 
 var $_0_lcssa_i47;
 var $_01_lcssa_off0_i;
 var $343=($_01_lcssa_off0_i|0)==0;
 if($343){var $pl_1=$pl_0;var $prefix_1=$prefix_0;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$_0_lcssa_i47;var $351=$330;var $350=$329;label=91;break;}else{var $_12_i=$_0_lcssa_i47;var $y_03_i=$_01_lcssa_off0_i;label=90;break;}
 case 90: 
 var $y_03_i;
 var $_12_i;
 var $344=(((($y_03_i>>>0))%(10))&-1);
 var $345=$344|48;
 var $346=(($345)&255);
 var $347=((($_12_i)-(1))|0);
 HEAP8[(($347)>>0)]=$346;
 var $348=(((($y_03_i>>>0))/(10))&-1);
 var $349=($y_03_i>>>0)<10;
 if($349){var $pl_1=$pl_0;var $prefix_1=$prefix_0;var $p_2=$p_0;var $fl_4=$fl_1_;var $a_0=$347;var $351=$330;var $350=$329;label=91;break;}else{var $_12_i=$347;var $y_03_i=$348;label=90;break;}
 case 91: 
 var $350;
 var $351;
 var $a_0;
 var $fl_4;
 var $p_2;
 var $prefix_1;
 var $pl_1;
 var $352=($p_2|0)>-1;
 var $353=$fl_4&-65537;
 var $_fl_4=($352?$353:$fl_4);
 var $354$0=$351;
 var $354$1=0;
 var $355$0=0;
 var $355$1=$354$0;
 var $356$0=$350;
 var $356$1=0;
 var $357$0=$355$0|$356$0;
 var $357$1=$355$1|$356$1;
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $358=(($357$0|0) != ($$etemp$24$0|0)) | (($357$1|0) != ($$etemp$24$1|0));
 var $359=($p_2|0)!=0;
 var $or_cond=$358|$359;
 if($or_cond){label=92;break;}else{var $pl_2=$pl_1;var $prefix_2=$prefix_1;var $p_5=0;var $fl_6=$_fl_4;var $z_2=$5;var $a_2=$5;var $1132=$351;var $1131=$350;label=345;break;}
 case 92: 
 var $361=$a_0;
 var $362=((($7)-($361))|0);
 var $363=($358&1);
 var $364=$363^1;
 var $365=((($364)+($362))|0);
 var $366=($p_2|0)>($365|0);
 var $p_2_=($366?$p_2:$365);
 var $pl_2=$pl_1;var $prefix_2=$prefix_1;var $p_5=$p_2_;var $fl_6=$_fl_4;var $z_2=$5;var $a_2=$a_0;var $1132=$351;var $1131=$350;label=345;break;
 case 93: 
 var $368=(($243)&255);
 HEAP8[(($8)>>0)]=$368;
 var $pl_2=0;var $prefix_2=2008;var $p_5=1;var $fl_6=$251;var $z_2=$5;var $a_2=$8;var $1132=$242;var $1131=$243;label=345;break;
 case 94: 
 var $370=___errno_location();
 var $371=HEAP32[(($370)>>2)];
 var $372=_strerror($371);
 var $a_1=$372;label=96;break;
 case 95: 
 var $374=$243;
 var $375=($243|0)==0;
 var $_15=($375?3888:$374);
 var $a_1=$_15;label=96;break;
 case 96: 
 var $a_1;
 var $377=$a_1;
 var $378=$377&3;
 var $379=($378|0)!=0;
 var $380=($p_0|0)!=0;
 var $or_cond11_i=$379&$380;
 if($or_cond11_i){var $_012_i1=$p_0;var $s_013_i=$a_1;label=97;break;}else{var $_0_lcssa_i3=$p_0;var $s_0_lcssa_i=$a_1;var $_lcssa_i=$380;label=99;break;}
 case 97: 
 var $s_013_i;
 var $_012_i1;
 var $381=HEAP8[(($s_013_i)>>0)];
 var $382=(($381<<24)>>24)==0;
 if($382){var $s_2_i=$s_013_i;var $_3_i6=$_012_i1;label=107;break;}else{label=98;break;}
 case 98: 
 var $384=(($s_013_i+1)|0);
 var $385=((($_012_i1)-(1))|0);
 var $386=$384;
 var $387=$386&3;
 var $388=($387|0)!=0;
 var $389=($385|0)!=0;
 var $or_cond_i2=$388&$389;
 if($or_cond_i2){var $_012_i1=$385;var $s_013_i=$384;label=97;break;}else{var $_0_lcssa_i3=$385;var $s_0_lcssa_i=$384;var $_lcssa_i=$389;label=99;break;}
 case 99: 
 var $_lcssa_i;
 var $s_0_lcssa_i;
 var $_0_lcssa_i3;
 if($_lcssa_i){label=100;break;}else{var $s_2_i=$s_0_lcssa_i;var $_3_i6=0;label=107;break;}
 case 100: 
 var $_pre19=HEAP8[(($s_0_lcssa_i)>>0)];
 var $phitmp=(($_pre19<<24)>>24)==0;
 if($phitmp){var $s_2_i=$s_0_lcssa_i;var $_3_i6=$_0_lcssa_i3;label=107;break;}else{label=101;break;}
 case 101: 
 var $391=$s_0_lcssa_i;
 var $392=($_0_lcssa_i3>>>0)>3;
 if($392){var $_15_i=$_0_lcssa_i3;var $w_06_i=$391;label=102;break;}else{var $_1_lcssa_i=$_0_lcssa_i3;var $w_0_lcssa_i=$391;label=104;break;}
 case 102: 
 var $w_06_i;
 var $_15_i;
 var $393=HEAP32[(($w_06_i)>>2)];
 var $394=((($393)-(16843009))|0);
 var $395=$393&-2139062144;
 var $396=$395^-2139062144;
 var $397=$396&$394;
 var $398=($397|0)==0;
 if($398){label=103;break;}else{var $_1_lcssa_i=$_15_i;var $w_0_lcssa_i=$w_06_i;label=104;break;}
 case 103: 
 var $400=(($w_06_i+4)|0);
 var $401=((($_15_i)-(4))|0);
 var $402=($401>>>0)>3;
 if($402){var $_15_i=$401;var $w_06_i=$400;label=102;break;}else{var $_1_lcssa_i=$401;var $w_0_lcssa_i=$400;label=104;break;}
 case 104: 
 var $w_0_lcssa_i;
 var $_1_lcssa_i;
 var $403=$w_0_lcssa_i;
 var $404=($_1_lcssa_i|0)==0;
 if($404){var $s_2_i=$403;var $_3_i6=0;label=107;break;}else{var $_22_i=$_1_lcssa_i;var $s_13_i=$403;label=105;break;}
 case 105: 
 var $s_13_i;
 var $_22_i;
 var $405=HEAP8[(($s_13_i)>>0)];
 var $406=(($405<<24)>>24)==0;
 if($406){var $s_2_i=$s_13_i;var $_3_i6=$_22_i;label=107;break;}else{label=106;break;}
 case 106: 
 var $408=(($s_13_i+1)|0);
 var $409=((($_22_i)-(1))|0);
 var $410=($409|0)==0;
 if($410){var $s_2_i=$408;var $_3_i6=0;label=107;break;}else{var $_22_i=$409;var $s_13_i=$408;label=105;break;}
 case 107: 
 var $_3_i6;
 var $s_2_i;
 var $411=($_3_i6|0)!=0;
 var $412=($411?$s_2_i:0);
 var $413=($412|0)==0;
 if($413){label=108;break;}else{label=109;break;}
 case 108: 
 var $415=(($a_1+$p_0)|0);
 var $pl_2=0;var $prefix_2=2008;var $p_5=$p_0;var $fl_6=$251;var $z_2=$415;var $a_2=$a_1;var $1132=$242;var $1131=$243;label=345;break;
 case 109: 
 var $417=$412;
 var $418=((($417)-($377))|0);
 var $pl_2=0;var $prefix_2=2008;var $p_5=$418;var $fl_6=$251;var $z_2=$412;var $a_2=$a_1;var $1132=$242;var $1131=$243;label=345;break;
 case 110: 
 HEAP32[(($9)>>2)]=$243;
 HEAP32[(($10)>>2)]=0;
 var $423=$11;var $p_4266=-1;var $422=$9;label=112;break;
 case 111: 
 var $420=$243;
 var $421=($p_0|0)==0;
 if($421){var $438=$420;var $437=$243;var $i_0_lcssa267=0;label=117;break;}else{var $423=$243;var $p_4266=$p_0;var $422=$420;label=112;break;}
 case 112: 
 var $422;
 var $p_4266;
 var $423;
 var $l_1165=0;var $i_0166=0;var $ws_0167=$422;label=113;break;
 case 113: 
 var $ws_0167;
 var $i_0166;
 var $l_1165;
 var $425=HEAP32[(($ws_0167)>>2)];
 var $426=($425|0)==0;
 if($426){var $l_2=$l_1165;var $i_0_lcssa=$i_0166;label=116;break;}else{label=114;break;}
 case 114: 
 var $428=_wcrtomb($12,$425);
 var $429=($428|0)<0;
 var $430=((($p_4266)-($i_0166))|0);
 var $431=($428>>>0)>($430>>>0);
 var $or_cond17=$429|$431;
 if($or_cond17){var $l_2=$428;var $i_0_lcssa=$i_0166;label=116;break;}else{label=115;break;}
 case 115: 
 var $433=(($ws_0167+4)|0);
 var $434=((($428)+($i_0166))|0);
 var $435=($p_4266>>>0)>($434>>>0);
 if($435){var $l_1165=$428;var $i_0166=$434;var $ws_0167=$433;label=113;break;}else{var $l_2=$428;var $i_0_lcssa=$434;label=116;break;}
 case 116: 
 var $i_0_lcssa;
 var $l_2;
 var $436=($l_2|0)<0;
 if($436){var $_0=-1;label=384;break;}else{var $438=$422;var $437=$423;var $i_0_lcssa267=$i_0_lcssa;label=117;break;}
 case 117: 
 var $i_0_lcssa267;
 var $437;
 var $438;
 var $$etemp$25$0=256;
 var $$etemp$25$1=0;

 var $439=$fl_1_&73728;
 var $440=($439|0)==0;
 var $441=($w_1|0)>($i_0_lcssa267|0);
 var $or_cond_i58=$440&$441;
 if($or_cond_i58){label=118;break;}else{label=122;break;}
 case 118: 
 var $443=((($w_1)-($i_0_lcssa267))|0);
 var $444=($443>>>0)>256;
 var $445=($444?256:$443);
 _memset($6, 32, $445)|0;
 var $446=($443>>>0)>255;
 if($446){var $_01_i60=$443;label=119;break;}else{var $_0_lcssa_i62=$443;label=121;break;}
 case 119: 
 var $_01_i60;
 ___fwritex($6,256,$f);
 var $447=((($_01_i60)-(256))|0);
 var $448=($447>>>0)>255;
 if($448){var $_01_i60=$447;label=119;break;}else{label=120;break;}
 case 120: 
 var $449=$443&255;
 var $_0_lcssa_i62=$449;label=121;break;
 case 121: 
 var $_0_lcssa_i62;
 ___fwritex($6,$_0_lcssa_i62,$f);
 label=122;break;
 case 122: 
 var $451=($i_0_lcssa267|0)==0;
 if($451){label=126;break;}else{var $i_1174=0;var $ws_1175=$438;label=123;break;}
 case 123: 
 var $ws_1175;
 var $i_1174;
 var $452=HEAP32[(($ws_1175)>>2)];
 var $453=($452|0)==0;
 if($453){label=126;break;}else{label=124;break;}
 case 124: 
 var $455=_wcrtomb($12,$452);
 var $456=((($455)+($i_1174))|0);
 var $457=($456|0)>($i_0_lcssa267|0);
 if($457){label=126;break;}else{label=125;break;}
 case 125: 
 var $458=(($ws_1175+4)|0);
 ___fwritex($12,$455,$f);
 var $459=($456>>>0)<($i_0_lcssa267>>>0);
 if($459){var $i_1174=$456;var $ws_1175=$458;label=123;break;}else{label=126;break;}
 case 126: 
 var $$etemp$26$0=256;
 var $$etemp$26$1=0;

 var $460=($439|0)==8192;
 var $or_cond_i65=$460&$441;
 if($or_cond_i65){label=127;break;}else{label=131;break;}
 case 127: 
 var $462=((($w_1)-($i_0_lcssa267))|0);
 var $463=($462>>>0)>256;
 var $464=($463?256:$462);
 _memset($6, 32, $464)|0;
 var $465=($462>>>0)>255;
 if($465){var $_01_i67=$462;label=128;break;}else{var $_0_lcssa_i69=$462;label=130;break;}
 case 128: 
 var $_01_i67;
 ___fwritex($6,256,$f);
 var $466=((($_01_i67)-(256))|0);
 var $467=($466>>>0)>255;
 if($467){var $_01_i67=$466;label=128;break;}else{label=129;break;}
 case 129: 
 var $468=$462&255;
 var $_0_lcssa_i69=$468;label=130;break;
 case 130: 
 var $_0_lcssa_i69;
 ___fwritex($6,$_0_lcssa_i69,$f);
 label=131;break;
 case 131: 
 var $$etemp$27$0=256;
 var $$etemp$27$1=0;

 var $470=($441?$w_1:$i_0_lcssa267);
 var $l_0=$470;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$437;var $fmt83=$169;label=2;break;
 case 132: 
 var $472$0=$242;
 var $472$1=0;
 var $473$0=0;
 var $473$1=$472$0;
 var $474$0=$243;
 var $474$1=0;
 var $475$0=$473$0|$474$0;
 var $475$1=$473$1|$474$1;
 var $476=(HEAP32[((tempDoublePtr)>>2)]=$475$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$475$1, HEAPF64[(tempDoublePtr)>>3]);
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $$etemp$29$0=22;
 var $$etemp$29$1=0;

 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $$etemp$31$0=504;
 var $$etemp$31$1=0;

 HEAP32[(($e2_i)>>2)]=0;
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $477=(($475$1|0) < ($$etemp$32$1|0)) | (((($475$1|0) == ($$etemp$32$1|0) & ($475$0>>>0) <  ($$etemp$32$0>>>0))));
 if($477){label=133;break;}else{label=134;break;}
 case 133: 
 var $479=((-.0))-($476);
 var $_010_i=$479;var $pl_0_i=1;var $prefix_0_i=3056;label=136;break;
 case 134: 
 var $481=$fl_1_&2048;
 var $482=($481|0)==0;
 if($482){label=135;break;}else{var $_010_i=$476;var $pl_0_i=1;var $prefix_0_i=3059;label=136;break;}
 case 135: 
 var $484=$fl_1_&1;
 var $485=($484|0)==0;
 var $__i=($485?3057:3062);
 var $_010_i=$476;var $pl_0_i=$484;var $prefix_0_i=$__i;label=136;break;
 case 136: 
 var $prefix_0_i;
 var $pl_0_i;
 var $_010_i;
 HEAPF64[(tempDoublePtr)>>3]=$_010_i; var $487$0=HEAP32[((tempDoublePtr)>>2)];var $487$1=HEAP32[(((tempDoublePtr)+(4))>>2)];
 var $$etemp$33$0=0;
 var $$etemp$33$1=2146435072;
 var $488$0=$487$0&$$etemp$33$0;
 var $488$1=$487$1&$$etemp$33$1;
 var $$etemp$34$0=0;
 var $$etemp$34$1=2146435072;
 var $489=(($488$1>>>0) < ($$etemp$34$1>>>0)) | (((($488$1>>>0) == ($$etemp$34$1>>>0) & ($488$0>>>0) <  ($$etemp$34$0>>>0))));
 if($489){label=150;break;}else{label=137;break;}
 case 137: 
 var $491=$t_0&32;
 var $492=($491|0)!=0;
 var $493=($492?2208:2000);
 var $494=isNaN($_010_i)|isNaN(0);
 if($494){label=138;break;}else{var $s1_0_i=$493;var $pl_1_i=$pl_0_i;label=139;break;}
 case 138: 
 var $496=($492?1752:1440);
 var $s1_0_i=$496;var $pl_1_i=0;label=139;break;
 case 139: 
 var $pl_1_i;
 var $s1_0_i;
 var $498=((($pl_1_i)+(3))|0);
 var $$etemp$35$0=256;
 var $$etemp$35$1=0;

 var $499=$fl_1_&8192;
 var $500=($499|0)==0;
 var $501=($w_1|0)>($498|0);
 var $or_cond_i40_i=$500&$501;
 if($or_cond_i40_i){label=140;break;}else{label=144;break;}
 case 140: 
 var $503=((($w_1)-($498))|0);
 var $504=($503>>>0)>256;
 var $505=($504?256:$503);
 _memset($6, 32, $505)|0;
 var $506=($503>>>0)>255;
 if($506){var $_01_i42_i=$503;label=141;break;}else{var $_0_lcssa_i44_i=$503;label=143;break;}
 case 141: 
 var $_01_i42_i;
 ___fwritex($6,256,$f);
 var $507=((($_01_i42_i)-(256))|0);
 var $508=($507>>>0)>255;
 if($508){var $_01_i42_i=$507;label=141;break;}else{label=142;break;}
 case 142: 
 var $509=$503&255;
 var $_0_lcssa_i44_i=$509;label=143;break;
 case 143: 
 var $_0_lcssa_i44_i;
 ___fwritex($6,$_0_lcssa_i44_i,$f);
 label=144;break;
 case 144: 
 var $$etemp$36$0=256;
 var $$etemp$36$1=0;

 ___fwritex($prefix_0_i,$pl_1_i,$f);
 ___fwritex($s1_0_i,3,$f);
 var $$etemp$37$0=256;
 var $$etemp$37$1=0;

 var $511=$fl_1_&73728;
 var $512=($511|0)==8192;
 var $or_cond_i47_i=$512&$501;
 if($or_cond_i47_i){label=145;break;}else{label=149;break;}
 case 145: 
 var $514=((($w_1)-($498))|0);
 var $515=($514>>>0)>256;
 var $516=($515?256:$514);
 _memset($6, 32, $516)|0;
 var $517=($514>>>0)>255;
 if($517){var $_01_i49_i=$514;label=146;break;}else{var $_0_lcssa_i51_i=$514;label=148;break;}
 case 146: 
 var $_01_i49_i;
 ___fwritex($6,256,$f);
 var $518=((($_01_i49_i)-(256))|0);
 var $519=($518>>>0)>255;
 if($519){var $_01_i49_i=$518;label=146;break;}else{label=147;break;}
 case 147: 
 var $520=$514&255;
 var $_0_lcssa_i51_i=$520;label=148;break;
 case 148: 
 var $_0_lcssa_i51_i;
 ___fwritex($6,$_0_lcssa_i51_i,$f);
 label=149;break;
 case 149: 
 var $$etemp$38$0=256;
 var $$etemp$38$1=0;

 var $w__i=($501?$w_1:$498);
 var $l_0=$w__i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 150: 
 var $523=_frexp($_010_i,$e2_i);
 var $524=($523)*(2);
 var $525=$524!=0;
 if($525){label=151;break;}else{label=152;break;}
 case 151: 
 var $527=HEAP32[(($e2_i)>>2)];
 var $528=((($527)-(1))|0);
 HEAP32[(($e2_i)>>2)]=$528;
 label=152;break;
 case 152: 
 var $530=$t_0|32;
 var $531=($530|0)==97;
 if($531){label=153;break;}else{label=201;break;}
 case 153: 
 var $533=$t_0&32;
 var $534=($533|0)==0;
 var $535=(($prefix_0_i+9)|0);
 var $prefix_0__i=($534?$prefix_0_i:$535);
 var $536=$pl_0_i|2;
 var $537=($p_0>>>0)>11;
 var $538=(((12)-($p_0))|0);
 var $re_0_i=($537?0:$538);
 var $539=($re_0_i|0)==0;
 if($539){var $_1_i=$524;label=158;break;}else{var $round_0162_i=8;var $re_1163_i=$re_0_i;label=154;break;}
 case 154: 
 var $re_1163_i;
 var $round_0162_i;
 var $540=((($re_1163_i)-(1))|0);
 var $541=($round_0162_i)*(16);
 var $542=($540|0)==0;
 if($542){label=155;break;}else{var $round_0162_i=$541;var $re_1163_i=$540;label=154;break;}
 case 155: 
 var $543=HEAP8[(($prefix_0__i)>>0)];
 var $544=(($543<<24)>>24)==45;
 if($544){label=156;break;}else{label=157;break;}
 case 156: 
 var $546=((-.0))-($524);
 var $547=($546)-($541);
 var $548=($541)+($547);
 var $549=((-.0))-($548);
 var $_1_i=$549;label=158;break;
 case 157: 
 var $551=($524)+($541);
 var $552=($551)-($541);
 var $_1_i=$552;label=158;break;
 case 158: 
 var $_1_i;
 var $554=HEAP32[(($e2_i)>>2)];
 var $555=($554|0)<0;
 var $556=(((-$554))|0);
 var $557=($555?$556:$554);
 var $558=($557|0)<0;
 if($558){label=159;break;}else{var $_01_lcssa_off0_i_i=$557;var $_0_lcssa_i53_i=$17;label=162;break;}
 case 159: 
 var $559$0=$557;
 var $559$1=((((($557|0)<0))|0)?-1:0);
 var $_014_i_i$1=$559$1;var $_014_i_i$0=$559$0;var $_05_i_i=$17;label=160;break;
 case 160: 
 var $_05_i_i;
 var $_014_i_i$0;
 var $_014_i_i$1;
 var $$etemp$39$0=10;
 var $$etemp$39$1=0;
 var $560$0=___uremdi3($_014_i_i$0,$_014_i_i$1,$$etemp$39$0,$$etemp$39$1);var $560$1=tempRet0;
 var $$etemp$40$0=48;
 var $$etemp$40$1=0;
 var $561$0=$560$0|$$etemp$40$0;
 var $561$1=$560$1|$$etemp$40$1;
 var $562$0=$561$0;
 var $562=$562$0&255;
 var $563=((($_05_i_i)-(1))|0);
 HEAP8[(($563)>>0)]=$562;
 var $$etemp$41$0=10;
 var $$etemp$41$1=0;
 var $564$0=___udivdi3($_014_i_i$0,$_014_i_i$1,$$etemp$41$0,$$etemp$41$1);var $564$1=tempRet0;
 var $$etemp$42$0=-1;
 var $$etemp$42$1=9;
 var $565=(($_014_i_i$1>>>0) > ($$etemp$42$1>>>0)) | (((($_014_i_i$1>>>0) == ($$etemp$42$1>>>0) & ($_014_i_i$0>>>0) >  ($$etemp$42$0>>>0))));
 if($565){var $_014_i_i$1=$564$1;var $_014_i_i$0=$564$0;var $_05_i_i=$563;label=160;break;}else{label=161;break;}
 case 161: 
 var $extract_t_i_i$0=$564$0;
 var $extract_t_i_i=$extract_t_i_i$0;
 var $_01_lcssa_off0_i_i=$extract_t_i_i;var $_0_lcssa_i53_i=$563;label=162;break;
 case 162: 
 var $_0_lcssa_i53_i;
 var $_01_lcssa_off0_i_i;
 var $567=($_01_lcssa_off0_i_i|0)==0;
 if($567){var $_1_lcssa_i_i=$_0_lcssa_i53_i;label=164;break;}else{var $_12_i_i=$_0_lcssa_i53_i;var $y_03_i_i=$_01_lcssa_off0_i_i;label=163;break;}
 case 163: 
 var $y_03_i_i;
 var $_12_i_i;
 var $568=(((($y_03_i_i>>>0))%(10))&-1);
 var $569=$568|48;
 var $570=(($569)&255);
 var $571=((($_12_i_i)-(1))|0);
 HEAP8[(($571)>>0)]=$570;
 var $572=(((($y_03_i_i>>>0))/(10))&-1);
 var $573=($y_03_i_i>>>0)<10;
 if($573){var $_1_lcssa_i_i=$571;label=164;break;}else{var $_12_i_i=$571;var $y_03_i_i=$572;label=163;break;}
 case 164: 
 var $_1_lcssa_i_i;
 var $574=($_1_lcssa_i_i|0)==($17|0);
 if($574){label=165;break;}else{var $estr_0_i=$_1_lcssa_i_i;label=166;break;}
 case 165: 
 HEAP8[(($18)>>0)]=48;
 var $estr_0_i=$18;label=166;break;
 case 166: 
 var $estr_0_i;
 var $577=HEAP32[(($e2_i)>>2)];
 var $578=$577>>31;
 var $579=$578&2;
 var $580=((($579)+(43))|0);
 var $581=(($580)&255);
 var $582=((($estr_0_i)-(1))|0);
 HEAP8[(($582)>>0)]=$581;
 var $583=((($t_0)+(15))|0);
 var $584=(($583)&255);
 var $585=((($estr_0_i)-(2))|0);
 HEAP8[(($585)>>0)]=$584;
 var $notrhs_i=($p_0|0)<1;
 if($notrhs_i){label=167;break;}else{var $_2_i=$_1_i;var $s_0_i=$14;label=174;break;}
 case 167: 
 var $586=$fl_1_&8;
 var $587=($586|0)==0;
 if($587){var $_2_us_us_i=$_1_i;var $s_0_us_us_i=$14;label=168;break;}else{var $_2_us_i=$_1_i;var $s_0_us_i=$14;label=171;break;}
 case 168: 
 var $s_0_us_us_i;
 var $_2_us_us_i;
 var $588=(($_2_us_us_i)&-1);
 var $589=((8+$588)|0);
 var $590=HEAP8[(($589)>>0)];
 var $591=($590&255);
 var $592=$591|$533;
 var $593=(($592)&255);
 var $594=(($s_0_us_us_i+1)|0);
 HEAP8[(($s_0_us_us_i)>>0)]=$593;
 var $595=($588|0);
 var $596=($_2_us_us_i)-($595);
 var $597=($596)*(16);
 var $598=$594;
 var $599=((($598)-($1))|0);
 var $600=($599|0)!=1;
 var $notlhs_us_us_i=$597==0;
 var $or_cond_i73=$600|$notlhs_us_us_i;
 if($or_cond_i73){var $s_1_us_us_i=$594;label=170;break;}else{label=169;break;}
 case 169: 
 var $602=(($s_0_us_us_i+2)|0);
 HEAP8[(($594)>>0)]=46;
 var $s_1_us_us_i=$602;label=170;break;
 case 170: 
 var $s_1_us_us_i;
 var $604=$597!=0;
 if($604){var $_2_us_us_i=$597;var $s_0_us_us_i=$s_1_us_us_i;label=168;break;}else{var $s_1_lcssa_i=$s_1_us_us_i;label=177;break;}
 case 171: 
 var $s_0_us_i;
 var $_2_us_i;
 var $605=(($_2_us_i)&-1);
 var $606=((8+$605)|0);
 var $607=HEAP8[(($606)>>0)];
 var $608=($607&255);
 var $609=$608|$533;
 var $610=(($609)&255);
 var $611=(($s_0_us_i+1)|0);
 HEAP8[(($s_0_us_i)>>0)]=$610;
 var $612=($605|0);
 var $613=($_2_us_i)-($612);
 var $614=($613)*(16);
 var $615=$611;
 var $616=((($615)-($1))|0);
 var $617=($616|0)==1;
 if($617){label=172;break;}else{var $s_1_us_i=$611;label=173;break;}
 case 172: 
 var $619=(($s_0_us_i+2)|0);
 HEAP8[(($611)>>0)]=46;
 var $s_1_us_i=$619;label=173;break;
 case 173: 
 var $s_1_us_i;
 var $621=$614!=0;
 if($621){var $_2_us_i=$614;var $s_0_us_i=$s_1_us_i;label=171;break;}else{var $s_1_lcssa_i=$s_1_us_i;label=177;break;}
 case 174: 
 var $s_0_i;
 var $_2_i;
 var $622=(($_2_i)&-1);
 var $623=((8+$622)|0);
 var $624=HEAP8[(($623)>>0)];
 var $625=($624&255);
 var $626=$625|$533;
 var $627=(($626)&255);
 var $628=(($s_0_i+1)|0);
 HEAP8[(($s_0_i)>>0)]=$627;
 var $629=($622|0);
 var $630=($_2_i)-($629);
 var $631=($630)*(16);
 var $632=$628;
 var $633=((($632)-($1))|0);
 var $634=($633|0)==1;
 if($634){label=175;break;}else{var $s_1_i=$628;label=176;break;}
 case 175: 
 var $636=(($s_0_i+2)|0);
 HEAP8[(($628)>>0)]=46;
 var $s_1_i=$636;label=176;break;
 case 176: 
 var $s_1_i;
 var $638=$631!=0;
 if($638){var $_2_i=$631;var $s_0_i=$s_1_i;label=174;break;}else{var $s_1_lcssa_i=$s_1_i;label=177;break;}
 case 177: 
 var $s_1_lcssa_i;
 var $639=($p_0|0)!=0;
 var $_pre306_i=$s_1_lcssa_i;
 var $640=((($21)+($_pre306_i))|0);
 var $641=($640|0)<($p_0|0);
 var $or_cond271=$639&$641;
 var $642=$585;
 if($or_cond271){label=178;break;}else{label=179;break;}
 case 178: 
 var $644=((($22)+($p_0))|0);
 var $645=((($644)-($642))|0);
 var $l_0_i=$645;label=180;break;
 case 179: 
 var $646=((($20)-($642))|0);
 var $647=((($646)+($_pre306_i))|0);
 var $l_0_i=$647;label=180;break;
 case 180: 
 var $l_0_i;
 var $649=((($l_0_i)+($536))|0);
 var $$etemp$43$0=256;
 var $$etemp$43$1=0;

 var $650=$fl_1_&73728;
 var $651=($650|0)==0;
 var $652=($w_1|0)>($649|0);
 var $or_cond_i57_i=$651&$652;
 if($or_cond_i57_i){label=181;break;}else{label=185;break;}
 case 181: 
 var $654=((($w_1)-($649))|0);
 var $655=($654>>>0)>256;
 var $656=($655?256:$654);
 _memset($6, 32, $656)|0;
 var $657=($654>>>0)>255;
 if($657){var $_01_i59_i=$654;label=182;break;}else{var $_0_lcssa_i61_i=$654;label=184;break;}
 case 182: 
 var $_01_i59_i;
 ___fwritex($6,256,$f);
 var $658=((($_01_i59_i)-(256))|0);
 var $659=($658>>>0)>255;
 if($659){var $_01_i59_i=$658;label=182;break;}else{label=183;break;}
 case 183: 
 var $660=$654&255;
 var $_0_lcssa_i61_i=$660;label=184;break;
 case 184: 
 var $_0_lcssa_i61_i;
 ___fwritex($6,$_0_lcssa_i61_i,$f);
 label=185;break;
 case 185: 
 var $$etemp$44$0=256;
 var $$etemp$44$1=0;

 ___fwritex($prefix_0__i,$536,$f);
 var $$etemp$45$0=256;
 var $$etemp$45$1=0;

 var $662=($650|0)==65536;
 var $or_cond_i64_i=$662&$652;
 if($or_cond_i64_i){label=186;break;}else{label=190;break;}
 case 186: 
 var $664=((($w_1)-($649))|0);
 var $665=($664>>>0)>256;
 var $666=($665?256:$664);
 _memset($6, 48, $666)|0;
 var $667=($664>>>0)>255;
 if($667){var $_01_i66_i=$664;label=187;break;}else{var $_0_lcssa_i68_i=$664;label=189;break;}
 case 187: 
 var $_01_i66_i;
 ___fwritex($6,256,$f);
 var $668=((($_01_i66_i)-(256))|0);
 var $669=($668>>>0)>255;
 if($669){var $_01_i66_i=$668;label=187;break;}else{label=188;break;}
 case 188: 
 var $670=$664&255;
 var $_0_lcssa_i68_i=$670;label=189;break;
 case 189: 
 var $_0_lcssa_i68_i;
 ___fwritex($6,$_0_lcssa_i68_i,$f);
 label=190;break;
 case 190: 
 var $$etemp$46$0=256;
 var $$etemp$46$1=0;

 var $672=((($_pre306_i)-($1))|0);
 ___fwritex($14,$672,$f);
 var $673=((($19)-($642))|0);
 var $674=((($l_0_i)-($673))|0);
 var $675=((($674)-($672))|0);
 var $$etemp$47$0=256;
 var $$etemp$47$1=0;

 var $676=($675|0)>0;
 if($676){label=191;break;}else{label=195;break;}
 case 191: 
 var $678=($675>>>0)>256;
 var $679=($678?256:$675);
 _memset($6, 48, $679)|0;
 var $680=($675>>>0)>255;
 if($680){var $_01_i72_i=$675;label=192;break;}else{var $_0_lcssa_i74_i=$675;label=194;break;}
 case 192: 
 var $_01_i72_i;
 ___fwritex($6,256,$f);
 var $681=((($_01_i72_i)-(256))|0);
 var $682=($681>>>0)>255;
 if($682){var $_01_i72_i=$681;label=192;break;}else{label=193;break;}
 case 193: 
 var $683=$675&255;
 var $_0_lcssa_i74_i=$683;label=194;break;
 case 194: 
 var $_0_lcssa_i74_i;
 ___fwritex($6,$_0_lcssa_i74_i,$f);
 label=195;break;
 case 195: 
 var $$etemp$48$0=256;
 var $$etemp$48$1=0;

 ___fwritex($585,$673,$f);
 var $$etemp$49$0=256;
 var $$etemp$49$1=0;

 var $685=($650|0)==8192;
 var $or_cond_i77_i=$685&$652;
 if($or_cond_i77_i){label=196;break;}else{label=200;break;}
 case 196: 
 var $687=((($w_1)-($649))|0);
 var $688=($687>>>0)>256;
 var $689=($688?256:$687);
 _memset($6, 32, $689)|0;
 var $690=($687>>>0)>255;
 if($690){var $_01_i79_i=$687;label=197;break;}else{var $_0_lcssa_i81_i=$687;label=199;break;}
 case 197: 
 var $_01_i79_i;
 ___fwritex($6,256,$f);
 var $691=((($_01_i79_i)-(256))|0);
 var $692=($691>>>0)>255;
 if($692){var $_01_i79_i=$691;label=197;break;}else{label=198;break;}
 case 198: 
 var $693=$687&255;
 var $_0_lcssa_i81_i=$693;label=199;break;
 case 199: 
 var $_0_lcssa_i81_i;
 ___fwritex($6,$_0_lcssa_i81_i,$f);
 label=200;break;
 case 200: 
 var $$etemp$50$0=256;
 var $$etemp$50$1=0;

 var $w_23_i=($652?$w_1:$649);
 var $l_0=$w_23_i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 201: 
 var $696=($p_0|0)<0;
 var $_p_i=($696?6:$p_0);
 if($525){label=203;break;}else{label=202;break;}
 case 202: 
 var $_pre_i=HEAP32[(($e2_i)>>2)];
 var $_3_i=$524;var $702=$_pre_i;label=204;break;
 case 203: 
 var $698=($524)*(268435456);
 var $699=HEAP32[(($e2_i)>>2)];
 var $700=((($699)-(28))|0);
 HEAP32[(($e2_i)>>2)]=$700;
 var $_3_i=$698;var $702=$700;label=204;break;
 case 204: 
 var $702;
 var $_3_i;
 var $703=($702|0)<0;
 var $_36_i=($703?$23:$24);
 var $704=$_36_i;
 var $_4_i=$_3_i;var $z_0_i=$_36_i;label=205;break;
 case 205: 
 var $z_0_i;
 var $_4_i;
 var $706=($_4_i>=0 ? Math_floor($_4_i) : Math_ceil($_4_i));
 HEAP32[(($z_0_i)>>2)]=$706;
 var $707=(($z_0_i+4)|0);
 var $708=($706>>>0);
 var $709=($_4_i)-($708);
 var $710=($709)*(1000000000);
 var $711=$710!=0;
 if($711){var $_4_i=$710;var $z_0_i=$707;label=205;break;}else{label=206;break;}
 case 206: 
 var $_pr_i=HEAP32[(($e2_i)>>2)];
 var $712=($_pr_i|0)>0;
 if($712){var $713=$_pr_i;var $z_1257_i=$707;var $a_1258_i=$_36_i;label=207;break;}else{var $z_1_lcssa_i=$707;var $a_1_lcssa_i=$_36_i;var $_pr151_i=$_pr_i;label=216;break;}
 case 207: 
 var $a_1258_i;
 var $z_1257_i;
 var $713;
 var $714=($713|0)>29;
 var $715=($714?29:$713);
 var $d_0249_i=((($z_1257_i)-(4))|0);
 var $716=($d_0249_i>>>0)<($a_1258_i>>>0);
 if($716){var $a_2_ph_i=$a_1258_i;label=212;break;}else{label=208;break;}
 case 208: 
 var $717$0=$715;
 var $717$1=0;
 var $carry_0250_i=0;var $d_0251_i=$d_0249_i;label=209;break;
 case 209: 
 var $d_0251_i;
 var $carry_0250_i;
 var $719=HEAP32[(($d_0251_i)>>2)];
 var $720$0=$719;
 var $720$1=0;
 var $721$0=_bitshift64Shl($720$0,$720$1,$717$0);var $721$1=tempRet0;
 var $722$0=$carry_0250_i;
 var $722$1=0;
 var $723$0=_i64Add($721$0,$721$1,$722$0,$722$1);var $723$1=tempRet0;
 var $$etemp$51$0=1000000000;
 var $$etemp$51$1=0;
 var $724$0=___uremdi3($723$0,$723$1,$$etemp$51$0,$$etemp$51$1);var $724$1=tempRet0;
 var $725$0=$724$0;
 var $725=$725$0;
 HEAP32[(($d_0251_i)>>2)]=$725;
 var $$etemp$52$0=1000000000;
 var $$etemp$52$1=0;
 var $726$0=___udivdi3($723$0,$723$1,$$etemp$52$0,$$etemp$52$1);var $726$1=tempRet0;
 var $727$0=$726$0;
 var $727=$727$0;
 var $d_0_i=((($d_0251_i)-(4))|0);
 var $728=($d_0_i>>>0)<($a_1258_i>>>0);
 if($728){label=210;break;}else{var $carry_0250_i=$727;var $d_0251_i=$d_0_i;label=209;break;}
 case 210: 
 var $729=($727|0)==0;
 if($729){var $a_2_ph_i=$a_1258_i;label=212;break;}else{label=211;break;}
 case 211: 
 var $731=((($a_1258_i)-(4))|0);
 HEAP32[(($731)>>2)]=$727;
 var $a_2_ph_i=$731;label=212;break;
 case 212: 
 var $a_2_ph_i;
 var $z_2_i=$z_1257_i;label=213;break;
 case 213: 
 var $z_2_i;
 var $733=($z_2_i>>>0)>($a_2_ph_i>>>0);
 if($733){label=214;break;}else{label=215;break;}
 case 214: 
 var $735=((($z_2_i)-(4))|0);
 var $736=HEAP32[(($735)>>2)];
 var $737=($736|0)==0;
 if($737){var $z_2_i=$735;label=213;break;}else{label=215;break;}
 case 215: 
 var $738=HEAP32[(($e2_i)>>2)];
 var $739=((($738)-($715))|0);
 HEAP32[(($e2_i)>>2)]=$739;
 var $740=($739|0)>0;
 if($740){var $713=$739;var $z_1257_i=$z_2_i;var $a_1258_i=$a_2_ph_i;label=207;break;}else{var $z_1_lcssa_i=$z_2_i;var $a_1_lcssa_i=$a_2_ph_i;var $_pr151_i=$739;label=216;break;}
 case 216: 
 var $_pr151_i;
 var $a_1_lcssa_i;
 var $z_1_lcssa_i;
 var $741=($_pr151_i|0)<0;
 if($741){label=217;break;}else{var $z_3_lcssa_i=$z_1_lcssa_i;var $a_3_lcssa_i=$a_1_lcssa_i;label=235;break;}
 case 217: 
 var $742=((($_p_i)+(25))|0);
 var $743=(((($742|0))/(9))&-1);
 var $744=((($743)+(1))|0);
 var $745=($530|0)==102;
 if($745){label=218;break;}else{var $781=$_pr151_i;var $z_3243_i=$z_1_lcssa_i;var $a_3244_i=$a_1_lcssa_i;label=226;break;}
 case 218: 
 var $746=(($_36_i+($744<<2))|0);
 var $748=$_pr151_i;var $z_3243_us_i=$z_1_lcssa_i;var $a_3244_us_i=$a_1_lcssa_i;label=219;break;
 case 219: 
 var $a_3244_us_i;
 var $z_3243_us_i;
 var $748;
 var $749=(((-$748))|0);
 var $750=($749|0)>9;
 var $_24_us_i=($750?9:$749);
 var $751=($a_3244_us_i>>>0)<($z_3243_us_i>>>0);
 if($751){label=225;break;}else{label=220;break;}
 case 220: 
 var $752=HEAP32[(($a_3244_us_i)>>2)];
 var $753=($752|0)==0;
 var $754=(($a_3244_us_i+4)|0);
 var $_a_3_us307_i=($753?$754:$a_3244_us_i);
 var $z_4_us_i=$z_3243_us_i;var $_a_3_us308_i=$_a_3_us307_i;label=223;break;
 case 221: 
 var $756=HEAP32[(($a_3244_us_i)>>2)];
 var $757=($756|0)==0;
 var $758=(($a_3244_us_i+4)|0);
 var $_a_3_us_i=($757?$758:$a_3244_us_i);
 var $759=($775|0)==0;
 if($759){var $z_4_us_i=$z_3243_us_i;var $_a_3_us308_i=$_a_3_us_i;label=223;break;}else{label=222;break;}
 case 222: 
 var $761=(($z_3243_us_i+4)|0);
 HEAP32[(($z_3243_us_i)>>2)]=$775;
 var $z_4_us_i=$761;var $_a_3_us308_i=$_a_3_us_i;label=223;break;
 case 223: 
 var $_a_3_us308_i;
 var $z_4_us_i;
 var $763=$z_4_us_i;
 var $764=((($763)-($704))|0);
 var $765=$764>>2;
 var $766=($765|0)>($744|0);
 var $_z_4_us_i=($766?$746:$z_4_us_i);
 var $767=HEAP32[(($e2_i)>>2)];
 var $768=((($767)+($_24_us_i))|0);
 HEAP32[(($e2_i)>>2)]=$768;
 var $769=($768|0)<0;
 if($769){var $748=$768;var $z_3243_us_i=$_z_4_us_i;var $a_3244_us_i=$_a_3_us308_i;label=219;break;}else{var $z_3_lcssa_i=$_z_4_us_i;var $a_3_lcssa_i=$_a_3_us308_i;label=235;break;}
 case 224: 
 var $carry3_0238_us_i;
 var $d_1237_us_i;
 var $771=HEAP32[(($d_1237_us_i)>>2)];
 var $772=$771&$779;
 var $773=$771>>>($_24_us_i>>>0);
 var $774=((($773)+($carry3_0238_us_i))|0);
 HEAP32[(($d_1237_us_i)>>2)]=$774;
 var $775=(Math_imul($772,$780)|0);
 var $776=(($d_1237_us_i+4)|0);
 var $777=($776>>>0)<($z_3243_us_i>>>0);
 if($777){var $d_1237_us_i=$776;var $carry3_0238_us_i=$775;label=224;break;}else{label=221;break;}
 case 225: 
 var $778=1<<$_24_us_i;
 var $779=((($778)-(1))|0);
 var $780=1000000000>>>($_24_us_i>>>0);
 var $d_1237_us_i=$a_3244_us_i;var $carry3_0238_us_i=0;label=224;break;
 case 226: 
 var $a_3244_i;
 var $z_3243_i;
 var $781;
 var $782=(((-$781))|0);
 var $783=($782|0)>9;
 var $_24_i=($783?9:$782);
 var $784=($a_3244_i>>>0)<($z_3243_i>>>0);
 if($784){label=228;break;}else{label=227;break;}
 case 227: 
 var $785=HEAP32[(($a_3244_i)>>2)];
 var $786=($785|0)==0;
 var $787=(($a_3244_i+4)|0);
 var $_a_3309_i=($786?$787:$a_3244_i);
 var $z_4_i=$z_3243_i;var $_a_3310_i=$_a_3309_i;label=232;break;
 case 228: 
 var $788=1<<$_24_i;
 var $789=((($788)-(1))|0);
 var $790=1000000000>>>($_24_i>>>0);
 var $d_1237_i=$a_3244_i;var $carry3_0238_i=0;label=229;break;
 case 229: 
 var $carry3_0238_i;
 var $d_1237_i;
 var $792=HEAP32[(($d_1237_i)>>2)];
 var $793=$792&$789;
 var $794=$792>>>($_24_i>>>0);
 var $795=((($794)+($carry3_0238_i))|0);
 HEAP32[(($d_1237_i)>>2)]=$795;
 var $796=(Math_imul($793,$790)|0);
 var $797=(($d_1237_i+4)|0);
 var $798=($797>>>0)<($z_3243_i>>>0);
 if($798){var $d_1237_i=$797;var $carry3_0238_i=$796;label=229;break;}else{label=230;break;}
 case 230: 
 var $799=HEAP32[(($a_3244_i)>>2)];
 var $800=($799|0)==0;
 var $801=(($a_3244_i+4)|0);
 var $_a_3_i=($800?$801:$a_3244_i);
 var $802=($796|0)==0;
 if($802){var $z_4_i=$z_3243_i;var $_a_3310_i=$_a_3_i;label=232;break;}else{label=231;break;}
 case 231: 
 var $804=(($z_3243_i+4)|0);
 HEAP32[(($z_3243_i)>>2)]=$796;
 var $z_4_i=$804;var $_a_3310_i=$_a_3_i;label=232;break;
 case 232: 
 var $_a_3310_i;
 var $z_4_i;
 var $806=$z_4_i;
 var $807=$_a_3310_i;
 var $808=((($806)-($807))|0);
 var $809=$808>>2;
 var $810=($809|0)>($744|0);
 if($810){label=233;break;}else{var $z_5_i=$z_4_i;label=234;break;}
 case 233: 
 var $812=(($_a_3310_i+($744<<2))|0);
 var $z_5_i=$812;label=234;break;
 case 234: 
 var $z_5_i;
 var $814=HEAP32[(($e2_i)>>2)];
 var $815=((($814)+($_24_i))|0);
 HEAP32[(($e2_i)>>2)]=$815;
 var $816=($815|0)<0;
 if($816){var $781=$815;var $z_3243_i=$z_5_i;var $a_3244_i=$_a_3310_i;label=226;break;}else{var $z_3_lcssa_i=$z_5_i;var $a_3_lcssa_i=$_a_3310_i;label=235;break;}
 case 235: 
 var $a_3_lcssa_i;
 var $z_3_lcssa_i;
 var $817=($a_3_lcssa_i>>>0)<($z_3_lcssa_i>>>0);
 if($817){label=236;break;}else{var $e_1_i=0;label=238;break;}
 case 236: 
 var $819=$a_3_lcssa_i;
 var $820=((($704)-($819))|0);
 var $821=$820>>2;
 var $822=((($821)*(9))&-1);
 var $823=HEAP32[(($a_3_lcssa_i)>>2)];
 var $824=($823>>>0)<10;
 if($824){var $e_1_i=$822;label=238;break;}else{var $i_0232_i=10;var $e_0233_i=$822;label=237;break;}
 case 237: 
 var $e_0233_i;
 var $i_0232_i;
 var $825=((($i_0232_i)*(10))&-1);
 var $826=((($e_0233_i)+(1))|0);
 var $827=($823>>>0)<($825>>>0);
 if($827){var $e_1_i=$826;label=238;break;}else{var $i_0232_i=$825;var $e_0233_i=$826;label=237;break;}
 case 238: 
 var $e_1_i;
 var $828=($530|0)!=102;
 var $829=($828?$e_1_i:0);
 var $830=((($_p_i)-($829))|0);
 var $831=($530|0)==103;
 if($831){label=239;break;}else{var $835=0;label=240;break;}
 case 239: 
 var $833=($_p_i|0)!=0;
 var $phitmp_i=($833&1);
 var $835=$phitmp_i;label=240;break;
 case 240: 
 var $835;
 var $836=((($830)-($835))|0);
 var $837=$z_3_lcssa_i;
 var $838=((($837)-($704))|0);
 var $839=$838>>2;
 var $840=((($839)*(9))&-1);
 var $841=((($840)-(9))|0);
 var $842=($836|0)<($841|0);
 if($842){label=241;break;}else{var $a_8_ph_i=$a_3_lcssa_i;var $z_6_ph_i=$z_3_lcssa_i;var $e_4_ph_i=$e_1_i;label=260;break;}
 case 241: 
 var $844=((($836)+(9216))|0);
 var $845=(((($844|0))/(9))&-1);
 var $_sum_i=((($845)-(1023))|0);
 var $846=(($_36_i+($_sum_i<<2))|0);
 var $847=(((($844|0))%(9))&-1);
 var $j_0224_i=((($847)+(1))|0);
 var $848=($j_0224_i|0)<9;
 if($848){var $i_1225_i=10;var $j_0226_i=$j_0224_i;label=242;break;}else{var $i_1_lcssa_i=10;label=243;break;}
 case 242: 
 var $j_0226_i;
 var $i_1225_i;
 var $849=((($i_1225_i)*(10))&-1);
 var $j_0_i=((($j_0226_i)+(1))|0);
 var $850=($j_0_i|0)<9;
 if($850){var $i_1225_i=$849;var $j_0226_i=$j_0_i;label=242;break;}else{var $i_1_lcssa_i=$849;label=243;break;}
 case 243: 
 var $i_1_lcssa_i;
 var $851=HEAP32[(($846)>>2)];
 var $852=(((($851>>>0))%(($i_1_lcssa_i>>>0)))&-1);
 var $853=($852|0)==0;
 if($853){label=244;break;}else{label=245;break;}
 case 244: 
 var $_sum19_i=((($845)-(1022))|0);
 var $855=(($_36_i+($_sum19_i<<2))|0);
 var $856=($855|0)==($z_3_lcssa_i|0);
 if($856){var $a_7_i=$a_3_lcssa_i;var $d_3_i=$846;var $e_3_i=$e_1_i;label=259;break;}else{label=245;break;}
 case 245: 
 var $858=(((($851>>>0))/(($i_1_lcssa_i>>>0)))&-1);
 var $859=$858&1;
 var $860=($859|0)==0;
 var $_25_i=($860?9007199254740992:9007199254740994);
 var $861=(((($i_1_lcssa_i|0))/(2))&-1);
 var $862=($852>>>0)<($861>>>0);
 if($862){var $small_0_i=0.5;label=249;break;}else{label=246;break;}
 case 246: 
 var $864=($852|0)==($861|0);
 if($864){label=247;break;}else{label=248;break;}
 case 247: 
 var $_sum20_i=((($845)-(1022))|0);
 var $866=(($_36_i+($_sum20_i<<2))|0);
 var $867=($866|0)==($z_3_lcssa_i|0);
 if($867){var $small_0_i=1;label=249;break;}else{label=248;break;}
 case 248: 
 var $small_0_i=1.5;label=249;break;
 case 249: 
 var $small_0_i;
 var $870=($pl_0_i|0)==0;
 if($870){var $small_1_i=$small_0_i;var $round6_1_i=$_25_i;label=252;break;}else{label=250;break;}
 case 250: 
 var $872=HEAP8[(($prefix_0_i)>>0)];
 var $873=(($872<<24)>>24)==45;
 if($873){label=251;break;}else{var $small_1_i=$small_0_i;var $round6_1_i=$_25_i;label=252;break;}
 case 251: 
 var $875=($_25_i)*(-1);
 var $876=($small_0_i)*(-1);
 var $small_1_i=$876;var $round6_1_i=$875;label=252;break;
 case 252: 
 var $round6_1_i;
 var $small_1_i;
 var $878=((($851)-($852))|0);
 HEAP32[(($846)>>2)]=$878;
 var $879=($round6_1_i)+($small_1_i);
 var $880=$879!=$round6_1_i;
 if($880){label=253;break;}else{var $a_7_i=$a_3_lcssa_i;var $d_3_i=$846;var $e_3_i=$e_1_i;label=259;break;}
 case 253: 
 var $882=((($878)+($i_1_lcssa_i))|0);
 HEAP32[(($846)>>2)]=$882;
 var $883=($882>>>0)>999999999;
 if($883){var $d_2217_i=$846;var $a_5218_i=$a_3_lcssa_i;label=254;break;}else{var $d_2_lcssa_i=$846;var $a_5_lcssa_i=$a_3_lcssa_i;label=257;break;}
 case 254: 
 var $a_5218_i;
 var $d_2217_i;
 var $884=((($d_2217_i)-(4))|0);
 HEAP32[(($d_2217_i)>>2)]=0;
 var $885=($884>>>0)<($a_5218_i>>>0);
 if($885){label=255;break;}else{var $a_6_i=$a_5218_i;label=256;break;}
 case 255: 
 var $887=((($a_5218_i)-(4))|0);
 HEAP32[(($887)>>2)]=0;
 var $a_6_i=$887;label=256;break;
 case 256: 
 var $a_6_i;
 var $889=HEAP32[(($884)>>2)];
 var $890=((($889)+(1))|0);
 HEAP32[(($884)>>2)]=$890;
 var $891=($890>>>0)>999999999;
 if($891){var $d_2217_i=$884;var $a_5218_i=$a_6_i;label=254;break;}else{var $d_2_lcssa_i=$884;var $a_5_lcssa_i=$a_6_i;label=257;break;}
 case 257: 
 var $a_5_lcssa_i;
 var $d_2_lcssa_i;
 var $892=$a_5_lcssa_i;
 var $893=((($704)-($892))|0);
 var $894=$893>>2;
 var $895=((($894)*(9))&-1);
 var $896=HEAP32[(($a_5_lcssa_i)>>2)];
 var $897=($896>>>0)<10;
 if($897){var $a_7_i=$a_5_lcssa_i;var $d_3_i=$d_2_lcssa_i;var $e_3_i=$895;label=259;break;}else{var $i_2212_i=10;var $e_2213_i=$895;label=258;break;}
 case 258: 
 var $e_2213_i;
 var $i_2212_i;
 var $898=((($i_2212_i)*(10))&-1);
 var $899=((($e_2213_i)+(1))|0);
 var $900=($896>>>0)<($898>>>0);
 if($900){var $a_7_i=$a_5_lcssa_i;var $d_3_i=$d_2_lcssa_i;var $e_3_i=$899;label=259;break;}else{var $i_2212_i=$898;var $e_2213_i=$899;label=258;break;}
 case 259: 
 var $e_3_i;
 var $d_3_i;
 var $a_7_i;
 var $901=(($d_3_i+4)|0);
 var $902=($z_3_lcssa_i>>>0)>($901>>>0);
 var $_z_3_i=($902?$901:$z_3_lcssa_i);
 var $a_8_ph_i=$a_7_i;var $z_6_ph_i=$_z_3_i;var $e_4_ph_i=$e_3_i;label=260;break;
 case 260: 
 var $e_4_ph_i;
 var $z_6_ph_i;
 var $a_8_ph_i;
 var $903=(((-$e_4_ph_i))|0);
 var $z_6_i=$z_6_ph_i;label=261;break;
 case 261: 
 var $z_6_i;
 var $905=($z_6_i>>>0)>($a_8_ph_i>>>0);
 if($905){label=262;break;}else{var $_lcssa292_i=0;label=263;break;}
 case 262: 
 var $907=((($z_6_i)-(4))|0);
 var $908=HEAP32[(($907)>>2)];
 var $909=($908|0)==0;
 if($909){var $z_6_i=$907;label=261;break;}else{var $_lcssa292_i=1;label=263;break;}
 case 263: 
 var $_lcssa292_i;
 if($831){label=264;break;}else{var $_314_i=$_p_i;var $_117_i=$t_0;label=275;break;}
 case 264: 
 var $912=($_p_i|0)==0;
 var $913=($912&1);
 var $__p_i=((($913)+($_p_i))|0);
 var $914=($__p_i|0)>($e_4_ph_i|0);
 var $915=($e_4_ph_i|0)>-5;
 var $or_cond5_i=$914&$915;
 if($or_cond5_i){label=265;break;}else{label=266;break;}
 case 265: 
 var $917=((($t_0)-(1))|0);
 var $_neg157_i=((($__p_i)-(1))|0);
 var $918=((($_neg157_i)-($e_4_ph_i))|0);
 var $_213_i=$918;var $_016_i=$917;label=267;break;
 case 266: 
 var $920=((($t_0)-(2))|0);
 var $921=((($__p_i)-(1))|0);
 var $_213_i=$921;var $_016_i=$920;label=267;break;
 case 267: 
 var $_016_i;
 var $_213_i;
 var $923=$fl_1_&8;
 var $924=($923|0)==0;
 if($924){label=268;break;}else{var $_314_i=$_213_i;var $_117_i=$_016_i;label=275;break;}
 case 268: 
 if($_lcssa292_i){label=269;break;}else{var $j_2_i=9;label=272;break;}
 case 269: 
 var $927=((($z_6_i)-(4))|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=($928|0)==0;
 if($929){var $j_2_i=9;label=272;break;}else{label=270;break;}
 case 270: 
 var $930=(((($928>>>0))%(10))&-1);
 var $931=($930|0)==0;
 if($931){var $i_3204_i=10;var $j_1205_i=0;label=271;break;}else{var $j_2_i=0;label=272;break;}
 case 271: 
 var $j_1205_i;
 var $i_3204_i;
 var $932=((($i_3204_i)*(10))&-1);
 var $933=((($j_1205_i)+(1))|0);
 var $934=(((($928>>>0))%(($932>>>0)))&-1);
 var $935=($934|0)==0;
 if($935){var $i_3204_i=$932;var $j_1205_i=$933;label=271;break;}else{var $j_2_i=$933;label=272;break;}
 case 272: 
 var $j_2_i;
 var $936=$_016_i|32;
 var $937=($936|0)==102;
 var $938=$z_6_i;
 var $939=((($938)-($704))|0);
 var $940=$939>>2;
 var $941=((($940)*(9))&-1);
 var $942=((($941)-(9))|0);
 if($937){label=273;break;}else{label=274;break;}
 case 273: 
 var $944=((($942)-($j_2_i))|0);
 var $945=($944|0)<0;
 var $_26_i=($945?0:$944);
 var $946=($_213_i|0)<($_26_i|0);
 var $_213__26_i=($946?$_213_i:$_26_i);
 var $_314_i=$_213__26_i;var $_117_i=$_016_i;label=275;break;
 case 274: 
 var $948=((($942)+($e_4_ph_i))|0);
 var $949=((($948)-($j_2_i))|0);
 var $950=($949|0)<0;
 var $_28_i=($950?0:$949);
 var $951=($_213_i|0)<($_28_i|0);
 var $_213__28_i=($951?$_213_i:$_28_i);
 var $_314_i=$_213__28_i;var $_117_i=$_016_i;label=275;break;
 case 275: 
 var $_117_i;
 var $_314_i;
 var $953=($_314_i|0)!=0;
 if($953){var $957=1;label=277;break;}else{label=276;break;}
 case 276: 
 var $955=$fl_1_>>>3;
 var $_lobit_i=$955&1;
 var $957=$_lobit_i;label=277;break;
 case 277: 
 var $957;
 var $958=$_117_i|32;
 var $959=($958|0)==102;
 if($959){label=278;break;}else{label=279;break;}
 case 278: 
 var $961=($e_4_ph_i|0)>0;
 var $962=($961?$e_4_ph_i:0);
 var $estr_2_i=0;var $_pn_i=$962;label=288;break;
 case 279: 
 var $964=($e_4_ph_i|0)<0;
 var $965=($964?$903:$e_4_ph_i);
 var $966=($965|0)<0;
 if($966){label=280;break;}else{var $_01_lcssa_off0_i90_i=$965;var $_0_lcssa_i89_i=$17;label=283;break;}
 case 280: 
 var $967$0=$965;
 var $967$1=((((($965|0)<0))|0)?-1:0);
 var $_014_i85_i$1=$967$1;var $_014_i85_i$0=$967$0;var $_05_i84_i=$17;label=281;break;
 case 281: 
 var $_05_i84_i;
 var $_014_i85_i$0;
 var $_014_i85_i$1;
 var $$etemp$53$0=10;
 var $$etemp$53$1=0;
 var $968$0=___uremdi3($_014_i85_i$0,$_014_i85_i$1,$$etemp$53$0,$$etemp$53$1);var $968$1=tempRet0;
 var $$etemp$54$0=48;
 var $$etemp$54$1=0;
 var $969$0=$968$0|$$etemp$54$0;
 var $969$1=$968$1|$$etemp$54$1;
 var $970$0=$969$0;
 var $970=$970$0&255;
 var $971=((($_05_i84_i)-(1))|0);
 HEAP8[(($971)>>0)]=$970;
 var $$etemp$55$0=10;
 var $$etemp$55$1=0;
 var $972$0=___udivdi3($_014_i85_i$0,$_014_i85_i$1,$$etemp$55$0,$$etemp$55$1);var $972$1=tempRet0;
 var $$etemp$56$0=-1;
 var $$etemp$56$1=9;
 var $973=(($_014_i85_i$1>>>0) > ($$etemp$56$1>>>0)) | (((($_014_i85_i$1>>>0) == ($$etemp$56$1>>>0) & ($_014_i85_i$0>>>0) >  ($$etemp$56$0>>>0))));
 if($973){var $_014_i85_i$1=$972$1;var $_014_i85_i$0=$972$0;var $_05_i84_i=$971;label=281;break;}else{label=282;break;}
 case 282: 
 var $extract_t_i87_i$0=$972$0;
 var $extract_t_i87_i=$extract_t_i87_i$0;
 var $_01_lcssa_off0_i90_i=$extract_t_i87_i;var $_0_lcssa_i89_i=$971;label=283;break;
 case 283: 
 var $_0_lcssa_i89_i;
 var $_01_lcssa_off0_i90_i;
 var $975=($_01_lcssa_off0_i90_i|0)==0;
 if($975){var $estr_1_ph_i=$_0_lcssa_i89_i;label=285;break;}else{var $_12_i92_i=$_0_lcssa_i89_i;var $y_03_i91_i=$_01_lcssa_off0_i90_i;label=284;break;}
 case 284: 
 var $y_03_i91_i;
 var $_12_i92_i;
 var $976=(((($y_03_i91_i>>>0))%(10))&-1);
 var $977=$976|48;
 var $978=(($977)&255);
 var $979=((($_12_i92_i)-(1))|0);
 HEAP8[(($979)>>0)]=$978;
 var $980=(((($y_03_i91_i>>>0))/(10))&-1);
 var $981=($y_03_i91_i>>>0)<10;
 if($981){var $estr_1_ph_i=$979;label=285;break;}else{var $_12_i92_i=$979;var $y_03_i91_i=$980;label=284;break;}
 case 285: 
 var $estr_1_ph_i;
 var $982=$estr_1_ph_i;
 var $983=((($19)-($982))|0);
 var $984=($983|0)<2;
 if($984){var $estr_1195_i=$estr_1_ph_i;label=286;break;}else{var $estr_1_lcssa_i=$estr_1_ph_i;label=287;break;}
 case 286: 
 var $estr_1195_i;
 var $985=((($estr_1195_i)-(1))|0);
 HEAP8[(($985)>>0)]=48;
 var $986=$985;
 var $987=((($19)-($986))|0);
 var $988=($987|0)<2;
 if($988){var $estr_1195_i=$985;label=286;break;}else{var $estr_1_lcssa_i=$985;label=287;break;}
 case 287: 
 var $estr_1_lcssa_i;
 var $989=$e_4_ph_i>>31;
 var $990=$989&2;
 var $991=((($990)+(43))|0);
 var $992=(($991)&255);
 var $993=((($estr_1_lcssa_i)-(1))|0);
 HEAP8[(($993)>>0)]=$992;
 var $994=(($_117_i)&255);
 var $995=((($estr_1_lcssa_i)-(2))|0);
 HEAP8[(($995)>>0)]=$994;
 var $996=$995;
 var $997=((($19)-($996))|0);
 var $estr_2_i=$995;var $_pn_i=$997;label=288;break;
 case 288: 
 var $_pn_i;
 var $estr_2_i;
 var $999=((($pl_0_i)+(1))|0);
 var $1000=((($999)+($_314_i))|0);
 var $l_1_i=((($1000)+($957))|0);
 var $1001=((($l_1_i)+($_pn_i))|0);
 var $$etemp$57$0=256;
 var $$etemp$57$1=0;

 var $1002=$fl_1_&73728;
 var $1003=($1002|0)==0;
 var $1004=($w_1|0)>($1001|0);
 var $or_cond_i98_i=$1003&$1004;
 if($or_cond_i98_i){label=289;break;}else{label=293;break;}
 case 289: 
 var $1006=((($w_1)-($1001))|0);
 var $1007=($1006>>>0)>256;
 var $1008=($1007?256:$1006);
 _memset($6, 32, $1008)|0;
 var $1009=($1006>>>0)>255;
 if($1009){var $_01_i100_i=$1006;label=290;break;}else{var $_0_lcssa_i102_i=$1006;label=292;break;}
 case 290: 
 var $_01_i100_i;
 ___fwritex($6,256,$f);
 var $1010=((($_01_i100_i)-(256))|0);
 var $1011=($1010>>>0)>255;
 if($1011){var $_01_i100_i=$1010;label=290;break;}else{label=291;break;}
 case 291: 
 var $1012=$1006&255;
 var $_0_lcssa_i102_i=$1012;label=292;break;
 case 292: 
 var $_0_lcssa_i102_i;
 ___fwritex($6,$_0_lcssa_i102_i,$f);
 label=293;break;
 case 293: 
 var $$etemp$58$0=256;
 var $$etemp$58$1=0;

 ___fwritex($prefix_0_i,$pl_0_i,$f);
 var $$etemp$59$0=256;
 var $$etemp$59$1=0;

 var $1014=($1002|0)==65536;
 var $or_cond_i105_i=$1014&$1004;
 if($or_cond_i105_i){label=294;break;}else{label=298;break;}
 case 294: 
 var $1016=((($w_1)-($1001))|0);
 var $1017=($1016>>>0)>256;
 var $1018=($1017?256:$1016);
 _memset($6, 48, $1018)|0;
 var $1019=($1016>>>0)>255;
 if($1019){var $_01_i107_i=$1016;label=295;break;}else{var $_0_lcssa_i109_i=$1016;label=297;break;}
 case 295: 
 var $_01_i107_i;
 ___fwritex($6,256,$f);
 var $1020=((($_01_i107_i)-(256))|0);
 var $1021=($1020>>>0)>255;
 if($1021){var $_01_i107_i=$1020;label=295;break;}else{label=296;break;}
 case 296: 
 var $1022=$1016&255;
 var $_0_lcssa_i109_i=$1022;label=297;break;
 case 297: 
 var $_0_lcssa_i109_i;
 ___fwritex($6,$_0_lcssa_i109_i,$f);
 label=298;break;
 case 298: 
 var $$etemp$60$0=256;
 var $$etemp$60$1=0;

 if($959){label=299;break;}else{label=321;break;}
 case 299: 
 var $1025=($a_8_ph_i>>>0)>($_36_i>>>0);
 var $r_0_a_8_i=($1025?$_36_i:$a_8_ph_i);
 var $d_4180_i=$r_0_a_8_i;label=300;break;
 case 300: 
 var $d_4180_i;
 var $1027=HEAP32[(($d_4180_i)>>2)];
 var $1028=($1027|0)==0;
 if($1028){var $_1_lcssa_i117_i=$25;label=302;break;}else{var $_12_i115_i=$25;var $y_03_i114_i=$1027;label=301;break;}
 case 301: 
 var $y_03_i114_i;
 var $_12_i115_i;
 var $1029=(((($y_03_i114_i>>>0))%(10))&-1);
 var $1030=$1029|48;
 var $1031=(($1030)&255);
 var $1032=((($_12_i115_i)-(1))|0);
 HEAP8[(($1032)>>0)]=$1031;
 var $1033=(((($y_03_i114_i>>>0))/(10))&-1);
 var $1034=($y_03_i114_i>>>0)<10;
 if($1034){var $_1_lcssa_i117_i=$1032;label=302;break;}else{var $_12_i115_i=$1032;var $y_03_i114_i=$1033;label=301;break;}
 case 302: 
 var $_1_lcssa_i117_i;
 var $1035=($d_4180_i|0)==($r_0_a_8_i|0);
 if($1035){label=305;break;}else{label=303;break;}
 case 303: 
 var $1036=($_1_lcssa_i117_i>>>0)>($14>>>0);
 if($1036){var $s7_0177_i=$_1_lcssa_i117_i;label=304;break;}else{var $s7_1_i=$_1_lcssa_i117_i;label=307;break;}
 case 304: 
 var $s7_0177_i;
 var $1037=((($s7_0177_i)-(1))|0);
 HEAP8[(($1037)>>0)]=48;
 var $1038=($1037>>>0)>($14>>>0);
 if($1038){var $s7_0177_i=$1037;label=304;break;}else{var $s7_1_i=$1037;label=307;break;}
 case 305: 
 var $1040=($_1_lcssa_i117_i|0)==($25|0);
 if($1040){label=306;break;}else{var $s7_1_i=$_1_lcssa_i117_i;label=307;break;}
 case 306: 
 HEAP8[(($27)>>0)]=48;
 var $s7_1_i=$27;label=307;break;
 case 307: 
 var $s7_1_i;
 var $1042=$s7_1_i;
 var $1043=((($26)-($1042))|0);
 ___fwritex($s7_1_i,$1043,$f);
 var $1044=(($d_4180_i+4)|0);
 var $1045=($1044>>>0)>($_36_i>>>0);
 if($1045){label=308;break;}else{var $d_4180_i=$1044;label=300;break;}
 case 308: 
 var $_not_i=$953^1;
 var $1047=$fl_1_&8;
 var $1048=($1047|0)==0;
 var $or_cond32_i=$1048&$_not_i;
 if($or_cond32_i){label=310;break;}else{label=309;break;}
 case 309: 
 ___fwritex(1256,1,$f);
 label=310;break;
 case 310: 
 var $1050=($1044>>>0)<($z_6_i>>>0);
 var $1051=($_314_i|0)>0;
 var $or_cond7169_i=$1050&$1051;
 if($or_cond7169_i){var $d_5170_i=$1044;var $_415171_i=$_314_i;label=311;break;}else{var $_415_lcssa_i=$_314_i;label=316;break;}
 case 311: 
 var $_415171_i;
 var $d_5170_i;
 var $1052=HEAP32[(($d_5170_i)>>2)];
 var $1053=($1052|0)==0;
 if($1053){var $s8_0165_i=$25;label=314;break;}else{var $_12_i124_i=$25;var $y_03_i123_i=$1052;label=312;break;}
 case 312: 
 var $y_03_i123_i;
 var $_12_i124_i;
 var $1054=(((($y_03_i123_i>>>0))%(10))&-1);
 var $1055=$1054|48;
 var $1056=(($1055)&255);
 var $1057=((($_12_i124_i)-(1))|0);
 HEAP8[(($1057)>>0)]=$1056;
 var $1058=(((($y_03_i123_i>>>0))/(10))&-1);
 var $1059=($y_03_i123_i>>>0)<10;
 if($1059){label=313;break;}else{var $_12_i124_i=$1057;var $y_03_i123_i=$1058;label=312;break;}
 case 313: 
 var $1060=($1057>>>0)>($14>>>0);
 if($1060){var $s8_0165_i=$1057;label=314;break;}else{var $s8_0_lcssa_i=$1057;label=315;break;}
 case 314: 
 var $s8_0165_i;
 var $1061=((($s8_0165_i)-(1))|0);
 HEAP8[(($1061)>>0)]=48;
 var $1062=($1061>>>0)>($14>>>0);
 if($1062){var $s8_0165_i=$1061;label=314;break;}else{var $s8_0_lcssa_i=$1061;label=315;break;}
 case 315: 
 var $s8_0_lcssa_i;
 var $1063=($_415171_i|0)>9;
 var $1064=($1063?9:$_415171_i);
 ___fwritex($s8_0_lcssa_i,$1064,$f);
 var $1065=(($d_5170_i+4)|0);
 var $1066=((($_415171_i)-(9))|0);
 var $1067=($1065>>>0)<($z_6_i>>>0);
 var $1068=($1066|0)>0;
 var $or_cond7_i=$1067&$1068;
 if($or_cond7_i){var $d_5170_i=$1065;var $_415171_i=$1066;label=311;break;}else{var $_415_lcssa_i=$1066;label=316;break;}
 case 316: 
 var $_415_lcssa_i;
 var $$etemp$61$0=256;
 var $$etemp$61$1=0;

 var $1069=($_415_lcssa_i|0)>0;
 if($1069){label=317;break;}else{label=339;break;}
 case 317: 
 var $1071=($_415_lcssa_i>>>0)>256;
 var $1072=($1071?256:$_415_lcssa_i);
 _memset($6, 48, $1072)|0;
 var $1073=($_415_lcssa_i>>>0)>255;
 if($1073){var $_01_i131_i=$_415_lcssa_i;label=318;break;}else{var $_0_lcssa_i133_i=$_415_lcssa_i;label=320;break;}
 case 318: 
 var $_01_i131_i;
 ___fwritex($6,256,$f);
 var $1074=((($_01_i131_i)-(256))|0);
 var $1075=($1074>>>0)>255;
 if($1075){var $_01_i131_i=$1074;label=318;break;}else{label=319;break;}
 case 319: 
 var $1076=$_415_lcssa_i&255;
 var $_0_lcssa_i133_i=$1076;label=320;break;
 case 320: 
 var $_0_lcssa_i133_i;
 ___fwritex($6,$_0_lcssa_i133_i,$f);
 label=339;break;
 case 321: 
 var $1079=(($a_8_ph_i+4)|0);
 var $z_6__i=($_lcssa292_i?$z_6_i:$1079);
 var $1080=($_314_i|0)>-1;
 if($1080){label=322;break;}else{label=338;break;}
 case 322: 
 var $1081=$fl_1_&8;
 var $1082=($1081|0)==0;
 var $d_6188_i=$a_8_ph_i;var $_5189_i=$_314_i;label=323;break;
 case 323: 
 var $_5189_i;
 var $d_6188_i;
 var $1084=HEAP32[(($d_6188_i)>>2)];
 var $1085=($1084|0)==0;
 if($1085){label=326;break;}else{var $_12_i139_i=$25;var $y_03_i138_i=$1084;label=324;break;}
 case 324: 
 var $y_03_i138_i;
 var $_12_i139_i;
 var $1086=(((($y_03_i138_i>>>0))%(10))&-1);
 var $1087=$1086|48;
 var $1088=(($1087)&255);
 var $1089=((($_12_i139_i)-(1))|0);
 HEAP8[(($1089)>>0)]=$1088;
 var $1090=(((($y_03_i138_i>>>0))/(10))&-1);
 var $1091=($y_03_i138_i>>>0)<10;
 if($1091){label=325;break;}else{var $_12_i139_i=$1089;var $y_03_i138_i=$1090;label=324;break;}
 case 325: 
 var $1092=($1089|0)==($25|0);
 if($1092){label=326;break;}else{var $s9_0_i=$1089;label=327;break;}
 case 326: 
 HEAP8[(($27)>>0)]=48;
 var $s9_0_i=$27;label=327;break;
 case 327: 
 var $s9_0_i;
 var $1094=($d_6188_i|0)==($a_8_ph_i|0);
 if($1094){label=330;break;}else{label=328;break;}
 case 328: 
 var $1095=($s9_0_i>>>0)>($14>>>0);
 if($1095){var $s9_1184_i=$s9_0_i;label=329;break;}else{var $s9_2_i=$s9_0_i;label=332;break;}
 case 329: 
 var $s9_1184_i;
 var $1096=((($s9_1184_i)-(1))|0);
 HEAP8[(($1096)>>0)]=48;
 var $1097=($1096>>>0)>($14>>>0);
 if($1097){var $s9_1184_i=$1096;label=329;break;}else{var $s9_2_i=$1096;label=332;break;}
 case 330: 
 var $1099=(($s9_0_i+1)|0);
 ___fwritex($s9_0_i,1,$f);
 var $1100=($_5189_i|0)<1;
 var $or_cond34_i=$1100&$1082;
 if($or_cond34_i){var $s9_2_i=$1099;label=332;break;}else{label=331;break;}
 case 331: 
 ___fwritex(1256,1,$f);
 var $s9_2_i=$1099;label=332;break;
 case 332: 
 var $s9_2_i;
 var $1102=$s9_2_i;
 var $1103=((($26)-($1102))|0);
 var $1104=($_5189_i|0)>($1103|0);
 var $__5_i=($1104?$1103:$_5189_i);
 ___fwritex($s9_2_i,$__5_i,$f);
 var $1105=((($_5189_i)-($1103))|0);
 var $1106=(($d_6188_i+4)|0);
 var $1107=($1106>>>0)<($z_6__i>>>0);
 var $1108=($1105|0)>-1;
 var $or_cond9_i=$1107&$1108;
 if($or_cond9_i){var $d_6188_i=$1106;var $_5189_i=$1105;label=323;break;}else{label=333;break;}
 case 333: 
 var $$etemp$62$0=256;
 var $$etemp$62$1=0;

 var $1109=($1105|0)>0;
 if($1109){label=334;break;}else{label=338;break;}
 case 334: 
 var $1111=($1105>>>0)>256;
 var $1112=($1111?256:$1105);
 _memset($6, 48, $1112)|0;
 var $1113=($1105>>>0)>255;
 if($1113){var $_01_i146_i=$1105;label=335;break;}else{var $_0_lcssa_i148_i=$1105;label=337;break;}
 case 335: 
 var $_01_i146_i;
 ___fwritex($6,256,$f);
 var $1114=((($_01_i146_i)-(256))|0);
 var $1115=($1114>>>0)>255;
 if($1115){var $_01_i146_i=$1114;label=335;break;}else{label=336;break;}
 case 336: 
 var $1116=$1105&255;
 var $_0_lcssa_i148_i=$1116;label=337;break;
 case 337: 
 var $_0_lcssa_i148_i;
 ___fwritex($6,$_0_lcssa_i148_i,$f);
 label=338;break;
 case 338: 
 var $$etemp$63$0=256;
 var $$etemp$63$1=0;

 var $1118=$estr_2_i;
 var $1119=((($19)-($1118))|0);
 ___fwritex($estr_2_i,$1119,$f);
 label=339;break;
 case 339: 
 var $$etemp$64$0=256;
 var $$etemp$64$1=0;

 var $1120=($1002|0)==8192;
 var $or_cond_i_i=$1120&$1004;
 if($or_cond_i_i){label=340;break;}else{label=344;break;}
 case 340: 
 var $1122=((($w_1)-($1001))|0);
 var $1123=($1122>>>0)>256;
 var $1124=($1123?256:$1122);
 _memset($6, 32, $1124)|0;
 var $1125=($1122>>>0)>255;
 if($1125){var $_01_i_i=$1122;label=341;break;}else{var $_0_lcssa_i_i=$1122;label=343;break;}
 case 341: 
 var $_01_i_i;
 ___fwritex($6,256,$f);
 var $1126=((($_01_i_i)-(256))|0);
 var $1127=($1126>>>0)>255;
 if($1127){var $_01_i_i=$1126;label=341;break;}else{label=342;break;}
 case 342: 
 var $1128=$1122&255;
 var $_0_lcssa_i_i=$1128;label=343;break;
 case 343: 
 var $_0_lcssa_i_i;
 ___fwritex($6,$_0_lcssa_i_i,$f);
 label=344;break;
 case 344: 
 var $$etemp$65$0=256;
 var $$etemp$65$1=0;

 var $w_35_i=($1004?$w_1:$1001);
 var $l_0=$w_35_i;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$242;var $28=$243;var $fmt83=$169;label=2;break;
 case 345: 
 var $1131;
 var $1132;
 var $a_2;
 var $z_2;
 var $fl_6;
 var $p_5;
 var $prefix_2;
 var $pl_2;
 var $1133=$z_2;
 var $1134=$a_2;
 var $1135=((($1133)-($1134))|0);
 var $1136=($p_5|0)<($1135|0);
 var $_p_5=($1136?$1135:$p_5);
 var $1137=((($pl_2)+($_p_5))|0);
 var $1138=($w_1|0)<($1137|0);
 var $w_2=($1138?$1137:$w_1);
 var $$etemp$66$0=256;
 var $$etemp$66$1=0;

 var $1139=$fl_6&73728;
 var $1140=($1139|0)==0;
 var $1141=($w_2|0)>($1137|0);
 var $or_cond_i75=$1140&$1141;
 if($or_cond_i75){label=346;break;}else{label=350;break;}
 case 346: 
 var $1143=((($w_2)-($1137))|0);
 var $1144=($1143>>>0)>256;
 var $1145=($1144?256:$1143);
 _memset($6, 32, $1145)|0;
 var $1146=($1143>>>0)>255;
 if($1146){var $_01_i77=$1143;label=347;break;}else{var $_0_lcssa_i79=$1143;label=349;break;}
 case 347: 
 var $_01_i77;
 ___fwritex($6,256,$f);
 var $1147=((($_01_i77)-(256))|0);
 var $1148=($1147>>>0)>255;
 if($1148){var $_01_i77=$1147;label=347;break;}else{label=348;break;}
 case 348: 
 var $1149=$1143&255;
 var $_0_lcssa_i79=$1149;label=349;break;
 case 349: 
 var $_0_lcssa_i79;
 ___fwritex($6,$_0_lcssa_i79,$f);
 label=350;break;
 case 350: 
 var $$etemp$67$0=256;
 var $$etemp$67$1=0;

 ___fwritex($prefix_2,$pl_2,$f);
 var $$etemp$68$0=256;
 var $$etemp$68$1=0;

 var $1151=($1139|0)==65536;
 var $or_cond_i51=$1151&$1141;
 if($or_cond_i51){label=351;break;}else{label=355;break;}
 case 351: 
 var $1153=((($w_2)-($1137))|0);
 var $1154=($1153>>>0)>256;
 var $1155=($1154?256:$1153);
 _memset($6, 48, $1155)|0;
 var $1156=($1153>>>0)>255;
 if($1156){var $_01_i53=$1153;label=352;break;}else{var $_0_lcssa_i55=$1153;label=354;break;}
 case 352: 
 var $_01_i53;
 ___fwritex($6,256,$f);
 var $1157=((($_01_i53)-(256))|0);
 var $1158=($1157>>>0)>255;
 if($1158){var $_01_i53=$1157;label=352;break;}else{label=353;break;}
 case 353: 
 var $1159=$1153&255;
 var $_0_lcssa_i55=$1159;label=354;break;
 case 354: 
 var $_0_lcssa_i55;
 ___fwritex($6,$_0_lcssa_i55,$f);
 label=355;break;
 case 355: 
 var $$etemp$69$0=256;
 var $$etemp$69$1=0;

 var $$etemp$70$0=256;
 var $$etemp$70$1=0;

 var $1161=($_p_5|0)>($1135|0);
 if($1161){label=356;break;}else{label=360;break;}
 case 356: 
 var $1163=((($_p_5)-($1135))|0);
 var $1164=($1163>>>0)>256;
 var $1165=($1164?256:$1163);
 _memset($6, 48, $1165)|0;
 var $1166=($1163>>>0)>255;
 if($1166){var $_01_i38=$1163;label=357;break;}else{var $_0_lcssa_i40=$1163;label=359;break;}
 case 357: 
 var $_01_i38;
 ___fwritex($6,256,$f);
 var $1167=((($_01_i38)-(256))|0);
 var $1168=($1167>>>0)>255;
 if($1168){var $_01_i38=$1167;label=357;break;}else{label=358;break;}
 case 358: 
 var $1169=$1163&255;
 var $_0_lcssa_i40=$1169;label=359;break;
 case 359: 
 var $_0_lcssa_i40;
 ___fwritex($6,$_0_lcssa_i40,$f);
 label=360;break;
 case 360: 
 var $$etemp$71$0=256;
 var $$etemp$71$1=0;

 ___fwritex($a_2,$1135,$f);
 var $$etemp$72$0=256;
 var $$etemp$72$1=0;

 var $1171=($1139|0)==8192;
 var $or_cond_i=$1171&$1141;
 if($or_cond_i){label=361;break;}else{var $l_0=$w_2;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$1132;var $28=$1131;var $fmt83=$169;label=2;break;}
 case 361: 
 var $1173=((($w_2)-($1137))|0);
 var $1174=($1173>>>0)>256;
 var $1175=($1174?256:$1173);
 _memset($6, 32, $1175)|0;
 var $1176=($1173>>>0)>255;
 if($1176){var $_01_i=$1173;label=362;break;}else{var $_0_lcssa_i=$1173;label=364;break;}
 case 362: 
 var $_01_i;
 ___fwritex($6,256,$f);
 var $1177=((($_01_i)-(256))|0);
 var $1178=($1177>>>0)>255;
 if($1178){var $_01_i=$1177;label=362;break;}else{label=363;break;}
 case 363: 
 var $1179=$1173&255;
 var $_0_lcssa_i=$1179;label=364;break;
 case 364: 
 var $_0_lcssa_i;
 ___fwritex($6,$_0_lcssa_i,$f);
 var $l_0=$w_2;var $cnt_0=$cnt_1;var $l10n_0=$l10n_3;var $29=$1132;var $28=$1131;var $fmt83=$169;label=2;break;
 case 365: 
 var $1182=($f|0)==0;
 if($1182){label=366;break;}else{var $_0=$cnt_1;label=384;break;}
 case 366: 
 var $1184=($l10n_0|0)==0;
 if($1184){var $_0=0;label=384;break;}else{var $i_2100=1;label=367;break;}
 case 367: 
 var $i_2100;
 var $1185=(($nl_type+($i_2100<<2))|0);
 var $1186=HEAP32[(($1185)>>2)];
 var $1187=($1186|0)==0;
 if($1187){var $i_397=$i_2100;var $1234=1;label=383;break;}else{label=368;break;}
 case 368: 
 var $1189=(($nl_arg+($i_2100<<3))|0);
 var $1190=($1186>>>0)>20;
 if($1190){label=380;break;}else{label=369;break;}
 case 369: 
 switch(($1186|0)){case 9:{ label=370;break;}case 10:{ label=371;break;}case 11:{ label=372;break;}case 12:{ label=373;break;}case 13:{ label=374;break;}case 14:{ label=375;break;}case 15:{ label=376;break;}case 16:{ label=377;break;}case 17:{ label=378;break;}case 18:{ label=379;break;}default:{label=380;break;}}break;
 case 370: 
 var $1193=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1194=$1189;
 HEAP32[(($1194)>>2)]=$1193;
 label=380;break;
 case 371: 
 var $1196=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1197$0=$1196;
 var $1197$1=((((($1196|0)<0))|0)?-1:0);
 var $1198=(($1189)|0);
 var $st$73$0=(($1198)|0);
 HEAP32[(($st$73$0)>>2)]=$1197$0;
 var $st$74$1=(($1198+4)|0);
 HEAP32[(($st$74$1)>>2)]=$1197$1;
 label=380;break;
 case 372: 
 var $1200=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1201$0=$1200;
 var $1201$1=0;
 var $1202=(($1189)|0);
 var $st$75$0=(($1202)|0);
 HEAP32[(($st$75$0)>>2)]=$1201$0;
 var $st$76$1=(($1202+4)|0);
 HEAP32[(($st$76$1)>>2)]=$1201$1;
 label=380;break;
 case 373: 
 var $1204$0=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1204$1=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1205=(($1189)|0);
 var $st$77$0=(($1205)|0);
 HEAP32[(($st$77$0)>>2)]=$1204$0;
 var $st$78$1=(($1205+4)|0);
 HEAP32[(($st$78$1)>>2)]=$1204$1;
 label=380;break;
 case 374: 
 var $1207=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1208=(($1207)&65535);
 var $1209$0=(($1208<<16)>>16);
 var $1209$1=(((((($1208<<16)>>16)<0))|0)?-1:0);
 var $1210=(($1189)|0);
 var $st$79$0=(($1210)|0);
 HEAP32[(($st$79$0)>>2)]=$1209$0;
 var $st$80$1=(($1210+4)|0);
 HEAP32[(($st$80$1)>>2)]=$1209$1;
 label=380;break;
 case 375: 
 var $1212=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask1_i=$1212&65535;
 var $1213$0=$_mask1_i;
 var $1213$1=0;
 var $1214=(($1189)|0);
 var $st$81$0=(($1214)|0);
 HEAP32[(($st$81$0)>>2)]=$1213$0;
 var $st$82$1=(($1214+4)|0);
 HEAP32[(($st$82$1)>>2)]=$1213$1;
 label=380;break;
 case 376: 
 var $1216=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $1217=(($1216)&255);
 var $1218$0=(($1217<<24)>>24);
 var $1218$1=(((((($1217<<24)>>24)<0))|0)?-1:0);
 var $1219=(($1189)|0);
 var $st$83$0=(($1219)|0);
 HEAP32[(($st$83$0)>>2)]=$1218$0;
 var $st$84$1=(($1219+4)|0);
 HEAP32[(($st$84$1)>>2)]=$1218$1;
 label=380;break;
 case 377: 
 var $1221=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAP32[(((HEAP32[(($4)>>2)])+(tempInt))>>2)]);
 var $_mask_i=$1221&255;
 var $1222$0=$_mask_i;
 var $1222$1=0;
 var $1223=(($1189)|0);
 var $st$85$0=(($1223)|0);
 HEAP32[(($st$85$0)>>2)]=$1222$0;
 var $st$86$1=(($1223+4)|0);
 HEAP32[(($st$86$1)>>2)]=$1222$1;
 label=380;break;
 case 378: 
 var $1225=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 var $1226=$1189;
 HEAPF64[(($1226)>>3)]=$1225;
 label=380;break;
 case 379: 
 var $1228=(tempInt=HEAP32[((($4)+(4))>>2)],HEAP32[((($4)+(4))>>2)]=tempInt + 8,HEAPF64[(((HEAP32[(($4)>>2)])+(tempInt))>>3)]);
 var $1229=$1189;
 HEAPF64[(($1229)>>3)]=$1228;
 label=380;break;
 case 380: 
 var $1230=((($i_2100)+(1))|0);
 var $1231=($1230|0)<10;
 if($1231){var $i_2100=$1230;label=367;break;}else{var $_0=1;label=384;break;}
 case 381: 
 var $1233=($1235|0)<10;
 if($1233){label=382;break;}else{var $_0=1;label=384;break;}
 case 382: 
 var $_phi_trans_insert=(($nl_type+($1235<<2))|0);
 var $_pre18=HEAP32[(($_phi_trans_insert)>>2)];
 var $phitmp20=($_pre18|0)==0;
 var $i_397=$1235;var $1234=$phitmp20;label=383;break;
 case 383: 
 var $1234;
 var $i_397;
 var $1235=((($i_397)+(1))|0);
 if($1234){label=381;break;}else{var $_0=-1;label=384;break;}
 case 384: 
 var $_0;
 var $$etemp$87$0=40;
 var $$etemp$87$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))>>0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))>>0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))>>0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))>>0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



